event,from,created_at,body,to
thread_started,mgood7123,2023-11-15T02:17:34Z,"### Describe the bug

```
localhost:~/llvm_18$ release_BUILD/LIBXZ/OUT/bin/lzma
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
```

```cmake
if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ)
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/xz ${CMAKE_BINARY_DIR}/LIBXZ
  )
endif()

if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ/OUT/lib/liblzma.a)
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      -D CMAKE_BUILD_TYPE=Release
      -D ""CMAKE_C_FLAGS=${CMAKE_C_FLAGS}""
      -D ""CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}""
      -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -D CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
      -D CMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/LIBXZ/OUT
      -D BUILD_SHARED_LIBS=OFF
      -B ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --build ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --install ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
endif()
```

### Version

5.5.0 git master https://github.com/tukaani-project/xz/commit/837ea40b1c9d4998cac4500b55171bf33e0c31a6

### Operating System

alpine linux

### Relevant log output

_No response_",mgood7123
commented,mgood7123,2023-11-15T03:42:52Z,"so this is caused by musl not supporting `_ifunc_` attribute and current alpine linux clang compilers (clang 14, 15, 16, and 17 to 17.0.3) not emitting a warning if `ifunc` is used for a musl target, (unlike gcc which does emit a warning)

fixable via `-D ALLOW_ATTR_IFUNC=OFF`",mgood7123
commented,thesamesam,2023-11-15T04:00:20Z,I think we should keep this open so the build system can work around it.,mgood7123
commented,Larhzu,2023-11-15T14:51:51Z,"In CMake-based build, the test for attributes both compiles and links. Perhaps the problem is that linker can omit the function as it's not used in the program.

CMakeLists.txt line 810:

```
int main(void) { return 0; }
```

I wonder if this would help:

```
int main(void) { func_ifunc(); return 0; }
```

(Edited: Accidental Ctrl-Enter submits in GH. That's a dangerously easy keyboard shortcut for such a critical action. Oh well.)",thesamesam
commented,Larhzu,2023-11-15T17:47:13Z,"My above comment is wrong. The failure is from the dynamic linker, not static linker, sorry.

Perhaps it's that GCC knows that ifunc isn't supported with musl. [config.gcc](https://gcc.gnu.org/git?p=gcc.git;a=blob;f=gcc/config.gcc;h=c1460ca354e8f7baea3229312b17c63bd45f760a;hb=HEAD#l3637) doesn't set `default_gnu_indirect_function` with musl. Maybe Clang/LLVM needs to learn this too if it currently doesn't warn.",thesamesam
commented,mgood7123,2023-11-16T19:01:15Z,"
an ifunc WILL compile and link successfully in a dynamically built program, but musl does not implement ifunc (GNU glibc only extension)",Larhzu
commented,mgood7123,2023-11-16T19:02:25Z,a crude hack to detect musl is to detect /lib/ld-musl-*,Larhzu
commented,Larhzu,2023-11-16T19:55:30Z,"
Yes, I relealized this as I wrote in my next message. Since GCC upstream knows that musl doesn't support ifunc, I wonder if Clang/LLVM should know it too and then warn or error if the ifunc attribute is used. That is, I wonder if this could be a Clang/LLVM bug.


In Autoconf, checking if `$host_os` equals `linux-musl` probably is the correct method. I don't know right now how to detect it in CMake.

According to musl's FAQ, there intentionally is no easy `#ifdef` to detect musl in C code.

Hacks like checking file paths wouldn't work when cross-compiling.

On the second thought, uClibc might not support ifunc either. It could be better to detect glibc, so `linux-gnu` in case of Autoconf (maybe FreeBSD too). But once again I don't know right now how to detect the libc in CMake.",mgood7123
commented,mgood7123,2023-11-17T08:28:35Z,"we could extract the triple on gcc/clang via `-dumpmachine`

```
$ clang -dumpmachine
x86_64-alpine-linux-musl
```",Larhzu
commented,JiaT75,2023-11-23T16:05:13Z,"
I don't think this will work for us since a tool like `musl-gcc` (a GCC wrapper for using musl libc) still outputs `x86_64-linux-gnu` with `-dumpmachine`. So this would fix things for Alpine, but our builds would still be broken for anyone compiling for musl libc using a wrapper like this.
",mgood7123
commented,mgood7123,2023-11-27T03:48:00Z,"
Hmmm",JiaT75
commented,mgood7123,2023-11-27T03:49:11Z,"Maybe we could just add a define for musl

make -D MUSL=1

and trust the builder to pass this define when building on a musl distro",JiaT75
commented,JiaT75,2023-11-27T13:03:57Z,"
The default build options need to create a working build on all of our supported platforms. Right now people can just disable ifunc for a working musl build as you discovered with `-DALLOW_ATTR_IFUNC=OFF`. That is only a temporary workaround since we want to make our build systems as easy to use for people as possible.

I have been working a [branch](https://github.com/tukaani-project/xz/tree/ifunc_detect_fix) to address this. The idea is to change the ifunc option for our CMake and Autotools build from ON/OFF or enable/disable to auto/ON/OFF. 'auto' will try to enforce using ifunc with glibc or BSD platforms only. ON will always try to use ifunc and OFF will obviously disable ifunc completely. Both auto and ON will still test the compiler if it supports `__attribute__((__ifunc__()))`.

If you can test the new branch on Alpine that would be very helpful. I tested with `musl-gcc` wrapper and things seemed to work. We haven't decided 100% if this is the approach we want to take but it seems promising so far.

Thanks for all of your help so far!",mgood7123
commented,mgood7123,2023-11-27T13:08:16Z,"Alright

On Mon, 27 Nov 2023, 11:04 pm Jia Tan, ***@***.***> wrote:
",JiaT75
commented,mgood7123,2023-11-29T09:42:54Z,"
Tested on alpine, it works ^^",JiaT75
commented,JiaT75,2023-11-30T12:12:49Z,"@mgood7123 Thanks again for reporting and helping us test this. I would like to add you to our `THANKS` file, but I did not see your name on your GitHub profile. Is there a name you would like us to use for you in our `THANKS` file? Otherwise you may remain anonymous :)",mgood7123
commented,mgood7123,2023-11-30T12:18:19Z,"
Matthew Good",JiaT75
