timestamp,from,to,body,title,msg_file
"Tue, 19 Jan 2021 15:30:21 -0800",Sebastian Andrzej Siewior,,"From: Sebastian Andrzej Siewior <sebast...@breakpoint.cc>

I created a test file via
        dd if=/dev/zero bs=1024k count=1024 | xz -v -0 -Csha256


and compared the in-tree sha256 implementation on a Ryzen (CPU
acceleration available):

| Performance counter stats for 'xz --test sha256.xz' (5 runs):
|
|    20.748.708.638      cycles                    #    4,174 GHz               
       ( +-  1,23% )  (83,29%)
|    63.371.432.190      instructions              #    3,05  insn per cycle
|                                                  #    0,23  stalled cycles 
per insn  ( +-  0,01% )  (83,37%)
|            4,9778 +- 0,0488 seconds time elapsed  ( +-  0,98% )

vs OpenSSL's:

| Performance counter stats for './src/xz/xz --test sha256.xz' (5 runs):
|
|    10.037.180.776      cycles                    #    4,230 GHz               
       ( +-  0,03% )  (83,18%)
|    16.126.619.033      instructions              #    1,61  insn per cycle
|                                                  #    0,50  stalled cycles 
per insn  ( +-  0,01% )  (83,43%)
|           2,37200 +- 0,00621 seconds time elapsed  ( +-  0,26% )

worse insn/cycle ratio, much less instructions half run time. It is
even slightly better compared to crc64:

| Performance counter stats for './src/xz/xz --test crc64.xz' (5 runs):
|
|    10.989.495.452      cycles                    #    4,250 GHz               
       ( +-  0,04% )  (83,22%)
|    17.829.100.301      instructions              #    1,62  insn per cycle
|                                                  #    0,43  stalled cycles 
per insn  ( +-  0,02% )  (83,42%)
|            2,5850 +- 0,0103 seconds time elapsed  ( +-  0,40% )

For the protocol, compared to no checksum:

| Performance counter stats for './src/xz/xz --test none.xz' (5 runs):
|
|     7.857.471.590      cycles                    #    4,237 GHz               
       ( +-  0,03% )  (83,08%)
|    13.257.837.157      instructions              #    1,69  insn per cycle
|
|           1,85337 +- 0,00440 seconds time elapsed  ( +-  0,24% )

Signed-off-by: Sebastian Andrzej Siewior <sebast...@breakpoint.cc>
---

I learned here that rpm is using sha256 based checksums. So that might
be a good thing.

 configure.ac              | 24 +++++++++++++++++++++++-
 src/liblzma/Makefile.am   |  1 +
 src/liblzma/check/check.h | 33 ++++++++++++++++++++++++++++++++-
 src/lzmainfo/Makefile.am  |  2 +-
 src/xz/Makefile.am        |  2 +-
 src/xzdec/Makefile.am     |  2 +-
 6 files changed, 59 insertions(+), 5 deletions(-)

diff --git a/configure.ac b/configure.ac
index 2418e4b039e61..5e0eaefc99c92 100644
--- a/configure.ac
+++ b/configure.ac
@@ -289,6 +289,19 @@ else
        AC_MSG_RESULT([no])
 fi
 
+AC_MSG_CHECKING([if openssl should be used])
+AC_ARG_ENABLE([openssl], AS_HELP_STRING([--enable-openssl],
+               [Use openssl from the operating system.
+               See INSTALL for possible subtle problems.]),
+               [], [enable_openssl=no])
+if test ""x$enable_openssl"" != ""xyes""; then
+       enable_openssl=no
+fi
+if test ""x$enable_openssl"" = xyes; then
+       AC_MSG_RESULT([yes])
+else
+       AC_MSG_RESULT([no])
+fi
 
 ###########################
 # Assembler optimizations #
@@ -740,6 +753,7 @@ TUKLIB_MBSTR
 sha256_header_found=no
 sha256_type_found=no
 sha256_func_found=no
+openssl_found=no
 if test ""x$enable_external_sha256"" = ""xyes""; then
        # Test for Common Crypto before others, because Darwin has sha256.h
        # too and we don't want to use that, because on older versions it
@@ -770,11 +784,19 @@ if test ""x$enable_external_sha256"" = ""xyes""; then
                                [sha256_func_found=yes ; break])
                fi
        fi
+elif test ""x$enable_openssl"" = ""xyes""; then
+       PKG_CHECK_MODULES([OPENSSL_CRYPTO], [libcrypto],
+                         [AC_DEFINE([HAVE_OPENSSL_CRYPTO], [1], [Use SHA256 
from openssl])
+                         openssl_found=yes])
 fi
-AM_CONDITIONAL([COND_INTERNAL_SHA256], [test ""x$sha256_func_found"" = xno])
+
+AM_CONDITIONAL([COND_INTERNAL_SHA256], [test ""x$sha256_func_found"" = xno -a 
""x$openssl_found"" = xno])
 if test ""x$enable_external_sha256$sha256_func_found"" = xyesno; then
        AC_MSG_ERROR([--enable-external-sha256 was specified but no supported 
external SHA-256 implementation was found])
 fi
+if test ""x$enable_openssl$openssl_found"" = xyesno; then
+       AC_MSG_ERROR([--enable-openssl was specified but openssl was not 
found.])
+fi
 
 # Check for SSE2 intrinsics.
 AC_CHECK_DECL([_mm_movemask_epi8],
diff --git a/src/liblzma/Makefile.am b/src/liblzma/Makefile.am
index 6323e26aade10..3afb08169840c 100644
--- a/src/liblzma/Makefile.am
+++ b/src/liblzma/Makefile.am
@@ -25,6 +25,7 @@ liblzma_la_CPPFLAGS = \
        -I$(top_srcdir)/src/common \
        -DTUKLIB_SYMBOL_PREFIX=lzma_
 liblzma_la_LDFLAGS = -no-undefined -version-info 8:99:3
+liblzma_la_LDFLAGS += $(OPENSSL_CRYPTO_LIBS)
 
 EXTRA_DIST += liblzma.map validate_map.sh
 if COND_SYMVERS
diff --git a/src/liblzma/check/check.h b/src/liblzma/check/check.h
index 3007d889b0f3a..0249025ec179a 100644
--- a/src/liblzma/check/check.h
+++ b/src/liblzma/check/check.h
@@ -20,6 +20,7 @@
 // both a usable header and a type have already been found.
 #if !(defined(HAVE_CC_SHA256_INIT) \
                || defined(HAVE_SHA256_INIT) \
+               || defined(HAVE_OPENSSL_CRYPTO) \
                || defined(HAVE_SHA256INIT))
 #      define HAVE_INTERNAL_SHA256 1
 #endif
@@ -34,6 +35,8 @@
 #elif defined(HAVE_SHA2_H)
 #      include <sys/types.h>
 #      include <sha2.h>
+#elif defined(HAVE_OPENSSL_CRYPTO)
+#      include <openssl/evp.h>
 #endif
 
 #if defined(HAVE_INTERNAL_SHA256)
@@ -51,6 +54,11 @@ typedef CC_SHA256_CTX lzma_sha256_state;
 typedef SHA256_CTX lzma_sha256_state;
 #elif defined(HAVE_SHA2_CTX)
 typedef SHA2_CTX lzma_sha256_state;
+#elif defined(HAVE_OPENSSL_CRYPTO)
+typedef struct {
+       EVP_MD_CTX *ctx;
+
+} lzma_sha256_state;
 #endif
 
 #if defined(HAVE_INTERNAL_SHA256)
@@ -121,8 +129,31 @@ extern void lzma_check_update(lzma_check_state *check, 
lzma_check type,
 /// Finish the check calculation and store the result to check->buffer.u8.
 extern void lzma_check_finish(lzma_check_state *check, lzma_check type);
 
+#ifdef HAVE_OPENSSL_CRYPTO
 
-#ifndef LZMA_SHA256FUNC
+/// Prepare SHA-256 state for new input.
+static inline void lzma_sha256_init(lzma_check_state *check)
+{
+       check->state.sha256.ctx = EVP_MD_CTX_new();
+       EVP_DigestInit_ex(check->state.sha256.ctx,
+                        EVP_get_digestbyname(""sha256""), NULL);
+}
+
+/// Update the SHA-256 hash state
+static inline void lzma_sha256_update(
+               const uint8_t *buf, size_t size, lzma_check_state *check)
+{
+       EVP_DigestUpdate(check->state.sha256.ctx, buf, size);
+}
+
+/// Finish the SHA-256 calculation and store the result to check->buffer.u8.
+static inline void lzma_sha256_finish(lzma_check_state *check)
+{
+       EVP_DigestFinal_ex(check->state.sha256.ctx, check->buffer.u8, NULL);
+       EVP_MD_CTX_free(check->state.sha256.ctx);
+}
+
+#elif !defined(LZMA_SHA256FUNC)
 
 /// Prepare SHA-256 state for new input.
 extern void lzma_sha256_init(lzma_check_state *check);
diff --git a/src/lzmainfo/Makefile.am b/src/lzmainfo/Makefile.am
index ff7172b50f380..51424effb750a 100644
--- a/src/lzmainfo/Makefile.am
+++ b/src/lzmainfo/Makefile.am
@@ -28,7 +28,7 @@ if COND_GNULIB
 lzmainfo_LDADD += $(top_builddir)/lib/libgnu.a
 endif
 
-lzmainfo_LDADD += $(LTLIBINTL)
+lzmainfo_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS)
 
 
 dist_man_MANS = lzmainfo.1
diff --git a/src/xz/Makefile.am b/src/xz/Makefile.am
index 4bc64f360ada5..8d6604c8ffb22 100644
--- a/src/xz/Makefile.am
+++ b/src/xz/Makefile.am
@@ -60,7 +60,7 @@ xz_LDADD += $(top_builddir)/lib/libgnu.a
 endif
 
 # libgnu.a may need these libs, so this must be after libgnu.a.
-xz_LDADD += $(LTLIBINTL)
+xz_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS)
 
 
 # Windows resource compiler support
diff --git a/src/xzdec/Makefile.am b/src/xzdec/Makefile.am
index 90f1e922a07c6..59ad965eb1678 100644
--- a/src/xzdec/Makefile.am
+++ b/src/xzdec/Makefile.am
@@ -32,7 +32,7 @@ if COND_GNULIB
 xzdec_LDADD += $(top_builddir)/lib/libgnu.a
 endif
 
-xzdec_LDADD += $(LTLIBINTL)
+xzdec_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS)
 
 
 lzmadec_SOURCES = \
-- 
2.30.0

",[xz-devel] [PATCH 1/2] Add support openssl's SHA256 implementation,msg00429.html
"Tue, 19 Jan 2021 15:37:17 -0800",Sebastian Andrzej Siewior,Sebastian Andrzej Siewior,"From: Sebastian Andrzej Siewior <sebast...@breakpoint.cc>

After seeing the numbers of of openssl's sha256 vs intree, vs crc64 vs
none I decided to look at xxHash 16byte version which got stable in the
0.8 version (given I understood the signs right):


| Performance counter stats for './src/xz/.libs/xz -t xxh3.xz' (5 runs):
|
|     8.133.583.414      cycles                    #    4,293 GHz               
       ( +-  0,01% )  (83,22%)
|    14.366.854.241      instructions              #    1,77  insn per cycle
|
|            1,8958 +- 0,0135 seconds time elapsed  ( +-  0,71% )

So this is better than crc64 and close to none while doing something ;)

Signed-off-by: Sebastian Andrzej Siewior <sebast...@breakpoint.cc>
---
 configure.ac                 |  6 +++++-
 src/liblzma/Makefile.am      |  2 +-
 src/liblzma/api/lzma/check.h |  7 +++++++
 src/liblzma/check/check.c    | 27 +++++++++++++++++++++++++--
 src/liblzma/check/check.h    | 29 +++++++++++++++++++++++++++--
 src/lzmainfo/Makefile.am     |  2 +-
 src/xz/Makefile.am           |  2 +-
 src/xz/args.c                |  1 +
 src/xz/list.c                |  2 +-
 src/xz/message.c             |  2 +-
 src/xzdec/Makefile.am        |  2 +-
 11 files changed, 71 insertions(+), 11 deletions(-)

diff --git a/configure.ac b/configure.ac
index 5e0eaefc99c92..2e2bfe113da56 100644
--- a/configure.ac
+++ b/configure.ac
@@ -234,7 +234,7 @@ fi
 # Integrity checks #
 ####################
 
-m4_define([SUPPORTED_CHECKS], [crc32,crc64,sha256])
+m4_define([SUPPORTED_CHECKS], [crc32,crc64,xxh3,sha256])
 
 m4_foreach([NAME], [SUPPORTED_CHECKS],
 [enable_check_[]NAME=no
@@ -798,6 +798,10 @@ if test ""x$enable_openssl$openssl_found"" = xyesno; then
        AC_MSG_ERROR([--enable-openssl was specified but openssl was not 
found.])
 fi
 
+if test ""x$enable_check_xxh"" = ""xyes""; then
+       PKG_CHECK_MODULES([LIBXXHASH], [libxxhash >= 0.8.0])
+fi
+
 # Check for SSE2 intrinsics.
 AC_CHECK_DECL([_mm_movemask_epi8],
        [AC_DEFINE([HAVE__MM_MOVEMASK_EPI8], [1],
diff --git a/src/liblzma/Makefile.am b/src/liblzma/Makefile.am
index 3afb08169840c..570a4db23c3f4 100644
--- a/src/liblzma/Makefile.am
+++ b/src/liblzma/Makefile.am
@@ -25,7 +25,7 @@ liblzma_la_CPPFLAGS = \
        -I$(top_srcdir)/src/common \
        -DTUKLIB_SYMBOL_PREFIX=lzma_
 liblzma_la_LDFLAGS = -no-undefined -version-info 8:99:3
-liblzma_la_LDFLAGS += $(OPENSSL_CRYPTO_LIBS)
+liblzma_la_LDFLAGS += $(OPENSSL_CRYPTO_LIBS) $(LIBXXHASH_LIBS)
 
 EXTRA_DIST += liblzma.map validate_map.sh
 if COND_SYMVERS
diff --git a/src/liblzma/api/lzma/check.h b/src/liblzma/api/lzma/check.h
index 6a243db0d7943..21aa6c8e3f7c9 100644
--- a/src/liblzma/api/lzma/check.h
+++ b/src/liblzma/api/lzma/check.h
@@ -46,6 +46,13 @@ typedef enum {
                 * Size of the Check field: 8 bytes
                 */
 
+       LZMA_CHECK_XXH3   = 7,
+               /**<
+                * xxHash family, XXH3, 128bit
+                *
+                * Size of the Check field: 16 bytes
+                */
+
        LZMA_CHECK_SHA256   = 10
                /**<
                 * SHA-256
diff --git a/src/liblzma/check/check.c b/src/liblzma/check/check.c
index 428ddaeb77981..2e168ae274c1f 100644
--- a/src/liblzma/check/check.c
+++ b/src/liblzma/check/check.c
@@ -39,7 +39,13 @@ lzma_check_is_supported(lzma_check type)
 
                false,  // Reserved
                false,  // Reserved
-               false,  // Reserved
+
+#ifdef HAVE_CHECK_XXH3
+               true,
+#else
+               false,
+#endif
+
                false,  // Reserved
                false,  // Reserved
 
@@ -48,7 +54,6 @@ lzma_check_is_supported(lzma_check type)
 #else
                false,
 #endif
-
                false,  // Reserved
                false,  // Reserved
                false,  // Reserved
@@ -99,6 +104,12 @@ lzma_check_init(lzma_check_state *check, lzma_check type)
                break;
 #endif
 
+#ifdef HAVE_CHECK_XXH3
+       case LZMA_CHECK_XXH3:
+               lzma_xxh3_init(check);
+               break;
+#endif
+
 #ifdef HAVE_CHECK_SHA256
        case LZMA_CHECK_SHA256:
                lzma_sha256_init(check);
@@ -130,6 +141,12 @@ lzma_check_update(lzma_check_state *check, lzma_check type,
                break;
 #endif
 
+#ifdef HAVE_CHECK_XXH3
+       case LZMA_CHECK_XXH3:
+               lzma_xxh3_update(buf, size, check);
+               break;
+#endif
+
 #ifdef HAVE_CHECK_SHA256
        case LZMA_CHECK_SHA256:
                lzma_sha256_update(buf, size, check);
@@ -160,6 +177,12 @@ lzma_check_finish(lzma_check_state *check, lzma_check type)
                break;
 #endif
 
+#ifdef HAVE_CHECK_XXH3
+       case LZMA_CHECK_XXH3:
+               lzma_xxh3_finish(check);
+               break;
+#endif
+
 #ifdef HAVE_CHECK_SHA256
        case LZMA_CHECK_SHA256:
                lzma_sha256_finish(check);
diff --git a/src/liblzma/check/check.h b/src/liblzma/check/check.h
index 0249025ec179a..910dc3d55fdca 100644
--- a/src/liblzma/check/check.h
+++ b/src/liblzma/check/check.h
@@ -39,6 +39,10 @@
 #      include <openssl/evp.h>
 #endif
 
+#ifdef HAVE_CHECK_XXH3
+#include <xxhash.h>
+#endif
+
 #if defined(HAVE_INTERNAL_SHA256)
 /// State for the internal SHA-256 implementation
 typedef struct {
@@ -99,6 +103,7 @@ typedef struct {
                uint32_t crc32;
                uint64_t crc64;
                lzma_sha256_state sha256;
+               XXH3_state_t *xxh3;
        } state;
 
 } lzma_check_state;
@@ -191,11 +196,31 @@ lzma_sha256_update(const uint8_t *buf, size_t size, 
lzma_check_state *check)
        LZMA_SHA256FUNC(Update)(&check->state.sha256, buf, size);
 }
 
+#endif
+
+#ifdef HAVE_CHECK_XXH3
 
 static inline void
-lzma_sha256_finish(lzma_check_state *check)
+lzma_xxh3_init(lzma_check_state *check)
 {
-       LZMA_SHA256FUNC(Final)(check->buffer.u8, &check->state.sha256);
+       check->state.xxh3 = XXH3_createState();
+       XXH3_128bits_reset(check->state.xxh3);
+}
+
+static inline void
+lzma_xxh3_update(const uint8_t *buf, size_t size, lzma_check_state *check)
+{
+       XXH3_128bits_update(check->state.xxh3, buf, size);
+}
+
+static inline void
+lzma_xxh3_finish(lzma_check_state *check)
+{
+       XXH128_hash_t h;
+
+       h = XXH3_128bits_digest(check->state.xxh3);
+       memcpy(check->buffer.u8, &h, sizeof(h));
+       XXH3_freeState(check->state.xxh3);
 }
 
 #endif
diff --git a/src/lzmainfo/Makefile.am b/src/lzmainfo/Makefile.am
index 51424effb750a..5f12138a1914d 100644
--- a/src/lzmainfo/Makefile.am
+++ b/src/lzmainfo/Makefile.am
@@ -28,7 +28,7 @@ if COND_GNULIB
 lzmainfo_LDADD += $(top_builddir)/lib/libgnu.a
 endif
 
-lzmainfo_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS)
+lzmainfo_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS) $(LIBXXHASH_LIBS)
 
 
 dist_man_MANS = lzmainfo.1
diff --git a/src/xz/Makefile.am b/src/xz/Makefile.am
index 8d6604c8ffb22..55e412ecc5f16 100644
--- a/src/xz/Makefile.am
+++ b/src/xz/Makefile.am
@@ -60,7 +60,7 @@ xz_LDADD += $(top_builddir)/lib/libgnu.a
 endif
 
 # libgnu.a may need these libs, so this must be after libgnu.a.
-xz_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS)
+xz_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS) $(LIBXXHASH_LIBS)
 
 
 # Windows resource compiler support
diff --git a/src/xz/args.c b/src/xz/args.c
index 9238fb32ec00d..404ab5889342f 100644
--- a/src/xz/args.c
+++ b/src/xz/args.c
@@ -421,6 +421,7 @@ parse_real(args_info *args, int argc, char **argv)
                                { ""crc32"",  LZMA_CHECK_CRC32 },
                                { ""crc64"",  LZMA_CHECK_CRC64 },
                                { ""sha256"", LZMA_CHECK_SHA256 },
+                               { ""xxh3"", LZMA_CHECK_XXH3 },
                        };
 
                        size_t i = 0;
diff --git a/src/xz/list.c b/src/xz/list.c
index 06c9c1ee20e74..778f5283682c5 100644
--- a/src/xz/list.c
+++ b/src/xz/list.c
@@ -174,7 +174,7 @@ static const char check_names[LZMA_CHECK_ID_MAX + 1][12] = {
        ""CRC64"",
        N_(""Unknown-5""),
        N_(""Unknown-6""),
-       N_(""Unknown-7""),
+       N_(""XXH3""),
        N_(""Unknown-8""),
        N_(""Unknown-9""),
        ""SHA-256"",
diff --git a/src/xz/message.c b/src/xz/message.c
index 00eb65b62c5cc..93dcde5ea8831 100644
--- a/src/xz/message.c
+++ b/src/xz/message.c
@@ -1145,7 +1145,7 @@ message_help(bool long_help)
 ""  -F, --format=FMT    file format to encode or decode; possible values are\n""
 ""                      `auto' (default), `xz', `lzma', and `raw'\n""
 ""  -C, --check=CHECK   integrity check type: `none' (use with caution),\n""
-""                      `crc32', `crc64' (default), or `sha256'""));
+""                      `crc32', `crc64' (default), `xxh3' or `sha256'""));
                puts(_(
 ""      --ignore-check  don't verify the integrity check when decompressing""));
        }
diff --git a/src/xzdec/Makefile.am b/src/xzdec/Makefile.am
index 59ad965eb1678..b2cf799402dea 100644
--- a/src/xzdec/Makefile.am
+++ b/src/xzdec/Makefile.am
@@ -32,7 +32,7 @@ if COND_GNULIB
 xzdec_LDADD += $(top_builddir)/lib/libgnu.a
 endif
 
-xzdec_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS)
+xzdec_LDADD += $(LTLIBINTL) $(OPENSSL_CRYPTO_LIBS) $(LIBXXHASH_LIBS)
 
 
 lzmadec_SOURCES = \
-- 
2.30.0

","[xz-devel] [RFC 2/2] Add xxHash, XX3 (128bit) for hashing.",msg00430.html
"Wed, 20 Jan 2021 14:07:19 -0800",Sebastian Andrzej Siewior,Sebastian Andrzej Siewior,"On 2021-01-20 00:37:06 [+0100], Sebastian Andrzej Siewior wrote:


xz -tv -T0 with crc64 reports:

  100 %         10,2 GiB / 40,0 GiB = 0,255   1,1 GiB/s       0:35

and the same archive with xxh3:

  100 %         10,2 GiB / 40,0 GiB = 0,255   1,1 GiB/s       0:34

which looks like it is not worth the trouble.

Sebastian
","Re: [xz-devel] [RFC 2/2] Add xxHash, XX3 (128bit) for hashing.",msg00432.html
"Fri, 29 Jan 2021 11:14:06 -0800",Lasse Collin,Sebastian Andrzej Siewior,"On 2021-01-20 Sebastian Andrzej Siewior wrote:


If there were a fast algorithm in .xz, then it would be worth the
trouble. Having such an algorithm was in the early plans but so were a
few other nice things but many never materialized.

I will look at the SHA-256 patch later. There are unusually many things
in the queue of XZ-related things.

-- 
Lasse Collin  |  IRC: Larhzu @ IRCnet & Freenode
","Re: [xz-devel] [RFC 2/2] Add xxHash, XX3 (128bit) for hashing.",msg00442.html
"Wed, 20 Jan 2021 14:03:50 -0800",Sebastian Andrzej Siewior,Sebastian Andrzej Siewior,"On 2021-01-20 00:30:08 [+0100], Sebastian Andrzej Siewior wrote:


Another data point: xz -tv -T0 went from
   100 %         10,2 GiB / 40,0 GiB = 0,255   921 MiB/s       0:44
to
   100 %         10,2 GiB / 40,0 GiB = 0,255   1,2 GiB/s       0:34   

(I converted my test archive from crc64 to sha256 for testing).

Sebastian
",Re: [xz-devel] [PATCH 1/2] Add support openssl's SHA256 implementation,msg00431.html
"Wed, 30 Nov 2022 05:59:09 -0800",Lasse Collin,Sebastian Andrzej Siewior,"Hello!

This could be good as an optional feature, disabled by default so that
extra dependency doesn't get added accidentally. It's too late for
5.4.0 but perhaps in 5.4.1 or .2.


The biggest problem with the patch is that it lacks error checking:

  - EVP_MD_CTX_new() can return NULL if memory allocation fails. Man
    page doesn't document this but source code makes it clear.

  - EVP_get_digestbyname() can return NULL on failure. Perhaps this
    could be replaced with EVP_sha256()? It seems to return a pointer
    to a statically-allocated structure and man page implies that it
    cannot fail.

  - EVP_DigestInit_ex(), EVP_DigestUpdate(), and EVP_DigestFinal_ex()
    can in theory fail, perhaps not in practice, I don't know.

Currently it is assumed in liblzma that initiazation cannot fail so
that would need to be changed. It could be good to check the return
values from EVP_DigestUpdate() and EVP_DigestFinal_ex() too. Since it
is unlikely that EVP_DigestUpdate() fails it could perhaps be OK to
store the failure code and only return it for lzma_check_finish() but
I'm not sure if that is acceptable.

The configure options perhaps should be --with instead of --enable since
it adds a dependency on another package, if one wants to stick to
Autoconf's guidlines. (It's less clear if --enable-external-sha256
should be --with since it only affects what to use from the OS base
libraries. In any case it won't be changed as it would affect
compatibility with build scripts.)

Are there other good library options? For example, Nettle's SHA-256
functions don't need any error checking but I haven't checked the
performance.

Is it a mess for distributions if a dependency of liblzma gets its
soname bumped and then liblzma needs to be rebuilt without changing its
soname? I suppose such things happen all the time but when a library is
needed by a package manager it might perhaps have extra worries.

-- 
Lasse Collin
",Re: [xz-devel] [PATCH 1/2] Add support openssl's SHA256 implementation,msg00629.html
"Wed, 30 Nov 2022 06:30:10 -0800",Lasse Collin,Lasse Collin,"On 2022-11-30 Lasse Collin wrote:


If the goal is to use SHA instructions on x86 then intrinsics in the C
code with runtime CPU detection are an option too. It's done in
crc64_fast.c in 5.3.4alpha already.

-- 
Lasse Collin
",Re: [xz-devel] [PATCH 1/2] Add support openssl's SHA256 implementation,msg00630.html
