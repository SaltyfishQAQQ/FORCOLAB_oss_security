timestamp,from,to,body,title,msg_file
"Tue, 16 Feb 2021 05:42:25 -0800",Brett Okken,,"We found in LZDecoder that using System.arrayCopy with doubling size
is faster than Arrays.fill (especially for larger arrays).
We can apply that knowledge in the BasicArrayCache, where there are
some use cases which require clearing out the array prior to returning
it.



diff --git a/src/org/tukaani/xz/BasicArrayCache.java
b/src/org/tukaani/xz/BasicArrayCache.java
index 90ebe1f..0148fbe 100644
--- a/src/org/tukaani/xz/BasicArrayCache.java
+++ b/src/org/tukaani/xz/BasicArrayCache.java
@@ -11,7 +11,6 @@ package org.tukaani.xz;

 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
-import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;

@@ -239,8 +238,13 @@ public class BasicArrayCache extends ArrayCache {

         if (array == null)
             array = new byte[size];
-        else if (fillWithZeros)
-            Arrays.fill(array, (byte)0x00);
+        else if (fillWithZeros) {
+            array[0] = (byte)0x00;
+            array[1] = (byte)0x00;
+            array[2] = (byte)0x00;
+            array[3] = (byte)0x00;
+            fillArrayFromFirstFourValues(array, array.length);
+        }

         return array;
     }
@@ -263,8 +267,13 @@ public class BasicArrayCache extends ArrayCache {

         if (array == null)
             array = new int[size];
-        else if (fillWithZeros)
-            Arrays.fill(array, 0);
+        else if (fillWithZeros) {
+            array[0] = 0;
+            array[1] = 0;
+            array[2] = 0;
+            array[3] = 0;
+            fillArrayFromFirstFourValues(array, array.length);
+        }

         return array;
     }
@@ -278,4 +287,21 @@ public class BasicArrayCache extends ArrayCache {
     public void putArray(int[] array) {
         putArray(intArrayCache, array, array.length);
     }
+
+    /**
+     * Repeats the first 4 values in the array to fill the contents.
+     */
+    private static void fillArrayFromFirstFourValues(Object array,
int length) {
+        int toCopy = 4;
+        int remaining = length - toCopy;
+        do {
+            System.arraycopy(array, 0, array, toCopy, toCopy);
+            remaining -= toCopy;
+            toCopy <<= 1;
+        } while (remaining >= toCopy);
+
+        if (remaining != 0) {
+            System.arraycopy(array, 0, array, toCopy, remaining);
+        }
+    }
 }
",[xz-devel] java array cache fill,msg00481.html
"Tue, 16 Feb 2021 10:47:41 -0800",Lasse Collin,Brett Okken,"On 2021-02-16 Brett Okken wrote:


A simple micro-benchmark gives me a very different result. The
alternative method is roughly 70 % slower than Arrays.fill on my system
with a big array. If Arrays.fill were so terrible, it should be
improved instead. Even if the alternative method were faster, it would
need to be a lot faster to be worth the extra complexity.

If Arrays.fill version (uncomment/comment the code) is slower for you,
it must depend on the Java runtime or operating system or such things.

import java.util.Arrays;

public class Foo {
    public static void main(String[] args) throws Exception {
        byte[] buf = new byte[10 << 20];

        for (int i = 0; i < 4000; ++i) {
            //Arrays.fill(buf, (byte)0);

            buf[0] = (byte)0;
            buf[1] = (byte)0;
            buf[2] = (byte)0;
            buf[3] = (byte)0;
            int toCopy = 4;
            int remaining = buf.length - toCopy;
            do {
                System.arraycopy(buf, 0, buf, toCopy, toCopy);
                remaining -= toCopy;
                toCopy <<= 1;
            } while (remaining >= toCopy);

            if (remaining != 0) {
                System.arraycopy(buf, 0, buf, toCopy, remaining);
            }
        }
    }
}

-- 
Lasse Collin  |  IRC: Larhzu @ IRCnet & Freenode
",Re: [xz-devel] java array cache fill,msg00482.html
"Fri, 19 Feb 2021 12:34:58 -0800",Brett Okken,Lasse Collin,"I learned the wrong lesson from LZDecoder.
This pattern of doubling sizes System.arraycopy was better than byte
by byte copies in loop. There was not really a direct comparison to
Arrays.fill. The single byte repeating was close.
Hotspot must be doing something interesting with Arrays.fill, because
the code itself is setting the value byte by byte.


Brett
",Re: [xz-devel] java array cache fill,msg00486.html
