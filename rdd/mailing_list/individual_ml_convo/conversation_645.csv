timestamp,from,to,body,title,msg_file
"Sat, 17 Feb 2024 12:57:58 -0800",Sebastian Andrzej Siewior,,"Hi,

I did some testing on !x86. I changed LZMA_RANGE_DECODER_CONFIG to
different values run a test and looked at the MiB/s value. xz_0 means
LZMA_RANGE_DECODER_CONFIG was 0, xz_1 means the define was set to 1. I
touched src/liblzma/lzma/lzma_decoder.c and rebuilt xz. I pinned the
shell to a single CPU and run test for archive (-tv) for one file three
times. This are the results:


arm64 (Lenovo HR350A):
----=== xz 5.4.1 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   110 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   110 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   110 MiB/s       0:12
----============----
----=== ./xz_0 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   115 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   115 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   115 MiB/s       0:12
----============----
----=== ./xz_1 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   108 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   108 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   108 MiB/s       0:12
----============----
----=== ./xz_3 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   109 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   109 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   109 MiB/s       0:12
----============----
----=== ./xz_7 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   109 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   109 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   109 MiB/s       0:12
----============----
----=== ./xz_f ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   107 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   107 MiB/s       0:12
linux-6.7.5.tar.xz (1/1)
  100 %     134.9 MiB / 1,386.4 MiB = 0.097   107 MiB/s       0:12
----============----


RiscV (HiFive Unmatched)
----=== xz 5.4.5 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    30 MiB/s       0:45
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    30 MiB/s       0:46
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    30 MiB/s       0:45
----============----
----=== ./xz_0 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    32 MiB/s       0:43
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    32 MiB/s       0:43
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    32 MiB/s       0:43
----============----
----=== ./xz_1 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:44
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:44
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:44
----============----
----=== ./xz_3 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    30 MiB/s       0:45
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:45
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:45
----============----
----=== ./xz_7 ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:45
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:44
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    31 MiB/s       0:44
----============----
----=== ./xz_f ===----
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    30 MiB/s       0:46
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    30 MiB/s       0:45
linux-6.7.5.tar.xz (1/1)
  100 %     134,9 MiB / 1.386,4 MiB = 0,097    30 MiB/s       0:45
----============----

Based on this it looks like the `0' variant is the best one. Is my test
too simple and does not cover ""everything / wide range of decodings""?

Sebastian
",[xz-devel] Testing LZMA_RANGE_DECODER_CONFIG,msg00645.html
"Sun, 18 Feb 2024 04:11:37 -0800",Lasse Collin,Sebastian Andrzej Siewior,"On 2024-02-17 Sebastian Andrzej Siewior wrote:


Great to see testing! The testing method is fine. If pinning to a
single core, I assume --threads=1 was set as well because
multithreading is the default now.

Branchless code can help when branch prediction penalties are high. So
it will depend on the processor (not just the instruction set).

On x86-64, there was a clear improvement with the branchless C code. It
was a little more with Clang than GCC. So if easily possible, also
testing with Clang could be useful. Testing your script on x86-64 could
be worth it too so check that at least on x86-64 you get an improvement
with =1 and =3 compared to =0. (The bit 1 makes the main difference; 2
should have a small effect, and 4 and 8 are questionable and perhaps
not worth benchmarking until the usefulness of =1 or =3 is clear.)

If the branchless C code is not consistent outside x86-64, then 5.6.0
likely should stick to =0. From your results it seems that the other
tweaks to the code provided a minor improvement on non-x86-64 still.
(The tweaks that LZMA_RANGE_DECODER_CONFIG doesn't affect.)

Thanks!

-- 
Lasse Collin
",Re: [xz-devel] Testing LZMA_RANGE_DECODER_CONFIG,msg00646.html
"Sun, 18 Feb 2024 12:35:14 -0800",Lasse Collin,Lasse Collin,"The balance between the hottest locations in the decompressor code
varies depending on the input file. Linux kernel source compresses very
well (ratio is about 0.10). This reduces the benefit of branchless
code. On my main computer I still get about 2 % time reduction with =3.


On another x86-64 computer I don't see any difference between =0 and =3
with the Linux kernel source. On the same machine, decompression time
of warzone2100-data[1] from Debian is reduced by 10.5 % with =3 compared
to =0. It's a package that doesn't compress so well (ratio is about
0.75). On my main computer the time reduction from =0 to =3 is 8.5 %.
All numbers are with GCC.

Of course, on x86-64 the =0 vs. =3 test isn't that interesting since the
asm is so much better. But this highlights how much the test file
choice can make a difference.

[1] https://packages.debian.org/bookworm/all/warzone2100-data/download

-- 
Lasse Collin
",Re: [xz-devel] Testing LZMA_RANGE_DECODER_CONFIG,msg00647.html
"Tue, 20 Feb 2024 12:17:32 -0800",Sebastian Andrzej Siewior,Lasse Collin,"
On 2024-02-18 22:35:03 [+0200], Lasse Collin wrote:


Okay, so the input matters, too. I tried 1GiB urandom (so it does not
compress so well) but that went quicker than expectedâ€¦ Anyway.
I found 3 idle x86 boxes and re-run a test with linux' perf on them and
the arm64 box. I all flavours for the two archives. On RiscV I did the
'xz -t' thing because perf seems not to be supported well or I lack
access.

The task is pinned to a single CPU means the task can't be migrated to
another core and xz observes only one ""core"" (and does not spawn
threads). So it is single threaded.

Intel(R) Xeon(R) Platinum 8176M CPU:

|  Performance counter stats for './xz_0x000_gcc -t linux-6.7.5.tar.xz' (5 
runs):    
|                  
|          13.384,81 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,05% )
|                 21      context-switches                 #    1,569 /sec      
                  ( +-  2,61% )
|                  0      cpu-migrations                   #    0,000 /sec      
    
|                119      page-faults                      #    8,891 /sec      
                  ( +-  0,34% )
|     28.041.975.275      cycles                           #    2,095 GHz       
                  ( +-  0,05% )
|     32.576.330.155      instructions                     #    1,16  insn per 
cycle              ( +-  0,00% )
|      4.304.914.251      branches                         #  321,627 M/sec     
                  ( +-  0,00% )
|        567.850.712      branch-misses                    #   13,19% of all 
branches             ( +-  0,02% )
| 
|           13,38558 +- 0,00707 seconds time elapsed  ( +-  0,05% )
|
|  Performance counter stats for './xz_0x003_gcc -t linux-6.7.5.tar.xz' (5 
runs):
| 
|          12.853,67 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,03% )
|                 18      context-switches                 #    1,400 /sec      
                  ( +-  5,72% )
|                  0      cpu-migrations                   #    0,000 /sec
|                220      page-faults                      #   17,116 /sec      
                  ( +- 45,95% )
|     26.929.223.135      cycles                           #    2,095 GHz       
                  ( +-  0,03% )
|     42.017.609.529      instructions                     #    1,56  insn per 
cycle              ( +-  0,00% )
|      3.226.245.101      branches                         #  250,998 M/sec     
                  ( +-  0,00% )
|        299.814.626      branch-misses                    #    9,29% of all 
branches             ( +-  0,11% )
| 
|           12,85438 +- 0,00395 seconds time elapsed  ( +-  0,03% )

missed branches dropped, gained instructions but isn per cycle improved.
Less idle cycles. Worth, ~0.5 sec.

|  Performance counter stats for './xz_0x00f_gcc -t linux-6.7.5.tar.xz' (5 
runs):
| 
|          12.872,36 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,01% )
|                 17      context-switches                 #    1,321 /sec      
                  ( +-  6,55% )
|                  0      cpu-migrations                   #    0,000 /sec
|                220      page-faults                      #   17,091 /sec      
                  ( +- 45,98% )
|     26.968.386.196      cycles                           #    2,095 GHz       
                  ( +-  0,01% )
|     44.566.213.262      instructions                     #    1,65  insn per 
cycle              ( +-  0,00% )
|      2.957.642.049      branches                         #  229,767 M/sec     
                  ( +-  0,00% )
|        249.987.257      branch-misses                    #    8,45% of all 
branches             ( +-  0,05% )
| 
|           12,87303 +- 0,00115 seconds time elapsed  ( +-  0,01% )

Slightly worse vs previous.

|  Performance counter stats for './xz_0x1f0_gcc -t linux-6.7.5.tar.xz' (5 
runs):
| 
|           9.740,84 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,02% )
|                 21      context-switches                 #    2,156 /sec      
                  ( +-  6,14% )
|                  0      cpu-migrations                   #    0,000 /sec
|                216      page-faults                      #   22,175 /sec      
                  ( +- 46,95% )
|     20.407.560.821      cycles                           #    2,095 GHz       
                  ( +-  0,02% )
|     34.751.763.859      instructions                     #    1,70  insn per 
cycle              ( +-  0,00% )
|      3.182.093.181      branches                         #  326,676 M/sec     
                  ( +-  0,00% )
|        271.587.827      branch-misses                    #    8,53% of all 
branches             ( +-  0,06% )
| 
|            9,74159 +- 0,00223 seconds time elapsed  ( +-  0,02% )

Missed branches increased but instructions dropped, insn per cycles
improved a bit. Worth almost 3secs.

|  Performance counter stats for './xz_0x1f0_clang -t linux-6.7.5.tar.xz' (5 
runs):
| 
|          10.400,65 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,03% )
|                 21      context-switches                 #    2,019 /sec      
                  ( +-  4,15% )
|                  0      cpu-migrations                   #    0,000 /sec
|                218      page-faults                      #   20,960 /sec      
                  ( +- 46,47% )
|     21.789.921.119      cycles                           #    2,095 GHz       
                  ( +-  0,03% )
|     38.046.946.649      instructions                     #    1,75  insn per 
cycle              ( +-  0,00% )
|      3.691.511.759      branches                         #  354,931 M/sec     
                  ( +-  0,00% )
|        272.904.230      branch-misses                    #    7,39% of all 
branches             ( +-  0,03% )
| 
|           10,40140 +- 0,00305 seconds time elapsed  ( +-  0,03% )
|

clang made more instructions, better insn/cycle ratio but it costs 0.5s vs gcc.

Now the other one:

|  Performance counter stats for './xz_0x000_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
| 
|           6.345,58 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,01% )
|                 14      context-switches                 #    2,206 /sec      
                  ( +-  3,50% )
|                  0      cpu-migrations                   #    0,000 /sec
|                111      page-faults                      #   17,492 /sec      
                  ( +-  0,53% )
|     13.294.316.865      cycles                           #    2,095 GHz       
                  ( +-  0,01% )
|     14.333.630.221      instructions                     #    1,08  insn per 
cycle              ( +-  0,00% )
|      1.883.687.210      branches                         #  296,850 M/sec     
                  ( +-  0,00% )
|        312.352.872      branch-misses                    #   16,58% of all 
branches             ( +-  0,02% )
| 
|           6,346194 +- 0,000638 seconds time elapsed  ( +-  0,01% )
| 
|  Performance counter stats for './xz_0x00f_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
| 
|           5.152,52 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,05% )
|                 12      context-switches                 #    2,329 /sec      
                  ( +-  4,25% )
|                  0      cpu-migrations                   #    0,000 /sec
|                213      page-faults                      #   41,339 /sec      
                  ( +- 47,86% )
|     10.794.789.805      cycles                           #    2,095 GHz       
                  ( +-  0,05% )
|     21.297.180.861      instructions                     #    1,97  insn per 
cycle              ( +-  0,00% )
|      1.134.077.104      branches                         #  220,101 M/sec     
                  ( +-  0,01% )
|         65.695.965      branch-misses                    #    5,79% of all 
branches             ( +-  0,02% )
| 
|            5,15311 +- 0,00266 seconds time elapsed  ( +-  0,05% )
| 
|  Performance counter stats for './xz_0x1f0_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
| 
|           3.732,30 msec task-clock                       #    1,000 CPUs 
utilized               ( +-  0,13% )
|                 15      context-switches                 #    4,019 /sec      
                  ( +-  5,33% )
|                  0      cpu-migrations                   #    0,000 /sec
|                106      page-faults                      #   28,401 /sec      
                  ( +-  0,55% )
|      7.819.284.450      cycles                           #    2,095 GHz       
                  ( +-  0,13% )
|     15.658.698.884      instructions                     #    2,00  insn per 
cycle              ( +-  0,00% )
|      1.157.490.199      branches                         #  310,128 M/sec     
                  ( +-  0,00% )
|         65.438.661      branch-misses                    #    5,65% of all 
branches             ( +-  0,03% )
| 
|            3,73292 +- 0,00499 seconds time elapsed  ( +-  0,13% )

Still a win.
An older Xeon/Sandybridge:
| Performance counter stats for './xz_0x000_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          14,83757 +- 0,00216 seconds time elapsed  ( +-  0,01% )
| Performance counter stats for './xz_0x001_gcc -t linux-6.7.5.tar.xz' (5 runs):
|         15,881129 +- 0,000770 seconds time elapsed  ( +-  0,00% )
| Performance counter stats for './xz_0x003_gcc -t linux-6.7.5.tar.xz' (5 runs):
|         15,589420 +- 0,000867 seconds time elapsed  ( +-  0,01% )
| Performance counter stats for './xz_0x007_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          15,59517 +- 0,00257 seconds time elapsed  ( +-  0,02% )
| Performance counter stats for './xz_0x00f_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          15,99202 +- 0,00258 seconds time elapsed  ( +-  0,02% )
| Performance counter stats for './xz_0x010_gcc -t linux-6.7.5.tar.xz' (5 runs):
|           13,0439 +- 0,0111 seconds time elapsed  ( +-  0,08% )
| Performance counter stats for './xz_0x030_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          12,23834 +- 0,00391 seconds time elapsed  ( +-  0,03% )
| Performance counter stats for './xz_0x070_gcc -t linux-6.7.5.tar.xz' (5 runs):
|           12,1047 +- 0,0205 seconds time elapsed  ( +-  0,17% )
| Performance counter stats for './xz_0x0f0_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          12,07072 +- 0,00405 seconds time elapsed  ( +-  0,03% )
| Performance counter stats for './xz_0x1f0_gcc -t linux-6.7.5.tar.xz' (5 runs):
|           12,1289 +- 0,0103 seconds time elapsed  ( +-  0,08% )

and the other:
| Performance counter stats for './xz_0x000_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           6,63439 +- 0,00177 seconds time elapsed  ( +-  0,03% )
| Performance counter stats for './xz_0x001_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           6,42421 +- 0,00847 seconds time elapsed  ( +-  0,13% )
| Performance counter stats for './xz_0x003_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|            6,3814 +- 0,0116 seconds time elapsed  ( +-  0,18% )
| Performance counter stats for './xz_0x007_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           6,41950 +- 0,00239 seconds time elapsed  ( +-  0,04% )
| Performance counter stats for './xz_0x00f_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           6,55812 +- 0,00165 seconds time elapsed  ( +-  0,03% )
| Performance counter stats for './xz_0x010_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|            4,8010 +- 0,0157 seconds time elapsed  ( +-  0,33% )
| Performance counter stats for './xz_0x030_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           4,73339 +- 0,00700 seconds time elapsed  ( +-  0,15% )
| Performance counter stats for './xz_0x070_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           4,76041 +- 0,00702 seconds time elapsed  ( +-  0,15% )
| Performance counter stats for './xz_0x0f0_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           4,62235 +- 0,00723 seconds time elapsed  ( +-  0,16% )
| Performance counter stats for './xz_0x1f0_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           4,62489 +- 0,00535 seconds time elapsed  ( +-  0,12% )

Ryzen:
| Performance counter stats for './xz_0x000_gcc -t linux-6.7.5.tar.xz' (5 runs):
|           6,53743 +- 0,00711 seconds time elapsed  ( +-  0,11% )
| Performance counter stats for './xz_0x00f_gcc -t linux-6.7.5.tar.xz' (5 runs):
|           6,17059 +- 0,00146 seconds time elapsed  ( +-  0,02% )
| Performance counter stats for './xz_0x1f0_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          4,541942 +- 0,000630 seconds time elapsed  ( +-  0,01% )
| Performance counter stats for './xz_0x000_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           3,18848 +- 0,00251 seconds time elapsed  ( +-  0,08% )
| Performance counter stats for './xz_0x00f_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           2,61733 +- 0,00146 seconds time elapsed  ( +-  0,06% )
| Performance counter stats for './xz_0x1f0_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           1,82759 +- 0,00217 seconds time elapsed  ( +-  0,12% )

Arm64:

| Performance counter stats for './xz_0x000_clang -t linux-6.7.5.tar.xz' (5 
runs):
|          12.19798 +- 0.00455 seconds time elapsed  ( +-  0.04% )
| Performance counter stats for './xz_0x000_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          12.07622 +- 0.00374 seconds time elapsed  ( +-  0.03% )
| Performance counter stats for './xz_0x001_clang -t linux-6.7.5.tar.xz' (5 
runs):
|          12.80433 +- 0.00322 seconds time elapsed  ( +-  0.03% )
| Performance counter stats for './xz_0x001_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          12.82816 +- 0.00543 seconds time elapsed  ( +-  0.04% )
| Performance counter stats for './xz_0x003_clang -t linux-6.7.5.tar.xz' (5 
runs):
|          12.81225 +- 0.00492 seconds time elapsed  ( +-  0.04% )
| Performance counter stats for './xz_0x003_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          12.79457 +- 0.00355 seconds time elapsed  ( +-  0.03% )
| Performance counter stats for './xz_0x007_clang -t linux-6.7.5.tar.xz' (5 
runs):
|          12.93820 +- 0.00639 seconds time elapsed  ( +-  0.05% )
| Performance counter stats for './xz_0x007_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          12.76739 +- 0.00127 seconds time elapsed  ( +-  0.01% )
| Performance counter stats for './xz_0x00f_clang -t linux-6.7.5.tar.xz' (5 
runs):
|          13.13949 +- 0.00285 seconds time elapsed  ( +-  0.02% )
| Performance counter stats for './xz_0x00f_gcc -t linux-6.7.5.tar.xz' (5 runs):
|          12.90021 +- 0.00531 seconds time elapsed  ( +-  0.04% )

| Performance counter stats for './xz_0x000_clang -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|          4.483373 +- 0.000590 seconds time elapsed  ( +-  0.01% )
| Performance counter stats for './xz_0x000_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|          4.906357 +- 0.000577 seconds time elapsed  ( +-  0.01% )
| Performance counter stats for './xz_0x001_clang -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           4.85769 +- 0.00148 seconds time elapsed  ( +-  0.03% )
| Performance counter stats for './xz_0x001_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|          4.926150 +- 0.000405 seconds time elapsed  ( +-  0.01% )
| Performance counter stats for './xz_0x003_clang -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           4.86843 +- 0.00161 seconds time elapsed  ( +-  0.03% )
| Performance counter stats for './xz_0x003_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|          4.945385 +- 0.000988 seconds time elapsed  ( +-  0.02% )
| Performance counter stats for './xz_0x007_clang -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|          4.814933 +- 0.000952 seconds time elapsed  ( +-  0.02% )
| Performance counter stats for './xz_0x007_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|           4.95251 +- 0.00154 seconds time elapsed  ( +-  0.03% )
| Performance counter stats for './xz_0x00f_clang -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|          4.897356 +- 0.000741 seconds time elapsed  ( +-  0.02% )
| Performance counter stats for './xz_0x00f_gcc -t 
warzone2100-data_4.3.3-3_all.xz' (5 runs):
|          4.949230 +- 0.000245 seconds time elapsed  ( +-  0.00% )

Here it does not matter if I look at clang/gcc or one of the files, the
000 varient is slightly better.

For RiscV I have only the ""xz -t"" numbers and here it says
| ----=== ./xz_0x000_gcc ===----
| linux-6.7.5.tar.xz: 134,9 MiB / 1.386,4 MiB = 0,097, 31 MiB/s, 0:44
| warzone2100-data_4.3.3-3_all.xz: 136,0 MiB / 180,3 MiB = 0,754, 13 MiB/s, 0:14

| ----=== ./xz_0x003_gcc ===----
| linux-6.7.5.tar.xz: 134,9 MiB / 1.386,4 MiB = 0,097, 29 MiB/s, 0:46
| warzone2100-data_4.3.3-3_all.xz: 136,0 MiB / 180,3 MiB = 0,754, 12 MiB/s, 0:15

| ----=== ./xz_0x00f_gcc ===----
| linux-6.7.5.tar.xz: 134,9 MiB / 1.386,4 MiB = 0,097, 29 MiB/s, 0:47
| warzone2100-data_4.3.3-3_all.xz: 136,0 MiB / 180,3 MiB = 0,754, 12 MiB/s, 0:15

So appears that here also, the 000 variant performs a bit better. I
don't know how accurate numbers are here. I could try to re-run them
with perf to get a higher runtime resolution and to see how much the
run time varies.

Sebastian
",Re: [xz-devel] Testing LZMA_RANGE_DECODER_CONFIG,msg00651.html
"Tue, 20 Feb 2024 14:42:21 -0800",Lasse Collin,Sebastian Andrzej Siewior,"On 2024-02-19 Sebastian Andrzej Siewior wrote:


urandom should be incompressible. When LZMA2 cannot compress a chunk it
stores it in uncompressed form. Decompression is like ""cat with CRC"".


Great work! Thanks!

On IRC one person ran a bunch of tests too. On ARM64 the results were
mixed. A variant that was better with GCC could be worse with Clang. So
those weren't as clear as your results but they too made me think that
using 0 for non-x86-64 is the way to go for 5.6.0.

Your x86-64 asm variant results were interesting too. Seems that the bit
0x100 isn't good with GCC although the difference is small. I confirmed
this on the tests I did on Celeron G1620 (Ivy Bridge). So I wonder if
0x0F0 should be the x86-64 variant to use in xz 5.6.0 with GCC.

On another machine with Clang 16, 0x100 is 8 % faster with Linux kernel
source. So the difference is somewhat big. It's still slightly slower
than the GCC version. This is on Phenom II X4 920.

Since 0x100 is only a little worse with GCC, using it for both GCC and
Clang could be OK. An #ifdef __clang__ could be used too but perhaps
it's not great in the long term. Something has to be chosen for 5.6.0;
further tweaks can be made later.

By the way, the ""time"" command gives more precise results than ""xz -v"".
I use

    TIMEFORMAT=$'\nreal\t%3R\nuser\t%3U\nsys\t%3S\ncpu%%\t%P'

in bash to keep the output as seconds instead of minutes and seconds.

-- 
Lasse Collin
",Re: [xz-devel] Testing LZMA_RANGE_DECODER_CONFIG,msg00652.html
