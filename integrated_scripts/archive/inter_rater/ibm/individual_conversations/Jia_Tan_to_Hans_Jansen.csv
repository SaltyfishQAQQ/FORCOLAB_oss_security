from,to,file_name,message,mood,score
Jia Tan,Hans Jansen,pr_64.csv,"Hello!

Thanks for the PR, this is something we have wanted to implement since CLMUL was added for CRC64. 70% speed up over the generic method is a great speedup!

If you are willing, can you do some additional benchmarks for us since you already have a framework setup? We are wondering what impact the compiler has, so can you show us differences between using GCC and Clang? This especially matters when it comes to the 3% speed up you mentioned for the inline asm. 3% isn't that significant, especially if its only for CRC32. It adds extra complexity to the code and makes it harder to maintain long-term, so we want to make sure it is worth it. Similarly, can you try making CRC_SIMD_BODY an inline function instead of a macro? This could make it easier to read/maintain. If it has a significant impact on performance then we should stick to a macro.

So in summary, can you benchmark:

- Impact of using GCC versus Clang in general
- Impact of  removing the inline asm (GCC and Clang both)
- Impact of replacing CRC_SIMD_BODY macro with inline function (GCC and Clang both)

You don't need to make this change now, but before merging it would be great if you can clean up the commits:

- Label each commit with ""liblzma:"". We do this since it helps keep the commit log consistent and organized.
- Please squash commits 1, 3, and 5 into a single commit. I understand this is how you developed it and the thought process makes sense. But it will help the commit log stay cleaner if we don't have to create crc_clmul_macros.h just to later rename its variables and rename the file itself.

Feel free to add fix up commits as we go through the review process but at the end we will need these changes.",positive,0.833104
Jia Tan,Hans Jansen,pr_64.csv,"
Thanks for the updates!


Thanks for benchmarking the 32-bit version. I would have expected the CLMUL version to be much better than the assembly or the generic to be fairly close to the assembly. We'll take that into account when deciding how to proceed with 32-bit builds.",positive,0.773085
Jia Tan,Hans Jansen,pr_64.csv,"@hansjans162 We committed some changes to reorganize the CLMUL code. We refactored things so all the CLMUL specific code is in a new `crc_clmul.c` file. Also, we created a macro `crc_always_inline` to force inline of `crc_simd_body()` since it was 50% slower on my benchmarks if the function is not properly inlined.

A few small changes were made to `crc_simd_body()` but the speed performance was not affected. I hope if you had already started working on ARM64 versions this does not add much extra work to incorporate the code reorganzation. These changes should make the code much better organized for the future ARM64 optimizations. Thanks for all your contributions and feel free to reply here or reach out over email (the email in the project README will redirect to Lasse and I) if you have comments or questions.",positive,0.587696
Jia Tan,Hans Jansen,pr_53.csv,"Thanks for the PR and the helpful links! Overall this seems like a nice improvement to our function picking strategy for CRC64. It will likely be useful when we implement CRC32 CLMUL too :)

I want to do a bit more research about the GNU indirect functions to make its right for this project before we decide to merge. Before that, there are a few style changes that need to be made. I will comment them separately.",positive,0.948349
Jia Tan,Hans Jansen,pr_53.csv,@hansjans162 Just merged from the other branch Thanks for your contribution! ,positive,0.957441
