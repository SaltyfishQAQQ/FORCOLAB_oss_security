from,to,file_name,message,mood,score
Jia Tan,Ricky Tigg,issue_72.csv,"Hello!


There is a section in INSTALL.generic ""Installation Names"". This describes when using the Autotools build system where the installation files go (defaults to `/usr/local/`). Your Linux distribution should install/update your packages in a different directory so these should not conflict.

You may already know this, but typically to build and install a package with Autotools the steps are (and should be covered in INSTALL.generic already):

1. `./configure [options]`. The options can enable/disable features, dependencies, set installation locations, etc.
2. `make`. This will compile the project.
3. `make check`. This will compile and run the test framework to be sure the binaries work as expected.
4. `make install`. This will install the binaries and documentation (unless disabled).
5. `make uninstall`. This will remove the installed artifacts.

You can set a different installation location when running configure by passing `--prefix=[path to install directory]` or during installation `make install DESTDIR=[path to install directory]`.

I hope this explanation was clear. Let me know if you have more questions.
",positive,0.432211
Jia Tan,Ricky Tigg,issue_72.csv,There is no shame in asking question. I'm glad we were able to help :),positive,0.510534
Jia Tan,Ricky Tigg,issue_71.csv,"I can understand the confusion here. While GitHub does a lot of things well, unfortunately maintainers on GitHub have no control over the naming of the ""Source code"" release files, but we can add extra files to the release. Some projects choose to add pre-compiled binaries to the release, so it is more obvious in those projects which files you want to download (and to be sure that the source is always easily available for every release without having to clone the entire project).

It is my understanding that under the hood GitHub is using `git archive` to generate the ""Source code"" archives based on the tag of the release. So it would be possible for us to exclude most or all files from `git archive` using a `.gitattributes` file to make it clear that the GitHub auto-generated archives are not meant to be consumed by users. This would be annoying for anyone who has already been using `git archive` though so I don't see us doing this.

Like many projects, when we generate our source code releases, we essentially run Automake's `dist-gzip` target to prepare our documentation, translations, etc. and, as you know, generate the configure script. `git archive` does not run these steps and so the GitHub archives are best thought of as a snapshot of the git repository at the time of the release.

So, its best to ignore the GitHub generated archives for a majority of repositories on GitHub. I hope this helps!",negative,-0.335689
