from,to,file_name,message,mood,score
mvatsyk-lsg,Jia Tan,pr_73.csv,"@JiaT75 thanks a lot for the swift review! I will start implementing the suggested changes asap. I am going to focus on fixing the highlighted issues before implementing any new fuzzers, if that makes sense :) 

To address some of your comments above:
- The new fuzz targets were chosen to cover most of the `liblzma` common use cases from the code of XZ utils (i.e. we expanded the tests to cover the decoders and encoders used by the CLI utilities) 
- I completely agree that the fuzz targets' code can be reduced via templates and shared code. Would you like to simply move the common functionality into a separate header file, or to generate the fuzzers' code dynamically by replacing the lines in a template file as well? 
",positive,0.8434728011488914
mvatsyk-lsg,Jia Tan,pr_73.csv,"Apart from the possible re-addition of `options` files with `max_len` options back to the pull request, everything is ready for your review @JiaT75 ! ",positive,0.6764031699858606
mvatsyk-lsg,Jia Tan,pr_73.csv,"
Thank you for the review! I've reverted the changes and added the `max_len=4096` to all fuzzer options. ",positive,0.9534806383308023
mvatsyk-lsg,Jia Tan,pr_73.csv,"@JiaT75 @Larhzu thank you both for your time and effort to merge this pull request! A couple of updates on my side:

- I have removed all of the extra fuzz targets deemed unnecessary from this pull request
- I have also been trying to figure out the exact time and resource limits in place on the OSS Fuzz's side of the setup by digging through their source code. There are many timeout options in place, and I am not really sure about their purpose. However, I at least found that the fuzzers are run with the `-max_total_time=10` [(10 seconds) argument](https://github.com/google/oss-fuzz/blob/1e6abbd967b8a4e797c204b546d2039fb6e00a1c/infra/helper.py#L420) during the generation of an introspector report (the same type of the report that is [publicly available for your project](https://storage.googleapis.com/oss-fuzz-introspector/xz/inspector-report/20231114/fuzz_report.html)).

Just to be sure, I have also emailed one of the OSS Fuzz maintainers to get the answer from them. I will follow up on this discussion once I receive a reply",positive,0.4612538665533066
mvatsyk-lsg,Jia Tan,pr_73.csv,@JiaT75 done! ,positive,0.5767158519010991
mvatsyk-lsg,Jia Tan,pr_73.csv,"@JiaT75 the changes look good to me! I have also updated the pull request to the oss-fuzz repo. To test the new fuzzing setup locally, you can run the following commands on your machine:

```bash
# clone my fork of the oss-fuzz repo with pull request changes
git clone https://github.com/mvatsyk-lsg/oss-fuzz
cd oss-fuzz/

# update the Dockerfile to clone the oss_fuzz branch specifically
sed -i 's/git clone /git clone -b oss_fuzz /' projects/xz/Dockerfile

# build project image
python3 infra/helper.py build_image 'xz'

# generate introspector report 
python3 infra/helper.py introspector 'xz'
```",positive,0.9799890372669324
mvatsyk-lsg,Jia Tan,pr_73.csv,"@JiaT75 I've addressed your comments and tested the new Makefile and fuzz targets' code on a local setup. They seem to compile and work just fine. A quick question: should I go back and edit the description of all commits before the review, or will you be making a squash during the merge?",neutral,0.0742520117200911
mvatsyk-lsg,Jia Tan,pr_73.csv,"Okay, @JiaT75, I've rebased the pull request. Does the commit history look good to you?",neutral,0.1329124365001917
mvatsyk-lsg,Jia Tan,pr_73.csv,"A follow up on the redundant fuzzers: I ran the setup without them, and the coverage difference is indeed negligible. I am removing them from the pull request",negative,-0.9570346267428249
mvatsyk-lsg,Jia Tan,pr_73.csv,"Also, I am now questioning whether the addition of `.lzma_raw` files is needed, since the corresponding fuzzers were removed from the pull request",negative,-0.6954782507382333
