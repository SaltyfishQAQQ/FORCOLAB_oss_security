timestamp,from,to,body,title,msg_file
"Tue, 22 Nov 2022 09:52:04 -0800",John Paul Adrian Glaubitz,,"
Hello!

Since recently, several packages started to fail to build on Debian unstable 
ia64
when linking against liblzma. There error was always the same and indicates a 
problem
with the symbols exported by liblzma:


[ 36%] Linking CXX shared module ha_archive.so
cd /<<PKGBUILDDIR>>/builddir/storage/archive && /usr/bin/cmake -E 
cmake_link_script CMakeFiles/archive.dir/link.txt --verbose=1
/usr/bin/c++ -fPIC -g -O2 -ffile-prefix-map=/<<PKGBUILDDIR>>=. 
-specs=/usr/share/dpkg/pie-compile.specs -Wformat -Werror=format-security -Wdate-time 
-D_FORTIFY_SOURCE=2 -Wdate-time -D_FORTIFY_SOURCE=2 -pie -fPIC -fstack-protector 
--param=ssp-buffer-size=4 -O2 -g -static-libgcc -fno-omit-frame-pointer 
-fno-strict-aliasing -Wno-uninitialized -fno-omit-frame-pointer -D_FORTIFY_SOURCE=2 
-DDBUG_OFF -Wall -Wenum-compare -Wenum-conversion -Wextra -Wformat-security 
-Wmissing-braces -Wno-format-truncation -Wno-init-self -Wno-nonnull-compare 
-Wno-unused-parameter -Woverloaded-virtual -Wnon-virtual-dtor -Wvla -Wwrite-strings 
-specs=/usr/share/dpkg/pie-link.specs -Wl,-z,relro,-z,now -shared  -o ha_archive.so 
CMakeFiles/archive.dir/azio.c.o CMakeFiles/archive.dir/ha_archive.cc.o  
../../libservices/libmysqlservices.a -lz
/usr/bin/ld: warning: -z relro ignored
/usr/bin/ld: ha_archive.so: version node not found for symbol 
lzma_get_progress@@XZ_5.2
/usr/bin/ld: failed to set dynamic section sizes: bad value
collect2: error: ld returned 1 exit status
make[4]: *** [storage/archive/CMakeFiles/archive.dir/build.make:118: 
storage/archive/ha_archive.so] Error 1
make[4]: Leaving directory '/<<PKGBUILDDIR>>/builddir'
make[3]: *** [CMakeFiles/Makefile2:4913: 
storage/archive/CMakeFiles/archive.dir/all] Error 2

Upon closer inspection, I noticed that the change 913ddc5 looked very 
suspicious and indeed
reverting the following change fixes the issue so that linking against liblzma 
works again
on Debian unstable ia64:

commit 913ddc5572b9455fa0cf299be2e35c708840e922
Author: Lasse Collin <lasse.col...@tukaani.org>
Date:   Sun Sep 4 23:23:00 2022 +0300

    liblzma: Vaccinate against an ill patch from RHEL/CentOS 7.

The relevant bug report in Debian is #1024516 [2].

Does anyone have a clue why this particular change may have broken the linking 
on ia64?

Thanks,
Adrian


[1] 
https://buildd.debian.org/status/fetch.php?pkg=mariadb-10.6&arch=ia64&ver=1%3A10.6.11-1&stamp=1669022458&raw=0
[2] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1024516


--
 .''`.  John Paul Adrian Glaubitz
: :' :  Debian Developer
`. `'   Physicist
  `-    GPG: 62FF 8A75 84E0 2956 9546  0006 7426 3B37 F5B5 F913
",[xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00610.html
"Tue, 22 Nov 2022 12:17:05 -0800",Sebastian Andrzej Siewior,John Paul Adrian Glaubitz,"On 2022-11-22 18:51:49 [+0100], John Paul Adrian Glaubitz wrote:
Hi,



I'm not sure if this an ia64 issue or something else is missing. Looking
at the symbols:

| bigeasy@yttrium:~$ readelf -W --dyn-syms 
/lib/ia64-linux-gnu/liblzma.so.5|grep lzma_get_progress
|    160: 0000000000007480   208 FUNC    GLOBAL DEFAULT   12 
lzma_get_progress@@XZ_5.2
|    161: 0000000000007480   208 FUNC    GLOBAL DEFAULT   12 
lzma_get_progress@XZ_5.2.2
| bigeasy@yttrium:~$ readelf -W --dyn-syms /usr/bin/xz|grep progress
|     45: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND 
lzma_get_progress@XZ_5.2 (8)

The @@ thingy is used in the library to mark the default symbol. So
liblzma provides two lzma_get_progress and default is XZ_5.2. The XZ
binary picked it up properly. Looking around in your build:

| bigeasy@yttrium:~$ readelf -W --dyn-syms 
../glaubitz/mariadb-10.6/mariadb-10.6-10.6.11/builddir/client/mariadb-conv 
|grep lzma_get_progress
|    812: 000000000011c140   208 FUNC    GLOBAL DEFAULT   14 
lzma_get_progress@@XZ_5.2
|    813: 000000000011c140   208 FUNC    GLOBAL DEFAULT   14 
lzma_get_progress@XZ_5.2.2

This looks like it is staticaly linked against liblzma. I didn't find
lzma_get_progress anywhere else. So it looks like this function isn't
used by mariadb itself but appears due to static linking somewhere and
asks for trouble. I didn't find any reference to lzma_get_progress in
/lib/ia64-linux-gnu/libgcc_s.so.1, /lib/ia64-linux-gnu/libz.so.1.2.13,
ha_archive.cc.o or libmysqlservices.a. This seems to be all that is
passed to the compiler for linking.

Sebastian
",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00611.html
"Tue, 22 Nov 2022 15:11:34 -0800",Lasse Collin,Sebastian Andrzej Siewior,"On 2022-11-22 Sebastian Andrzej Siewior wrote:


The shared libs in Debian seem to be correct as you managed to answer
right before my email. Thanks! :-) But the above comment made me look at
Debian's liblzma.a. The output of

    readelf -aW usr/lib/ia64-linux-gnu/liblzma.a

includes the following two lines in both 5.2.7 and 5.3.4alpha:

    Unwind section '.IA_64.unwind' at offset 0x2000 contains 15 entries:
    [...]
    <lzma_get_progress@XZ_5.2.2>: [0x1980-0x1a50], info at +0x108

There are no older versions on the mirror so I didn't check what
pre-5.2.7 would have. But .IA_64.unwind is a ia64-specific thing.
Many other functions are listed in those .IA_64.unwind
sections too but lzma_get_progress is the only one that has ""@XZ""
as part of the function name.

I don't understand these details but I wanted let you know anyway in
case it isn't a coincidence why lzma_get_progress appears in a special
form in both liblzma.a and in the linker error messages. The error has
@@XZ_5.2 (which even 5.2.0 has in shared liblzma.so.5) but here the
static lib has @XZ_5.2.2 which exists solely for CentOS 7 compatibility.

lzma_cputhreads doesn't show the same special behavior in ia64 liblzma.a
even though lzma_cputhreads is handled exactly like lzma_get_progress in
the liblzma C code and linker script.

-- 
Lasse Collin
",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00613.html
"Wed, 23 Nov 2022 00:22:59 -0800",John Paul Adrian Glaubitz,Lasse Collin,"
Hello Lasse!

On 11/23/22 00:11, Lasse Collin wrote:

On 2022-11-22 Sebastian Andrzej Siewior wrote:

This looks like it is staticaly linked against liblzma.


The shared libs in Debian seem to be correct as you managed to answer
right before my email. Thanks! :-) But the above comment made me look at
Debian's liblzma.a. The output of

     readelf -aW usr/lib/ia64-linux-gnu/liblzma.a

includes the following two lines in both 5.2.7 and 5.3.4alpha:

     Unwind section '.IA_64.unwind' at offset 0x2000 contains 15 entries:
     [...]
     <lzma_get_progress@XZ_5.2.2>: [0x1980-0x1a50], info at +0x108


I guess the additional unwind section breaks your workaround, so the best might
be to just disable this workaround on ia64 using the configure flag, no?


There are no older versions on the mirror so I didn't check what
pre-5.2.7 would have. But .IA_64.unwind is a ia64-specific thing.


Older versions are available through Debian Snapshots:


http://snapshot.debian.org/package/xz-utils/



Many other functions are listed in those .IA_64.unwind
sections too but lzma_get_progress is the only one that has ""@XZ""
as part of the function name.


Hmm, that definitely seems the problem. Could it be that the symbols
that are exported on ia64 need some additional naming?


I don't understand these details but I wanted let you know anyway in
case it isn't a coincidence why lzma_get_progress appears in a special
form in both liblzma.a and in the linker error messages. The error has
@@XZ_5.2 (which even 5.2.0 has in shared liblzma.so.5) but here the
static lib has @XZ_5.2.2 which exists solely for CentOS 7 compatibility.


I think we can waive for CentOS 7 compatibility on Debian unstable ia64 ;-).

Let me CC Sergei Trofimovich from Gentoo who has a more in-depth knowledge
on the ia64 architecture.

Adrian

--
 .''`.  John Paul Adrian Glaubitz
: :' :  Debian Developer
`. `'   Physicist
  `-    GPG: 62FF 8A75 84E0 2956 9546  0006 7426 3B37 F5B5 F913

",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00614.html
"Wed, 23 Nov 2022 00:42:42 -0800",John Paul Adrian Glaubitz,Lasse Collin,"
(resent because I got Sergei's email address wrong)

Hello Lasse!


On 11/23/22 00:11, Lasse Collin wrote:

On 2022-11-22 Sebastian Andrzej Siewior wrote:

This looks like it is staticaly linked against liblzma.


The shared libs in Debian seem to be correct as you managed to answer
right before my email. Thanks! ðŸ˜„ But the above comment made me look at
Debian's liblzma.a. The output of

     readelf -aW usr/lib/ia64-linux-gnu/liblzma.a

includes the following two lines in both 5.2.7 and 5.3.4alpha:

     Unwind section '.IA_64.unwind' at offset 0x2000 contains 15 entries:
     [...]
     <lzma_get_progress@XZ_5.2.2>: [0x1980-0x1a50], info at +0x108


I guess the additional unwind section breaks your workaround, so the best might
be to just disable this workaround on ia64 using the configure flag, no?


There are no older versions on the mirror so I didn't check what
pre-5.2.7 would have. But .IA_64.unwind is a ia64-specific thing.


Older versions are available through Debian Snapshots:


http://snapshot.debian.org/package/xz-utils/



Many other functions are listed in those .IA_64.unwind
sections too but lzma_get_progress is the only one that has ""@XZ""
as part of the function name.


Hmm, that definitely seems the problem. Could it be that the symbols
that are exported on ia64 need some additional naming?


I don't understand these details but I wanted let you know anyway in
case it isn't a coincidence why lzma_get_progress appears in a special
form in both liblzma.a and in the linker error messages. The error has
@@XZ_5.2 (which even 5.2.0 has in shared liblzma.so.5) but here the
static lib has @XZ_5.2.2 which exists solely for CentOS 7 compatibility.


I think we can waive for CentOS 7 compatibility on Debian unstable ia64 ðŸ˜‰.

Let me CC Sergei Trofimovich from Gentoo who has a more in-depth knowledge
on the ia64 architecture.

Adrian

--
 .''`.  John Paul Adrian Glaubitz
: :' :  Debian Developer
`. `'   Physicist
  `-    GPG: 62FF 8A75 84E0 2956 9546  0006 7426 3B37 F5B5 F913
",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00615.html
"Wed, 23 Nov 2022 03:31:56 -0800",Lasse Collin,John Paul Adrian Glaubitz,"On 2022-11-23 John Paul Adrian Glaubitz wrote:


There currently is no configure option to only disable the CentOS 7
workaround symbols. They are enabled if $host_os matches linux* and
--disable-symbol-versions wasn't used. Disabling symbol versions from
liblzma.so.5 will cause problems as they have been used since 5.2.0 and
many programs and libraries will expect to find XZ_5.0 and XZ_5.2.

Having the symbol versions in a static library doesn't make much sense
though. Perhaps this is a bug in XZ Utils. As a test, the static
liblzma.a could be built without symbol versions with --disable-shared
--disable-symbol-versions:

(1) Does this make the problem go away?

(2) Do the failing builds even require that liblzma.a is present
    on the system?

I don't now how to avoid symvers in a static library as, to my
understanding, GNU Libtool doesn't add any -DBUILDING_SHARED_LIBRARY
kind of flag which would allow using a #ifdef to know when to use the
symbol versions. Libtool does add -DDLL_EXPORT when building a shared
library on Windows but that's not useful here.

(Switching to another build system would avoid some other Libtool
problems too like wrong shared library versioning on some OSes. However,
Autotools-based build system is able to produce usable xz on quite a
few less-common systems that some other build systems don't support.)

A workaround to this workaround could be to disable the CentOS 7
symbols on ia64 by default. Adding an explicit configure option is
possible too, if needed. But the first step should be to understand
what is going on since the same problem could appear in the future if
symbol versions are used for providing compatibility with an actual ABI
change (hopefully not needed but still).


liblzma.a in liblzma-dev_5.2.5-2.1_ia64.deb doesn't have any ""@XZ"" in
it which is expected. This looks normal:

    <lzma_get_progress>: [0x18c0-0x1990], info at +0x100


It seems weird why only one symbol is affected. Perhaps it's a bug in
the toolchain creating liblzma.a. However, perhaps the main bug is that
XZ Utils build puts symbol versions into a static liblzma. :-(


There is no official CentOS 7 for ia64 but that isn't the whole story
as the broken patch has been used elsewhere too. Not having those extra
symbols would still be fine in practice. :-)

-- 
Lasse Collin
",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00616.html
"Wed, 23 Nov 2022 05:33:51 -0800",John Paul Adrian Glaubitz,Lasse Collin,"
Hi Lasse!

On 11/23/22 12:31, Lasse Collin wrote:

On 2022-11-23 John Paul Adrian Glaubitz wrote:

I guess the additional unwind section breaks your workaround, so the
best might be to just disable this workaround on ia64 using the
configure flag, no?


There currently is no configure option to only disable the CentOS 7
workaround symbols. They are enabled if $host_os matches linux* and
--disable-symbol-versions wasn't used. Disabling symbol versions from
liblzma.so.5 will cause problems as they have been used since 5.2.0 and
many programs and libraries will expect to find XZ_5.0 and XZ_5.2.

Having the symbol versions in a static library doesn't make much sense
though. Perhaps this is a bug in XZ Utils. As a test, the static
liblzma.a could be built without symbol versions with --disable-shared
--disable-symbol-versions:

(1) Does this make the problem go away?


Yes, that fixes the linker problem for me. At least in the case of mariadb-10.6.

So, for now, we should build the static library with 
""--disable-symbol-versions"".

@Sebastian: Can you do that? Does anything speak against that?

Adrian

--
 .''`.  John Paul Adrian Glaubitz
: :' :  Debian Developer
`. `'   Physicist
  `-    GPG: 62FF 8A75 84E0 2956 9546  0006 7426 3B37 F5B5 F913

",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00617.html
"Wed, 23 Nov 2022 06:09:10 -0800",Lasse Collin,John Paul Adrian Glaubitz,"On 2022-11-23 John Paul Adrian Glaubitz wrote:


Why does it want static liblzma.a in the first place? It sounds weird
to require rebuilding of mariadb-10.6 every time liblzma is updated.

Can it build against liblzma.so if liblzma.a isn't available?

It is fine to build *static* liblzma with --disable-symbol-versions on
all archs. Debian-specific workaround is fine in the short term but
this should be fixed upstream. One method would be to disable the extra
symbols on ia64 but that is not a real fix. Perhaps it's not really
possible as long as the main build system is Autotools, I don't
currently know.

I'm still curious why exactly one symbol (lzma_get_progress) looks
special in the readelf output. For some reason no other symbols with
the symver declarations are there. Does it happen because of something
in XZ Utils or is it weird behavior in the toolchain that creates the
static lib.

One can wonder if it was a mistake to try to clean up the issues that
started from the RHEL/CentOS 7 patch since now it has created a new
problem. On the other hand, the same could have happened if this kind of
symbol versioning had been done to avoid bumping the soname (which
hopefully will never happen though).

-- 
Lasse Collin
",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00618.html
"Wed, 23 Nov 2022 12:40:13 -0800",John Paul Adrian Glaubitz,Lasse Collin,"
Hi!

On 11/23/22 21:12, Sebastian Andrzej Siewior wrote:

Can it build against liblzma.so if liblzma.a isn't available?


mariadb does not depend on liblzma-dev for building. The build log says:
| -- The following features have been disabled:
| * INNODB_LZMA, LZMA compression in the InnoDB storage engine

The amd64 buildd has liblzma5 installed - not liblzma-dev. So it can't
compile against it nor link statically. The ia64 buildd however has
liblzma-dev installed so the options are there. I *think* only the
testsuite (or whatever these few binaries were) link statically against
it and not the software package as a whole.

Adrian, could you please remove the -dev package from the buildd? Then
it should work (eitherway I'm going to disable the versions for static
builds).


The chroots are regularly regenerated by a cron job using debootstrap.

We don't have any particular setting to explicitly pull in liblzma-dev
on ia64, see [1]. So, I have honestly no clue why it was installed.

One could run

        # debootstrap --foreign --no-check-gpg --arch=ia64 --variant=buildd

and see if that creates a chroot with liblzma-dev pre-installed.

Let me try a native run on yttrium.

Adrian


[1] https://salsa.debian.org/debian-ports-team/dsa-puppet


--
 .''`.  John Paul Adrian Glaubitz
: :' :  Debian Developer
`. `'   Physicist
  `-    GPG: 62FF 8A75 84E0 2956 9546  0006 7426 3B37 F5B5 F913

",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00624.html
"Wed, 23 Nov 2022 13:17:09 -0800",John Paul Adrian Glaubitz,Lasse Collin,"
Hi Sebastian!

On 11/23/22 21:40, John Paul Adrian Glaubitz wrote:

Adrian, could you please remove the -dev package from the buildd? Then
it should work (eitherway I'm going to disable the versions for static
builds).


The chroots are regularly regenerated by a cron job using debootstrap.

We don't have any particular setting to explicitly pull in liblzma-dev
on ia64, see [1]. So, I have honestly no clue why it was installed.


It's pulled in by libunwind-dev which is AFAIK always installed when building
C/C++ code on ia64. The external libunwind library is a hard requirement on
ia64.

Adrian

--
 .''`.  John Paul Adrian Glaubitz
: :' :  Debian Developer
`. `'   Physicist
  `-    GPG: 62FF 8A75 84E0 2956 9546  0006 7426 3B37 F5B5 F913

",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00627.html
"Wed, 23 Nov 2022 12:58:23 -0800",Sebastian Andrzej Siewior,Lasse Collin,"On 2022-11-23 21:12:53 [+0100], To Lasse Collin wrote:


Just for the protocol: The mariadb build on amd64 with liblzma-dev
installed passed. So this was not itâ€¦

Sebastian
",Re: [xz-devel] RHEL7 ABI patch (913ddc5) breaks linking on ia64,msg00626.html
