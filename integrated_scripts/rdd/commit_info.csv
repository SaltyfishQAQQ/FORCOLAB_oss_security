sha,author_name,committer_name,author_date,committer_date,commit_message
9351592710e0df3238b09d39c545a643c50ac88f,Lasse Collin,Lasse Collin,2025-02-22 14:04:58,2025-02-22 14:04:58,Update THANKS
9023be7831faca2f28def55e16c39e3a42e1e262,Lasse Collin,Lasse Collin,2025-02-19 14:33:52,2025-02-19 14:33:52,Translations: Update the Croatian translation
2eaf242c56e8c65db83d48b018fa44aeafeb33a5,Lasse Collin,Lasse Collin,2025-02-17 19:46:15,2025-02-17 19:48:24,"Build: Fix out-of-tree builds when using the replacement getopt_long

Nowaways $(top_builddir)/lib/getopt.h depends on headers in
$(top_srcdir)/lib, so both have to be in the include path.
CMake-based build already did this.

Fixes: 7e884c00d0093c38339f17fb1d280eec493f42ca"
41322b2c60cd2c67a1053cb40d27e573420185b7,Lasse Collin,Lasse Collin,2025-02-17 16:25:52,2025-02-17 16:25:52,m4/getopt.m4: Remove an outdated comment
03c23a4952bce1b50a1d213ca2d1c15acd76a489,Lasse Collin,Lasse Collin,2025-02-17 16:11:58,2025-02-17 16:11:58,"Build: Allow forcing the use of the replacement getopt_long

Now one can pass gl_replace_getopt=yes to configure to force the use
of GNU getopt_long from the lib directory. This only checks that the
value of gl_replace_getopt is non-empty, so one cannot force the
replacement to be disabled.

Closes: https://github.com/tukaani-project/xz/pull/166"
c23b837d15960ecc0d537f0260f389904e1e7f02,Lasse Collin,Lasse Collin,2025-02-17 16:11:42,2025-02-17 16:11:42,Update THANKS
2672a38f1159babf9ba3cca429f644bb823a8bdd,Lasse Collin,Lasse Collin,2025-02-12 17:23:31,2025-02-12 17:23:31,Update THANKS
4fdcbfaf3f222299747c6a815762a74eeb1b0b23,Lasse Collin,Lasse Collin,2025-02-11 10:13:41,2025-02-11 10:13:41,Update THANKS
0d553568f1af9a35779ecac41392a6c871786930,Lasse Collin,Lasse Collin,2025-02-08 09:39:08,2025-02-08 09:39:08,Translations: Update the Polish translation
9f165076aebb3b5115d2b6520529db8fa11a6bdd,Lasse Collin,Lasse Collin,2025-02-07 17:12:03,2025-02-07 17:13:43,Docs: Update TODO a little
f5aa292c534f87b9dd588e667d1c65ed31e5f289,Lasse Collin,Lasse Collin,2025-02-07 16:50:56,2025-02-07 16:50:56,"Add researcher credits of CVE-2022-1271 and CVE-2024-47611 to THANKS

These are specific phrases that were included in the advisories and
NEWS. It's nice to have them in THANKS as well."
7cf463b5add70e3fb48a10de3965c8beb6c01ad9,Lasse Collin,Lasse Collin,2025-02-07 16:43:00,2025-02-07 16:43:00,Update THANKS
6b7fe7e27b77038592e2c2e31df955059dda7d1d,Lasse Collin,Lasse Collin,2025-02-04 12:12:46,2025-02-04 17:37:32,"Docs: Update the ""Translations"" section in README

Make it clearer that translations cannot be accepted if they don't
come via the Translation Project.

Column headings have been handled automatically for years and now --help
is autowrapped too, so the related instructions can be removed."
2c7aee94936babf84b61b55420e503a0b2629ec1,Lasse Collin,Lasse Collin,2025-02-04 11:23:53,2025-02-04 17:37:31,"debug/translations.bash: Revise a little

Make it work for out-of-tree builds without requiring one to specify
the location of the xz executable.

Add xz --filters-help.

Make the output shorter by reducing the number of xz -lvv test files.

Show the value of LANGUAGE environment variable.

Show the xz.git version using git describe --abbrev=8 instead of =4."
c6b15e7045209002bbbf4979c48072af01c20d8d,Lasse Collin,Lasse Collin,2025-02-04 11:20:52,2025-02-04 17:37:31,"Build: Use ""git describe --abbrev=8"" in snapshot tarball names

8 is more likely to be reproducible than the old 4 without being
excessively long for a small repository like this."
0ce97987c5b27cfb6f98984e5fd7477880e0cf33,Lasse Collin,Lasse Collin,2025-02-04 17:37:17,2025-02-04 17:37:31,Update THANKS
353c33355cb12e5016d49052fd1e90d15568aa37,Lasse Collin,Lasse Collin,2025-02-03 14:29:31,2025-02-03 14:58:53,Translations: Update the Serbian translation
887dc281885052bced32b3aa309506ea58a2e78e,Lasse Collin,Lasse Collin,2025-02-03 14:15:38,2025-02-03 14:55:39,"Translations: Update Chinese (traditional) translation

Since there are no spaces between words, the unsophisticated automatic
word wrapping code needs some help. Compared to the version in the
Translation Project, I added a few \t characters which the word
wrapping code interprets as zero width spaces (hopefully they are
placed correctly). These edits can be seen with this command:

    grep -v ^# po/zh_TW.po | grep --color -F '\t'"
0f1454cf5f460a4095f47f8f73f5a290e9777d7f,Lasse Collin,Lasse Collin,2025-02-03 14:12:44,2025-02-03 14:12:44,Update THANKS
23ea031820086d302a213be005a091df763b8a7b,Lasse Collin,Lasse Collin,2025-02-02 12:15:07,2025-02-02 12:30:19,"Build: Update posix-shell.m4 from Gnulib

Tabs have been converted to spaces and a ""serial"" number has been
added. The previous version was from 2008/2009. There are no functional
changes since then but now it's clearer that the copy in XZ Utils
isn't outdated.

The new file was picked from the Gnulib commit
81a4c1e3b7692e95c0806d948cbab9148ad85ef2. A later commit adds
a warranty disclaimer to the license, which obviously is fine,
but I didn't find a SPDX license identifier for the new license,
so for simplicity I used the earlier commit."
84c33c0384aa4604ff7956f2fae6f83ea60ba96b,Lasse Collin,Lasse Collin,2025-02-02 10:51:03,2025-02-02 12:30:19,"Build: Check for -fsanitize= also in $CC

People may put -fsanitize in CC instead of CFLAGS so check both.
Landlock sandbox isn't compatible with sanitizers so it's nice
to catch the incompatible options at configure time.

Don't attempt to do the same in CMakeLists.txt; the check for
CMAKE_C_FLAGS / CFLAGS shall be enough there. The extra flags from
the CC environment variable go into the undocumented internal variable
CMAKE_C_COMPILER_ARG1 (all flags from CC go into that same variable).
Peeking the internal variable merely for improved diagnostics isn't
worth it.

Fixes: 88588b1246d8c26ffbc138b3e5c413c5f14c3179"
a7304ea4a7daede9789a8fe422b714e372737120,Lasse Collin,Lasse Collin,2023-09-26 16:11:20,2025-02-02 12:30:19,Build: Remove the FIXME about -Werror checks
1780bba74075da5e7764615bd323e95e19057dee,Lasse Collin,Lasse Collin,2023-09-26 16:10:51,2025-02-02 12:30:19,"Build: If using a GCC compatible compiler, ensure that -Werror works

The check can be skipped by passing SKIP_WERROR_CHECK=yes to configure.
It won't be documented anywhere else than in the error message.

Ways to test:

    ./configure CC=gcc CFLAGS=-Wunused-macros
    ./configure CC=clang CFLAGS=-Weverything
    ./configure CC=clang CFLAGS=-Weverything SKIP_WERROR_CHECK=yes"
3aca2daefbdedd7cc0fb75ddde6b714273b1cc1d,Lasse Collin,Lasse Collin,2025-02-02 12:30:15,2025-02-02 12:30:15,Update THANKS
186ff78ab40ceb07cde139506cab42a927ca99d2,Lasse Collin,Lasse Collin,2025-02-01 10:49:09,2025-02-01 10:49:09,Translations: Update Romanian translation
40a8ce3e10747ca5233610cc2cb704fc303c48e4,Lasse Collin,Lasse Collin,2025-01-30 16:16:43,2025-01-30 16:16:43,Translations: Update Korean man page translations
1787f9bd18ea8798d64b636cdefe6d0fda9b8f72,Lasse Collin,Lasse Collin,2025-01-30 16:15:52,2025-01-30 16:15:52,Translations: Add Italian man page translations
9b9182e561787a811fc0178489589f28c3e0174c,Lasse Collin,Lasse Collin,2025-01-29 20:18:29,2025-01-29 20:18:29,Translations: Update the Finnish translation
7d73ff7a9d8eab6270f0b1ff7d10c0aa6f5ba53f,Lasse Collin,Lasse Collin,2025-01-29 18:50:03,2025-01-29 18:59:53,"lzmainfo: Use tuklib_mbstr_wrap for --help text

Some languages have so long strings that they need to be wrapped."
c56eb4707627d700695813fccdddd1483eac4f21,Lasse Collin,Lasse Collin,2025-01-29 18:00:06,2025-01-29 18:59:53,Translations: Update the Croatian translation
69f4aec0a2442ab81f9ab66e5871a6546aefb0fc,Lasse Collin,Lasse Collin,2025-01-29 17:56:01,2025-01-29 18:59:53,Translations: Update the Finnish translation
d49dde33cf5f488bb38b1f57e172c4e3343fb383,Lasse Collin,Lasse Collin,2025-01-29 17:55:27,2025-01-29 18:59:53,Translations: Update the German man page translations
23b99fc4a1f35bec5d63ffd02b14cacbdce9fe3c,Lasse Collin,Lasse Collin,2025-01-29 17:55:17,2025-01-29 18:59:52,Translations: Update the German translation
7edab2bde0606b42229d9c04fe664069e38de3fb,Lasse Collin,Lasse Collin,2025-01-29 17:55:05,2025-01-29 18:59:52,Translations: Update the Turkish translation
fac4d0fa5277d7a1f621707621ee9516f0bdbac5,Lasse Collin,Lasse Collin,2025-01-29 17:54:36,2025-01-29 18:59:52,Translations: Add the Dutch translation
abe5092f24b55dde9f7f78fac1bf810bce173273,Lasse Collin,Lasse Collin,2025-01-29 17:53:50,2025-01-29 18:59:52,Translations: Update the Georgian translation
b97b23c78d8100eec363c3e999c511560366d347,Lasse Collin,Lasse Collin,2025-01-29 17:53:21,2025-01-29 18:59:52,Translations: Update the Spanish translation
c68318cb49e0562bd22e88724ce85e76c6789a3a,Lasse Collin,Lasse Collin,2025-01-29 17:53:06,2025-01-29 18:59:52,Translations: Update the Korean translation
153ee17f635962a474499f786ea1de1e1a2bb276,Lasse Collin,Lasse Collin,2025-01-29 17:52:42,2025-01-29 18:59:51,Translations: Update the Romanian man page translations
6ed308197e1f9d6c7a5cfe5aae301e75544017c4,Lasse Collin,Lasse Collin,2025-01-29 17:51:59,2025-01-29 18:59:51,Translations: Update the Romanian translation
06028803e19219f642aa9abddd3525c43594ec6c,Lasse Collin,Lasse Collin,2025-01-29 17:50:50,2025-01-29 18:59:51,Translations: Update the Ukrainian man page translations
8cbaf896a65a53c1d1e7e2ffc80d6ea216b1e8df,Lasse Collin,Lasse Collin,2025-01-29 17:50:26,2025-01-29 18:59:51,Translations: Update the Ukrainian translation
81c352907b8048b97d9868947026701a49f377ef,Lasse Collin,Lasse Collin,2025-01-29 17:48:43,2025-01-29 18:59:51,Translations: Update the Swedish translation
999ce263718a52ba74245c3e2a416ab11494d1b1,Lasse Collin,Lasse Collin,2025-01-28 14:33:32,2025-01-29 18:59:51,tuklib_physmem: Clean up disabled code
4d7e7c9d94f7a5ad4931a5bbd6ed9d00173fa1ab,Lasse Collin,Lasse Collin,2025-01-28 14:28:18,2025-01-29 18:59:44,"Windows: Avoid an error message on broken pipe

Also make xz not process more input files after a broken pipe has
been detected. This matches the behavior on POSIX. If all files
are being written to standard output, trying with the next file is
pointless when it's known that standard output won't accept more data.

xzdec already stopped after the first error. It does so with all
errors, so it differs from xz:

    $ xz -dc not_found_1 not_found_2
    xz: not_found_1: No such file or directory
    xz: not_found_2: No such file or directory

    $ xzdec not_found_1 not_found_2
    xzdec: not_found_1: No such file or directory

Reported-by: Vincent Torri"
95b638480aa8203e547c709c651f421c22db1718,Lasse Collin,Lasse Collin,2025-01-23 17:59:17,2025-01-23 17:59:17,doc/SHA256SUMS: Add 5.6.4 and 5.7.1alpha
cdae0df31e4c2dfb1e885941cd1998e5a2b6e39d,Lasse Collin,Lasse Collin,2025-01-23 09:50:42,2025-01-23 09:50:47,Bump version and soname for 5.7.1alpha
4d2af2c43bae25ef4ef9cd88304471d4859aa322,Lasse Collin,Lasse Collin,2025-01-23 09:48:43,2025-01-23 09:48:51,Translations: Run po4a/update-po
ff0b825505e60e21b32e33c42f551c8f34ba393f,Lasse Collin,Lasse Collin,2025-01-23 09:40:46,2025-01-23 09:42:36,Add NEWS for 5.7.1alpha
f6cd3e3bfc8d1f5a76dd55170968bf4582b95baf,Lasse Collin,Lasse Collin,2025-01-23 09:40:46,2025-01-23 09:42:23,Add NEWS for 5.6.4
b3af3297e4d6cf0eafb48155aa97bb06c82a9228,Lasse Collin,Lasse Collin,2025-01-23 09:40:46,2025-01-23 09:40:58,NEWS: The security fix in 5.6.3 is known as CVE-2024-47611
a04b9dd0c7c74fabd8c393d2dc68a221276d6e29,Lasse Collin,Lasse Collin,2025-01-22 14:55:09,2025-01-22 14:55:14,"windows/build.bash: Fix error message

Fixes: 1ee716f74085223c8fbcae1d5a384e6bf53c0f6a"
4eae859ae8ad7072eaa74aeaee79a2c3c12c55cb,Lasse Collin,Lasse Collin,2025-01-22 13:03:55,2025-01-22 13:39:05,"Windows: Disable MinGW-w64's stdio functions in size-optimized builds

This only affects builds with UCRT. With legacy MSVCRT, the replacement
functions are always enabled.

Omitting the MinGW-w64 replacements saves over 20 KiB per executable.
The downside is that --enable-small or XZ_SMALL=ON disables thousand
separator support in xz messages. If someone is OK with the slower
speed of slightly smaller builds, lack of thousand separators won't
matter.

Don't override __USE_MINGW_ANSI_STDIO if it is already defined (via
CPPFLAGS or such method)."
a831bc185bdd44c06847eae8df2d35cc281f65da,Lasse Collin,Lasse Collin,2025-01-20 14:44:27,2025-01-20 14:44:27,"liblzma: Add raw ARM64, RISC-V, and x86 BCJ filter APIs

Put them behind the LZMA_UNSTABLE macro for now.

These low-level special APIs might become useful in erofs-utils."
6f5cdd4534faf7db4b6c123651d6a606bc59b98c,Lasse Collin,Lasse Collin,2025-01-20 14:31:49,2025-01-20 14:31:49,"xz: Unify a few strings with liblzma

Avoid having both ""%s: foo"" and ""foo"" as translatable strings
so that translators don't need to handle it twice."
713fdaa8b06a83f18b06811aba7b9bd7b7cbf1cb,Lasse Collin,Lasse Collin,2025-01-20 14:31:49,2025-01-20 14:31:49,"xz: Translate error messages from lzma_str_to_filters()

liblzma doesn't use gettext but the messages are included in xz.pot,
so xz can translate the messages."
f2e2b267cab8d7aa0b0a58c325546ee5070c0028,Lasse Collin,Lasse Collin,2025-01-20 14:31:49,2025-01-20 14:31:49,liblzma: Mark string conversion messages as translatable
f49d7413d9a0d480ded6d448c1ef7475ae6cd1c9,Lasse Collin,Lasse Collin,2025-01-20 14:31:35,2025-01-20 14:31:35,liblzma: Tweak a few error messages in lzma_str_to_filters()
da359c360e986b21cd8d7b888c6a80f56b9d49c7,Lasse Collin,Lasse Collin,2025-01-19 18:11:54,2025-01-19 18:11:54,Update THANKS
f032373561cefaf07f92ffe3fbc471ec6770456e,Lasse Collin,Lasse Collin,2025-01-19 17:40:32,2025-01-19 17:40:32,Update THANKS
51f038f8cbd5d8a95954c05bfcbbc32f2a313615,Lasse Collin,Lasse Collin,2025-01-13 06:44:58,2025-01-13 06:44:58,"liblzma: memcmplen.h: Use 8-byte method on 64-bit unaligned archs

Previously it was enabled only on x86-64 and ARM64 when also support
for unaligned access was detected or manually enabled at built time.

In the default build configuration, the 8-byte method is now enabled
also on 64-bit RISC-V and 64-bit PowerPC (both endiannesses). It was
reported that on big endian POWER9, encoding time may reduce 12-13 %.

This change only affects builds with GCC and Clang because the code
uses __builtin_ctzll or __builtin_clzll.

Thanks to Marcus Comstedt for testing on POWER9."
96336b0110d47756a9fd2a103fbf0a99e905fbed,Lasse Collin,Lasse Collin,2025-01-12 11:06:17,2025-01-12 11:08:55,Update THANKS
150356207c8d6a3e0af465b676430d19d62f884c,Lasse Collin,Lasse Collin,2025-01-12 10:59:20,2025-01-12 11:08:55,"liblzma: Fix the encoder breakage on big endian ARM64

When the 8-byte method was enabled for ARM64, a check for endianness
wasn't added. This broke the LZMA/LZMA2 encoder. Test suite caught it.

Fixes: cd64dd70d5665b6048829c45772d08606f44672e
Co-authored-by: Marcus Comstedt <marcus@mc.pp.se>"
b01b0958025a2da284b53a583f313f8140636cb5,Lasse Collin,Lasse Collin,2025-01-12 09:04:27,2025-01-12 11:08:55,Windows: Update manifest comments about long UTF-8 filenames
0dfc67d37ebb038be8a9b17b536d1b561d52e81a,Lasse Collin,Lasse Collin,2025-01-12 08:47:58,2025-01-12 11:08:49,"Windows: Update build.bash and its README-Windows.txt to UCRT

While MSVCRT builds are possible, UCRT works better with UTF-8.
A 32-bit build is included still but hopefully it's not actually
needed anymore."
7b3eb2db6c4ba24b5eb438e58ab1ca57e14e59c2,Lasse Collin,Lasse Collin,2025-01-10 11:11:40,2025-01-10 11:19:32,"Translations: Update Serbian translation

I rewrapped a few overlong lines. Those edits aren't in the
Translation Project. Automatic wrapping in the master branch
means that these strings need to be updated soon anyway."
950da11ce09c90412dcbca29689575037640667a,Lasse Collin,Lasse Collin,2025-01-08 17:26:29,2025-01-08 17:29:53,"Build: Use --sort=name in TAR_OPTIONS

Use also LC_COLLATE=C to make the sorting locale-independent.
Sorting makes the file order reproducible."
75d91d6b39ea3e2fae8f027dcec01be2dca9594d,Lasse Collin,Lasse Collin,2025-01-08 17:08:08,2025-01-08 17:20:28,"xz: Workaround broken O_SEARCH in musl

Testing with musl 1.2.5 and Linux 6.12, O_SEARCH doesn't result
in a file descriptor that works with fsync() although it should work.
See the added comment.

The same issue affected gzip --synchronous:

    https://bugs.gnu.org/75405

Thanks to Paul Eggert."
ea92eae122a3ccefa61087f84fd99b417fc9ee3c,Lasse Collin,Lasse Collin,2025-01-07 19:34:33,2025-01-08 17:20:21,"Revert ""xz: O_SEARCH cannot be used for fsync()""

This reverts commit 4014e2479c7b0273f15bd0c9c017c5fe859b0d8f.

POSIX-conforming O_SEARCH should allow fsync()."
4014e2479c7b0273f15bd0c9c017c5fe859b0d8f,Lasse Collin,Lasse Collin,2025-01-05 19:43:11,2025-01-05 19:43:11,"xz: O_SEARCH cannot be used for fsync()

Opening a directory with O_SEARCH results in a file descriptor that can
be used with functions like openat(). Such a file descriptor cannot be
used with fsync(). Use O_RDONLY instead.

In musl, O_SEARCH becomes Linux-specific O_PATH. A file descriptor
from O_PATH doesn't allow fsync().

Seems that it's not possible to fsync() a directory that has write
and search permissions but not read permission.

Fixes: 2a9e91d796d091740489d951fa7780525e4275f1"
ad2b57cb477b753293c25a01fc24c7f84ee523c2,Lasse Collin,Lasse Collin,2025-01-05 18:48:28,2025-01-05 18:51:53,CI: Make ctest show errors from failed tests
c405264c031aceaf68dfd1546d6337afcebd48e5,Lasse Collin,Lasse Collin,2025-01-05 18:14:49,2025-01-05 18:16:09,"tuklib_mbstr_nonprint: Preserve the value of errno

A typical use case is like this:

    printf(""%s: %s\n"", tuklib_mask_nonprint(filename), strerror(errno));

tuklib_mask_nonprint() may call mbrtowc() and malloc() which may modify
errno. If errno isn't preserved, the error message might be wrong if
a compiler decides to call tuklib_mask_nonprint() before strerror().

Fixes: 40e573305535960574404d2eae848b248c95ea7e"
2a9e91d796d091740489d951fa7780525e4275f1,Lasse Collin,Lasse Collin,2025-01-05 18:14:49,2025-01-05 18:16:08,"xz: Use fsync() before deleting the input file, and add --no-sync

xz's default behavior is to delete the input file after successful
compression or decompression (unless writing to standard output).
If the system crashes soon after the deletion, it is possible that
the newly written file has not yet hit the disk while the previous
delete operation might have. In that case neither the original file
nor the written file is available.

Call fsync() on the file. On POSIX systems, sync also the directory
where the file was created.

Add a new option --no-sync which disables fsync() usage. It can avoid
a (possibly significant) performance penalty when processing many
small files. It's fine to use --no-sync when one knows that the files
are easy to recreate or restore after a system crash.

Using fsync() after every flush initiated by --flush-timeout was
considered. It wasn't implemented at least for now.

  - --flush-timeout is typically used when writing to stdout. If stdout
    is a file, xz cannot (portably) sync the directory of the file.
    One would need to create the output file first, sync the directory,
    and then run xz with fsync() enabled.

  - If xz --flush-timeout output goes to a file, it's possible to use
    a separate script to sync the file, for example, once per minute
    while telling xz to flush more frequently.

  - Not supporting syncing with --flush-timeout was simpler.

Portability notes:

  - On systems that lack O_SEARCH (like Linux), ""xz dir/file"" will now
    fail if ""dir"" cannot be opened for reading. If ""dir"" still has
    write and search permissions (like d-wx------ in ""ls -l""),
    previously xz would have been able to compress ""dir/file"" still.
    Now it only works if using --no-sync (or --keep or --stdout).

  - <libgen.h> and dirname() should be available on all POSIX systems,
    and aren't needed on non-POSIX systems.

  - fsync() is available on all POSIX systems. The directory syncing
    could be changed to fdatasync() although at least on ext4 it
    doesn't seem to make a performance difference in xz's usage.
    fdatasync() would need a build system check to support (old)
    special cases, for example, MINIX 3.3.0 doesn't have fdatasync()
    and Solaris 10 needs -lrt.

  - On native Windows, _commit() is used to replace fsync(). Directory
    syncing isn't done and shouldn't be needed. (In Cygwin, fsync() on
    directories is a no-op.)

  - DJGPP has fsync() for files. ;-)

Using fsync() was considered somewhere around 2009 and again in 2016 but
those times the idea was rejected. For comparison, GNU gzip 1.7 (2016)
added the option --synchronous which enables fsync().

Co-authored-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>
Fixes: https://bugs.debian.org/814089
Link: https://www.mail-archive.com/xz-devel@tukaani.org/msg00282.html
Closes: https://github.com/tukaani-project/xz/pull/151"
2e28c7145747b3287283f13c9d2becd73a7c4a1f,Lasse Collin,Lasse Collin,2024-12-27 07:15:50,2025-01-05 18:16:01,"xz: Use ""goto"" for error handling in io_open_dest_real()"
75107217670a97b7b772833669d88c3c2f188e37,Lasse Collin,Lasse Collin,2025-01-05 10:10:05,2025-01-05 10:58:22,"liblzma: Always validate the first digit of a preset string

lzma_str_to_filters() may call parse_lzma12_preset() in two ways. The
call from str_to_filters() detects the string type from the first
character(s) and as a side-effect it validates the first digit of
the preset string. So this change makes no difference there.

However, the call from parse_options() doesn't pre-validate the string.
parse_lzma12_preset() will return an invalid value which is passed to
lzma_lzma_preset() which safely rejects it. The bug still affects the
the error message:

    $ xz --filters=lzma2:preset=X
    xz: Error in --filters=FILTERS option:
    xz: lzma2:preset=X
    xz:               ^
    xz: Unsupported preset

After the fix:

    $ xz --filters=lzma2:preset=X
    xz: Error in --filters=FILTERS option:
    xz: lzma2:preset=X
    xz:              ^
    xz: Unsupported preset

The ^ now correctly points to the X and not past it because the X itself
is the problematic character.

Fixes: cedeeca2ea6ada5b0411b2ae10d7a859e837f203"
52ff32433734d03befd85a5bf00fba77d6501455,Lasse Collin,Lasse Collin,2025-01-05 09:40:34,2025-01-05 09:41:40,"xz: Fix getopt_long argument type in --filters*

Forgetting the argument (or not using = to separate the option from
the argument) resulted in lzma_str_to_filters() being called with NULL
as input string argument. The function handles it fine but xz passes
the NULL to printf() too:

    $ xz --filters
    xz: Error in --filters=FILTERS option:
    xz: (null)
    xz: ^
    xz: Unexpected NULL pointer argument(s) to lzma_str_to_filters()

Now it's correct:

    $ xz --filters
    xz: option '--filters' requires an argument

The --filters-help option doesn't take any arguments.

Fixes: 9ded880a0221f4d1256845fc4ab957ffd377c760
Fixes: d6af7f347077b22403133239592e478931307759
Fixes: a165d7df1964121eb9df715e6f836a31c865beef"
2655c81b5e92278b0fd51f6537c1116f8349b02a,Lasse Collin,Lasse Collin,2025-01-04 18:04:56,2025-01-04 18:05:03,"xzdec: Don't leave Landlock file descriptor open for no reason

This fix is similar to 48ff3f06521ca326996ab9a04d1b342098960427.

Fixes: d74fb5f060b76db709b50f5fd37490394e52f975"
35df4c2bc0500e60ba9d0d163d37a6d110d6841e,Lasse Collin,Lasse Collin,2025-01-04 18:02:18,2025-01-04 18:02:18,"xz: Make --single-stream imply --keep

Suggested by xx on #tukaani on 2024-04-12."
6f412814a8019700248229ce972530159a0d9872,Lasse Collin,Lasse Collin,2025-01-04 17:57:07,2025-01-04 17:57:17,"Update AUTHORS

The contributions have been rewritten."
5651d153031a7ee2581cdba9bff658031826cb50,Lasse Collin,Lasse Collin,2025-01-04 13:02:16,2025-01-04 15:37:46,"xz: Avoid printf formats like %2$s

It's a POSIX feature that isn't in standard C. It's not available on
Windows. Even MinGW-w64 with __USE_MINGW_ANSI_STDIO doesn't support
it even though it supports POSIX %'d for thousand separators.

Gettext's <libintl.h> provides overrides for printf and other functions
which do support the %2$s formats. Translations use them. But xz should
work on Windows without <libintl.h> too.

Fixes: 3e9177fd206d20d6d8acc7d203c25a9ae0549229"
63b246c90e7677c617faab1d3f6fc5c643b5e7cf,Lasse Collin,Lasse Collin,2025-01-04 12:41:37,2025-01-04 15:37:46,"tuklib_mbstr_wrap: Add printf format attribute

It's supported by GCC 3.x already."
a7313c01d9b8db71ffb61dc1dd7c4ea928824b4b,Lasse Collin,Lasse Collin,2025-01-04 11:44:12,2025-01-04 15:37:39,"xz: Translate a Windows-specific string

Originally I thought that native Windows builds wouldn't be translated
but nowadays at least MSYS2 ships such binaries."
00eb6073c088be9e7516dfc00a13ef520827b57c,Lasse Collin,Lasse Collin,2025-01-02 13:32:10,2025-01-02 13:43:38,"xz: Use my_landlock.h

A slightly silly thing is that xz may now query the ABI version up to
three times. We could call my_landlock_ruleset_attr_forbid_all() only
once and cache the result but it didn't seem worth doing."
0fc5a625d7cc4ad51fde9367de088b9ad3bd40f6,Lasse Collin,Lasse Collin,2025-01-02 13:32:10,2025-01-02 13:43:38,xzdec: Use my_landlock.h
38cb8ec9fd70d25fca6b473de44cf61586238552,Lasse Collin,Lasse Collin,2025-01-02 13:32:10,2025-01-02 13:43:38,"Add my_landlock.h with helper functions to use Linux Landlock

This supports up to Landlock ABI version 6. The current code in
xz and xzdec only support up to ABI version 4."
672da29bb3a209a727ae46c0df948d7eea69f2e2,Lasse Collin,Lasse Collin,2025-01-01 16:46:50,2025-01-02 13:43:38,"liblzma: Silence warnings from ""clang -Wimplicit-fallthrough"""
1a8a1ad9a1e3179ce267baa551fb17b30624b4dd,Lasse Collin,Lasse Collin,2025-01-01 13:34:51,2025-01-02 13:43:37,"Build: Use -Wimplicit-fallthrough=5 when supported

Now that we have the FALLTHROUGH macro, use the strictest mode with
GCC so that comment-based fallthrough markings are no longer accepted.

In GCC, -Wextra includes -Wimplicit-fallthrough=3 and
-Wimplicit-fallthrough is the same as -Wimplicit-fallthrough=3.
Thus, the strict mode requires specifying -Wimplicit-fallthrough=5.

Clang has -Wimplicit-fallthrough which is *not* enabled by -Wextra.
Clang doesn't have a variant that takes an argument. Thus we need
to check for -Wimplicit-fallthrough. Do it before checking for
-Wimplicit-fallthrough=5 so that the latter overrides the former
when using GCC."
94adc996e45cc5cad9352cc3271d3a1a2f5c4c22,Lasse Collin,Lasse Collin,2025-01-01 13:30:50,2025-01-02 13:43:37,"Replace ""Fall through"" comments with FALLTHROUGH"
f31c3a6647b5a5d056324a9c83e6b2c940ebec22,Lasse Collin,Lasse Collin,2025-01-01 13:08:51,2025-01-02 13:43:37,sysdefs.h: Add FALLTHROUGH macro
e34dbd6a0ae7a560a5508d51fc0bd142c5a320dc,Lasse Collin,Lasse Collin,2025-01-01 13:06:15,2025-01-02 13:43:37,xzdec: Fix language in a comment
16821252c504071f5c2012e415e59cbf5fb79820,Lasse Collin,Lasse Collin,2025-01-02 11:35:48,2025-01-02 13:35:25,"Windows: Make NLS require UCRT and gettext-runtime >= 0.23.1

Also remove the recently-added workaround from tuklib_gettext.h.
Requiring a new enough gettext-runtime is cleaner. I guess it's
mostly MSYS2 where xz is built with translation support, so once
MSYS2 has Gettext >= 0.23.1, this requirement shouldn't be a problem
in practice."
aa1807ed942579f700a08ab091b796cf04e31aec,Lasse Collin,Lasse Collin,2025-01-02 09:52:17,2025-01-02 13:35:16,"windows/build-with-cmake.bat: Fix ENABLE_NLS to XZ_NLS

Fixes: 29f77c7b707f2458fb047e77497354b195e05b14"
ea21c76aa2406ba06ac154fe57741734c04f260f,Lasse Collin,Lasse Collin,2024-12-30 09:21:57,2024-12-30 09:21:57,"Build: Use git log --pretty=medium when creating ChangeLog

It's the default in git-log. Specifying it explicitly is good in case
a user has set format.pretty to a different value."
08050c0788ce5bac0ffd572e9784a2749c4a13df,Lasse Collin,Lasse Collin,2024-12-30 08:51:33,2024-12-30 08:51:33,Windows: Update MinGW-w64 + CMake instructions to recommend UCRT
653732bd6f06d8f465bf353bf6e1c16f1405b906,Lasse Collin,Lasse Collin,2024-12-30 08:51:26,2024-12-30 08:51:26,"xz man page: Describe the source file deletion in -z and -d options

The DESCRIPTION section always explained it, and the OPTIONS section
only described the differences to the default behavior. However, new
users in a hurry may skip reading DESCRIPTION. The default behavior
is a bit dangerous, thus it's good to repeat in --compress and
--decompress docs that source file is removed after successful operation.

Fixes: https://github.com/tukaani-project/xz/issues/150"
bb79f79b278fd4fb06a0bcd5ab3445c468f9baaf,Lasse Collin,Lasse Collin,2024-12-27 19:52:28,2024-12-29 08:54:45,"Build: Set libtool -version-info so that it matches with CMake

In the past, they haven't been in sync in development versions
although they (of course) have been in stable releases."
cf54f70e14c218faf5019ffa2fa769ed73772ee8,Lasse Collin,Lasse Collin,2024-12-28 16:28:56,2024-12-29 08:51:53,"CMake/macOS: Use GNU Libtool compatible shared library versioning

Because this increases the Mach-O compatibility_version, this commit
shouldn't cause any ABI compatibility trouble for existing CMake users
on macOS. This is assuming that they won't later downgrade to an older
liblzma version that was built with CMake before this commit.

Meson allows customising the Mach-O versioning too. So the three
build systems can be configured to be compatible."
94e17916689d38bc09bf35e602ed6f6276034b59,Lasse Collin,Lasse Collin,2024-12-28 12:49:45,2024-12-29 08:51:53,CMake: Edit a comment
6b50590725aeae8a2aed06faa3238cb9f8771c1b,Lasse Collin,Lasse Collin,2024-12-28 18:39:49,2024-12-29 08:51:47,"version.sh: Omit an unwanted dot from development versions

It printed 5.7.0.alpha instead of 5.7.0alpha.

Fixes: e7a42cda7c827e016619e8cab15e2faf5d4181ae"
f7a248f56e94310a080051c4a709c08514fa48b1,Lasse Collin,Lasse Collin,2024-12-27 14:25:07,2024-12-27 19:39:28,CMake: Remove a duplicate word from a comment
8b7c55d148f4a9b3702207164e862437ddffad33,Lasse Collin,Lasse Collin,2024-12-27 14:23:12,2024-12-27 19:39:22,INSTALL: Document CMAKE_DLL_NAME_WITH_SOVERSION
260d5d36203955a7148ae1ab05d0931c942028d5,Lasse Collin,Lasse Collin,2024-12-26 19:27:18,2024-12-27 07:14:56,xz: Fix comments
bf6da9a573a780cd1a7fb1728ef55d09e58dad11,Dexter Castor Döpping,Lasse Collin,2024-12-22 12:44:03,2024-12-22 18:06:24,"CMake: Disable unity builds project-wide

liblzma and xz can't be compiled as a unity/jumbo build because of
redeclarations and type name reuse. The CMake documentation recommends
setting UNITY_BUILD to false in this case.

This is especially important if we're compiled as a subproject and the
consumer wants to use CMAKE_UNITY_BUILD=ON for the rest of their code
base.

Closes: https://github.com/tukaani-project/xz/pull/158"
f8c328eed1bf0a0168132025a52116b7735f894c,Lasse Collin,Lasse Collin,2024-12-20 06:51:18,2024-12-20 14:33:34,"Windows: Workaround a UTF-8 issue in Gettext's libintl_setlocale()

See the comment. In this package, locale is set at program startup and
not changed later, so the point (2) in the comment isn't a problem.

Fixes: 46ee0061629fb075d61d83839e14dd193337af59"
03533906093529701ba91081907d8977991997de,Lasse Collin,Lasse Collin,2024-12-20 04:50:36,2024-12-20 14:33:34,"Revert ""Windows: Use UTF-8 locale when active code page is UTF-8""

This reverts commit 0d0b574cc45045d6150d397776340c068df59e2a."
4b319e05afef4eab2fbafb6223f25d128ec99fce,Lasse Collin,Lasse Collin,2024-12-19 16:31:09,2024-12-20 14:33:34,"xzdec: Use setlocale() instead of tuklib_gettext_setlocale()

xzdec isn't translated and doesn't need libintl on Windows even
when NLS is enabled, thus libintl_setlocale() cannot interfere
with the locale settings. Thus, standard setlocale() works perfectly.

In the commit 78868b6e, the explanation in the commit message is wrong.

Fixes: 78868b6ed63fa4c89f73e3dfed27abfb8b0d46db"
34b80e282ea76ec793eaedaef58a36c3913dec78,Lasse Collin,Lasse Collin,2024-12-19 17:36:15,2024-12-20 14:33:28,"Windows: Revert the setlocale(LC_ALL, "".UTF8"") documentation

Only leave the FindFileFirstA() notes from 20dfca81, reverting
the incorrect setlocale() notes. On Windows, Gettext's <libintl.h>
overrides setlocale() with libintl_setlocale() wrapper. I hadn't
noticed this, and thus my conclusions were wrong.

Fixes: 20dfca8171dad4c64785ac61d5b68972c444877b"
5794cda064ce980450eaa5a4e2c71bd317168ce4,Lasse Collin,Lasse Collin,2024-12-18 15:49:05,2024-12-18 15:50:58,"tuklib_mbstr_wrap: Silence a warning from Clang

Fixes: ca529c3f41a4a19a59e2e252e6dd9255f130c634"
16c9796ef970ae349c54fef9a346e394d7cc4c75,Lasse Collin,Lasse Collin,2024-12-18 12:00:09,2024-12-18 15:09:32,Update THANKS
3b5c8a1fcab385eed9cc95684223fddd7cf5a053,Lasse Collin,Lasse Collin,2024-12-18 12:00:09,2024-12-18 15:09:32,"Update TODO

Fixes: 5f6dddc6c911df02ba660564e78e6de80947c947"
22a35e64ce3d331b668f15f858a7bb3da3acc78e,Lasse Collin,Lasse Collin,2024-12-18 12:00:09,2024-12-18 15:09:32,lzmainfo: Use tuklib_mbstr_nonprint
03111595ee713e0f94fb4f4a19a15594d5149347,Lasse Collin,Lasse Collin,2024-12-18 12:00:09,2024-12-18 15:09:32,xzdec: Use tuklib_mbstr_nonprint
d22f96921fd2f94d842f3cc2e5f729cb3cca5122,Lasse Collin,Lasse Collin,2024-12-18 12:00:09,2024-12-18 15:09:32,"xz: Use tuklib_mbstr_nonprint

Call tuklib_mask_nonprint() on filenames and also on a few other
strings from the command line too.

The filename printed by ""xz --robot --list"" (in list.c) is also masked.
It's good to get rid of tabs and newlines which would desync the output
but masking other chars wouldn't be strictly necessary. It might matter
with sensible filenames if LC_CTYPE is ""C"" (when iswprint() might reject
non-ASCII chars) and a script wants to read a filename from xz's output.
Hopefully it's an unusual enough corner case to not be a real problem."
40e573305535960574404d2eae848b248c95ea7e,Lasse Collin,Lasse Collin,2024-12-18 12:00:09,2024-12-18 15:09:32,"Add tuklib_mbstr_nonprint to mask non-printable characters

Malicious filenames or other untrusted strings may affect the state of
the terminal when such strings are printed as part of (error) messages.
Add functions that mask such characters.

It's not enough to handle only single-byte control characters.
In multibyte locales, some control characters are multibyte too, for
example, terminals interpret C1 control characters (U+0080 to U+009F)
that are two bytes as UTF-8.

Instead of checking for control characters with iswcntrl(), this
uses iswprint() to detect printable characters. This is much stricter.
On Windows it's actually too strict as it rejects some characters that
definitely are printable.

Gnulib's quotearg would do a lot more but I hope this simpler method
is good enough here.

Thanks to Ryan Colyer for the discussion about the problems of
the earlier single-byte-only method.

Thanks to Christian Weisgerber for reporting a bug in an earlier
version of this code.

Thanks to Jeroen Roovers for a typo fix.

Closes: https://github.com/tukaani-project/xz/pull/118"
36190c8c4bb13d1eab84a30f3650a5ec5ff0e402,Lasse Collin,Lasse Collin,2024-12-18 09:33:09,2024-12-18 15:09:31,"Translations: Add preliminary Georgian translation

Most of the auto-wrapped strings are translated already. A few
strings have changed since this was created though. This file
isn't in the Translation Project *yet* because these strings
are still very new.

Closes: https://github.com/tukaani-project/xz/pull/145"
4a0c4f92b820b84ace625a95305a9d56cb662f4e,Lasse Collin,Lasse Collin,2024-10-30 18:50:20,2024-12-18 15:09:31,"xz: Make one string simpler for translators

Leading spaces in the string can get miscounted by translators."
3fcf547e926f6c0414b23459f7b43164f7e8c378,Lasse Collin,Lasse Collin,2024-12-17 08:26:10,2024-12-18 15:09:31,lzmainfo: Sync the translatable strings with xz
3e9177fd206d20d6d8acc7d203c25a9ae0549229,Lasse Collin,Lasse Collin,2024-12-17 08:26:10,2024-12-18 15:09:31,"xz: Use automatic word wrapping for help texts

--long-help is now one line longer because --lzma1 is now on its
own line."
a0eecc9eb23ac583ccf442de3f5c106d4b09482d,Lasse Collin,Lasse Collin,2024-12-16 16:46:45,2024-12-18 15:09:31,"po/Makevars: Add --keyword=W_:... to XGETTEXT_OPTIONS

The text was copied from tuklib_gettext.h.

Also rearrange the --keyword options to be last on the line."
ca529c3f41a4a19a59e2e252e6dd9255f130c634,Lasse Collin,Lasse Collin,2024-12-16 16:43:52,2024-12-18 15:09:31,"Add tuklib_mbstr_wrap for automatic word wrapping

Automatic word wrapping makes translators' work easier and reduces
errors like misaligned columns or overlong lines. Right-to-left
languages and languages that don't use spaces between words will
still need extra effort. (xz hasn't been translated to any RTL
language so far.)"
314b83cebad0244a0015a8abc6d8d086b581c215,Lasse Collin,Lasse Collin,2024-12-17 15:57:18,2024-12-18 15:09:31,Build: Sort filenames to ASCII order in Makefile.am
df399c52554dfdf60259ca2cce97adbcfff39dc0,Lasse Collin,Lasse Collin,2024-10-21 15:51:24,2024-12-18 15:09:30,"tuklib_mbstr_width: Add tuklib_mbstr_width_mem()

It's a new function split from tuklib_mbstr_width().
It's useful with partial strings that aren't terminated with \0."
51081efae4c52c226e96da95313916eba99f885f,Lasse Collin,Lasse Collin,2024-12-16 18:08:27,2024-12-18 15:09:30,tuklib_mbstr_width: Update a comment about shift states
7ff1b0ac53866877bdfd79acf5fee0269058c58b,Lasse Collin,Lasse Collin,2024-10-21 15:47:56,2024-12-18 15:09:30,"tuklib_mbstr_width: Don't mention shift states in the API docs

It is assumed that this code won't be used with charsets that use
locking shift states."
3c16105936320e4095dbe84fa9a33a4a6d46a597,Lasse Collin,Lasse Collin,2024-10-21 15:41:41,2024-12-18 15:09:30,"tuklib_mbstr_width: Use stricter return value checking

This should make no difference in practice (at least if mbrtowc()
isn't broken)."
b797c44c42ea54fe1c52722a2fca0c9618575598,Lasse Collin,Lasse Collin,2024-12-16 18:06:07,2024-12-18 15:09:30,"tuklib_mbstr_width: Change the behavior when wcwidth() is not available

If wcwidth() isn't available (Windows), previously it was assumed
that one byte == one column in the terminal. Now it is assumed that
one multibyte character == one column. This works better with UTF-8.
Languages that only use single-width characters without any combining
characters should work correctly with this.

In xz, none of po/*.po contain combining characters and only ko.po,
zh_CN.po, and zh_TW.po contain fullwidth characters. Thus, ""only""
those three translations in xz are broken on Windows with the
UTF-8 code page. Broken means that column headings in xz -lvv and
(only in the master branch) strings in --long-help are misaligned,
so it's not a huge problem. I don't know if those three languages
displayed perfectly before the UTF-8 change because I hadn't tested
translations with native Windows builds before.

Fixes: 46ee0061629fb075d61d83839e14dd193337af59"
78868b6ed63fa4c89f73e3dfed27abfb8b0d46db,Lasse Collin,Lasse Collin,2024-12-18 12:23:13,2024-12-18 15:09:30,"xzdec: Use setlocale() via tuklib_gettext_setlocale()

xzdec isn't translated and didn't have locale-specific behavior
in the past. On Windows with UTF-8 in the application manifest,
setting the locale makes a difference though:

  - Without any setlocale() call, non-ASCII filenames don't display
    properly in Command Prompt unless one first uses ""chcp 65001""
    to set the console code page to UTF-8.

  - setlocale(LC_ALL, """") is enough to make non-ASCII filenames
    print correctly in Command Prompt without using ""chcp 65001"",
    assuming that the non-UTF-8 code page (like 850) supports
    those non-ASCII characters.

  - setlocale(LC_ALL, "".UTF8"") is even better because then mbrtowc() and
    such functions use an UTF-8 locale instead of a legacy code page.
    The tuklib_gettext_setlocale() macro takes care of this (without
    enabling any translations).

Fixes: 46ee0061629fb075d61d83839e14dd193337af59"
0d0b574cc45045d6150d397776340c068df59e2a,Lasse Collin,Lasse Collin,2024-12-17 12:59:37,2024-12-18 15:09:30,"Windows: Use UTF-8 locale when active code page is UTF-8

XZ Utils 5.6.3 set the active code page to UTF-8 to fix CVE-2024-47611.
This wasn't paired with UCRT-specific setlocale(LC_ALL, "".UTF8""), thus
non-ASCII characters from translations became mojibake.

Fixes: 46ee0061629fb075d61d83839e14dd193337af59"
20dfca8171dad4c64785ac61d5b68972c444877b,Lasse Collin,Lasse Collin,2024-12-17 13:01:29,2024-12-18 15:09:29,"Windows: Document the need for setlocale(LC_ALL, "".UTF8"")

Also warn about unpaired surrogates and (somewhat UTF-8-specific)
MAX_PATH issue in FindFirstFileA().

Fixes: 46ee0061629fb075d61d83839e14dd193337af59"
4e936f234056e5831013ed922145b666b04bb1e3,Lasse Collin,Lasse Collin,2024-12-18 12:12:22,2024-12-18 15:09:29,"xzdec: Call tuklib_progname_init() early enough

If the early pledge() call on OpenBSD fails, it calls my_errorf()
which requires the ""progname"" variable.

Fixes: d74fb5f060b76db709b50f5fd37490394e52f975"
61feaf681bd793dc5c919732b44bca7dcf2ed1b8,Lasse Collin,Lasse Collin,2024-12-15 17:08:32,2024-12-18 15:09:29,"CMake: Bump maximum policy version to 3.31

With CMake 3.31, there were a few warnings from
CMP0177 ""install() DESTINATION paths are normalized"".
These occurred because the install(FILES) command in
my_install_man_lang() is called with a DESTINATION path
that contains two consecutive slashes, for example,
""share/man//man1"". Such a path is for the English man pages.
With translated man pages, the language code goes between
the slashes. The warning was probably triggered because the
extra slash gets removed by the normalization."
b0bb84dd7bbdcc85243386a0051c7b2cb5fc6a18,Lasse Collin,Lasse Collin,2024-12-15 16:35:27,2024-12-18 15:09:29,Update THANKS
bee0c044d30a6ad3b3d94901c27e7519f6f46e27,Dexter Castor Döpping,Lasse Collin,2024-12-08 17:24:29,2024-12-18 15:09:29,"liblzma: Fix incorrect macro name in a comment

Fixes: 33b8a24b6646a9dbfd8358405aec466b13078559
Closes: https://github.com/tukaani-project/xz/pull/155"
2cfa1ad0a9eb62b1847cf13f9aee290158978a3a,Lasse Collin,Lasse Collin,2024-12-17 08:36:43,2024-12-18 15:09:21,"license-check.sh: Add an exception for doc/SHA256SUMS

Fixes: 36b531022f24a2ab57a2dfb9e5052f1c176e9d9a"
36b531022f24a2ab57a2dfb9e5052f1c176e9d9a,Lasse Collin,Lasse Collin,2024-12-01 19:38:17,2024-12-01 19:38:17,"doc/SHA256SUMS: Add the list of SHA-256 hashes of release files

The release files are signed but verifying the signatures cannot
catch certain types of attacks:

1. A malicious maintainer could make more than one variant of
   a package. One could be for general distribution. Another
   with malicious content could be targeted to specific users,
   for example, distributing the malicious version on a mirror
   controlled by the attacker.

2. If the signing key of an honest maintainer was compromised
   without being detected, a similar situation as described
   above could occur.

SHA256SUMS could be put on the project website but having it in
the Git repository makes it obvious that old lines aren't modified
when the file is updated.

Hashes of uncompressed files are included too. This way tarballs
can be recompressed and the hashes can still be verified."
fe9e66993fdbcc2981c7361b9b034a451eb0fc42,Lasse Collin,Lasse Collin,2024-11-30 10:05:59,2024-11-30 10:05:59,"Docs: Remove .github/SECURITY.md

One of the reasons to have this file in the xz repository was to
show vulnerability reporting info in the Security section on GitHub.
On 2024-11-25, I added SECURITY.md to the tukaani-project organization
on GitHub:

    https://github.com/tukaani-project/.github/blob/main/SECURITY.md

GitHub shows that file in all projects in the organization unless
overridden by a project-specific SECURITY.md. Thus, removing
the file from the xz repo makes GitHub show the organization-wide
text instead.

Maintaining a single copy for the whole GitHub organization makes
things simpler. It's also nicer to have fewer GitHub-specific files
in the xz repo. Information how to report bugs (including security
issues) is available in README and on the home page too.

The OpenSSF Scorecard tool didn't find .github/SECURITY.md from the
xz repository. There was a suggestion to move the file to the top-level
directory where Scorecard should find it. However, Scorecard does find
the organization-wide SECURITY.md. Thus, the file isn't needed in the
xz repository to score points in the Scorecard game:

    https://scorecard.dev/viewer/?uri=github.com/tukaani-project/xz

Closes: https://github.com/tukaani-project/xz/issues/148
Closes: https://github.com/tukaani-project/xz/pull/149"
b36177273602ebc83e9cc58517f63a7b6af33f70,Lasse Collin,Lasse Collin,2024-11-30 08:27:14,2024-11-30 08:27:14,Translations: Update the Chinese (traditional) translation
c15115f7ede492f20c91b08ba485f9426f60233f,Lasse Collin,Lasse Collin,2024-10-30 17:54:34,2024-11-26 17:17:42,"liblzma: Optimize the loop conditions in BCJ filters

Compilers cannot optimize the addition ""i + 4"" away since theoretically
it could overflow."
9f69e71e78621fd056f5eaaad7cdcd9279310fb5,Lasse Collin,Lasse Collin,2024-11-25 14:26:54,2024-11-25 14:26:54,Update THANKS
48ff3f06521ca326996ab9a04d1b342098960427,Mark Wielaard,Lasse Collin,2024-11-25 10:28:44,2024-11-25 10:28:44,xz: Landlock: Fix a file descriptor leak
dbca3d078ec581600600abebbb18769d3d713914,Sam James,Lasse Collin,2024-10-02 02:04:03,2024-10-02 07:10:54,"CI: update FreeBSD, NetBSD, OpenBSD, Solaris actions

Checked the changes and they're all innocuous. This should hopefully
fix the ""externally managed"" pip error in these jobs that started
recently."
a94b85bea3f04d8c1f4e2e6f648a9a15bc6ce58f,Lasse Collin,Lasse Collin,2024-10-01 09:17:39,2024-10-01 17:06:54,Add NEWS for 5.6.3
be4bf94446b6286a5dffdde85fc1d21448f4edff,Lasse Collin,Lasse Collin,2024-10-01 11:49:41,2024-10-01 11:49:41,"cmake/tuklib_large_file_support.cmake: Add a missing include

v5.2 didn't build with CMake. Other branches had
include(CMakePushCheckState) in top-level CMakeLists.txt
which made the build work.

Fixes: 597f49b61475438a43a417236989b2acc968a686"
1ebbe915d4e0d877154261b5f8103719a6722975,Lasse Collin,Lasse Collin,2024-10-01 09:10:23,2024-10-01 09:10:23,Update THANKS
74702ee00ecfd080d8ab11118cd25dbe6c437ec0,Lasse Collin,Lasse Collin,2024-10-01 09:10:23,2024-10-01 09:10:23,"Tests/Windows: Add the application manifest to the test programs

This ensures that the test programs get executed the same way as
the binaries that are installed."
7ddf2273e0e4654582ee65db19d44431bfdb5791,Lasse Collin,Lasse Collin,2024-10-01 09:10:23,2024-10-01 09:10:23,"license-check.sh: Add an exception for w32_application.manifest

The file gets embedded as is into executables, thus it cannot
hold a license identifier."
46ee0061629fb075d61d83839e14dd193337af59,Lasse Collin,Lasse Collin,2024-10-01 09:10:23,2024-10-01 09:10:23,"Windows: Embed an application manifest in the EXE files

IMPORTANT: This includes a security fix to command line tool
           argument handling.

Some toolchains embed an application manifest by default to declare
UAC-compliance. Some also declare compatibility with Vista/8/8.1/10/11
to let the app access features newer than those of Vista.

We want all the above but also two more things:

  - Declare that the app is long path aware to support paths longer
    than 259 characters (this may also require a registry change).

  - Force the code page to UTF-8. This allows the command line tools
    to access files whose names contain characters that don't exist
    in the current legacy code page (except unpaired surrogates).
    The UTF-8 code page also fixes security issues in command line
    argument handling which can be exploited with malicious filenames.
    See the new file w32_application.manifest.comments.txt.

Thanks to Orange Tsai and splitline from DEVCORE Research Team
for discovering this issue.

Thanks to Vijay Sarvepalli for reporting the issue to me.

Thanks to Kelvin Lee for testing with MSVC and helping with
the required build system fixes."
dad153091552b52a41b95ec4981c6951f1cae487,Lasse Collin,Lasse Collin,2024-09-29 11:46:52,2024-09-30 13:55:23,"Windows: Set DLL name accurately in StringFileInfo on Cygwin and MSYS2

Now the information in the ""Details"" tab in the file properties
dialog matches the naming convention of Cygwin and MSYS2. This
is only a cosmetic change."
8940ecb96fe9f0f2a9cfb8b66fe9ed31ffbea904,Lasse Collin,Lasse Collin,2024-09-25 12:47:55,2024-09-28 22:27:16,"common_w32res.rc: White space edits

LANGUAGE and VS_VERSION_INFO begin new statements so put an empty line
between them."
c3b9dad07d3fd9319f88386b7095019bcea45ce1,Lasse Collin,Lasse Collin,2024-09-28 17:09:50,2024-09-28 22:26:45,"CMake: Add the resource files to the Cygwin and MSYS2 builds

Autotools-based build has always done this so this is for consistency.

However, the CMake build won't create the DEF file when building
for Cygwin or MSYS2 because in that context it should be useless.
(If Cygwin or MSYS2 is used to host building of normal Windows
binaries then the DEF file is still created.)"
da4f275bd1c18b897e5c2dd0043546de3accce0a,Lasse Collin,Lasse Collin,2024-09-28 12:19:14,2024-09-28 22:26:13,"CMake: Fix Windows resource file dependencies

If common_w32res.rc is modified, the resource files need to be rebuilt.
In contrast, the liblzma*.map files truly are link dependencies."
1c673c0aac7f7dee8dda2c1140351c8417a71e47,Lasse Collin,Lasse Collin,2024-09-28 22:20:03,2024-09-28 22:26:13,"CMake: Checking for CYGWIN covers MSYS2 too

On MSYS2, both CYGWIN and MSYS are set."
6aaa0173b839e28429d43a8b62d257ad2f3b4521,Lasse Collin,Lasse Collin,2024-09-28 06:37:30,2024-09-28 06:38:13,Translations: Add the SPDX license identifier to pt_BR.po
dc7b9f24b737e4e55bcbbdde6754883f991c2cfb,Lasse Collin,Lasse Collin,2024-09-25 13:41:37,2024-09-25 18:31:06,"Windows/CMake: Use the correct resource file for lzmadec.exe

CMakeLists.txt was using xzdec_w32res.rc for both xzdec and lzmadec.

Fixes: 998d0b29536094a89cf385a3b894e157db1ccefe"
b834ae5f80911a3819d6cdb484f61b257174c544,Lasse Collin,Lasse Collin,2024-09-25 18:29:59,2024-09-25 18:29:59,Translations: Update the Brazilian Portuguese translation
eceb023d4c129fd63ee881a2d8696eaf52ad1532,Lasse Collin,Lasse Collin,2024-09-16 22:21:15,2024-09-16 22:26:02,Update THANKS
76cfd0a9bb33ae8e534b1f73f6359dc825589f2f,Tobias Stoeckmann,Lasse Collin,2024-09-16 21:19:46,2024-09-16 22:26:02,"lzmainfo: Avoid integer overflow

The MB output can overflow with huge numbers. Most likely these are
invalid .lzma files anyway, but let's avoid garbage output.

lzmadec was adapted from LZMA Utils. The original code with this bug
was written in 2005, over 19 years ago.

Co-authored-by: Lasse Collin <lasse.collin@tukaani.org>
Closes: https://github.com/tukaani-project/xz/pull/144"
78355aebb7fb654302e5e33692ba109909dacaff,Tobias Stoeckmann,Lasse Collin,2024-09-16 20:04:40,2024-09-16 20:33:29,"xzdec: Remove unused short option -M

""xzdec -M123"" exited with exit status 1 without printing
any messages. The ""M:"" entry should have been removed when
the memory usage limiter support was removed from xzdec.

Fixes: 792331bdee706aa852a78b171040ebf814c6f3ae
Closes: https://github.com/tukaani-project/xz/pull/143
[ Lasse: Commit message edits ]"
e5758db7bd75587a2499e0771907521a4aa86908,Lasse Collin,Lasse Collin,2024-09-10 10:54:47,2024-09-10 10:54:47,Update THANKS
80ffa38f56657257ed4d90d76f6bd2f2bcb8163c,Firas Khalil Khana,Lasse Collin,2024-09-10 09:30:32,2024-09-10 10:43:00,"Build: Fix a typo in autogen.sh

Fixes: e9be74f5b129fe8a5388d588e68b1b7f5168a310
Closes: https://github.com/tukaani-project/xz/pull/141"
68c54e45d042add64a4cb44bfc87ca74d29b87e2,Lasse Collin,Lasse Collin,2024-09-02 17:08:40,2024-09-02 17:08:40,"Translations: Update Chinese (simplified) translation

Differences to the zh_CN.po file from the Translation Project:

  - Two uses of \v were fixed.

  - Missing ""OPTS"" translation in --riscv[=OPTS] was copied from
    previous lines.

  - ""make update-po"" was run to remove line numbers from comments."
2230692aa1bcebb586100183831e3daf1714d60a,Lasse Collin,Lasse Collin,2024-09-02 16:40:50,2024-09-02 16:40:50,"Translations: Update the Catalan translation

Differences to the ca.po file from the Translation Project:

  - An overlong line translating --filters-help was wrapped.

  - ""make update-po"" was used to remove line numbers from the comments
    to match the changes in fccebe2b4fd513488fc920e4dac32562ed3c7637
    and 093490b58271e9424ce38a7b1b38bcf61b9c86c6. xz.pot in the TP
    is older than these commits."
3e7723ce26f74c71919984a6180504b4548cbb7e,Lasse Collin,Lasse Collin,2024-08-22 11:06:16,2024-09-02 14:33:50,Update THANKS
d3e0e679b2b8b428598bb8ba56a17715190814db,Lasse Collin,Lasse Collin,2024-08-22 11:06:16,2024-09-02 14:33:42,"CMake: Don't install lzmadec.1 symlinks if XZ_TOOL_LZMADEC=OFF

Thanks-to: 榆柳松 (ZhengSen Wang) <wzhengsen@gmail.com>
Fixes: fb50c6ba1d4c9405e5b12b5988b01a3002638c5d
Closes: https://github.com/tukaani-project/xz/pull/134"
acdf21033abe347d9a279e9fe757f90ed16c1dbb,Lasse Collin,Lasse Collin,2024-08-22 11:06:16,2024-09-02 14:33:06,"CMake: Fix the build when XZ_TOOL_LZMADEC=OFF

Co-developed-by: 榆柳松 (ZhengSen Wang) <wzhengsen@gmail.com>
Fixes: fb50c6ba1d4c9405e5b12b5988b01a3002638c5d
Fixes: https://github.com/tukaani-project/xz/pull/134"
5e375987509fab484b7bef0b90be92f241c58c91,Lasse Collin,Lasse Collin,2024-08-22 08:01:07,2024-08-22 08:01:07,Update THANKS
6cd7c8607843c337edfe2c472aa316602a393754,Yifeng Li,Lasse Collin,2024-08-22 02:18:49,2024-08-22 07:59:08,"liblzma: Fix x86-64 movzw compatibility in range_decoder.h

Support for instruction ""movzw"" without suffix in ""GNU as"" was
added in commit [1] and stabilized in binutils 2.27, released
in August 2016. Earlier systems don't accept this instruction
without a suffix, making range_decoder.h's inline assembly
unable to build on old systems such as Ubuntu 16.04, creating
error messages like:

    lzma_decoder.c: Assembler messages:
    lzma_decoder.c:371: Error: no such instruction: `movzw 2(%r11),%esi'
    lzma_decoder.c:373: Error: no such instruction: `movzw 4(%r11),%edi'
    lzma_decoder.c:388: Error: no such instruction: `movzw 6(%r11),%edx'
    lzma_decoder.c:398: Error: no such instruction: `movzw (%r11,%r14,4),%esi'

Change ""movzw"" to ""movzwl"" for compatibility.

[1] https://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=c07315e0c610e0e3317b4c02266f81793df253d2

Suggested-by: Lasse Collin <lasse.collin@tukaani.org>
Tested-by: Yifeng Li <tomli@tomli.me>
Signed-off-by: Yifeng Li <tomli@tomli.me>
Fixes: 3182a330c1512cc1f5c87b5c5a272578e60a5158
Fixes: https://github.com/tukaani-project/xz/issues/121
Closes: https://github.com/tukaani-project/xz/pull/136"
bf901dee5d4c46609645e50311c0cb2dfdcf9738,Lasse Collin,Lasse Collin,2024-07-19 17:02:43,2024-07-19 17:06:24,Build: Comment that elf_aux_info(3) will be available on OpenBSD >= 7.6
f7103c2c2a8fa51d1f308ba7387beeff20a0d4dd,Lasse Collin,Lasse Collin,2024-07-19 16:42:26,2024-07-19 17:06:24,"Revert ""liblzma: Add ARM64 CRC32 instruction support detection on OpenBSD""

This reverts commit dc03f6290f5b9bd3d50c7e12e58dee870889d599.

OpenBSD 7.6 will support elf_aux_info(3), and the detection code used
on FreeBSD will work on OpenBSD 7.6 too. Keep things simpler and drop
the OpenBSD-specific sysctl() method.

Thanks to Christian Weisgerber."
7c292dd0bf23cefcdf4b1509f3666322e08a7ede,Lasse Collin,Lasse Collin,2024-07-13 19:10:37,2024-07-13 19:10:37,liblzma: Tweak a comment
6408edac5529d6ec0abf52794074f229c8362303,Lasse Collin,Lasse Collin,2024-07-11 19:17:56,2024-07-11 19:17:56,CMake: Bump maximum policy version to 3.30
9231c39ffb518196d6664a86e5325e744621a21b,Lasse Collin,Lasse Collin,2024-07-06 12:13:19,2024-07-11 17:11:38,"CMake: Require CMake 3.20 or later

This allows a few cleanups."
028185dd4889e3d6235ff13560160ebca6985021,Lasse Collin,Lasse Collin,2024-07-09 11:27:51,2024-07-09 11:27:51,Update THANKS
baecfa142644eb5f5c6dd6f8e2f531c362fa3747,Lasse Collin,Lasse Collin,2024-07-06 11:04:48,2024-07-06 11:04:48,"xz: Remove the TODO comment about --recursive

It won't be implemented. find + xargs is more flexible, for example,
it allows compressing small files in parallel. An example for that
has been included in the xz man page since 2010."
f691d58fae82bd815c5f86ffad10fe9b6b59dad8,Lasse Collin,Lasse Collin,2024-07-06 11:04:16,2024-07-06 11:04:16,Document --disable-loongarch-crc32 in INSTALL
b3e53122f42796aaebd767bab920cf7bedf69966,Lasse Collin,Lasse Collin,2024-07-03 17:45:48,2024-07-03 17:45:48,"CMake: Link xz against Threads::Threads if using pthreads

The liblzma target was recently changed to link against Threads::Threads
with the PRIVATE keyword. I had forgotten that xz itself depends on
pthreads too due to pthread_sigmask(). Thus, the build broke when
building shared liblzma and pthread_sigmask() wasn't in libc.

Thanks to Peter Seiderer for the bug report.

Fixes: ac05f1b0d7cda1e7ae79775a8dfecc54601d7f1c
Fixes: https://github.com/tukaani-project/xz/issues/129#issuecomment-2204522994"
5742ec1fc7f2cf1c82cfe3477bb90594a4658374,Lasse Collin,Lasse Collin,2024-07-02 19:49:33,2024-07-02 19:49:33,Update THANKS
2d13d10357ecad243d7e4ff1de0e6b437c38a47a,Lasse Collin,Lasse Collin,2024-07-02 17:23:35,2024-07-02 19:41:48,CMake: Improve NLS error messages
628d8d2c4fdf9e6a91c7bba7a743f400a94c2909,Lasse Collin,Lasse Collin,2024-07-02 17:19:47,2024-07-02 19:41:48,"CMake: Update the comment at the top of CMakeLists.txt

While po/*.gmo files won't be used from the release tarball,
the generated translated man pages will be used still. Those
are text files and po4a has slightly more dependencies than
gettext tools so installing po4a might be a bit more challenging
in some situations."
b4b23c94fd4429abc663ced28d5cdc9cf7eb7507,Lasse Collin,Lasse Collin,2024-07-02 17:12:40,2024-07-02 19:41:00,"CMake: Drop support for pre-generated po/*.gmo files

When a release tarball is created using Autotools, the tarball includes
po/*.gmo files which are binary files generated from po/*.po. Other
tarball creation methods don't and won't create the .gmo files.

It feels clearer if CMake will never install pre-generated binary files
from the source package. If people are able to install CMake, they
likely are able to install gettext tools as well (assuming they want
translations)."
fb99f8e8c50171b898cb79fe1dc703d5f91e4f0a,Lasse Collin,Lasse Collin,2024-07-02 16:14:50,2024-07-02 19:40:37,"CMake: Make XZ_NLS handling more robust

If a user set XZ_NLS=ON but find_package(Intl) failed or CMake version
wasn't at least 3.20, the configuration would fail in a cryptic way.

If XZ_NLS is enabled, require that CMake is new enough and that either
gettext tools or pre-generated .gmo files are available. Otherwise fail
the configuration. Previously missing gettext tools and .gmo files would
only result in a warning.

Missing man page translations are still only a warning.

Thanks to Peter Seiderer for the bug report.

Fixes: https://github.com/tukaani-project/xz/issues/129
Closes: https://github.com/tukaani-project/xz/pull/130"
ec6157570ea8a8e38158894e530d35416ff6a0f8,Lasse Collin,Lasse Collin,2024-07-02 16:39:05,2024-07-02 19:40:37,CI: Add gettext as a dependency to CMake builds
24f0f7e399de03bb2ff675d97b723d14f17ed6ac,Lasse Collin,Lasse Collin,2024-07-02 15:43:56,2024-07-02 19:39:46,"CMake: Fix ENABLE_NLS comment too

Fixes: 29f77c7b707f2458fb047e77497354b195e05b14"
a0df0676130bc565af0ec911e68a1d0fbc3ed0fb,Lasse Collin,Lasse Collin,2024-07-02 15:02:50,2024-07-02 15:39:43,"CMake: The compile definition is ENABLE_NLS, not XZ_NLS

The CMake variables were renamed and accidentally also
the compile definition was renamed. As a result, translation
support wasn't actually enabled in the executables.

Fixes: 29f77c7b707f2458fb047e77497354b195e05b14"
45d08abc33ccc52d2f050dcec458badc2ce59d0b,Lasse Collin,Lasse Collin,2024-07-01 14:33:20,2024-07-01 14:33:20,Update AUTHORS and THANKS
7baf6835cfbf9c85ba37f9ffb7d4f87fb86a474e,Xi Ruoyao,Lasse Collin,2024-06-28 10:36:43,2024-07-01 14:09:57,"liblzma: Speed up CRC32 calculation on 64-bit LoongArch

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32
result for 1/2/4/8 bytes in a single operation. Using these is much
faster compared to the generic method.

Optimized CRC32 is enabled unconditionally on 64-bit LoongArch because
the LoongArch specification says that CRC32 instructions shall be
implemented for 64-bit processors. Optimized CRC32 isn't enabled for
32-bit LoongArch processors because not enough information is available
about them.

Co-authored-by: Lasse Collin <lasse.collin@tukaani.org>

Closes: https://github.com/tukaani-project/xz/pull/86"
0ed893668554fb0758003289f8a6af9bd08b89d1,Lasse Collin,Lasse Collin,2024-06-28 11:20:49,2024-06-28 11:20:49,"liblzma: ARM64 CRC32: Align the buffer faster

Instead of doing it byte by byte, use the 1/2/4-byte CRC32 instructions."
7e99856f66c07852c4e0de7aa01951e9147d86b0,Sam James,Lasse Collin,2024-06-28 11:18:35,2024-06-28 11:18:35,"CI: Speed up Valgrind job by using --trace-children-skip-by-arg=...

This addresses the issue I mentioned in
6c095a98fbec70b790253a663173ecdb669108c4 and speeds up the Valgrind
job a bit, because non-xz tools aren't run unnecessarily with
Valgrind by the script tests."
2402e8a1ae92676fa0d4cb1b761d7f62f005c098,Lasse Collin,Lasse Collin,2024-06-25 13:00:22,2024-06-26 12:48:56,"Build: Prepend, not append, PTHREAD_CFLAGS to LIBS

It shouldn't make any difference because LIBS should be empty
at that point in configure. But prepending is the correct way
because in general the libraries being added might require other
libraries that come later on the command line."
7bb46f2b7b3989c1b589a247a251470f65e91cda,Lasse Collin,Lasse Collin,2024-06-25 11:24:29,2024-06-26 12:48:56,"Build: Use AC_LINK_IFELSE to handle implicit function declarations

It's more robust in case the compiler allows pre-C99 implicit function
declarations. If an x86 intrinsic is missing and gets treated as
implicit function, the linking step will very probably fail. This
isn't the only way to workaround implicit function declarations but
it might be the simplest and cleanest.

The problem hasn't been observed in the wild.

There are a couple more AC_COMPILE_IFELSE uses in configure.ac.
Of these, Landlock check calls prctl() and in theory could have
the same problem. In practice it doesn't as the check program
looks for several other things too. However, it was changed to
AC_LINK_IFELSE still to look more correct.

Similarly, m4/tuklib_cpucores.m4 and m4/tuklib_physmem.m4 were
updated although they haven't given any trouble either. They
have worked all these years because those check programs rely
on specific headers and types: if headers or types are missing,
compilation will fail. Using the linker makes these checks more
similar to the ones in cmake/tuklib_*.cmake which always link."
35eb57355ad1c415a838d26192d5af84abb7cf39,Lasse Collin,Lasse Collin,2024-06-24 20:35:59,2024-06-26 12:48:56,"Build: Use AC_LINK_IFELSE instead of -Werror

AC_COMPILE_IFELSE needed -Werror because Clang <= 14 would merely
warn about the unsupported attribute and implicit function declaration.
Changing to AC_LINK_IFELSE handles the implicit declaration because
the symbol __crc32d is unlikely to exist in libc.

Note that the other part of the check is that #include <arm_acle.h>
must work. If the header is missing, most compilers give an error
and the linking step won't be attempted.

Avoiding -Werror makes the check more robust in case CFLAGS contains
warning flags that break -Werror anyway (but this isn't the only check
in configure.ac that has this problem). Using AC_LINK_IFELSE also makes
the check more similar to how it is done in CMakeLists.txt."
5a728813c378cc3c4c9c95793762452418d08f1b,Lasse Collin,Lasse Collin,2024-06-24 20:34:34,2024-06-26 12:48:56,"Build: Sync the compile check changes from CMakeLists.txt

It's nice to keep these in sync. The use of main() will later allow
AC_LINK_IFELSE usage too which may avoid the more fragile -Werror."
5279828635a95abdef82e691fc4979d362780e63,Lasse Collin,Lasse Collin,2024-06-24 17:14:43,2024-06-26 12:48:56,"CMake: Not experimental anymore

While the CMake support has gotten a lot less testing than
the Autotools-based build, the supported features should now
be equal. The output may differ slightly, for example,
liblzma.pc may have

    Libs.private: -pthread -lpthread

with Autotools on GNU/Linux. CMake doesn't put any options
in Libs.private because on modern glibc the pthread functions
are in libc. The options options aren't required to link static
liblzma into an application.

Autotools-based build doesn't generate or install
lib/cmake/liblzma-*.cmake files. This means that on most
platforms one cannot rely on

    find_package(liblzma 5.2.5 REQUIRED CONFIG)

or such finding those files."
de215a0517645d16343f3a5336d3df884a4f665f,Lasse Collin,Lasse Collin,2024-06-25 13:11:13,2024-06-25 13:13:39,"CMake: Use configure_file() to copy a file

I had missed this simpler method before. It does create a dependency
so that if .in.h changes the copying is done again."
e620f35097c0ad20cd76d8258750aa706758ced9,Lasse Collin,Lasse Collin,2024-06-25 12:51:48,2024-06-25 12:56:39,"CMake: Always add pthread flags into CMAKE_REQUIRED_LIBRARIES

It was weird to add CMAKE_THREAD_LIBS_INIT in CMAKE_REQUIRED_LIBRARIES
only if CLOCK_MONOTONIC is available. Alternative would be to remove
the thread libs from CMAKE_REQUIRED_LIBRARIES after the check for
pthread_condattr_setclock() but keeping the libs should be fine too.
Then it's ready in case more pthread functions were wanted some day."
068a70e54932ca32ca2922aff5a67a62615c650b,Sam James,Lasse Collin,2024-06-24 18:25:30,2024-06-25 11:55:15,"CMake: Tweak comments

Co-authored-by: Lasse Collin <lasse.collin@tukaani.org>"
3c95c93bca593bdd54ac5cc01526b12c82c78faa,Lasse Collin,Lasse Collin,2024-06-24 19:42:01,2024-06-25 11:54:53,CMake: Edit white space for consistency
114cba69dbb96003e676c8c87a2e9943b12d065f,Lasse Collin,Lasse Collin,2024-06-24 19:41:10,2024-06-25 11:54:53,"CMake: Fix three checks if building with -flto

In CMake, check_c_source_compiles() always links too. With
link-time optimization, unused functions may get omitted if
main() doesn't depend on them. Consider the following which
tries to check if somefunction() is available when <someheader.h>
has been included:

    #include <someheader.h>
    int foo(void) { return somefunction(); }
    int main(void) { return 0; }

LTO may omit foo() completely because the program as a whole doesn't
need it and then the program will link even if the symbol somefunction
isn't available in libc or other library being linked in, and then
the test may pass when it shouldn't.

What happens if <someheader.h> doesn't declare somefunction()?
Shouldn't the test fail in the compilation phase already? It should
but many compilers don't follow the C99 and later standards that
prohibit implicit function declarations. Instead such compilers
assume that somefunction() exists, compilation succeeds (with a
warning), and then linker with LTO omits the call to somefunction().

Change the tests so that they are part of main(). If compiler accepts
implicitly declared functions, LTO cannot omit them because it has to
assume that they might have side effects and thus linking will fail.
On the other hand, if the functions/intrinsics being used are supported,
they might get optimized away but in that case it's fine because they
really are supported.

It is fine to use __attribute__((target(...))) for main(). At least
it works with GCC 4.9 to 14.1 on x86-64.

Reported-by: Sam James <sam@gentoo.org>"
78e882205e1f1e91df2af2cb7da00fe205dede99,Lasse Collin,Lasse Collin,2024-06-24 18:19:14,2024-06-25 11:54:53,CMake: Use MATCHES instead of multiple STREQUAL
d3f20382fc1bd865eb70a65455d5022ed05caac8,Lasse Collin,Lasse Collin,2024-06-24 18:06:18,2024-06-25 11:54:53,CMake: Improve the comment about LIBS
33ec377729a3889e58d98934b2777b2754a3e045,Lasse Collin,Lasse Collin,2024-06-24 17:01:25,2024-06-24 17:01:25,"CMake: Fix a typo in a message

It was spotted with codespell."
2a47be823cd6c717bc91fa29c7710c9b1ae0331f,Lasse Collin,Lasse Collin,2024-06-24 16:58:54,2024-06-24 16:59:04,Document CMake options in INSTALL
3faf4e8079a46bd46e05cd1234365724a6a33802,Lasse Collin,Lasse Collin,2024-06-24 14:18:44,2024-06-24 15:15:58,"CI: Don't omit crc32 from the list with CMake anymore

XZ_CHECKS accepts it but works without too."
1bf83cded2955282fe1a868f08c83d4e5d6dca4a,Lasse Collin,Lasse Collin,2024-06-24 14:39:54,2024-06-24 15:15:58,"CI: Workaround buggy config.guess on Ubuntu 22.04LTS and 24.04LTS

Check for the wrong triplet from config.guess and override it with
the --build option on the configure command line. Then i386 assembly
autodetection will work.

These Ubuntu versions (and as of writing, also Debian unstable)
ship config.guess version 2022-01-09 which contains a bug that
was fixed in version 2022-05-08. It results in a wrong configure
triplet when using CC=""gcc -m32"" to build i386 binaries.

Upstream fix:
https://git.savannah.gnu.org/cgit/config.git/commit/?id=f56a7140386d08a531bcfd444d632b28c61a6329

More information:
https://mail.gnu.org/archive/html/config-patches/2022-05/msg00003.html"
dbcdabf68fee9ed694b68c3a82e6adbeff20b679,Lasse Collin,Lasse Collin,2024-06-24 12:24:52,2024-06-24 15:15:58,"CI: Use CC=""gcc -m32"" to get i386 compiler on x86-64

The old method put it in CFLAGS which is a wrong place because
config.guess doesn't read CFLAGS."
0c1e6d900bac127464fb30a854776e1810ab5f16,Lasse Collin,Lasse Collin,2024-06-24 11:54:17,2024-06-24 15:15:58,"CI: Let CMake use the CC environment variable

CC from environment is used to initialize CMAKE_C_COMPILER so
setting CMAKE_C_COMPILER explicitly isn't needed.

The syntax in ci_build.bash was broken in case one wished to put
spaces in CC."
a3d6eb797c1bd9b0425ef6754e475e43e62bf075,Lasse Collin,Lasse Collin,2024-06-20 20:25:42,2024-06-24 15:15:58,CMake: Add autodetection for 32-bit x86 CRC assembly usage
dbc14f213e5cf866f1f42b7c6381a91e1189908c,Lasse Collin,Lasse Collin,2024-06-20 20:00:59,2024-06-23 20:09:14,CMake: Move option(XZ_ASM_I386) downwards a few lines
e5c2b07b489b155c1bebd5cb5e5b94325c2fef1a,Lasse Collin,Lasse Collin,2024-06-20 15:45:41,2024-06-23 20:09:14,DOS: Update Makefile and config.h for the CRC changes
fe77c4e130d62dc3f9c1de40a18c0c6caa5a4d88,Lasse Collin,Lasse Collin,2024-06-23 12:35:35,2024-06-23 20:09:14,"liblzma: Tidy up crc_common.h

Prefix ARM64_RUNTIME_DETECTION with CRC_ and reorder it to be with
the other ARM64-specific lines. That macro isn't used outside this
file.

ARM64 CLMUL implementation doesn't exist yet and thus CRC64_ARM64_CLMUL
isn't used anywhere yet.

It's not ideal that the single-letter CRC utility macros are here
as they pollute the namespace of the LZ encoder files. Those could
be moved their own crc_macros.h like they were in 5.2.x but in practice
this is fine enough already."
7484d375384f551d475ff44a93590a225e0cb8f6,Lasse Collin,Lasse Collin,2024-06-23 11:22:08,2024-06-23 12:37:46,"liblzma: Move lzma_crcXX_table[][] declarations to crc_common.h

LZ encoder needs lzma_crc32_table[0] but otherwise those tables
are private to the CRC code. In contrast, the other things in
check.h are needed in several places."
85b081f5d4598342b8c155a2c08697fb2adc372c,Lasse Collin,Lasse Collin,2024-06-19 15:38:22,2024-06-23 11:36:44,"liblzma: Make 32-bit x86 CRC assembly co-exist with CLMUL

Now runtime detection of CLMUL support can pick between the CLMUL and
the generic assembly implementations. Whatever overhead this has for
builds that omit CLMUL completely isn't important because builds for
any non-ancient system is likely to include the CLMUL code too.

Handle the CRC tables in crcXX_fast.c files because now these files
are built even when assembly code is used.

If 32-bit x86 assembly is enabled then it will always be built even
if compiler flags were such that CLMUL would be allowed unconditionally.
That is, runtime detection will be used anyway. This keeps the build
rules simpler.

In LZ encoder, build and use lzma_lz_hash_table[256] if CLMUL CRC
is used without runtime detection. Previously this wasn't needed
because crc32_table.c included the lzma_crc32_table[][] in the build
unless encoder support had been disabled. Including an 8 KiB table
was silly when only 1 KiB is actually used. So now liblzma is 7 KiB
smaller if CLMUL is enabled without runtime detection."
6667d503b5dc9826654e3d9ad505e1883ff6c388,Lasse Collin,Lasse Collin,2024-06-19 14:44:41,2024-06-23 11:36:44,"liblzma: CRC: Rename crcXX_generic to lzma_crcXX_generic

This prepares for the possibility that lzma_crc32_generic and
lzma_crc64_generic are extern functions."
1dca581ff20aa1cde61e9e5267d3aeb0af9b6845,Lasse Collin,Lasse Collin,2024-06-20 19:55:22,2024-06-23 11:36:44,CMake: Define HAVE_CRC_X86_ASM when 32-bit x86 CRC assembly is used
f76837acb65676e541d8ee79cd62dbbf27280a62,Lasse Collin,Lasse Collin,2024-05-10 13:00:26,2024-06-23 11:36:44,"Build: Define HAVE_CRC_X86_ASM when 32-bit x86 CRC assembly is used

This makes it easier to determine when the CRC tables are needed."
9ce0866b070850da4dc837741ff055faa218bdd6,Lasse Collin,Lasse Collin,2024-06-20 21:46:09,2024-06-20 21:47:27,CI: Update to the new renamed options in CMakeLists.txt
0232e66d5bc5b01a25a447c657e51747626488ab,Lasse Collin,Lasse Collin,2024-06-20 15:12:22,2024-06-20 18:53:07,CMake: Add XZ_EXTERNAL_SHA256
4535b80caead82a7ddf7feb988b8fbc773152522,Lasse Collin,Lasse Collin,2024-06-20 15:12:21,2024-06-20 18:53:07,"CMake: Move threading detection a few lines up

It feels clearer this way, and when support for external SHA-256
is added, this will keep the order of the library detection the
same as in configure.ac (check for pthreads before libmd) although
it shouldn't matter in practice."
94d062dbac34d366eb26625034200cc3457e6645,Lasse Collin,Lasse Collin,2024-06-20 15:12:21,2024-06-20 18:53:07,"CMake: Move the sandbox code out of the liblzma section

Sandboxing is for the command line tools, not liblzma.
No functional changes."
75ce4797d49621710e6da95d8cb91541028c6d68,Lasse Collin,Lasse Collin,2024-06-20 15:12:21,2024-06-20 18:53:07,"CMake: Keep existing options in LIBS when adding -lrt

This makes no difference yet because -lrt is currently the only option
that might be added to LIBS."
47aaa92516fd9609821d04e5e94ca6558e56d62b,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 18:53:07,"CMake: Don't install scripts if the xz tool isn't built

The scripts need the xz tool."
fb50c6ba1d4c9405e5b12b5988b01a3002638c5d,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 18:53:07,CMake: Add XZ_TOOL_XZDEC and XZ_TOOL_LZMADEC
def767f7d18ccbd81cd5e5b46c8b6031f3a1de34,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 18:53:07,CMake: Add XZ_TOOL_LZMAINFO
5600e370fb7e11eafabc6c3ef5bf6510e859f4f0,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 18:53:07,CMake: Add XZ_TOOL_XZ
6a3c4aaa43a90da441e1156c5ffd2e6098f5521f,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 18:53:07,"Windows: Drop Visual Studio 2013 support

This simplifies things a little. Building liblzma with VS2013 probably
still worked but building the command line tools was not supported.

Microsoft ended support for VS2013 on 2024-04."
5d5c92b26246936461a635dda1f95740d7de2058,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 18:53:07,CMake: Add XZ_TOOL_SCRIPTS
d274a2bc00d235f07e96aaf82c149794cfe82b12,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 18:53:07,CMake: Add XZ_DOC
188143a50ade67253ed256608f50f78aa1380403,Lasse Collin,Lasse Collin,2024-06-20 18:53:03,2024-06-20 18:53:03,"CMake: Refactor XZ_SYMBOL_VERSIONING to match configure.ac

Make the available options and their behavior match
--enable-symbol-versions in configure.ac.

Don't enable symbol versions on Linux if not using glibc. Previously
the generic variant was selected on Microblaze or if using NVHPC
without checking that libc is glibc.

Leave the cache variable to ""auto"" or ""yes"" if that was specified
instead of setting it to the autodetected value by default. A downside
is that one cannot easily see which variant the autodetection code
has selected. The same applies to XZ_SANDBOX and XZ_THREADS though."
cc52ef8ed3b75a581262c587f6c06c213a550f86,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:12:19,"CMake: Use the same option list for XZ_THREADS as in configure.ac

Also clarify that ""yes"" will fail if no threading support is found.
If no threading is wanted, it has to be disabled manually.

configure.ac doesn't behave this way at the moment. Instead it
assumes pthreads to be present if not targeting Windows. If pthreads
actually are missing, the build fails later."
37f7af3452bab0a34ce320c2ad532835f18752d9,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Use the same option list for XZ_SANDBOX as in configure.ac

It's simpler to document this way."
c715dec8e800b65145918cfb0ee9bbc90faa8aad,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Fix indentation
ea379f2f180befabd2039342db8eaeb757fdd2b7,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Add warning options for GCC and Clang

The list was copied from configure.ac and should be kept in sync.
(Pretend that the deleted comment in CMakeLists.txt didn't exist.)

There is no need to add equivalent of --enable-werror as CMake >= 3.24
supports -DCMAKE_COMPILE_WARNING_AS_ERROR=ON."
74223338197b7dfcd69f56df78b6502805a75f23,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Use \040 instead of \x20 for a space

This is for consistency with 4c81c9611f8b2e1ad65eb7fa166afc570c58607e
where \040 has to be used because \0x20F gets interpret at three hex
digits. Octals escapes are never longer than three digits."
e8854b6bdc956c46dc4232bd07c17163034a00f2,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Add XZ_ASSUME_RAM
e1127e75cb82e0385f02c995771d6fe1420f43c5,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename liblzma_INSTALL_CMAKEDIR to XZ_INSTALL_CMAKEDIR
96abfe98c15e431a50a6a31015c5bb05540ab2ff,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Refactor ADDITIONAL_CHECK_TYPES to XZ_CHECKS

Now ""crc32"" is in the list too for completeness but it doesn't
actually have any effect. The description of the cache variable
says that ""crc32 is always built"" so it should be clear enough."
679500ffe00ecb4f02292129e7529ab7392f3943,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Rename the cache variable POSIX_SHELL to XZ_POSIX_SHELL

We still need the variable POSIX_SHELL for configure_file()
but it doesn't need to be a cache variable."
e5c0eb2e50e5522a0a55e7ba83fe49b04c8a6eef,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename ENCODERS and DECODERS to use XZ_ prefix
e7785e2061f95d44aa6c0856b09cc0fbad7d6154,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename MATCH_FINDERS to XZ_MATCH_FINDERS
63294806b488a27a28a0960f6a257695dd2b569a,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename SYMBOL_VERSIONING to XZ_SYMBOL_VERSIONING
ad245b133675d285bca5d48123062e9d1e3f747e,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename ENABLE_THREADS to XZ_THREADS
4250d4de32e66e558cc2ebe73b05255633c933ed,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename ENABLE_SANDBOX to XZ_SANDBOX
0fdcd0c582f1a38542cd647dde449d9447d5888d,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename ENABLE_X86_ASM to XZ_ASM_I386
e017d5526e316003fdb2a3f76acbb83443f14ddf,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Rename CREATE_XZ_SYMLINKS to XZ_TOOL_SYMLINKS

This only affects the names unxz and xzcat. The xz-prefixed script
symlinks (xzfgrep and such) are always created if scripts are enabled."
04cac14fcb9fb302c24e90b04ca4b77d3717b50c,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Rename CREATE_LZMA_SYMLINKS to XZ_TOOL_LZMA_SYMLINKS

Update the description too.

It affects creation of not only the legacy lzma, unlzma, lzcat symlinks
but also lzgrep and other legacy names for the scripts. The last
LZMA Utils release was made in 2008 but these names are still used
in some places to handle .lzma files."
612ccebf884eb1a9b6848e230c24f97a03fe917a,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Rename ALLOW_ARM64_CRC32 to XZ_ARM64_CRC32

Update description too."
3dcc12290d6dffbe7f10f501c141d325bad65901,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,"CMake: Rename ALLOW_CLMUL_CRC to XZ_CLMUL_CRC

Update description too."
4b8faa72442da9aa1a356f5848aae798d8588a7d,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename ENABLE_DOXYGEN to XZ_DOXYGEN
b56273ae575bac350e50b0c689269dcab04b04b3,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename LZIP_DECODER to XZ_LZIP_DECODER
2343992fcbe8b436da6df888be37713cccaff0ab,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename MICROLZMA_ENCODER/DECODER to XZ_MICROLZMA_ENCODER/DECODER
96f0a6632cc0598a26d93255b0c444df18dc7891,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 12:00:05,CMake: Rename ENABLE_SMALL to XZ_SMALL
29f77c7b707f2458fb047e77497354b195e05b14,Lasse Collin,Lasse Collin,2024-06-15 15:07:04,2024-06-20 11:59:33,"CMake: Rename ENABLE_NLS to XZ_NLS

Also update the description to mention that this affects installation
of translated man pages too.

Prefixing the cache variables with the project name helps if
the package is used as a subproject in another package.
It also makes the package-specific options group more nicely
in ccmake and cmake-gui."
ac05f1b0d7cda1e7ae79775a8dfecc54601d7f1c,Lasse Collin,Lasse Collin,2024-06-15 20:34:29,2024-06-17 15:20:21,"CMake: Link Threads::Threads as PRIVATE to liblzma

This way pthread options aren't passed to the linker when linking
against shared liblzma but they are still passed when linking against
static liblzma. (Also, one never needs the include path of the
threading library to use liblzma since liblzma's API headers
don't #include <pthread.h>. But <pthread.h> tends to be in the
default include path so here this change makes no difference.)

One cannot mix target_link_libraries() calls that use the scope
(PRIVATE, PUBLIC, or INTERFACE) keyword and calls that don't use it.
The calls without the keyword are like PUBLIC except perhaps when
they aren't, or something like that... It seems best to always
specify a scope keyword as the meanings of those three keywords
at least are clear."
82986d8c691a294c78b48d8391303e5c428b5437,Lasse Collin,Lasse Collin,2024-06-16 16:39:32,2024-06-17 15:20:21,CMake: Add empty lines
2aecffe0f0e14f3ef635e8cd7b405420f2385de2,Lasse Collin,Lasse Collin,2024-06-16 16:37:36,2024-06-17 15:20:21,"CMake: Use CMAKE_THREAD_LIBS_INIT in liblzma.pc only with pthreads

This shouldn't make much difference in practice as on Windows
no flags are needed anyway and unitialized variable (when threading
is disabled) expands to empty. But it's clearer this way."
664918bd3635ea8e773f06022286ecb0c485166c,Lasse Collin,Lasse Collin,2024-06-17 15:20:14,2024-06-17 15:20:14,Update THANKS
5ca96a93488d0f5a530c78b274cac317453807ff,Lasse Collin,Lasse Collin,2024-06-16 16:25:07,2024-06-17 15:01:39,"CMake: Use native newlines in liblzma.pc

vcpkg doesn't specify the newline type so it should be fine to
use native newlines in liblzma.pc on Windows."
ebd155c3a1b87411edae06d3bdaa9659ec057522,Lasse Collin,Lasse Collin,2024-06-16 16:18:56,2024-06-17 15:01:39,"CMake: Use relative paths in liblzma.pc if possible

Now liblzma.pc can be relocatable only if using CMake >= 3.20
but that should be OK as now we shouldn't get broken liblzma.pc
if CMAKE_INSTALL_LIBDIR or CMAKE_INSTALL_INCLUDEDIR contain an
absolute path.

Thanks to Eli Schwartz."
7a366d93cfd74ce10201db400be8836199944e36,Lasse Collin,Lasse Collin,2024-06-16 15:33:08,2024-06-17 15:01:39,"Revert ""CMake: Set only ""prefix"" as an absolute path in liblzma.pc""

This reverts commit 5d1c649ba9eb7a5b9371252ebfbc2911dc774e69.

While CMAKE_INSTALL_<dir> tend to be relative paths, they don't need
to be. Thus the commit was broken. A fancier method is required.

Thanks to Eli Schwartz for the bug report and explanation."
30a2d5d51006301a3ddab5ef1f5ff0a9d74dce6f,Lasse Collin,Lasse Collin,2024-06-16 10:39:37,2024-06-17 12:00:55,"liblzma: CRC CLMUL: Omit is_arch_extension_supported() when not needed

On E2K the function compiles only due to compiler emulation but the
function is never used. It's cleaner to omit the function when it's
not needed even though it's a ""static inline"" function.

Thanks to Ilya Kurdyukov."
54eaea5ea49bb8bca4286d4412f19ac73187489e,Lasse Collin,Lasse Collin,2024-06-16 10:21:34,2024-06-17 12:00:49,"liblzma: x86 CLMUL CRC: Rewrite

It's faster with both tiny and large buffers and doesn't require
disabling any sanitizers. With large buffers the extra speed is
from folding four 16-byte chunks in parallel.

The 32-bit x86 with MSVC reportedly still needs a workaround.
Now the simpler ""__asm mov ebx, ebx"" trick is enough but it
needs to be in lzma_crc64() instead of crc64_arch_optimized().
Thanks to Iouri Kharon for testing and the fix.

Thanks to Ilya Kurdyukov for testing the speed with aligned and
unaligned buffers on a few x86 processors and on E2K v6.

Thanks to Sam James for general feedback.

Fixes: https://github.com/tukaani-project/xz/issues/112
Fixes: https://github.com/tukaani-project/xz/issues/122"
c0e7eaae8d6eef1e313c9d0da20ccf126ec61f38,Lasse Collin,Lasse Collin,2024-06-01 11:44:04,2024-06-16 09:59:20,sysdefs.h: Add alignas
20014c261451381d5e2f58e63e7b1fbefd4df4bf,Lasse Collin,Lasse Collin,2024-06-11 09:47:59,2024-06-16 09:59:17,"liblzma: Use a single macro to select CLMUL CRC to build

This way it's clearer that two things cannot be selected
at the same time."
d8fb0986171bd6a3066b236fc9a6b3d573c8e441,Lasse Collin,Lasse Collin,2024-06-10 12:31:01,2024-06-16 09:56:54,"liblzma: CRC32 CLMUL: Refactor the constants and simplify

By using modulus scaled constants, the final reduction can
be simplified."
ef652ac391ff7e8cda656238dc5b5f83bc1554c2,Lasse Collin,Lasse Collin,2024-06-10 12:12:48,2024-06-16 09:56:54,"liblzma: CRC64 CLMUL: Refactor the constants

Now it refers to crc_clmul_consts_gen.c. vfold8 was renamed to mu_p
and the p no longer has the lowest bit set (it makes no difference
as the output bits it affects are ignored)."
9f5fc17e32bf5c7c6cfadf40c29a1dedb4cc03ac,Lasse Collin,Lasse Collin,2024-06-10 11:45:44,2024-06-16 09:56:54,"liblzma: Add crc_clmul_consts_gen.c

It's a standalone program that prints the required constants.
It's won't be a part of the normal build of the package."
71b147aab7fe4a60ed57b697d5bb490f099894be,Lasse Collin,Lasse Collin,2024-05-09 18:44:03,2024-06-16 09:56:54,"liblzma: Remove CRC_USE_GENERIC_FOR_SMALL_INPUTS

It was already commented out."
f99a7be40645f86959a5b180dfae948dd165e07c,Lasse Collin,Lasse Collin,2024-05-09 18:03:39,2024-06-16 09:56:54,"liblzma: Remove crc_attr_no_sanitize_address

It's not enough to silence the address sanitizer. Also memory and
thread sanitizers would need to be silenced. They, at least currently,
aren't smart enough to see that the extra bytes are discarded from
the xmm registers by later instructions.

Valgrind is smarter, possibly because this kind of code isn't weird
to write in assembly. Agner Fog's optimizing_assembly.pdf even mentions
this idea of doing an aligned read and then discarding the extra
bytes. The sanitizers don't instrument assembly code but Valgrind
checks all code.

It's better to change the implementation to avoid the sanitization
attributes which also look scary in the code. (Somehow they can look
more scary than __asm__ which is implictly unsanitized.)

See also:
https://github.com/tukaani-project/xz/issues/112
https://github.com/tukaani-project/xz/issues/122"
ead4d151996f8a18bf9b07eb1e175c0a1590e562,Lasse Collin,Lasse Collin,2024-06-10 12:37:49,2024-06-16 09:56:54,"Revert ""Build: Temporarily disable CRC CLMUL to silence OSS Fuzz""

This reverts commit 9f1a6d6f9a258886933a22239a5b81af34b28199."
2178acf8a4d40a93e970cfcf9b807d5ef6c8da92,Lasse Collin,Lasse Collin,2024-06-12 11:26:44,2024-06-12 11:28:37,"CMake: Prefer C11 with a fallback to C99

There is no need to make a similar change in configure.ac.
With Autoconf 2.72, the deprecated macro AC_PROG_CC_C99
is an alias for AC_PROG_CC which prefers a C11 compiler."
c97e9c12fef4d1093ee2a75236742481361f50f5,Lasse Collin,Lasse Collin,2024-06-12 11:20:21,2024-06-12 11:20:21,Update THANKS
89e9f12e03324b8a186e807b268f34f92d1b2f41,Lasse Collin,Lasse Collin,2024-06-11 08:15:49,2024-06-11 19:44:44,"Tests: Improve the CRC32 test

A similar one was already there for CRC64 but nowadays also CRC32
has a CLMUL implementation, so it's good to test it better too."
c7164b1927e3fe7cdba70ee4687e1a590a81043b,Lasse Collin,Lasse Collin,2024-06-11 19:42:26,2024-06-11 19:42:26,xz: Fix white space
0a32d2072c598de281058b26dc08920fbf0cd2a1,Lasse Collin,Lasse Collin,2024-06-11 18:59:09,2024-06-11 19:42:04,"liblzma: Fix a typo in a comment

Thanks to Sam James for spotting it.

Fixes: f644473a211394447824ea00518d0a214ff3f7f2"
afd9b4d282a10186808c3331dad4caf79c02d55f,Lasse Collin,Lasse Collin,2024-05-10 12:52:26,2024-06-10 20:19:27,liblzma: Fix a comment indentation
50e6bff274568c568930e15094da8217e7d47d28,Lasse Collin,Lasse Collin,2024-05-09 19:09:12,2024-06-10 20:19:27,liblzma: Fix white space
caea7844d3824755d053b4743c4913d73ac2db3d,Lasse Collin,Lasse Collin,2024-06-01 11:25:29,2024-06-10 20:19:27,tuklib: __STDC_VERSION__ in C23 is 202311
9e73918a4f14be754a23f74dda45ca431939a4a0,RainRat,Lasse Collin,2024-06-05 22:21:49,2024-06-07 13:01:27,"Fix typos

Closes: https://github.com/tukaani-project/xz/pull/124"
04b23addf3733873667675df2439725f076c2f36,Lasse Collin,Lasse Collin,2024-06-07 12:47:20,2024-06-07 12:47:20,"tuklib_integer: Fix building on OpenBSD/sparc64 that uses GCC 4.2

GCC 4.2 doesn't have __builtin_bswap16() and friends so tuklib_integer.h
tries to use OS-specific byte swap methods instead. On OpenBSD those
macros are swap16/32/64 instead of bswap16/32/64 like on other *BSDs
and Darwin.

An alternative to ""#ifdef __OpenBSD__"" could be ""#ifdef swap16"" as it
is a macro. But since OpenBSD seems to be a special case under this
special case of ""*BSDs and Darwin"", checking for __OpenBSD__ seems
the more conservative choice now.

Thanks to Christian Weisgerber and Brad Smith who both submitted
the same patch a few hours apart.

Co-authored-by: Christian Weisgerber <naddy@mips.inka.de>
Co-authored-by: Brad Smith <brad@comstyle.com>
Closes: https://github.com/tukaani-project/xz/pull/126"
dc03f6290f5b9bd3d50c7e12e58dee870889d599,Lasse Collin,Lasse Collin,2024-06-07 12:06:59,2024-06-07 12:06:59,"liblzma: Add ARM64 CRC32 instruction support detection on OpenBSD

The C code is from Christian Weisgerber, I merely reordered the OSes.
Then I added the build system checks without testing them.

Also thanks to Brad Smith who submitted a similar patch on GitHub
a few hours after Christian had sent his via email.

Co-authored-by: Christian Weisgerber <naddy@mips.inka.de>
Closes: https://github.com/tukaani-project/xz/pull/125"
f5c2ae58ec68c665e62c790b842657afcb31474c,Lasse Collin,Lasse Collin,2024-06-05 10:55:43,2024-06-05 10:55:43,Update THANKS
e5491dfab9c54dc7078a8d3d07fabb91d6e06418,Lasse Collin,Lasse Collin,2024-06-05 10:42:47,2024-06-05 10:42:47,"CMake: Include the ""alpha"" or ""beta"" suffix in PACKAGE_VERSION

This way the version string gets into xzgrep and other scripts
in full and also into liblzma.pc.

For the project() command, a suffixless string is required though."
1d3c61575fda0be6b2d50c9e32a343349d5cd5c0,Lasse Collin,Lasse Collin,2024-06-05 10:30:28,2024-06-05 10:30:28,"CMake: Fix wrong version variable

liblzma_VERSION has never existed in the repository. xz_VERSION from
the project() command was used for liblzma SOVERSION so use xz_VERSION
here too.

The wrong variable did no harm in practice as PROJECT_VERSION
was used as the fallback. It has the same value as xz_VERSION.

Fixes: 7e3493d40eac0c3fa3d5124097745a70e15c41f6"
5d1c649ba9eb7a5b9371252ebfbc2911dc774e69,Lasse Collin,Lasse Collin,2024-06-05 09:59:59,2024-06-05 09:59:59,"CMake: Set only ""prefix"" as an absolute path in liblzma.pc

CMake provides variables that are relative to CMAKE_INSTALL_PREFIX
so use them instead of repeating the full path."
e0d6d05ce0d464e966c0669bbf869202a43cc2f7,Lasse Collin,Lasse Collin,2024-06-04 20:59:29,2024-06-04 20:59:29,"CMake: Fix liblzma filename in Windows environments

This is a mess because liblzma DLL outside Cygwin and MSYS2
is liblzma.dll instead of lzma.dll to avoid a conflict with
lzma.dll from LZMA SDK.

On Cygwin the name was ""liblzma-5.dll"" while ""cyglzma-5.dll""
would have been correct (and match what Libtool produces).
MSYS2 likely was broken too as it uses the ""msys-"" prefix.

This change has no effect with MinGW-w64 because with that
the ""lib"" prefix was correct already.

With MSVC builds this is a small breaking change that requires developers
to adjust the library name when linking against liblzma. The liblzma.dll
name is kept as is but the import library and static library are now
lzma.lib instead of liblzma.lib. This is helpful when using pkgconf
because ""pkgconf --msvc-syntax --libs liblzma"" outputs ""lzma.lib""
(it's converted from ""-llzma"" in liblzma.pc). It would be easy to
keep the liblzma.lib naming but the pkgconf compatibility seems worth
it in the long run. The lzma.lib name is compatible with MinGW-w64
too as -llzma will find also lzma.lib.

vcpkg had been patching CMakeLists.txt this way since 2022 but I
learned this only recently. The reasoning for the patch makes sense,
and while this is a small breaking change with MSVC, it seems like
a decent compromise as it keeps the DLL name the same.

2022 patch in vcpkg: https://github.com/microsoft/vcpkg/blob/0707a17ecf1466d64cf1a3c1ee18c8ff02aadb2d/ports/liblzma/win_output_name.patch
See the discussion: https://github.com/microsoft/vcpkg/pull/39024

Thanks to Vincent Torri for confirming the naming issue on Cygwin."
e7a42cda7c827e016619e8cab15e2faf5d4181ae,Lasse Collin,Lasse Collin,2024-06-03 13:55:03,2024-06-03 20:06:10,"Fix version.sh compatiblity with Solaris

The ancient /bin/tr on Solaris doesn't support '\n'.
With /usr/xpg4/bin/tr it works but it might not be in PATH.

Another problem was that sed was given input that didn't have a newline
at the end. Text files must end with a newline to be portable.

Fix both problems:

  - Handle multiline input within sed itself to avoid one tr invocation.
    The default sed even on Solaris does understand \n.

  - Use octals in tr -d. \012 works for ASCII ""line feed"", it's even
    used as an example in the Solaris man page. But we must strip
    also ASCII ""carriage return"" \015 and EBCDIC ""next line"" \025.
    The EBCDIC case got handled with \n previously. Stripping \012
    and \015 on EBCDIC system won't matter as those control chars
    won't be present in the string in the first place.

An awk-based solution could be an alternative but it might need
special casing on Solaris to used nawk instead of awk. The changes
in this commit are smaller and should have a smaller risk for
regressions. It's also possible that version.sh will be dropped
entirely at some point."
a61c9ab4751f2710dcd5459c7d74bbf20781f0f9,Lasse Collin,Lasse Collin,2024-06-03 14:07:11,2024-06-03 20:05:31,CI: Don't require po4a on Solaris
5229bdf5335ce18ed54beb7e646e39927663be86,Lasse Collin,Lasse Collin,2024-06-03 12:08:15,2024-06-03 20:04:32,CI: Use set -e on Solaris too
afa938e429c1ce07d26d02999352fb014b62ff3d,Lasse Collin,Lasse Collin,2024-06-03 14:44:50,2024-06-03 14:44:50,"CMake: Install liblzma.pc even with MSVC

I had misunderstood that it wouldn't be useful with MSVC.
vcpkg had been installing liblzma.pc with custom rules since 2020,
years before liblzma.pc support was added to CMakeLists.txt.

See:
https://github.com/microsoft/vcpkg/blob/eb895b95aac6fd7485373702f29f508c42a180a0/ports/liblzma/portfile.cmake
https://github.com/microsoft/vcpkg/pull/39024#issuecomment-2145064670"
35f8649f08341639a627fd06350e938124ca3622,Sam James,Lasse Collin,2024-06-03 05:16:23,2024-06-03 09:32:34,"ci: don't pin official GH actions via commit, just tag

There's no real value in doing it via commit for official GH actions. We
can keep using pinned commits for unofficial actions. It's hassle for no
gain.

Maybe going forward we can limit this further by only being paranoid
for the jobs with any access to tokens."
e885dae37ff5b1dbc760dabc1e03e866a7302ef2,Christoph Junghans,Lasse Collin,2024-04-30 13:49:26,2024-06-03 09:32:34,"ci: set -e on openbsd

Closes: https://github.com/tukaani-project/xz/pull/116"
21b02dd128cf9e8c76325ec124f70381862dcf19,Christoph Junghans,Lasse Collin,2024-04-30 13:48:58,2024-06-03 09:32:34,ci: set -e on netbsd
8641f0c24c041136670c975b23408184b45431bc,Christoph Junghans,Lasse Collin,2024-04-25 21:56:06,2024-06-03 09:32:34,"ci: actually fail on FreeBSD

Without ""set -e"" the job will always be successful.

See vmactions/freebsd-vm#72"
ef616683ef11f11ffdfbe0624da33905e28a70f9,Andrew Murray,Lasse Collin,2024-04-24 23:24:46,2024-06-03 09:32:34,"Updated actions

Closes: https://github.com/tukaani-project/xz/pull/115"
57b440d316da9ac9cb312ee7e6890f5382556f10,Sam James,Lasse Collin,2024-06-03 01:49:40,2024-06-03 09:32:34,ci: add po4a
08cdf4be9a673d78efe393b53dd73bf43c81dd95,Sam James,Lasse Collin,2024-04-13 20:02:04,2024-06-03 09:32:34,"ci: add Solaris

Inspired by https://github.com/RsyncProject/rsync/commit/3f2a38b01184cae9a931280b534acf5a3dae2e94.

It runs on Solaris 5.11 via a VirtualBox VM."
b69768c8bd1a34fde311935c551d061ba52d9a3f,Sam James,Lasse Collin,2024-04-14 07:08:00,2024-06-03 09:32:34,"xz: list: suppress -Wformat-nonliteral for Solaris

Solaris' GCC can't understand that our use is fine, unlike modern compilers:
```
list.c: In function 'print_totals_basic':
list.c:1191:4: error: format not a string literal, argument types not checked [-Werror=format-nonliteral]
  uint64_to_str(totals.files, 0));
  ^~~~~~~~~~~~~
cc1: all warnings being treated as errors
```

It's presumably because of older gettext missing format attributes.

This is with `gcc (GCC) 7.3.0`."
bb90e1f66d9beb490c4c99763e79519045968710,Lasse Collin,Lasse Collin,2024-06-03 08:44:28,2024-06-03 08:44:28,"license-check.sh: Fix reporting of unclear license info

The main feature was broken because an old variable name hadn't
been updated to match the rest of the script."
b8d134e61ede9f4a296226d97f5c20721fb4e8e2,Lasse Collin,Lasse Collin,2024-05-31 18:36:26,2024-05-31 18:36:26,Update THANKS
162587d3fb3fcedc6eee61eda3ccaaf60c80f0de,Lasse Collin,Lasse Collin,2024-05-29 14:47:13,2024-05-29 20:36:48,"Translations: Run po4a/update-po

Now the files are in the new formatting without source file
line numbers. Future updates should keep the diffs much smaller."
50cd8ed002473c5cd53980e70a53e5e6ad646ffe,Lasse Collin,Lasse Collin,2024-05-29 14:44:53,2024-05-29 20:36:48,"Translations: Run ""make -C po update-po""

In the past this wasn't done before releases; the Git repository
just contained the files from the Translation Project. But this
way it is clearer when comparing release tarballs against the
Git repository. In future releases this might no longer be necessary
within a stable branch as the .po files won't change so easily anymore
when creating a tarball."
16dbd865c8833462e1604a1e13f7effe55bb3fe6,Lasse Collin,Lasse Collin,2024-05-29 15:03:04,2024-05-29 18:00:30,Add NEWS for 5.6.2
a0eeb5f9369c43508610dcf00140edb8e2be92a6,Lasse Collin,Lasse Collin,2024-05-29 15:03:04,2024-05-29 18:00:30,Add NEWS for 5.4.7
9b476fb93a9672f2e70b56e3e9c7e9cfedd6c162,Lasse Collin,Lasse Collin,2024-05-29 15:03:04,2024-05-29 18:00:30,Add NEWS for 5.2.13
9284f1aea31f0eb23e2ea72f7218b271e2234762,Lasse Collin,Lasse Collin,2024-05-29 13:33:24,2024-05-29 13:33:24,"Build: Update po/*.po files only when needed

When po/xz.pot doesn't exist, running ""make"" or ""make dist"" will
create it. Then the .po files will be updated but only if they
actually would change more than the POT-Creation-Date line.
Then the .gmo files would be generated from the .po files.
This is the case before and after this commit.

However, ""make dist"" and thus ""make mydist"" did a forced update
to the files, updating them even if the only change was the
POT-Creation-Date line. This had pros and cons: It made it clear
that the .po file really is in sync with the recent strings in
the package. On the other hand, it added noise in form of changed
files in the source tree and distribution tarballs. It can be
ignored with something like ""diff -I'^""POT-Creation-Date: '"" but
it's still a minor annoyance *if* there's not enough value in
having the most recent timestamp.

Setting DIST_DEPENDS_ON_UPDATE_PO = no means that such forced
update won't happen in ""make dist"" anymore. However, the ""mydist""
target will use xz.pot-update target which is the same target that
is run when xz.pot doesn't exist at all yet. Thus ""mydist"" will
ensure that the translations are up to date, without noise from
changes that would affect only the POT-Creation-Date line.

Note that po4a always uses msgmerge with --update, so POT-Creation-Date
in the man page translations is never the only change in .po files.
In that sense this commit makes the message translations behave more
similarly to the man page translations.

Distribution tarballs will still have non-reproducible POT-Creation-Date
in po/xz.pot and po4a/xz-man.pot but those are just two files. Even they
could be made reproducible from a Git timestamp if desired."
4beba1cd62d7f8f7a6f1e899b68292d94c53b599,Lasse Collin,Lasse Collin,2024-05-28 18:10:33,2024-05-28 18:10:33,"po4a/update-po: Disable wrapping in .pot and .po files

The .po files from the Translation Project come with unwrapped
strings so this matches it.

This may reduce the noise in diffs too. When the beginning of
a paragraph had changed, the rest of the lines got rewrapped
in msgsid. Now it's just one very long line that changes when
a paragraph has been edited.

The --add-location=file option was removed as redundant. The line
numbers don't exist in the .pot file due to --porefs file and thus
they cannot get copied to the .po files either."
b14c130a58a649f9a73392eeb122cb252327c569,Lasse Collin,Lasse Collin,2024-05-28 15:36:53,2024-05-28 15:36:53,Update contact info in README
75f5f2e014b0ee646963f36bc6a9c840fb272353,Lasse Collin,Lasse Collin,2024-05-28 10:25:07,2024-05-28 10:25:07,"Translations: Use --package-name=xz-man with po4a

This is to match reality. See the added comment."
eb217d016cfbbba1babc19a61095b3ea25898af6,Lasse Collin,Lasse Collin,2024-05-28 10:03:40,2024-05-28 10:03:40,"Translations: Omit --package-name from po/Makevars

This is closer to the reality in the po/*.po files."
d28a4b2520adeeaa1b9e921bf42c7c1f36552c06,Lasse Collin,Lasse Collin,2024-05-27 14:45:51,2024-05-28 09:18:09,"license-check.sh: Use '--' with slightly untrusted filenames

Names from git ls-files should be safe but if one runs it on
a tree without the .git dir and there are extra files, it's
safer to have the end of arguments marked with '--'."
fda0ec862a34094cf23fc25d0e0a95858c3a3ab5,Lasse Collin,Lasse Collin,2024-05-27 14:41:37,2024-05-28 09:18:09,"license-check.sh: Use xargs -0 instead of -d

Neither are in POSIX but -0 is much more portable in practice.

Despite the old comment, the grep usage should be portable already."
9114267038deaecf4832a5cacb5acbe6591ac839,Lasse Collin,Lasse Collin,2024-05-27 22:17:45,2024-05-27 22:17:45,Translations: Omit man page line numbers from .pot and .po files
093490b58271e9424ce38a7b1b38bcf61b9c86c6,Lasse Collin,Lasse Collin,2024-05-27 22:06:30,2024-05-27 22:06:30,Translations: Use the xgettext option --add-location=file
fccebe2b4fd513488fc920e4dac32562ed3c7637,Lasse Collin,Lasse Collin,2024-05-27 21:43:53,2024-05-27 21:43:53,"Translations: Use the msgmerge option --add-location=file

This way the PO file diffs are less noisy but the locations of the
strings are still present at file level, just without line numbers.

The option is available since gettext 0.19 (2014).
configure.ac requires 0.19.6."
f361d9ae85707a87eb28db400eb7229cec103d58,Lasse Collin,Lasse Collin,2024-05-27 09:22:08,2024-05-27 09:22:08,Build: Use $(SHELL) instead of sh to run scripts in Makefile.am
a26dece34793a09aac2476f954d162d03e9cf62b,Lasse Collin,Lasse Collin,2024-05-23 14:25:13,2024-05-23 14:25:13,"Translations: Change the home page URLs in man page translations

Since the source strings have changed, these would get marked as
fuzzy and the original string would be used instead. The original
and translated strings are identical in this case so it wouldn't
matter. But patching the translations helps still because then
po4a will show the correct translation percentage."
24387c234b4eed1ef9a7eaa107391740b4095568,Lasse Collin,Lasse Collin,2024-05-23 12:15:18,2024-05-23 12:32:43,"CMake: Add manual support for 32-bit x86 assembly files

One has to pass -DENABLE_X86_ASM=ON to cmake to enable the
CRC assembly code. Autodetection isn't done. Looking at
CMAKE_SYSTEM_PROCESSOR might not work as it comes from uname
unless cross-compilation is done using a CMake toolchain file.

On top of this, if the code is run on modern processors that support
the CLMUL instruction, then the C code should be faster (but then
one should also be using a x86-64 build if possible)."
0fb3c9c3f684f5a25bd425ed079a20a79f0c969d,Lasse Collin,Lasse Collin,2024-05-23 11:26:45,2024-05-23 11:26:45,"CMake: Rename USE_DOXYGEN to ENABLE_DOXYGEN

It's more consistent with the other option() uses."
6bbec3bda02bf87d24fa095074456e723589921f,Lasse Collin,Lasse Collin,2024-05-22 12:21:53,2024-05-22 12:21:53,Mention license-check.sh in COPYING
62733592a1cc6f0b41f46ef52e06d1a6fe1ff38a,Lasse Collin,Lasse Collin,2024-05-22 12:21:53,2024-05-22 12:21:53,Use more confident language in COPYING
a119a4209e8827e1d7c2cfd30cb9f5a9b76f9dff,Lasse Collin,Lasse Collin,2024-05-22 12:21:53,2024-05-22 12:21:53,"Build: Run license-check.sh in ""mydist"" and ""dist-hook""

In mydist the point is to check using the file list from the Git
repository. In dist-hook it is to check that the TARBALL_IGNORE
patterns work when the .git dir or the ""git"" command aren't available.

Refuse to create a distribution tarball if license issues are found."
f3434ecfcb45154508752986f4fc670b8f0555dc,Lasse Collin,Lasse Collin,2024-05-22 12:21:53,2024-05-22 12:21:53,"Add build-aux/license-check.sh

This helps in spotting files that lack SPDX license identifier
and which haven't been explicitly white listed either. The script
requires the .git directory to be present as only the files that
are in the Git repository are checked.

XZ Utils isn't FSFE REUSE compliant for now."
9ae2ebc1e504a1814b0788de95fb5c58c0328dde,Lasse Collin,Lasse Collin,2024-04-29 14:16:38,2024-05-22 12:18:42,Add SPDX license identifiers to files under tests/ossfuzz
9000d70eb9815bd7f43ffddc1c3316c507aa0e05,Lasse Collin,Lasse Collin,2024-04-29 14:16:06,2024-05-22 12:18:42,Add SPDX license identifier to .codespellrc
903c16fcfa5bfad0cdb2a7383d941243bcb12e76,Lasse Collin,Lasse Collin,2024-05-22 12:12:09,2024-05-22 12:12:09,"Move entries po4a/.gitignore to the top level .gitignore

The po4a directory is in EXTRA_DIST and thus all files there
are included in the package. .gitignore doesn't belong in the
package so keep that file out of the po4a directory."
56f1d5ed68e84ba5dfa328ea2291b8f46c995125,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,"Tests: Make the config.h grep patterns Meson compatible

Now the test scripts detect both

    #define HAVE_DECODER_ARM
    #define HAVE_DECODER_ARM 1

as support for the ARM filter without confusing it with these:

    #define HAVE_DECODER_ARM64
    #define HAVE_DECODER_ARM64 1

Previously only the ones ending with "" 1"" were accepted for
the macros where this kind of confusion was possible.

This should help with Meson support because Meson's built-in
features produce config.h entries that are either

    #define FOO 1
    #define FOO 0

or:

    #define FOO
    #undef FOO

The former method has a benefit that one can use ""#if FOO"" and -Wundef
will catch if a #define is missing (for example, it helps catching
typos). But XZ Utils has to use the latter since it has been
convenient with Autoconf's default behavior.[*] While it's easy to
emulate the Autoconf style (#define FOO 1 vs. no #define at all)
in Meson, it results in clumsy code. Thus it's better to change
the few places in the tests where this difference matters.

[*] While most checks in Autoconf default to the second style above,
    a few things use the first style (like AC_CHECK_DECLS). The mix
    of both styles is the most confusing as one has to remember which
    macro needs #ifdef and which #if. Currently HAVE_VISIBILITY is
    only such config.h entry that is 1 or 0. It comes unmodified
    from Gnulib's visibility.m4."
9d997d6f9d4f042412e45c7b7a23a14ad2e4f9aa,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,CMake: Add comments
d35368b33e54bad2f566df99fac29ffea38e34de,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,"CMake: Remove the note that some tests aren't run

They are now in the common build configurations."
dc232d584619b2819a9c52d6ad5d8b5d56b392ba,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,CMake: Add support for test_files.sh
a7e9230af9d1f87f474fe38886eb977d4149dc9b,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,"Tests: Make test_files.sh more flexible

Add a new optional argument to specify the directory of the xz and
xzdec executables.

If ../config.h doesn't exist, assume that all encoders and decoders
are available."
b40e6efbb48d740b9b5b303e59e344801cbb5bd8,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,CMake: Add support for test_compress.sh tests
ac3222d2cb1ff3a15eb6d58f9ea9bc78e8bc3bb2,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,"Tests: Make test_compress.sh more flexible

Add a new optional second argument: directory of the xz and xzdec
executables. This is need with the CMake build where the binaries
end up in the top-level build directory.

If ../config.h doesn't exist, assume that all encoders and decoders
are available. This will make this script usable from CMake in the
most common build configuration.

NOTE: Since the existence of ../config.h is checked, the working
directory of the test script must be a subdir in the build tree!
Otherwise ../config.h would look outside the build tree.

Use the default check type instead of forcing CRC32 or CRC64.
Now the script doesn't need to check if CRC64 is available."
006040b29c83104403621e950ada0c8956c56b3d,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,"CMake: Prepare to support the test_*.sh tests

This is a bit hacky since the scripts grep config.h to know which
features were built but the CMake build doesn't create config.h.
So instead those test scripts will be run only when all relevant
features have been enabled."
6167607a6ea72fb74eefb943c4566e3cab528cd2,Lasse Collin,Lasse Collin,2024-05-20 13:55:00,2024-05-20 13:55:00,Tests: test_suffix.sh: Add a comment
4e9023857d287f624562156b60dc23d2b64c0f10,Lasse Collin,Lasse Collin,2024-05-17 21:34:07,2024-05-17 21:34:07,"Fix typos

Thanks to xx on #tukaani."
b14d08fbbc254485ace9ccfe7908674f608a62ae,Lasse Collin,Lasse Collin,2024-05-17 21:23:52,2024-05-17 21:24:50,"liblzma: Fix white space

Thanks to xx on #tukaani."
9f1a6d6f9a258886933a22239a5b81af34b28199,Lasse Collin,Lasse Collin,2024-05-15 20:14:17,2024-05-15 20:14:17,"Build: Temporarily disable CRC CLMUL to silence OSS Fuzz

The code makes aligned 16-byte reads which may read up to 15 bytes
before the beginning or past the end of the buffer if the buffer
is misaligned. The unneeded bytes are then ignored. It cannot cross
page boundaries and thus cannot cause access violations.

This inherently trips address sanitizer which was already disabled
with __attribute__((__no_sanitize_address__)). However, it also
trips memory sanitizer if the extra bytes are uninitialized because
memory sanitizer doesn't see that those bytes then get ignored by
byte shuffling in the xmm registers.

The plan is to change the code so that all sanitizers pass but it's
not finished yet (performance shouldn't get worse) so as a temporary
measure to keep OSS Fuzz happy, the CLMUL CRC is now disabled even
though I think think the code is fine to use (and easy enough to review
the memory accesses in it too)."
142e670a413a7bce1a2647f1cf1f33f8ee2dbe88,Lasse Collin,Lasse Collin,2024-05-13 14:15:04,2024-05-13 15:00:41,xz: Document the static function get_chains_memusage()
78e984399a64bfee5d11e7308e0bdbc1006db2ca,Lasse Collin,Lasse Collin,2024-05-13 14:07:22,2024-05-13 15:00:41,xz: Rename filters_memusage_max() to get_chains_memusage()
54c3db0a83d3e67d89aba92a0957f2dce9b111a7,Lasse Collin,Lasse Collin,2024-05-13 14:04:05,2024-05-13 15:00:41,xz: Rename filter_memusages to chains_memusages
d9e1ae79ec90d6a7eafeaceaf0ece4f0c83d4417,Lasse Collin,Lasse Collin,2024-05-12 19:26:30,2024-05-13 15:00:41,"xz: Simplify the memory usage scaling code

This is closer to what it was before the --filtersX support was added,
just extended to support for scaling all filter chains. The method
before this commit was an extended version of the original too but
it was done in a more complex way for no clear reason. In case of
an error, the complex version printed fewer informative messages
(a good thing) but it's not a sigificant benefit.

In the limit is too low even for single-threaded mode, the required
amount of memory is now reported like in 5.4.x instead of like in
5.5.1alpha - 5.6.1 which showed the original non-scaled usage. It
had been a FIXME in the old code but it's not clear what message
makes the most sense.

Fixes: 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a"
0ee56983d198b776878432703de664049b1be32e,Lasse Collin,Lasse Collin,2024-05-13 09:14:00,2024-05-13 15:00:41,xz: Edit comments
ec82a49c3553f7206104582dbfb8b64fa433b491,Lasse Collin,Lasse Collin,2024-05-13 09:03:51,2024-05-13 15:00:41,xz: Rename chain_idx to chain_num
a731a6993c34bbbd55abaf9c166718682b1da24f,Lasse Collin,Lasse Collin,2024-05-12 19:29:11,2024-05-13 15:00:41,xz: Edit coding style
32eb176b89243fce3112347fe43a8ad14a9fd2be,Lasse Collin,Lasse Collin,2024-05-12 19:16:05,2024-05-13 12:41:48,"xz: Edit comments

Fixes: 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a"
b90339f4daa510d2b1b8c550f855a99667f1d004,Lasse Collin,Lasse Collin,2024-05-12 18:57:49,2024-05-13 12:41:48,"xz: Fix grammar in a comment

Fixes: cb3111e3ed84152912b5138d690c8d9f00c6ef02"
4c0bdaf13d651b22ba13bd93f8379724d6ccdc13,Lasse Collin,Lasse Collin,2024-05-12 18:46:56,2024-05-13 12:41:46,xz: Rename filter_memusages to encoder_memusages
b54aa023e0ec291b06e976e5f094ab0549e7b09b,Lasse Collin,Lasse Collin,2024-05-12 18:42:05,2024-05-13 12:41:05,xz: Edit coding style
49f67d3d3f42b640a7dfc4ca04c8934f658e10ce,Lasse Collin,Lasse Collin,2024-05-12 18:31:02,2024-05-13 12:41:05,"xz: Rename filters_index to chain_num

The reason is the same as in bd0782c1f13e52cd0fd8415208e30e47004a4c68."
ff9e8b3d069ecfa52ec43dcdb198542d1692a492,Lasse Collin,Lasse Collin,2024-05-12 18:22:43,2024-05-13 12:41:05,"xz: Replace a few uint32_t with ""unsigned"" to reduce the number of casts

These hold only tiny values."
b5e6c1113b1ba02c282bd9163eccdb521c937a78,Lasse Collin,Lasse Collin,2024-05-12 18:10:45,2024-05-13 12:41:05,"xz: Rename filters_used_mask to chains_used_mask

The reason is the same as in bd0782c1f13e52cd0fd8415208e30e47004a4c68."
32500dfaadae2ea36fda2e17b49ae7d9ac1acf52,Lasse Collin,Lasse Collin,2024-05-12 14:14:43,2024-05-13 12:41:05,"xz: Move the setting of ""check"" in coder_set_compression_settings()

It's more logical to do it in the beginning instead of in the middle
of the filter chain handling.

Fixes: d6af7f347077b22403133239592e478931307759"
ad146b1f42bbb678175a503a45ce525e779f9b8b,Lasse Collin,Lasse Collin,2024-05-12 14:09:17,2024-05-13 12:40:58,"xz: Rename ""filters"" to ""chains""

The convention is that

    lzma_filter filters[LZMA_FILTERS_MAX + 1];

contains the filters of a single filter chain.
It was so here as well before the commit
d6af7f347077b22403133239592e478931307759.
It changes ""filters"" to a ten-element array of filter chains.
It's clearer to call this array-of-arrays ""chains"".

This also renames ""filter_idx"" to ""chain_idx"" which is used
as an index as in chains[chain_idx]."
5a4ae4e4d0105404184e9a82ee08f94e1b7783e0,Lasse Collin,Lasse Collin,2024-05-12 13:56:15,2024-05-13 12:39:39,xz: Clean up a comment
2de80494ed9a4dc7db395a32a5efb770ce769804,Lasse Collin,Lasse Collin,2024-05-12 13:52:09,2024-05-13 12:39:39,xz: Add clarifying assertions
1eaad004bf7748976324672db028e34f42802e61,Lasse Collin,Lasse Collin,2024-05-10 17:23:33,2024-05-13 12:39:39,"xz: Add a clarifying assertion

Fixes: 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a"
605094329b986244833c967c04963cacc41a868d,Lasse Collin,Lasse Collin,2024-05-12 13:47:17,2024-05-13 12:39:39,xz: Clarify a comment
8fac2577f2dbb9491afd8500f60d004c9071df3b,Lasse Collin,Lasse Collin,2024-05-12 13:28:25,2024-05-13 12:39:39,"xz: Use the info collected in parse_block_list()

This is slightly simpler and it avoids looping through
the opt_block_list array."
81d350dab864b985b740742772f3b132d4c52914,Lasse Collin,Lasse Collin,2024-05-12 12:48:45,2024-05-13 12:39:39,xz: Remember the filter chains and the largest Block in parse_block_list()
46ab56968f7dfdac187710a1223659d832fa1565,Lasse Collin,Lasse Collin,2024-05-12 12:38:48,2024-05-13 12:39:39,xz: Update a comment and initialization of filters_used_mask
e89293a0baeb8663707c6b4a74fbb310ec698a8f,Lasse Collin,Lasse Collin,2024-05-12 12:08:10,2024-05-13 12:39:39,xz: parse_block_list: Edit integer type casting
87011e40c168255cd2edea129ee68c901770603b,Lasse Collin,Lasse Collin,2024-05-12 11:51:37,2024-05-13 12:39:12,xz: Make filter_memusages a local variable
347b412a9374e0456bef9da0d7d79174c0b6f1a5,Lasse Collin,Lasse Collin,2024-05-10 17:33:08,2024-05-13 12:31:15,"xz: Remove unused code and simplify

opt_mode == MODE_COMPRESS isn't possible when HAVE_ENCODERS isn't
defined. Thus, when *encoding*, the message about *decoder* memory
usage is possible to show only when both encoder and decoder have
been built.

Since the message is shown only at V_DEBUG, skip the memusage
calculation if verbosity level isn't high enough.

Fixes: 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a"
31358c057c9de9d6aba96bae112b2d17942de7cb,Lasse Collin,Lasse Collin,2024-05-10 17:22:58,2024-05-10 21:29:24,"xz: Fix integer type from uint64_t to uint32_t

lzma_options_lzma.dict_size is uint32_t so use it here too.

Fixes: 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a"
3f71e0f3a118e1012526f94fd640a626d30cb599,Lasse Collin,Lasse Collin,2024-05-08 18:40:07,2024-05-08 18:44:48,"debug/translation.bash: Remove an outdated test command

Since 5.3.5beta, ""xz --lzma2=mf=bt4,nice=2"" works even though bt4 needs
at least nice=4. It is rounded up internally by liblzma when needed.

Fixes: 5cd9f0df78cc4f8a7807bf6104adea13034fbb45"
b05a516830095a0e1937aeb31c937fb0400408b6,Lasse Collin,Lasse Collin,2024-05-07 17:41:28,2024-05-07 17:41:28,Fix the date of NEWS for 5.4.5
6d336aeb97b69c496ddc626af403f6f21c753658,Lasse Collin,Lasse Collin,2024-05-07 13:21:15,2024-05-07 13:21:15,"Build: Update visibility.m4 from Gnulib

This fixes the syntax of the ""serial"" line and renames
a temporary variable."
ab51e8ee610e2a893906859848f93d5cb0d5ba83,Lasse Collin,Lasse Collin,2024-05-07 12:05:21,2024-05-07 12:05:21,"po4a/update-po: Delete the *.po.authors files

These are temporary files that are needed only when running po4a.
The top-level Makefile.am puts the whole po4a directory into
distribution tarball (it's simpler) so deleting these temporary
files is needed to prevent them from getting into tarballs."
e4780244a17420cc95d5498cd6e02ad10eac6e5f,Lasse Collin,Lasse Collin,2024-05-07 10:12:17,2024-05-07 10:12:17,xz: Edit comments and coding style
fe4d8b0c80eaeca3381be302eeb89aba871a7e7c,Lasse Collin,Lasse Collin,2024-05-06 20:08:22,2024-05-06 20:09:13,"xz: Omit an incorrect comment

It likely was a leftover from a development version of the code.

Fixes: 183819bfd9efac8c184d9bf123325719b7eee30f"
9bef5b8d17dd5e009d6a6b2becc2dc535da53937,Lasse Collin,Lasse Collin,2024-05-06 20:04:31,2024-05-06 20:04:31,"xz: Add braces to a for-statement and to an if-statement

No functional changes.

Fixes: 5f0c5a04388f8334962c70bc37a8c2ff8f605e0a
Fixes: 479fd58d60622331fcbe48fddf756927b9f80d9a"
de06b9f0c0a3f72569829ecadbc9c0a3ef099f57,Lasse Collin,Lasse Collin,2024-05-06 20:00:09,2024-05-06 20:00:09,"liblzma: Omit an unneeded array from the x86 filter

Fixes: 6aa2a6deeba04808a0fe4461396e7fb70277f3d4"
7da488cb933fdf51cfc14cb5810beb0766224380,Lasse Collin,Lasse Collin,2024-05-06 19:56:31,2024-05-06 19:56:31,CMake: Add test_suffix.sh to the tests
a805594ed0b4cbf7b81aa28ff46a8ab3c83c6876,Lasse Collin,Lasse Collin,2024-05-06 19:55:54,2024-05-06 19:55:54,"Test: Add CMake support to test_suffix.sh

It needs to find the xz executable from a different directory
and work without config.h."
50e19489387774bab3c4a988397d0d9c7a142a46,Lasse Collin,Lasse Collin,2024-05-06 17:45:34,2024-05-06 17:45:34,"Update INSTALL about MINIX 3

The latest stable is 3.3.0 and it's from 2014.
Don't mention the older versions in INSTALL.
3.3.0 ships with Clang already.

Testing with 3.4.0beta6 shows that tuklib_physmem
works too so omit comments about that from INSTALL.
Visibility warnigns weren't a problem either.

Thus it's enough to mention the need for --disable-threads
as configure doesn't autodetect the lack of pthreads."
68d18aea1422a2b86b98b71d0b019233d84e01b0,Lasse Collin,Lasse Collin,2024-05-02 20:00:16,2024-05-02 20:00:16,"Windows: Remove the ""doc/api"" line from README-Windows.txt

Fixes: 252aa1d67bc015eeba462803ab72edeb7744d864"
8ede961374613aa302a13571d662cfaea1cf91f7,Lasse Collin,Lasse Collin,2024-05-02 19:59:04,2024-05-02 19:59:04,"Build: Don't copy doc/api from source tree to distribution tarball

It was copied if it existed. This was intentional when autogen.sh
still built liblzma API docs with Doxygen.

Fixes: d3a77ebc04bf1db8d52de2d9b0f07877bc4fd139"
9a6761aa35ed84d30bd2fda2333a4fdf3f46ecdc,Sam James,Lasse Collin,2024-05-02 12:26:40,2024-05-02 17:29:59,"ci: add SPDX headers

I've checked over each of these and they're straightforward applications
of the relevant Github Actions."
81efe6119f86e3274e512c9eca5ec22b2196c2b3,Yaroslav Halchenko,Lasse Collin,2024-03-29 18:37:24,2024-05-01 10:51:17,"codespell: Ignore the THANKS file and debbugs.gnu.org URL

This way ""codespell -i 0"" is silent.

This is the first commit from
https://github.com/tukaani-project/xz/pull/93
with trivial edits by Lasse Collin."
905bfc74fe2670fd9c39014803017ab53d325401,Lasse Collin,Lasse Collin,2024-04-30 11:37:11,2024-04-30 19:26:11,Add .gitattributes to clean up git-archive output
3334c71d3d4294a4f6569df3ba9bcf2443dfa501,Lasse Collin,Lasse Collin,2024-04-19 09:11:09,2024-04-30 19:24:13,"xzdec: Support Landlock ABI version 4

This was added to xz in 02e3505991233901575b7eabc06b2c6c62a96899
but I forgot to do the same in xzdec.

The Landlock sandbox in xzdec could be stricter as now it's
active only for the last file being decompressed. In xz,
read-only sandbox is used for multi-file case. On the other hand,
xz doesn't go to the strictest mode when processing the last file
when more than one file was specified; xzdec does."
278563ef8f2b8d98d7f2c85e1a64ec1bc21d26d8,Lasse Collin,Lasse Collin,2024-04-30 19:22:45,2024-04-30 19:22:45,"liblzma: Fix incorrect function type error from sanitizer

Clang 17 with -fsanitize=address,undefined:

    src/liblzma/common/filter_common.c:366:8: runtime error:
        call to function encoder_find through pointer to incorrect
        function type 'const lzma_filter_coder *(*)(unsigned long)'
    src/liblzma/common/filter_encoder.c:187: note:
        encoder_find defined here

Use a wrapper function to get the correct type neatly.
This reduces the number of casts needed too.

This issue could be a problem with control flow integrity (CFI)
methods that check the function type on indirect function calls.

Fixes: 3b34851de1eaf358cf9268922fa0eeed8278d680"
77c8f60547decefca8f2d0c905d9c708c38ee8ff,Lasse Collin,Lasse Collin,2024-04-30 18:41:11,2024-04-30 18:41:11,"xz: Avoid arithmetic on a null pointer

It's undefined behavior. The result wasn't ever used as it occurred
in the last iteration of a loop.

Clang 17 with -fsanitize=address,undefined:

    $ src/xz/xz --block-list=123
    src/xz/args.c:164:12: runtime error: applying non-zero offset 1
        to null pointer

Fixes: 88ccf47205d7f3aa314d358c72ef214f10f68b43
Co-authored-by: Sam James <sam@gentoo.org>"
64503cc2b76a388ced4ec5f68234a07f0dcddcd5,Lasse Collin,Lasse Collin,2024-04-27 17:42:00,2024-04-30 14:09:08,"CMake: Support building liblzma API docs using Doxygen

This is disabled by default to match the default in Autotools.
Use -DUSE_DOXYGEN=ON to enable Doxygen usage.

This uses the update-doxygen script, thus this is under if(UNIX)
although Doxygen itself can run on Windows too."
0a7f5a80d8532a1d8cfa0a902c9d1ad7651eca37,Lasse Collin,Lasse Collin,2024-04-20 20:36:39,2024-04-30 14:09:08,"CMake: List API headers in LIBLZMA_API_HEADERS variable

This way the same list will be usable in more than one location."
541406bee3f09e9813103c6406b10fc6ab2e0d30,Lasse Collin,Lasse Collin,2024-04-19 12:16:42,2024-04-30 14:09:08,"PACKAGERS: Document the optional Doxygen usage

Also add a note that packagers should check the licensing
of the Doxygen output."
e21efdf96f39378fe417479f89e97046680406f5,Lasse Collin,Lasse Collin,2024-04-27 14:47:09,2024-04-30 14:09:08,"Build: Add --enable-doxygen to generate and install API docs

It requires Doxygen. This option is disabled by default."
0ece09a575d7e542bda8825808ddd6cf7de8cc4b,Lasse Collin,Lasse Collin,2024-04-19 12:15:17,2024-04-30 14:09:08,"Doxygen: update-doxygen: Support out-of-tree builds

Also, now $0 is used to refer to the script itself."
2c519f641f266fd897edf680827d9c905f411440,Lasse Collin,Lasse Collin,2024-04-28 18:08:00,2024-04-30 14:09:08,"Doxygen: Simplify Doxyfile and add SPDX license identifier

This omits all comments and a few non-default options that weren't
needed. Now it contains no copyrighted content from Doxygen itself."
bdba39a57530d11b88440df8024002be3d09e4a1,Lasse Collin,Lasse Collin,2024-04-19 12:14:02,2024-04-30 14:09:08,"Doxygen: Don't strip JavaScript anymore

The stripping method worked well with Doxygen 1.8 and 1.9 but
it doesn't work with Doxygen 1.10 anymore. Since we won't ship
pre-generated liblzma API docs anymore, the extra bloat and
extra license info of the JavaScript files won't affect the
upstream source package anymore."
d3a77ebc04bf1db8d52de2d9b0f07877bc4fd139,Lasse Collin,Lasse Collin,2024-04-19 14:26:41,2024-04-30 14:09:08,Build: Remove old Doxygen rules from top-level Makefile.am
fd7faa4c338a42a6a40e854b837d285ae2e8c609,Lasse Collin,Lasse Collin,2024-04-19 12:10:06,2024-04-30 14:09:08,Update COPYING to match the autogen.sh and mydist changes
b2bc55d8a0a9f2f59bfd4302067300e650f6baa3,Lasse Collin,Lasse Collin,2024-04-19 14:23:43,2024-04-30 14:09:08,"Build: Don't run update-doxygen as part of ""make mydist"""
e9be74f5b129fe8a5388d588e68b1b7f5168a310,Lasse Collin,Lasse Collin,2024-04-19 12:09:48,2024-04-30 14:09:08,autogen.sh: Don't generated Doxygen docs anymore
252aa1d67bc015eeba462803ab72edeb7744d864,Lasse Collin,Lasse Collin,2024-04-19 14:41:36,2024-04-30 14:09:08,"windows/build.bash: Omit Doxygen docs from the package

They will be omitted from the source tarball and I don't want
to make Doxygen a dependency of build.bash."
634095364d87444d62d8ec54c134c0cd4705f5d7,Lasse Collin,Lasse Collin,2024-04-19 11:14:47,2024-04-28 15:34:45,README: Don't mention PDF man pages anymore
dc684bf76ea23574ee9d88382057381e04e6089a,Lasse Collin,Lasse Collin,2024-04-19 11:10:39,2024-04-28 15:34:45,"Build: Omit PDF man pages from the package

pdf-local rule was added to create the PDFs still with ""make pdf"".
The install rules are missing but that likely doesn't matter at all."
e3531ab4125cbd5c01ebd3200791350960547189,Lasse Collin,Lasse Collin,2024-04-19 10:54:39,2024-04-28 15:34:45,windows/build.bash: Don't copy PDF man pages to the package
710a4573ef2cbd19c66318c3b2d1388e418e26c7,Lasse Collin,Lasse Collin,2024-04-27 22:34:50,2024-04-27 22:34:50,"Tests: test_index: Fix failures when features are disabled

Fixes: cd88423e76d54eb72aea037364f3ebb21f122503"
aaff75c3486c4489ce88b0efb36b41cf138af7c3,Lasse Collin,Lasse Collin,2024-04-20 14:09:11,2024-04-27 17:21:30,"CMake: Keep the build working if the ""tests"" directory is missing

This moves the tests section as is from CMakeLists.txt into
tests/tests.cmake. CMakeLists.txt now includes tests/tests.cmake
if the latter file exists.

Now it's possible to delete the whole ""tests"" directory and
building with CMake will still work normally, just without
the tests. This way the tests are readily available for those
who want them, and those who won't run the tests anyway have
a straightforward way to ensure that nothing from the ""tests""
directory can affect the build process."
a5f2aa5618fe9183706c9c514c3067985f6c338b,Lasse Collin,Lasse Collin,2024-04-20 10:12:50,2024-04-27 17:21:30,"Tests: Remove x86 and SPARC BCJ tests

These are very old but the exact test file isn't easy to reproduce
as it was compiled from a short C program (bcj_test.c) long ago.
These tests weren't very good anyway, just a little better than nothing."
d879686469c9c4bf2a7c0bb6420ebe4530fc8f07,Lasse Collin,Lasse Collin,2024-04-27 15:30:40,2024-04-27 15:30:40,Tests: test_index: Edit a misleading test
612005bbdb0dea9dc09e9e2e9cc16a15c1480acd,Lasse Collin,Lasse Collin,2024-04-27 13:46:01,2024-04-27 13:46:01,Tests: test_index: Use minimal values to test integer overflow
4ad88b2544c2aaf8de8f38af54587098cbe66c1d,Lasse Collin,Lasse Collin,2024-04-27 12:13:39,2024-04-27 12:13:39,Tests: test_index: Test lzma_index_buffer_decode() more
575b11b0d291e66c5fce31ce7a72f11436d57c83,Lasse Collin,Lasse Collin,2024-04-27 12:08:29,2024-04-27 12:08:29,"Tests: test_index: Test that *i = NULL is done on LZMA_PROG_ERROR

On LZMA_DATA_ERROR from lzma_index_buffer_decode(), *i = NULL was
already done but this adds a test for that case too."
2c970debdb285823f01f75e875561d893345ac2b,Lasse Collin,Lasse Collin,2024-04-27 12:01:25,2024-04-27 12:01:25,Tests: test_index: Test lzma_index_buffer_encode() with empty output buf
cd88423e76d54eb72aea037364f3ebb21f122503,Lasse Collin,Lasse Collin,2024-04-27 11:59:55,2024-04-27 11:59:55,Tests: test_index: Replace if-statements with tuktest assertions
7f865577a6224fbbb5f5ca52574b62ea8ac9bf51,Lasse Collin,Lasse Collin,2024-04-27 11:56:16,2024-04-27 11:56:16,"Tests: test_index: Make it clear that my_alloc() has no integer overflows

liblzma guarantees that the product of the allocation size arguments
will fit in size_t.

Putting the pre-increment in the if-statement was clearly wrong
although in practice it didn't matter here as the function is
called only a couple of times."
12313a3b6596cdcf012e180597f84d231f8730d3,Lasse Collin,Lasse Collin,2024-04-27 11:51:52,2024-04-27 11:51:52,Tests: test_index: Verify also iter.block.number_in_stream
ad2654010d9d641ce1601beeff00630027e6bcd4,Lasse Collin,Lasse Collin,2024-04-27 11:51:06,2024-04-27 11:51:06,Tests: test_index: Check cases that aren't a multiple of 4 bytes
2524fcf2b68b662035437cee8edbe80067c0c240,Lasse Collin,Lasse Collin,2024-04-27 11:40:25,2024-04-27 11:40:25,Tests: test_index: Edit comments and white space
71eed2520e2eecae89bade9dceea16e56cfa2ea0,Lasse Collin,Lasse Collin,2024-04-27 11:33:38,2024-04-27 11:33:38,"liblzma: index_decoder: Fix missing initializations on LZMA_PROG_ERROR

If the arguments to lzma_index_decoder() or lzma_index_buffer_decode()
were such that LZMA_PROG_ERROR was returned, the lzma_index **i
argument wasn't touched even though the API docs say that *i = NULL
is done if an error occurs. This obviously won't be done even now
if i == NULL but otherwise it is best to do it due to the wording
in the API docs.

In practice this matters very little: The problem can occur only
if the functions are called with invalid arguments, that is,
the calling application must already have a bug."
0478473953f50716a2bc37b619b1c7dc2682b1ad,Lasse Collin,Lasse Collin,2024-04-26 15:25:18,2024-04-26 15:25:18,CMake: Bump maximum policy version to 3.29
a607e2b40d23f7d998dbaba76692aa30b4c3d9d3,Sam James,Lasse Collin,2024-04-13 21:30:44,2024-04-25 11:08:52,ci: add NetBSD
72c210336de26fb87a928160d025fa10a638d23b,Sam James,Lasse Collin,2024-04-13 22:49:26,2024-04-25 11:08:52,ci: add FreeBSD
b526ec2dbfb5889845ea60548c4f5b1f97d84ab2,Sam James,Lasse Collin,2024-04-13 22:16:08,2024-04-25 11:08:52,ci: add OpenBSD
c7ef767c49351743d8d011574abb9e200bf6b24f,Sam James,Lasse Collin,2024-04-15 04:53:01,2024-04-25 11:04:24,"liblzma: outqueue: add header guard

Reported by github's codeql."
55dcae3056d95cb2ddb8b560c12ba7596bc79f2c,Sam James,Lasse Collin,2024-04-15 04:53:56,2024-04-25 11:04:24,"liblzma: easy_preset: add header guard

Reported by github's codeql."
4ffc60f32397371769b7d6b5e3ed8626292d58df,Lasse Collin,Lasse Collin,2024-04-25 11:00:57,2024-04-25 11:00:57,"tuklib_integer: Rename bswapXX to byteswapXX

The __builtin_bswapXX from GCC and Clang are preferred when
they are available. This can allow compilers to emit the x86 MOVBE
instruction instead of doing a load + byteswap as two instructions
(which would happen if the byteswapping is done in inline asm).

bswap16, bswap32, and bswap64 exist in system headers on *BSDs
and Darwin. #defining bswap16 on NetBSD results in a warning about
macro redefinition. It's safest to avoid this namespace conflict
completely.

No OS supported by tuklib_integer.h uses byteswapXX names and
a web search doesn't immediately find any obvious danger of
namespace conflicts. So let's try these still-pretty-short names
for the macros.

Thanks to Sam James for pointing out the compiler warning on
NetBSD 10.0."
08ab0966a75b501aa7c717622223f0c13a113c75,Lasse Collin,Lasse Collin,2024-04-23 22:20:26,2024-04-23 22:20:58,liblzma: API doc cleanups
3ac8a9bb4cccbee88350696dc9c645c48d77c989,Lasse Collin,Lasse Collin,2024-04-23 13:35:33,2024-04-23 13:35:33,Tests: test_filter_str: Add a few assertions
26c69be80523b05c84dea86c47c4ddd9a10945d7,Lasse Collin,Lasse Collin,2024-04-23 13:35:08,2024-04-23 13:35:08,Tests: test_filter_str: Move one assertion and add a comment
4f6af853bc99904efb8b6c28a0af7b81a8476c1b,Lasse Collin,Lasse Collin,2024-04-23 13:26:06,2024-04-23 13:26:06,Tests: test_filter_str: Tweak comments and white space
c92663aa1bd576e0615498a4189acf0df12e84b9,Lasse Collin,Lasse Collin,2024-04-23 13:25:22,2024-04-23 13:25:22,"Tests: test_filter_str: Add missing RISC-V case

Fixes: 89ea1a22f4ed3685b053b7260bc5acf6c75d1664"
b0366df1d7ed26268101f9303a001c91c0806dfc,Lasse Collin,Lasse Collin,2024-04-22 19:23:32,2024-04-22 20:01:53,Tests: test_filter_str: Test *error_pos more thoroughly
70d12dd069bb9bb0d6bb1c8fafc4e6f77780263d,Lasse Collin,Lasse Collin,2024-04-22 18:54:39,2024-04-22 19:03:04,"liblzma: lzma_str_to_filters: Set *error_pos on all errors

The API docs clearly say that if error_pos isn't NULL then *error
is always set on any error. However, it wasn't touched if str == NULL
or filters == NULL or unsupported flags were specified.

Fixes: cedeeca2ea6ada5b0411b2ae10d7a859e837f203"
ed8e552395701fbf046027cebc8be4a6755b263f,Lasse Collin,Lasse Collin,2024-04-22 17:31:25,2024-04-22 17:31:25,liblzma: Clean up white space
2f06920f20b1ad63b7953dc09569e1d424998849,Lasse Collin,Lasse Collin,2024-04-22 15:35:19,2024-04-22 15:35:19,Tests: test_filter_flags: Edit comments and style
b101e1d1dbc81577c0c9aa0cb89cf2e46a15eb82,Lasse Collin,Lasse Collin,2024-04-22 13:39:44,2024-04-22 13:39:44,"Tests: Fix C99/C11 compatibility when features are disabled

The array could become empty and then the initializer would be
simply {} which is allowed only in GNU-C and C23."
f8f3a220ac8afcb8cb2812917d3b77e00c2eab0d,Lasse Collin,Lasse Collin,2024-04-21 17:32:16,2024-04-21 17:32:16,DOS: Omit useless defines from config.h
fc1921b04b8840caaa777c2bd5340d41b259da20,Lasse Collin,Lasse Collin,2024-04-21 17:27:50,2024-04-21 17:27:50,"Build: Omit useless checks for fcntl.h, limits.h, and sys/time.h"
6aa2a6deeba04808a0fe4461396e7fb70277f3d4,Lasse Collin,Lasse Collin,2024-04-19 19:04:21,2024-04-20 09:09:37,"liblzma: Silence a warning from Coverity static analysis

It is logical why it cannot know for sure that the value has
to be at most 4 if it is less than 16.

The x86 filter is based on a very old LZMA SDK version. Newer
ones have quite a different implementation for the same filter.

Thanks to Sam James."
e89d3e83b4496d0b5410870634970c0aa9721d59,Lasse Collin,Lasse Collin,2024-04-19 20:18:19,2024-04-19 20:18:19,Update .gitignore
86fc4ee859709da0ff9617a1490f13ddac0a109b,Lasse Collin,Lasse Collin,2024-04-19 17:53:24,2024-04-19 17:53:24,Tests: test_lzip_decoder: Tweak coding style and comments
38be573a279bd7b608ee7d8509ec10884e6fb0d5,Lasse Collin,Lasse Collin,2024-04-19 17:51:36,2024-04-19 17:51:36,Tests: test_lzip_decoder: Remove redundant initializations
d7e4bc53eacfab9f3de95d8252bdfdc9419079c9,Lasse Collin,Lasse Collin,2024-04-19 17:47:24,2024-04-19 17:47:24,Tests: test_lzip_decoder: Remove unneeded tuktest_malloc() calls
eeca8f7c5baf1ad69606bb734d5001763466d58f,Lasse Collin,Lasse Collin,2024-04-15 17:35:07,2024-04-15 17:35:07,"xz: Fix white space error.

Thanks to xx on #tukaani."
462ca9409940a19f743daee6b3bcc611277d0007,Sam James,Lasse Collin,2024-04-11 22:01:44,2024-04-14 14:26:54,"xz: add missing noreturn for message_filters_help

Fixes: a165d7df1964121eb9df715e6f836a31c865beef"
863f13d2828b99b0539ce73f9cf85bde32358034,Sam James,Lasse Collin,2024-04-11 18:34:04,2024-04-14 14:26:43,"xz: signals: suppress -Wsign-conversion on macOS

On macOS, we get:
```
signals.c: In function 'signals_init':
signals.c:76:17: error: conversion to 'sigset_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Werror=sign-conversion]
   76 |                 sigaddset(&hooked_signals, sigs[i]);
      |                 ^~~~~~~~~
signals.c:81:17: error: conversion to 'sigset_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Werror=sign-conversion]
   81 |                 sigaddset(&hooked_signals, message_progress_sigs[i]);
      |                 ^~~~~~~~~
signals.c:86:9: error: conversion to 'sigset_t' {aka 'unsigned int'} from 'int' may change the sign of the result [-Werror=sign-conversion]
   86 |         sigaddset(&hooked_signals, SIGTSTP);
      |         ^~~~~~~~~
```

We use `int` for `hooked_signals` but we can't just cast to whatever
`sigset_t` is because `sigset_t` is an opaque type. It's an unsigned int
on macOS. On macOS, `sigaddset` is implemented as a macro.

Just suppress -Wsign-conversion for `signals_init` for macOS given
there's no real nice way of fixing this."
fcbd0d199933a69713cb293cbd7409a757d854cd,Lasse Collin,Lasse Collin,2024-04-13 19:19:40,2024-04-13 19:39:10,"Tests: test_microlzma: Add a ""FIXME?"" about LZMA_FINISH handling"
0fe2dfa68355d2b165544b2bc8babf77dcc2039e,Lasse Collin,Lasse Collin,2024-04-13 15:05:31,2024-04-13 18:01:10,"Tests: test_microlzma: Tweak comments, coding style, and minor details

A few lines were reordered, a few ARRAY_SIZE were changed to sizeof,
and a few uint32_t were changed to size_t. No real functional changes
were intended."
97f0ee0f1f903f4e7c4ea23e9b89d687025d2992,Ryan Carsten Schmidt,GitHub,2024-04-13 00:31:13,2024-04-13 00:31:13,"CI: Use only the active CPUs on macOS

hw.ncpu counts all CPUs including inactive ones. hw.activecpu counts
only the active CPUs."
73f629e321b74f68c9954728fa4f19261afccf46,Sam James,Lasse Collin,2024-04-10 17:33:55,2024-04-10 21:15:35,"ci: rename ci_build.sh -> ci_build.bash

We discussed the name and it's less cognitive load to just call it '.bash'
so you don't have an immediate question about if bashisms are OK."
8709407a9ef8e7e8aec117879400e4dd3e227ada,Sam James,Lasse Collin,2024-04-10 16:42:23,2024-04-10 21:15:35,ci: build in parallel by default
65bf7e0a1ca6386f17608e8afb84ac470c18d23f,Sam James,Lasse Collin,2024-04-10 14:41:08,2024-04-10 21:15:35,"ci: default to -O2

We need this for when we're passing sanitizer flags or -gdwarf-4 for Clang
with Valgrind. Just always start with -O2 if CFLAGS isn't set in the
environment and append what was passed on the command line."
bc899f9e0700ad153bd65f4804c4de7515c8a847,Sam James,Lasse Collin,2024-04-10 14:17:47,2024-04-10 21:15:35,"ci: make automake's test runner verbose on failures

This is a lot easier to work with than the save-logs thing the action
tries to do..."
b5e3470442531717b2457b40ab412740296af1bc,Sam James,Lasse Collin,2024-04-10 11:38:51,2024-04-10 21:15:35,"ci: make UBSAN abort on errors

Unfortunately, UBSAN doesn't do this by default. See also the change
I made in Meson for this in October [0].

[0] https://github.com/mesonbuild/meson/commit/7b7d2e060b447de9c2642848847370a58711ac1c"
6c095a98fbec70b790253a663173ecdb669108c4,Sam James,Lasse Collin,2024-04-10 10:43:10,2024-04-10 21:15:35,"ci: test Valgrind

Using `--trace-children=yes` has a trade-off here, as it makes
`test_scripts.sh` pretty slow when calling various non-xz utilities.

But I also feel like it's not useless to have Valgrind used there and it's
not easy to exclude Valgrind just for that one test...

I did consider using AX_VALGRIND_CHECK [0][1] but I couldn't get it working
immediately with some conditionally-built tests and I wondered if it was
worth spending time on at least while we're debating xz's future build
system situation.

[0] https://www.gnu.org/software/autoconf-archive/ax_valgrind_check.html
[1] https://tecnocode.co.uk/2014/12/23/automatically-valgrinding-code-with-ax_valgrind_check/"
6286c1900c2d2ca33d9b1b397122c7bcdb9a4d59,Lasse Collin,Lasse Collin,2024-04-10 20:20:02,2024-04-10 20:33:17,"liblzma: CRC: Simplify table omission macros

A macro is useful to prevent a single #if directive from
getting too ugly but only one macro is needed for all archs."
45da936c879acf4f053a3055665bf1b10ded4462,Lasse Collin,Lasse Collin,2024-04-10 20:09:40,2024-04-10 20:12:23,"liblzma: ARM64 CRC: Fix omission of CRC32 table

The macro name had an odd typo so the table wasn't omitted
when it should have.

Fixes: 1940f0ec28f08c0ac72c1413d9706fb82eabe6ad"
308a9af85400b0e2019f0f012c8354e831d06d65,Lasse Collin,Lasse Collin,2024-04-10 19:21:51,2024-04-10 20:12:23,"Build: If ARM64 feature detection func is found, stop looking for others

This can speed up configure a tiny bit.

Fixes: c5f6d79cc9515a7f22d7ea4860c6cc394b295732"
fc43cecd32bf9d5f8caa599206b15c9569af1eb6,Lasse Collin,Lasse Collin,2024-04-10 19:04:27,2024-04-10 20:12:23,"liblzma: ARM64 CRC32: Change style of the macOS code to match FreeBSD

I didn't test this but it shouldn't change any functionality.

Fixes: 761f5b69a4c778c8bcb09279b845b07c28790575"
1024cd4cd966b998fedec51e385e9ee9a49b3c57,Lasse Collin,Lasse Collin,2024-04-10 18:59:27,2024-04-10 20:12:23,"liblzma: ARM64 CRC32: Add error checking to FreeBSD-specific code

Also add parenthesis to the return statement.

I didn't test this.

Fixes: 761f5b69a4c778c8bcb09279b845b07c28790575"
2337f7021c860b026e3e849e60a9ae8d09ec0ea0,Lasse Collin,Lasse Collin,2024-04-10 18:56:33,2024-04-10 20:12:11,"liblzma: ARM64 CRC32: Use negation instead of subtracting from 8

Subtracting from 0 is negation, this just keeps warnings away.

Fixes: 761f5b69a4c778c8bcb09279b845b07c28790575"
d8fffd01aa1a3c18e437a222abd34699e23ff5e7,Lasse Collin,Lasse Collin,2024-04-10 18:55:10,2024-04-10 19:53:53,liblzma: ARM64 CRC32: Tweak coding style and comments
780d2c236de0e4749655696c2e0c26fb7565afd3,Lasse Collin,Lasse Collin,2024-04-09 18:55:01,2024-04-09 18:55:01,Update SECURITY.md.
986865ea2f9d1f8dbef4a130926df106b0f6d41a,Lasse Collin,Lasse Collin,2024-04-09 14:47:01,2024-04-09 15:22:27,CI: Remove ifunc support.
689ae2427342a2ea1206eb5ca08301baf410e7e0,Lasse Collin,Lasse Collin,2024-04-09 14:43:16,2024-04-09 15:22:27,"liblzma: Remove ifunc support.

This is *NOT* done for security reasons even though the backdoor
relied on the ifunc code. Instead, the reason is that in this
project ifunc provides little benefits but it's quite a bit of
extra code to support it. The only case where ifunc *might* matter
for performance is if the CRC functions are used directly by an
application. In normal compression use it's completely irrelevant."
6b4c859059a7eb9b0547590c081668e14ecf8af6,Lasse Collin,Lasse Collin,2024-04-08 19:04:41,2024-04-09 15:22:27,tests/files/README: Update the main heading.
2a851e06b891ce894f918faff32a6cca6fdecee6,Lasse Collin,Lasse Collin,2024-04-08 19:02:45,2024-04-09 15:22:27,tests/files/README: Explain how to recreate the ARM64 test files.
3d09b721b94e18fe1f853a04799697f5de10b291,Lasse Collin,Lasse Collin,2024-04-08 18:51:55,2024-04-09 15:22:27,debug: Add generator for the ARM64 test file data.
31ef676567c9d6fcc4ec9fc833c312f7a7c21c48,Lasse Collin,Lasse Collin,2024-04-08 18:19:38,2024-04-09 15:22:27,xz man page: Use .ft CR instead of CW to silence warnings from groff.
780cbf29d5a88db2b546e9b7b019c4c33ca72685,Lasse Collin,Lasse Collin,2024-04-08 16:28:35,2024-04-09 15:22:27,Fix NEWS for 5.6.0 and 5.6.1.
bfd0c7c478e93a1911b845459549ff94587b6ea2,Lasse Collin,Lasse Collin,2024-04-08 16:22:26,2024-04-09 15:22:27,Remove the XZ logo.
77a294d98a9d2d48f7e4ac273711518bf689f5c4,Lasse Collin,Lasse Collin,2024-04-08 15:27:39,2024-04-09 15:22:27,"Update maintainer and author info.

The other maintainer suddenly disappeared."
8dd03d4484ccf80022722a16d0ed9b37f2b58072,Lasse Collin,Lasse Collin,2024-04-08 15:05:32,2024-04-09 15:22:27,"Docs: Update .xz file format specification to 1.2.1.

This only reverts the XZ URL changes."
17aa2e1a796d3f758802df29afc89dcf335db567,Lasse Collin,Lasse Collin,2024-04-08 14:33:56,2024-04-09 15:22:27,"Update website URLs back to tukaani.org.

The XZ projects were moved back to their original URLs."
2739db981023373a2ddabc7b456c7e658bb4f582,Lasse Collin,Lasse Collin,2024-04-08 14:07:08,2024-04-09 15:22:27,xzdec: Tweak coding style and comments.
408b6adb2a07d07c6535f859571cca38837caaf3,Lasse Collin,Lasse Collin,2024-04-08 12:53:46,2024-04-09 15:22:27,tests/ossfuzz: Tiny fix to a comment.
db4dd74a344580e0b81436598d9741a3454245b0,Lasse Collin,Lasse Collin,2024-04-09 15:22:16,2024-04-09 15:22:27,Update THANKS.
e93e13c8b3bec925c56e0c0b675d8000a0f7f754,Lasse Collin,Lasse Collin,2024-04-08 12:32:58,2024-04-09 14:57:39,"Remove the backdoor found in 5.6.0 and 5.6.1 (CVE-2024-3094).

While the backdoor was inactive (and thus harmless) without inserting
a small trigger code into the build system when the source package was
created, it's good to remove this anyway:

  - The executable payloads were embedded as binary blobs in
    the test files. This was a blatant violation of the
    Debian Free Software Guidelines.

  - On machines that see lots bots poking at the SSH port, the backdoor
    noticeably increased CPU load, resulting in degraded user experience
    and thus overwhelmingly negative user feedback.

  - The maintainer who added the backdoor has disappeared.

  - Backdoors are bad for security.

This reverts the following without making any other changes:

6e636819 Tests: Update two test files.
a3a29bbd Tests: Test --single-stream can decompress bad-3-corrupt_lzma2.xz.
0b4ccc91 Tests: Update RISC-V test files.
8c9b8b20 liblzma: Fix typos in crc32_fast.c and crc64_fast.c.
82ecc538 liblzma: Fix false Valgrind error report with GCC.
cf44e4b7 Tests: Add a few test files.
3060e107 Tests: Use smaller dictionary size in RISC-V test files.
e2870db5 Tests: Add two RISC-V Filter test files.

The RISC-V test files also have real content that tests the filter
but the real content would fit into much smaller files. A generator
program would need to be available as well.

Thanks to Andres Freund for finding and reporting it and making
it public quickly so others could act without a delay.
See: https://www.openwall.com/lists/oss-security/2024/03/29/4"
f9cf4c05edd14dedfe63833f8ccbe41b55823b00,Lasse Collin,Lasse Collin,2024-03-30 12:36:28,2024-03-30 12:36:28,"CMake: Fix sabotaged Landlock sandbox check.

It never enabled it."
af071ef7702debef4f1d324616a0137a5001c14c,Jia Tan,Jia Tan,2024-03-25 17:50:02,2024-03-25 19:38:12,Docs: Simplify SECURITY.md.
0b99783d63f27606936bb79a16c52d0d70c0b56f,Lasse Collin,Lasse Collin,2024-03-22 15:46:30,2024-03-22 15:46:30,liblzma: memcmplen.h: Add a comment why subtraction is used.
8a25ba024d55610c448c6e4f1400a00bae51b493,Lasse Collin,Lasse Collin,2024-03-15 15:43:39,2024-03-15 16:04:10,INSTALL: Document arguments of --enable-symbol-versions.
49324b711f9d42b3543bf2f3ae598eaa03360bd5,Lasse Collin,Lasse Collin,2024-03-15 15:15:50,2024-03-15 16:04:10,"Build: Use only the generic symbol versioning with NVIDIA HPC Compiler.

This does the previous commit with CMake.

AC_EGREP_CPP uses AC_REQUIRE so the outermost if-commands must
be changed to AS_IF to ensure that things wont break some day.
See 5a5bd7f871818029d5ccbe189f087f591258c294."
c273123ed0ebaebf49994057a7fe98aae7f42c40,Lasse Collin,Lasse Collin,2024-03-15 14:36:35,2024-03-15 16:04:10,"CMake: Use only the generic symbol versioning with NVIDIA HPC Compiler.

It doesn't support the __symver__ attribute or __asm__("".symver ..."").
The generic symbol versioning can still be used since it only needs
linker support."
df7f487648d18a3992386a59b8a061edca862d17,Lasse Collin,Lasse Collin,2024-03-13 19:38:24,2024-03-15 16:04:10,Update THANKS.
3217b82b3ec023bf8338249134a076bea0ea30ec,Lasse Collin,Lasse Collin,2024-03-13 19:30:18,2024-03-15 16:03:47,liblzma: Minor comment edits.
096bc0e3f8fb4bfc4d2f3f64a7f219401ffb4c31,Sergey Kosukhin,Lasse Collin,2024-03-13 12:07:13,2024-03-15 15:30:50,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).

NVHPC compiler has several issues that make it impossible to
build liblzma:
  - the compiler cannot handle unions that contain pointers that
    are not the first members;
  - the compiler cannot handle the assembler code in range_decoder.h
    (LZMA_RANGE_DECODER_CONFIG has to be set to zero);
  - the compiler fails to produce valid code for delta_decode if the
    vectorization is enabled, which results in failed tests.

This introduces NVHPC-specific workarounds that address the issues."
2ad7fad67080e88fa7fc191f9d613d8b7add9c62,Lasse Collin,Lasse Collin,2024-03-13 19:17:10,2024-03-15 15:30:50,"CMake: Disable symbol versioning on non-glibc Linux.

This better matches what configure.ac does. For example, musl has
only basic symbol versioning support:

https://wiki.musl-libc.org/functional-differences-from-glibc.html#Symbol_versioning

configure.ac tries to enable symbol versioning only with glibc
so now CMake does the same."
82f0c0d39eb2c026b1d96ee706f70ace868d4ed4,Lasse Collin,Lasse Collin,2024-03-13 18:32:46,2024-03-15 15:30:50,CMake: Make symbol versioning configurable.
45d33bfc45e4295b8ad743bc2ae61cc724f98076,Lasse Collin,Lasse Collin,2024-03-13 17:47:36,2024-03-13 20:00:23,"Build: Style tweaks to configure.ac.

The AC_MSG_ERROR line is overlong anyway as are a few other
AC_MSG_ERROR lines already."
f56ed6fac6619b56b005878d3b5210e2f0d721c0,Sergey Kosukhin,Lasse Collin,2024-03-12 19:03:49,2024-03-13 19:59:55,"Build: Let the users override the symbol versioning variant.

There are cases when the users want to decide themselves whether
they want to have the generic (even on GNU/Linux) or the linux
(even if we do not recommend that) symbol versioning variant.
The former might be needed to circumvent compiler issues (i.e.
the compiler does not support all features that are required
for the linux versioning), the latter might help in overriding
the assumptions made in the configure script."
a4f2e20d8466369b1bb277c66f75c9e4ba9cc378,Jia Tan,Jia Tan,2024-03-09 03:27:27,2024-03-09 03:27:27,Add NEWS for 5.6.1
f01be8ad754a905d8c418601767480ec11621b02,Jia Tan,Jia Tan,2024-03-09 02:43:20,2024-03-09 02:43:20,Translations: Add missing --riscv option to man page translations.
6e636819e8f070330d835fce46289a3ff72a7b89,Jia Tan,Jia Tan,2024-03-09 02:18:29,2024-03-09 02:18:29,"Tests: Update two test files.

The original files were generated with random local to my machine.
To better reproduce these files in the future, a constant seed was used
to recreate these files."
a3a29bbd5d86183fc7eae8f0182dace374e778d8,Jia Tan,Jia Tan,2024-03-09 02:08:32,2024-03-09 02:08:32,"Tests: Test --single-stream can decompress bad-3-corrupt_lzma2.xz.

The first stream in this file is valid, so this tests that xz properly
stops after decompressing it."
0b4ccc91454dbcf0bf521b9bd51aa270581ee23c,Jia Tan,Jia Tan,2024-03-09 02:05:32,2024-03-09 02:05:32,"Tests: Update RISC-V test files.

This increases code coverage and tests for possible shifting bugs."
8c9b8b2063daa78ead9f648c2ec3c91e8615dffb,Jia Tan,Jia Tan,2024-03-09 01:52:32,2024-03-09 01:52:32,liblzma: Fix typos in crc32_fast.c and crc64_fast.c.
b93a8d7631d9517da63f03e0185455024a4609e8,Jia Tan,Jia Tan,2024-03-09 01:49:55,2024-03-09 01:49:55,"Tests: Replace HAVE_MICROLZMA usage in CMake and Autotools builds.

This reverts commit adaacafde6661496ca2814b1e94a3ba5186428cb."
82ecc538193b380a21622aea02b0ba078e7ade92,Jia Tan,Jia Tan,2024-03-09 01:20:57,2024-03-09 01:20:57,"liblzma: Fix false Valgrind error report with GCC.

With GCC and a certain combination of flags, Valgrind will falsely
trigger an invalid write. This appears to be due to the omission of
instructions to properly save, set up, and restore the frame pointer.

The IFUNC resolver is a leaf function since it only calls a function
that is inlined. So sometimes GCC omits the frame pointer instructions
in the resolver unless this optimization is explictly disabled.

This fixes https://bugzilla.redhat.com/show_bug.cgi?id=2267598."
3007e74ef250f0ce95d97ffbdf2282284f93764d,Lasse Collin,Lasse Collin,2024-03-05 21:21:26,2024-03-05 21:23:16,liblzma: Fix a typo in a comment in the RISC-V filter.
72d2933bfae514e0dbb123488e9f1eb7cf64175f,Jia Tan,Jia Tan,2024-03-04 16:34:46,2024-03-04 17:54:30,"liblzma: Use attribute no_profile_instrument_function with ifunc.

Thanks to Sam James for determining this was the attribute needed to
workaround the GCC bug and for his version of the patch in Gentoo."
e5faaebbcf02ea880cfc56edc702d4f7298788ad,Jia Tan,Jia Tan,2024-03-04 16:27:31,2024-03-04 17:54:30,"Build: Require attribute no_profile_instrument_function for ifunc usage.

Using __attribute__((__no_profile_instrument_function__)) on the ifunc
resolver works around a bug in GCC -fprofile-generate:
it adds profiling code even to ifunc resolvers which can make
the ifunc resolver crash at program startup. This attribute
was not introduced until GCC 7 and Clang 13, so ifunc won't
be used with prior versions of these compilers.

This bug was brought to our attention by:

    https://bugs.gentoo.org/925415

And was reported to upstream GCC by:

    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=11411"
7eeadd279a24c26ca7ff1292b7df802b89409eb7,Lasse Collin,Lasse Collin,2024-03-04 17:23:18,2024-03-04 17:23:18,liblzma: Fix a comment in the RISC-V filter.
5f3d0595296cc3035eae9e7bb6c3ffb1e1267333,Lasse Collin,Lasse Collin,2024-02-29 14:35:52,2024-02-29 14:37:19,CMake: Warn if translated man pages are missing.
4cd1042ee752d61370c685d0d8b20c1e935672f7,Lasse Collin,Lasse Collin,2024-02-29 14:35:52,2024-02-29 14:37:19,"CMake: Warn if gettext tools and pre-created .gmo files are missing.

It's only done with CMake >= 3.20 and if library support
for translation was already found.

Sort of fixes: https://github.com/tukaani-project/xz/issues/82"
a94b42362c8e807f92236d6d63373f04991e3a50,Lasse Collin,Lasse Collin,2024-02-28 16:26:25,2024-02-28 16:26:25,xz: Add comments.
bbf112e32307a75a54a9e170bc392811443d5c87,Jia Tan,Jia Tan,2024-02-27 15:42:41,2024-02-28 16:05:50,"xz: Change logging level for thread reduction to highest verbosity only.

Now that multi threaded encoding is the default, users do not need to
see a warning message everytime the number of threads is reduced. On
some machines, this could happen very often. It is not unreasonable for
users to need to set double verbose mode to see this kind of
information.

To see these warning messages -vv or --verbose --verbose must be passed
to set xz into the highest possible verbosity mode.

These warnings had caused automated testing frameworks to fail when they
expected no output to stderr.

Thanks to Sebastian Andrzej Siewior for reporting this and for the
initial version of the patch."
649f6447441510d593a88475ad6df4bcdf74ce48,Lasse Collin,Lasse Collin,2024-02-26 21:06:13,2024-02-26 21:06:13,Fix sorting in THANKS.
1255b7d849bf53f196a842ef2a508ed0ff577eaa,Jia Tan,Jia Tan,2024-02-26 15:39:29,2024-02-26 15:40:50,Update THANKS.
eee579fff50099ba163c12305e81a4bd42b7dd53,Chien Wong,Jia Tan,2024-02-25 13:38:13,2024-02-26 15:36:04,"xz: Add missing RISC-V on the filter list in the man page

Signed-off-by: Chien Wong <m@xv97.com>"
328c52da8a2bbb81307644efdb58db2c422d9ba7,Jia Tan,Jia Tan,2024-02-26 15:02:06,2024-02-26 15:27:44,"Build: Fix Linux Landlock feature test in Autotools and CMake builds.

The previous Linux Landlock feature test assumed that having the
linux/landlock.h header file was enough. The new feature tests also
requires that prctl() and the required Landlock system calls are
supported."
eb8ad59e9bab32a8d655796afd39597ea6dcc64d,Jia Tan,Jia Tan,2024-02-26 12:06:10,2024-02-26 12:06:10,Tests: Add test_microlzma to .gitignore and CMakeLists.txt.
9eed1b9a3ae140e93a82febc05a0181e9a4f5093,Jia Tan,Jia Tan,2024-02-26 11:56:25,2024-02-26 11:56:25,Tests: Correct license header in test_microlzma.c.
8bf9f72ee1c05b9e205a72807e8a9e304785673d,Jia Tan,Jia Tan,2024-02-25 13:41:55,2024-02-25 13:41:55,Fix typos in NEWS and CMakeLists.
5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7,Jia Tan,Jia Tan,2024-02-24 08:30:06,2024-02-24 08:30:06,"Bump version and soname for 5.7.0alpha.

Like 5.5.0alpha, 5.7.0alpha won't be released, it's just to mark that
the branch is not stable.

Once again there is no API/ABI stability for new features in devel
versions. The major soname won't be bumped even if API/ABI of new
features breaks between devel releases."
a18fb1edef0d0aac12a09eed05e9c448c777af7b,Jia Tan,Jia Tan,2024-02-24 07:50:36,2024-02-24 07:50:36,Add NEWS for 5.6.0.
24355c5280bc95e3d594432d60bb8432aa6af173,Jia Tan,Jia Tan,2024-02-22 14:27:01,2024-02-22 14:27:01,"Translations: Remove obsolete and fuzzy matches from some translations.

The French and Brazilian Portuguese man page translations have not been
updated since the switch from public domain to 0BSD. The old GPLv2
strings have now been removed from these files."
02ca4a7d7b703e2ec63e00b70feec825e919dbc1,Jia Tan,Jia Tan,2024-02-20 16:31:54,2024-02-20 16:31:54,"Translations: Patch man pages to avoid fuzzy matches.

This will be fixed in the next round of translations, but this avoids
having a fuzzy match or not fixing the English version."
898aad9fc711e03452d24d9e2c5b7f77a6f9ce64,Jia Tan,Jia Tan,2024-02-20 16:30:43,2024-02-20 16:30:43,"xzmore: Fix typo in xzmore.1.

Thanks to Yuri Chornoivan."
5631aa206c8d16b4eeab85a46b8b698f4fc4cdba,Jia Tan,Jia Tan,2024-02-24 04:12:16,2024-02-24 04:12:16,Translations: Update the Vietnamese translation.
a65fd7ce9d6228e87faf61dc56a35984d0088248,Jia Tan,Jia Tan,2024-02-24 04:06:40,2024-02-24 04:06:40,Translations: Update the Esperanto translation.
cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0,Jia Tan,Jia Tan,2024-02-23 15:09:59,2024-02-23 15:09:59,Tests: Add a few test files.
39f4a1a86ad80b2d064b812cee42668e6c8b8c73,Jia Tan,Jia Tan,2024-02-23 12:58:36,2024-02-23 12:58:36,Tests: Add MicroLZMA test.
adaacafde6661496ca2814b1e94a3ba5186428cb,Jia Tan,Jia Tan,2024-02-23 12:57:59,2024-02-23 12:57:59,Build: Define HAVE_MICROLZMA when it is configured.
eea78216d27182ca917bf00e02feaab058a4d21e,Jia Tan,Jia Tan,2024-02-23 12:27:15,2024-02-23 12:27:15,"xz: Fix Capsicum sandbox compile error.

user_abort_pipe[] was still being used instead of the parameters."
32b0a3ce19224f9074d01a4ffbc1655b05fcb82d,Jia Tan,Jia Tan,2024-02-23 08:12:32,2024-02-23 08:12:32,"Build: Fix ARM64 CRC32 instruction feature test.

Old versions of Clang reported the unsupported function attribute and
__crc32d() function as warnings instead of errors, so the feature test
passed when it shouldn't have, causing a compile error at build time.
-Werror was added to this feature test to fix this. The change is not
needed for CMake because check_c_source_compiles() also performs
linking and the error is caught then.

Thanks to Sebastian Andrzej Siewior for reporting this."
4c81c9611f8b2e1ad65eb7fa166afc570c58607e,Lasse Collin,Lasse Collin,2024-02-22 17:16:35,2024-02-22 17:16:35,"CMake: Add LOCALEDIR to the windres workaround.

LOCALEDIR may contain spaces like in ""C:\Program Files""."
de4337fd89ca7db5feb97b5c40143404f6e22986,Lasse Collin,Lasse Collin,2024-02-22 13:18:25,2024-02-22 13:18:25,"xz: Landlock: Fix error message if input file is a directory.

If xz is given a directory, it should look like this:

    $ xz /usr/bin
    xz: /usr/bin: Is a directory, skipping

The Landlock rules didn't allow opening directories for reading:

    $ xz /usr/bin
    xz: /usr/bin: Permission denied

The simplest fix was to allow opening directories for reading.
While it's a bit silly to allow it solely for the error message,
it shouldn't make the sandbox significantly weaker.

The single-file use case (like when called from GNU tar) is
still as strict as possible: all Landlock restrictions are
enabled before (de)compression starts."
120da10ae139ea52ca4275452adf8eda02d07cc8,Lasse Collin,Lasse Collin,2024-02-22 12:41:29,2024-02-22 12:41:29,"liblzma: Disable branchless C version in range decoder.

Thanks to Sebastian Andrzej Siewior and Sam James for
benchmarking on various systems."
00440f52be9ac2c7438c7b0cb1082f12399632c6,Lasse Collin,Lasse Collin,2024-02-21 15:41:32,2024-02-21 15:41:32,INSTALL: Clarify that --disable-assembler affects only 32-bit x86.
11405be84ea294497e12d03d7219f607063f4a00,Lasse Collin,Lasse Collin,2024-02-19 16:41:37,2024-02-21 14:57:20,Windows: build.bash: Include COPYING.0BSD in the package.
c27cf64e3e27f4968431d65be7098a12a3a80d30,Lasse Collin,Lasse Collin,2024-02-18 15:59:46,2024-02-21 14:57:20,Windows: build.bash: include liblzma-crt-mixing.txt in the package.
8d38941baed05de4ff7cc775de14833108f62184,Lasse Collin,Lasse Collin,2024-02-18 15:17:43,2024-02-21 14:57:20,Windows: Major update to Windows build instructions.
4b5b0d352348ff510ffb50a3b5b71788857d37a1,Lasse Collin,Lasse Collin,2024-02-18 13:15:04,2024-02-21 14:57:20,"Windows: Update windows/README-Windows.txt.

It's for binary packages built with windows/build.bash."
1ee716f74085223c8fbcae1d5a384e6bf53c0f6a,Lasse Collin,Lasse Collin,2024-02-18 13:15:04,2024-02-20 19:04:29,"Windows: Update windows/build.bash.

Support for the old MinGW was dropped. Only MinGW-w64 with GCC
is supported now.

The script now supports also cross-compilation from GNU/Linux
(tests are not run). MSYS2 and also the old MSYS 1.0.11 work
for building on Windows. The i686 and x86_64 toolchains must
be in PATH to build both 32-bit and 64-bit versions.

Parallel builds are done if ""nproc"" from GNU coreutils is available.

MinGW-w64 runtime copyright information file was renamed from
COPYING-Windows.txt to COPYING.MinGW-w64-runtime.txt which
is the filename used by MinGW-w64 itself. Its existence
is now mandatory, it's checked at the beginning of the script.

The file TODO is no longer copied to the package."
60462e42609a1d961868a1d1ebecc713c6d27e2e,Jia Tan,Jia Tan,2024-02-20 15:32:22,2024-02-20 15:32:22,Translations: Update the Romanian man page translations.
10d733e5b8929c642e00891cfa9ead9c2cdd2e05,Jia Tan,Jia Tan,2024-02-20 15:30:25,2024-02-20 15:30:25,Translations: Update the Korean man page translations.
797a34b72ac6baff237d7a546fa941d8f78f2f62,Jia Tan,Jia Tan,2024-02-20 13:03:53,2024-02-20 13:03:53,Translations: Update the Spanish translation.
5c3751d019f023e091df9a653e2bb1f6ea8b0d49,Jia Tan,Jia Tan,2024-02-20 12:18:07,2024-02-20 12:18:07,Translations: Update the Romanian translation.
e2d31154ecc750935436e8b62c6b073b2cfa84e3,Jia Tan,Jia Tan,2024-02-20 12:15:50,2024-02-20 12:15:50,Translations: Update the Croatian translation.
704500f994d5ac271bfcfd592275c5a7da4dc8d2,Jia Tan,Jia Tan,2024-02-20 12:05:44,2024-02-20 12:05:44,Translations: Update the German man page translations.
1cfd3dca3fef321b06db73c3c9e13f347c2e2f5f,Jia Tan,Jia Tan,2024-02-20 11:58:25,2024-02-20 11:58:25,Translations: Update the German translation.
28b9b3f16cc7c6e5b42e691994569c17f4561c9a,Jia Tan,Jia Tan,2024-02-20 11:56:52,2024-02-20 11:56:52,Translations: Update the Hungarian translation.
00b06cd0af6ad2ee93d3006bf80417db060c2b04,Lasse Collin,Lasse Collin,2024-02-19 14:48:05,2024-02-19 14:48:18,CMake: Fix building of lzmainfo when translations are enabled.
b0d1422b6037bfea6f6723683bd82a8e6d77026c,Lasse Collin,Lasse Collin,2024-02-19 11:38:42,2024-02-19 14:28:49,"CMake: Don't assume that -fvisibility=hidden is supported outside Windows.

The original code was good enough for supporting GNU/Linux
and a few others but it wasn't very portable.

CMake doesn't support Solaris Studio's -xldscope=hidden.
If it ever does, things should still work with this commit
as Solaris Studio supports not only its own __global but also
the GNU C __attribute__((visibility(""default""))). Support for the
attribute was added in 2007 to Sun Studio 12 compiler version 5.9."
2ced9d34bef4dce52ecbbf84d0903ab0aae1442c,Lasse Collin,Lasse Collin,2024-02-19 10:20:59,2024-02-19 14:28:49,CMake: Revise the component splitting.
426bdc709c169d39b31dec410016779de117ef69,Lasse Collin,Lasse Collin,2024-02-17 19:45:07,2024-02-19 14:28:49,CMake: Update the main comment and document CMAKE_BUILD_TYPE=Release.
4430e075f7ccfc47972d6ca0aa1c3779fc265e10,Lasse Collin,Lasse Collin,2024-02-17 19:27:48,2024-02-19 14:28:49,"CMake: Use -O2 instead of -O3 in CMAKE_BUILD_TYPE=Release.

-O3 doesn't seem useful for speed but it makes the code bigger.
CMake makes is difficult for users to simply override the
optimization level: CFLAGS / CMAKE_C_FLAGS aren't helpful because
they go before CMAKE_C_FLAGS_RELEASE. Of course, users can override
CMAKE_C_FLAGS_RELEASE directly but then they have to remember to
add also -DNDEBUG to disable assertions.

This commit changes -O3 to -O2 in CMAKE_C_FLAGS_RELEASE if and only if
CMAKE_C_FLAGS_RELEASE cache variable doesn't already exist. So if
a custom value is passed on the command line (or reconfiguring an
already-configured build), the cache variable won't be modified."
025eb6d7879e4c4e8cb29716b371e0f4c1aea660,Lasse Collin,Lasse Collin,2024-02-18 12:59:52,2024-02-19 14:28:49,"CMake: Handle symbol versioning on MicroBlaze specially.

This is to match configure.ac."
2edd1a35b2507d1ce68b52dbaebe23c4850a74ce,Lasse Collin,Lasse Collin,2024-02-17 20:18:12,2024-02-19 10:21:37,CMake: Keep build working even if lib/*.[ch] are removed.
d753e2ce4715552884afadc4ed6fbf8ccca6efac,Lasse Collin,Lasse Collin,2024-02-17 16:10:40,2024-02-19 10:21:37,CMake: Install documentation.
7a0405bea9cb0df9318b70f779f82b2c473e98ac,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Bump maximum policy version to 3.28.

CMP0154 doesn't affect us since we don't use FILE_SET."
c2264ffbe3892d28930b89b0123efc369cabc143,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,CMake: Build lzmainfo.
998d0b29536094a89cf385a3b894e157db1ccefe,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,CMake: Build lzmadec.
74e8bc7417a0f37ca7ed5ee0127d33c69b3100b9,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Add test_scripts.sh to the tests.

In contrast to Automake, skipping of this test when decoders
are disabled is handled at CMake side instead of test_scripts.sh
because CMake-build doesn't create config.h."
4808f238a731befcd46c2117c62a1caaf4403989,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Install scripts.

Compared to the Autotools-based build, this has simpler handling
for the shell (@POSIX_SHELL@) and extra PATH entry for the scripts
(configure has --enable-path-for-scripts=PREFIX). The simpler
metho should be enough for non-ancient systems and Solaris."
3462362ebd94d835c664e94ad8f414cfe7590ca7,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"Scripts: Use @PACKAGE_VERSION@ instead of @VERSION@.

PACKAGE_VERSION was already used in liblzma.pc.in.
This way only one version @foo@ is used."
67610c245ba6c68cf65991693bab9312b7dc987b,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Simplify symlink creation and install translated man pages.

It helps that cmake_install.cmake doesn't parallelize installation
so symlinks can be created so that the target is always known to
exist (a requirement on Windows in some cases).

This bumps the minimum CMake version from 3.13 to 3.14 to use
file(CREATE_LINK ...). It could be made to work on 3.13 by
calling ""cmake -E create_symlink"" but it's uglier code and
slower in ""make install"". 3.14 should be a reasonable version
to require nowadays, especially since the Autotools build
is still the primary build system for most OSes."
50cc1d8a5a8154428bf240c7e4972e32b17d99bf,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Add support for building and installing xz with translations.

If gettext tools are available, the .po files listed in po/LINGUAS
are converted using msgfmt. This allows building with translations
directly from xz.git without Autotools.

If gettext tools aren't available, the Autotools-created .gmo files
in the ""po"" directory will be used. This allows CMake-based build
to use translations from Autotools-generated tarball.

If translation support is found (Intl_FOUND) but both the
gettext tools and the pre-generated .gmo files are missing,
then ""make"" will fail."
746c471643009947f94a3494a1148f74c7381b56,Lasse Collin,Lasse Collin,2024-02-19 09:58:33,2024-02-19 09:58:33,liblzma: Remove commented-out code.
4ce300ce0884c6e552de2af9ae8050b47b01f0e7,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,xz: Delete old commented-out code.
cae9a5e0bf422e6c5e64180805904f7ed02dc3aa,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Use stricter pledge(2) and Landlock sandbox.

This makes these sandboxing methods stricter when no files are
created or deleted. That is, it's a middle ground between the
initial sandbox and the strictest single-file-to-stdout sandbox:
this allows opening files for reading but output has to go to stdout."
02e3505991233901575b7eabc06b2c6c62a96899,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Support Landlock ABI version 4.

Linux 6.7 added support for ABI version 4 which restricts
TCP connections which xz won't need and thus those can be
forbidden now. Since the ABI version is handled at runtime,
supporting version 4 won't cause any compatibility issues.

Note that new enough kernel headers are required to get
version 4 support enabled at build time."
374868d81d473ab56556a1cfd6b1b36a1fab348b,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Move sandboxing code to sandbox.c and improve Landlock sandbox.

Landlock is now always used just like pledge(2) is: first in more
permissive mode and later (under certain common conditions) in
a strict mode that doesn't allow opening more files.

I put pledge(2) first in sandbox.c because it's the simplest API
to use and still somewhat fine-grained for basic applications.
So it's the simplest thing to understand for anyone reading sandbox.c."
7312dfbb02197c7f990c7a3cefd027a9387d1473,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,xz: Tweak comments.
c701a5909ad9882469fbab4fab5d2d5556d3ba78,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Fix message_init() description.

Also explicitly initialize progress_automatic to make it clear
that it can be read before message_init() sets it. Static variable
was initialized to false by default already so this is only for
clarity."
9466306719f3b76e92fac4e55fbfd89ec92295fa,Lasse Collin,Lasse Collin,2024-02-17 17:35:47,2024-02-17 17:42:30,"Build: Makefile.am: Sort EXTRA_DIST.

Dirs first, then files in case-sensitive ASCII order."
f3440e78c9517db75bfa52e1a378fad60b073bbe,Lasse Collin,Lasse Collin,2024-02-17 17:25:05,2024-02-17 17:42:30,Build: Don't install TODO.
a7a3b62e2ab03c82b2bd5c78da1d1fb8b8490381,Jia Tan,Jia Tan,2024-02-17 17:09:11,2024-02-17 17:09:11,Translations: Update the Korean man page translations.
9b315db2d5e74700f3dc0755eb86c27947c0b393,Jia Tan,Jia Tan,2024-02-17 17:08:32,2024-02-17 17:08:32,Translations: Update the Korean translation.
56246607dff177b0410d140fcca4a42c865723dc,Lasse Collin,Lasse Collin,2024-02-17 14:23:14,2024-02-17 14:23:14,"Build: Install translated lzmainfo man pages.

All other translated man pages were being installed but
lzmainfo had been forgotten."
f1d6b88aefcced538403c5c2606ba57065b16e70,Lasse Collin,Lasse Collin,2024-02-17 14:01:32,2024-02-17 14:01:32,"liblzma: Avoid implementation-defined behavior in the RISC-V filter.

GCC docs promise that it works and a few other compilers do
too. Clang/LLVM is documented source code only but unsurprisingly
it behaves the same as others on x86-64 at least. But the
certainly-portable way is good enough here so use that."
843ddc5f617b91ae132d6bab0f2f2d9c9fcd214a,Lasse Collin,Lasse Collin,2024-02-17 13:48:28,2024-02-17 13:50:21,liblzma: Wrap a line exceeding 80 chars.
e9053c907250c70d98b319d95fa54cb94fc76869,Sebastian Andrzej Siewior,Lasse Collin,2024-02-16 20:50:15,2024-02-17 13:50:21,"liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.

The x32 port has a x86-64 ABI in term of all registers but uses only
32bit pointer like x86-32. The assembly optimisation fails to compile on
x32. Given the state of x32 I suggest to exclude it from the
optimisation rather than trying to fix it.

Signed-off-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>"
3d198fb13b87f8803442e5799d465f7434a70555,Jia Tan,Jia Tan,2024-02-17 13:05:07,2024-02-17 13:05:07,Translations: Update the Spanish translation.
cf278bfe60a25b54b3786f06503bc61272970820,Jia Tan,Jia Tan,2024-02-17 12:43:29,2024-02-17 12:43:29,Translations: Update the Swedish translation.
b0f1a41be50560cc6cb528e8e96b02b2067c52c2,Jia Tan,Jia Tan,2024-02-17 12:41:38,2024-02-17 12:41:38,Translations: Update the Polish translation.
d74ed48b30c631b6a4c7e7858b06828293bf8520,Jia Tan,Jia Tan,2024-02-17 12:41:02,2024-02-17 12:41:02,Translations: Update the Ukrainian translation.
711e22d5c5f3bac39ac904efb3ede874a66e2045,Lasse Collin,Lasse Collin,2024-02-16 15:53:34,2024-02-16 15:53:34,Translations: Use the same sentence in xz.pot-header that the TP uses.
fb5f6aaf18584672d0fee5dbe41fd30fc6bf5422,Jia Tan,Jia Tan,2024-02-16 14:53:46,2024-02-16 14:54:59,Fix typos discovered by codespell.
c64723bbb094e29b4edd98f6fcce866e1b569b42,Jia Tan,Jia Tan,2024-02-16 14:52:41,2024-02-16 14:54:59,Translations: Update the Ukrainian man page translations.
2895195ed0f68b245c7bd568c126ba6e685fa1d6,Jia Tan,Jia Tan,2024-02-16 14:51:04,2024-02-16 14:54:59,Translations: Update the Ukrainian translation.
4c20781f4c8f04879b64d631a4f44b4909147bde,Lasse Collin,Lasse Collin,2024-02-15 20:32:52,2024-02-15 20:33:49,Translations: Omit the generic copyright line from man page headers.
4323bc3e0c1e1d2037d5e670a3bf6633e8a3031e,Jia Tan,Jia Tan,2024-02-15 14:26:43,2024-02-15 14:26:43,Update m4/.gitignore.
5394a1665b7a108a54cb8b4ef3ebe59d3dbcca3a,Lasse Collin,Lasse Collin,2024-02-14 19:11:49,2024-02-14 19:12:58,"Tests: tuktest.h: Treat Clang separately from GCC.

Don't assume that Clang defines __GNUC__ as the extensions
are available in clang-cl as well (and possibly in some other
Clang variants?)."
cce7330b9f23485a0879422e0c3395a7065439ac,Lasse Collin,Lasse Collin,2024-02-14 19:11:03,2024-02-14 19:11:03,Tests: tuktest.h: Add a missing word to a comment.
5dd8fc9452a3373cedc27379067ce638f992c741,Lasse Collin,Lasse Collin,2024-02-14 19:10:10,2024-02-14 19:10:10,Tests: tuktest.h: Fix the comment about STest.
6f1790254a03c5edf0f2976f773220f070450acd,Jia Tan,Jia Tan,2024-02-14 17:53:40,2024-02-14 17:53:40,Bump version for 5.5.2beta.
924fdeedf48113fb1e0646d86bd89a356d21a055,Lasse Collin,Lasse Collin,2024-02-14 17:46:11,2024-02-14 17:46:11,"liblzma: Fix validate_map.sh.

Adding the SPDX license identifier changed the line numbers."
22140a2df6161b0110e6b4afa5ea0a07c5b60b01,Lasse Collin,Lasse Collin,2024-02-14 17:38:34,2024-02-14 17:38:34,Build: Start the generated ChangeLog from around 5.4.0 instead of 5.2.0.
0b8cefa136c21d403a01b78517f4decb50172bdb,Lasse Collin,Lasse Collin,2024-02-14 17:27:46,2024-02-14 17:27:46,Fixed NEWS for 5.5.2beta.
a4557bad96361d93ea171ed859ac5a696fca824f,Lasse Collin,Lasse Collin,2024-02-14 17:21:45,2024-02-14 17:21:45,liblzma: Silence warnings in --enable-small build.
38edf473236d00b3e100dc4c4f0bf43a4993fed2,Lasse Collin,Lasse Collin,2024-02-14 17:15:58,2024-02-14 17:15:58,Build: Install COPYING.0BSD as part of docs.
b74e10bd839bcdc239afb5300ffaee195f34c217,Lasse Collin,Lasse Collin,2024-02-14 17:14:05,2024-02-14 17:15:34,Docs: List COPYING.0BSD in README.
dfdb60ffe933a1f1497d300dbb4513ed17ec6f0e,Lasse Collin,Lasse Collin,2024-02-14 17:11:48,2024-02-14 17:11:48,"Docs: Include doc/examples/11_file_info.c in tarballs.

It was added in 2017 in c2e29f06a7d1e3ba242ac2fafc69f5d6e92f62cd
but it never got into any release tarballs because it was
forgotten to be added to Makefile.am."
160b6862646d95dfdbd73ab7f1031ede0f54992d,Lasse Collin,Lasse Collin,2024-02-14 17:05:58,2024-02-14 17:05:58,liblzma: Silence a warning.
eeedd4d0925ea417add04ceb42a6c0829244b50c,Lasse Collin,Lasse Collin,2024-02-14 16:32:27,2024-02-14 16:32:27,Add NEWS for 5.5.2beta.
8af7db854f903068d72a9a0d21103cb0c5027fa8,Lasse Collin,Lasse Collin,2024-02-13 12:32:47,2024-02-14 16:31:16,"xz: Mention lzmainfo if trying to use 'lzma --list'.

This kind of fixes the problem reported here:
https://bugs.launchpad.net/ubuntu/+source/xz-utils/+bug/1291020"
0668907ff736e4cd16738c10d39a2bc9e851aefb,Lasse Collin,Lasse Collin,2024-02-14 12:58:36,2024-02-14 16:31:16,liblzma: Add comments.
109f1913d4824c8214d5bbd38ebebf62c37572da,Lasse Collin,Lasse Collin,2024-02-13 15:00:17,2024-02-14 16:31:16,Scripts: Add lz4 support to xzgrep and xzdiff.
de55485cb23af56c5adbe3239b935c957ff8ac4f,Lasse Collin,Lasse Collin,2024-02-13 12:05:13,2024-02-14 16:31:16,liblzma: Choose the range decoder variants using a bitmask macro.
0709c2b2d7c1d8f437b003f691880fd7810e5be5,Lasse Collin,Lasse Collin,2024-02-13 09:38:10,2024-02-14 16:31:16,xz: Fix outdated threading related info on the man page.
3182a330c1512cc1f5c87b5c5a272578e60a5158,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Range decoder: Add x86-64 inline assembly.

It's compatible with GCC and Clang."
cba2edc991dffba7cd4891dbc1bd26cb950cf053,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Range decoder: Add branchless C code.

It's used only for basic bittrees and fixed-size reverse bittree
because those showed a clear benefit on x86-64 with GCC and Clang.
The other methods were more mixed and thus are commented out but
they should be tested on other archs."
e290a72d6dee71faf3a90c9678b2f730083666a7,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: Clarify a comment.
5e04706b91ca90d6befd4da24a588a55e631d4a9,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: LZMA decoder: Optimize loop comparison.

But now it needs one more local variable."
88276f9f2cb4871c7eb86952d93d07c1cf6caa66,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: Optimize literal_subcoder() macro slightly.
5938f6de4d8ec9656776cd69e78ddfd6c3ad84e5,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: LZ decoder: Add unlikely().
9c252e3ed086c6b72590b2531586c42596d4a9d9,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: LZ decoder: Remove a useless unlikely().
f3872a59475456c5d365cad9f1c5be514cfa54b5,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Optimize LZ decoder slightly.

Now extra buffer space is reserved so that repeating bytes for
any single match will never need to copy from two places (both
the beginning and the end of the buffer). This simplifies
dict_repeat() and helps a little with speed.

This seems to reduce .lzma decompression time about 2 %, so
with .xz and CRC it could be slightly less. The small things
add up still."
eb518446e578acf079abae5f1ce28db7b6e59bc1,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: LZMA decoder: Get rid of next_state[].

It's not completely obvious if this is better in the decoder.
It should be good if compiler can avoid creating a branch
(like using CMOV on x86).

This also makes lzma_encoder.c use the new macros."
e0c0ee475c0800c08291ae45e0d66aa00d5ce604,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: LZMA decoder improvements.

This adds macros for bittree decoding which prepares the code
for alternative C versions and inline assembly."
de5c5e417645ad8906ef914bc059d08c1462fc29,Jia Tan,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Creates Non-resumable and Resumable modes for lzma_decoder.

The new decoder resumes the first decoder loop in the Resumable mode.
Then, the code executes in Non-resumable mode until it detects that it
cannot guarantee to have enough input/output to decode another symbol.

The Resumable mode is how the decoder has always worked. Before decoding
every input bit, it checks if there is enough space and will save its
location to be resumed later. When the decoder has more input/output,
it jumps back to the correct sequence in the Resumable mode code.

When the input/output buffers are large, the Resumable mode is much
slower than the Non-resumable because it has more branches and is harder
for the compiler to optimize since it is in a large switch block.

Early benchmarking shows significant time improvement (8-10% on gcc and
clang x86) by using the Non-resumable code as much as possible."
e446ab7a18abfde18f8d1cf02a914df72b1370e3,Jia Tan,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Creates separate ""safe"" range decoder mode.

The new ""safe"" range decoder mode is the same as old range decoder, but
now the default behavior of the range decoder will not check if there is
enough input or output to complete the operation. When the buffers are
close to fully consumed, the ""safe"" operations must be used instead. This
will improve speed because it will reduce the number of branches needed
for most of the range decoder operations."
7f6d9ca329ff3e01d4b0be7366eb4f5c93da41b9,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"doxygen/footer.html: Add missing closing tags and don't open a new tab.

The footer template from Doxygen has the closing </body> </html>
as Doxygen doesn't add them otherwise.

target=""_blank"" was omitted as it's not useful here but
it can be slightly annoying as one cannot just go back
in the browser history.

Since the footer links to the license file in the same
directory and not to CC website, the rel attributes
can be omitted."
26d1527d34d52b0f5d632d4fb636fb33d0867e92,Lasse Collin,Lasse Collin,2024-02-13 11:19:10,2024-02-14 16:31:16,Tweak the expressions in AUTHORS.
d231d56580175fa040fdd3c6207a58243ce6217b,Lasse Collin,Lasse Collin,2024-02-13 11:07:33,2024-02-14 16:31:16,"Translations: Add the man page translators into man page header comment.

It looked odd to only have the original English authors listed
in the header comments of the translated files."
6d35fcb936474fca1acaebfd9502c097b6fde88e,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: Translate also messages of lzmainfo.

lzmainfo has had translation support since 2009 at least but
it was never added to po/POTFILES.in so the messages weren't
translated. It's a very rarely needed tool so it's not too bad.

This also adds src/xz/mytime.c to po/POTFILES.in although there
are no translatable strings. It's simpler this way so that it
won't be forgotten if strings were ever added to that file."
a9f369dd54b05f9ac4e00ead9d765d04fc259868,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: Add custom .pot header with SPDX license identifier.

The same is used for both po/xz.pot and po4a/xz-man.pot."
469cd6653bb96e83c5cf1031c204d34566b15f44,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: po4a/update-po: Add copyright notice to xz-man.pot.

All man pages are under 0BSD now so this is simple now."
28ce45e38fbed4b5f54f2013e38dab47d22bf699,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,Update COPYING about the man pages of the scripts.
e48287bf51afd5184ea74de1dcade9e153f873f7,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"xzdiff, xzgrep, and xzmore: Rewrite the man pages.

The main reason is a kind of silly one:

xz-man.pot contains strings from all man pages in XZ Utils.
The man pages of xzdiff, xzgrep, and xzmore were under GPLv2
and the rest under 0BSD. Thus xz-man.pot contained strings
under two licences. po4a creates the translated man pages
from the combined 0BSD+GPLv2 xz-man.pot.

I haven't liked this mixing in xz-man.pot but the
Translation Project requires that all man pages must be
in the same .pot file. So a separate xz-man-gpl.pot
wasn't an option.

Since these man pages are short, rewriting them was quick enough.
Now xz-man.pot is entirely under 0BSD and marking the per-file
licenses is simpler.

As a bonus, some wording hopefully is now slightly better
although it's perhaps a matter of taste.

NOTE: In xzgrep.1, the EXIT STATUS section was written by me
in the commit d796b6d7fdb8b7238b277056cf9146cce25db604 so that's
why that section could be taken as is from the old xzgrep.1."
3e551b111b8ae8150f1a1040364dbafc034f22be,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"xzless: Update man page slightly.

The xz tool can decompress three file formats and xzless
has always supported uncompressed files too."
40f36da2262d13d6e1ba8449caa855512ae626d7,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,Translations: Change po/Makevars to add a copyright notice to po/xz.pot.
24192854e2ea5c06997431a98bda3c36c5da1497,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: Update po/Makevars to use the template from gettext 0.22.4.

Also add SPDX license identifier now that there is a known license."
b94154957370116480b43bcabca25fc52deb9853,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Include the SPDX license identifier 0BSD to generated files.

Perhaps the generated files aren't even copyrightable but
using the same license for them as for the rest of the liblzma
keeps things more consistent for tools that look for license info."
8e4ec794836bc1701d8c9bd5e347b8ce8cc5bbb4,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Fix compilation of price_tablegen.c.

It is built and run only manually so this didn't matter
unless one wanted to regenerate the price_table.c."
e99bff3ffbcdf2634fd5bd13887627ec7dbfecaf,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Add SPDX license identifiers to GPL, LGPL, and FSFULLR files."
22af94128b89a131f5e58ae69bee5e50227c15da,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,Add SPDX license identifier into 0BSD source code files.
23de53421ea258cde6a3c33a038b1e9d08f771d1,Lasse Collin,Lasse Collin,2024-02-12 21:25:54,2024-02-14 16:31:16,liblzma: Sync the AUTHORS fix about SHA-256 to lzma.h.
689e0228baeb95232430e90d628379db89583d71,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:12,"Change most public domain parts to 0BSD.

Translations and doc/xz-file-format.txt and doc/lzma-file-format.txt
were not touched.

COPYING.0BSD was added."
76946dc4336c831fe2cc26696a035d807dd3cf13,Lasse Collin,Lasse Collin,2024-02-09 15:20:31,2024-02-14 13:23:00,"Fix SHA-256 authors.

The initial commit 5d018dc03549c1ee4958364712fb0c94e1bf2741
in 2007 had a comment in sha256.c that the code is based on
Crypto++ Library 5.5.1. In 2009 the Authors list in sha256.c
and the AUTHORS file was updated with information that the
code had come from Crypto++ but via 7-Zip. I know I had viewed
7-Zip's SHA-256 code but back then the C code has been identical
enough with Crypto++, so I don't why I thought the author info
would need that extra step via 7-Zip for this single file.

Another error is that I had mixed sha.* and shacal2.* files
when checking for author info in Crypto++. The shacal2.* files
aren't related to liblzma's sha256.c and thus Kevin Springle's
code in Crypto++ isn't either."
21d9cbae9eecca28ce373d3d9464defd2cf5d851,Lasse Collin,Lasse Collin,2024-02-09 15:20:31,2024-02-14 13:23:00,"Remove macosx/build.sh.

It was last updated in 2013."
eac2c3c67f9113a225fb6667df862edd30366931,Lasse Collin,Lasse Collin,2024-02-09 15:20:31,2024-02-14 13:23:00,"Doc: Remove doc/examples_old.

It was good to keep these around in parallel with the newer examples
but I think it's OK to remove the old ones at this point."
89ea1a22f4ed3685b053b7260bc5acf6c75d1664,Jia Tan,Jia Tan,2024-02-13 14:38:58,2024-02-13 15:33:27,Tests: Add RISC-V filter support in a few places.
45663443eb2b377e6171529380fee312f1adcdf4,Jia Tan,Jia Tan,2024-02-13 14:37:07,2024-02-13 15:33:21,"liblzma: Fix build error if only RISC-V BCJ filter is enabled.

If any other BCJ filter was enabled for encoding or decoding, then this
was not a problem."
2f15597d677bc35743c777d4cf3bfa698b478681,Jia Tan,Jia Tan,2024-02-13 14:56:24,2024-02-13 15:26:55,Translations: Update the Korean translation.
df873143ad1615c6d6aaa1bf8808b1676091dfe3,Jia Tan,Jia Tan,2024-02-12 17:55:53,2024-02-12 17:55:53,Translations: Update the Korean man page translations.
b3f415eddb150341865a1af47959c3baba076b33,Jia Tan,Jia Tan,2024-02-12 17:53:33,2024-02-12 17:53:33,Translations: Update the Chinese (simplified) translation.
9860d418d296eb3c721e5384fb367c0499b579c8,Lasse Collin,Lasse Collin,2024-02-09 21:21:01,2024-02-09 21:21:01,"xzless: Use ||- in LESSOPEN with with ""less"" 451 and newer."
fd0692b0525e6c26b496492be9e2c865cab734f8,Lasse Collin,Lasse Collin,2024-02-09 21:00:05,2024-02-09 21:00:05,"xzless: Use --show-preproc-errors with ""less"" 632 and newer.

This makes ""less"" show a warning if a decompression error occurred."
adb073da76a920b5a81e6b32254f4ddb054dc57a,Jia Tan,Jia Tan,2024-02-09 15:59:54,2024-02-09 15:59:54,liblzma: Fix typo discovered by codespell.
55d9fc883d221cbace951a370f1fb144698f8c2e,Jia Tan,Jia Tan,2024-02-09 12:01:06,2024-02-09 12:01:06,Translations: Update the Swedish translation.
55ba4a1ea321499c805eedfa811ffde690bae311,Jia Tan,Jia Tan,2024-02-08 12:09:04,2024-02-08 12:09:04,Translations: Update the Spanish translation.
7f2293cd804a89d3c3b2d3ed573560ca9e1520ae,Jia Tan,Jia Tan,2024-02-07 13:34:35,2024-02-07 13:34:35,Translations: Update the Spanish translation.
f4af2036bc625739d6d33d9e1fede583a25c3828,Jia Tan,Jia Tan,2024-02-07 13:28:32,2024-02-07 13:28:32,Translations: Update the Polish translation.
e5e93bb816043c559cddf03a3b7ba13bec353ee4,Jia Tan,Jia Tan,2024-02-07 11:40:12,2024-02-07 11:40:12,Translations: Update the German translation.
28f18ff8e26902762fb007c13be235b4ac1ac071,Jia Tan,Jia Tan,2024-02-07 11:27:25,2024-02-07 11:27:25,Translations: Update the German man page translations.
cabfbc7947da05aa5dfe39bec9759e076f940e3c,Jia Tan,Jia Tan,2024-02-06 15:44:06,2024-02-06 15:44:06,Translations: Update the Romanian translation.
bf20c94f5d748cea2147779f4fa7e2fd2eb8555e,Jia Tan,Jia Tan,2024-02-06 15:45:02,2024-02-06 15:45:02,Translations: Update the Romanian man page translations.
7c25ec9feb0241e4affb7432681cc4f5696f3a96,Jia Tan,Jia Tan,2024-02-07 12:56:57,2024-02-07 12:56:57,Translations: Update the Ukrainian translation.
b3523250e9eef10b017473754c1e1c9e31f10374,Jia Tan,Jia Tan,2024-02-06 15:30:03,2024-02-06 15:30:03,Translations: Update the Ukrainian man page translations.
a5c177f514f4c90e0d2f6045636fca6c2e80a20d,Jia Tan,Jia Tan,2024-02-01 17:39:28,2024-02-01 17:39:28,Update AUTHORS.
7f68a68c19d0ae57bd0e802be0ea8f974e41299f,Jia Tan,Jia Tan,2024-02-01 17:38:51,2024-02-01 17:38:51,liblzma: Update Authors list in crc32_arm64.h.
97f9ba50b84e67b3dcb5b17dd5d3e1d14f9ad1d0,Jia Tan,Jia Tan,2024-02-01 08:07:03,2024-02-01 12:09:11,"liblzma: Check HAVE_USABLE_CLMUL before omitting CRC32 table.

This was split from the prior commit so it could be easily applied to
the 5.4 branch.

Closes: https://github.com/tukaani-project/xz/pull/77"
ca9015f4dead2c97b48f5a6933631b0a448b65b9,Jia Tan,Jia Tan,2024-02-01 08:06:29,2024-02-01 12:09:11,"liblzma: Check HAVE_USABLE_CLMUL before omitting CRC64 table.

If liblzma is configured with --disable-clmul-crc
CFLAGS=""-msse4.1 -mpclmul"", then it will fail to compile because the
generic version must be used but the CRC tables were not included."
2f1552a91c825e87013925e1a67a0930e7aef592,Jia Tan,Jia Tan,2024-01-23 10:02:13,2024-02-01 12:09:11,"liblzma: Only use ifunc in crcXX_fast.c if its needed.

The code was using HAVE_FUNC_ATTRIBUTE_IFUNC instead of CRC_USE_IFUNC.
With ARM64, ifunc is incompatible because it requires non-inline
function calls for runtime detection."
30a25f3742287697bc57a1bef86c19ecf5129322,Jia Tan,Jia Tan,2024-01-22 14:08:45,2024-02-01 12:09:11,Docs: Add --disable-arm64-crc32 description to INSTALL.
1940f0ec28f08c0ac72c1413d9706fb82eabe6ad,Jia Tan,Jia Tan,2024-01-22 13:36:09,2024-02-01 12:09:11,"liblzma: Omit CRC tables when not needed with ARM64 optimizations.

This is similar to the existing x86-64 CLMUL conditions to omit the
tables. They were slightly refactored to improve readability."
761f5b69a4c778c8bcb09279b845b07c28790575,Jia Tan,Jia Tan,2024-01-22 12:54:56,2024-02-01 12:09:11,"liblzma: Rename crc32_aarch64.h to crc32_arm64.h.

Even though the proper name for the architecture is aarch64, this
project uses ARM64 throughout. So the rename is for consistency.

Additionally, crc32_arm64.h was slightly refactored for the following
changes:

   * Added MSVC, FreeBSD, and macOS support in
     is_arch_extension_supported().

   * crc32_arch_optimized() now checks the size when aligning the
     buffer.

   * crc32_arch_optimized() loop conditions were slightly modified to
     avoid both decrementing the size and incrementing the buffer
     pointer.

   * Use the intrinsic wrappers defined in <arm_acle.h> because GCC and
     Clang name them differently.

   * Minor spacing and comment changes."
455a08609caa3223066a717fb01bfa42c5dba47d,Jia Tan,Jia Tan,2024-01-22 12:49:30,2024-02-01 12:09:11,"liblzma: Refactor crc_common.h.

The CRC_GENERIC is now split into CRC32_GENERIC and CRC64_GENERIC, since
the ARM64 optimizations will be different between CRC32 and CRC64.

For the same reason, CRC_ARCH_OPTIMIZED is split into
CRC32_ARCH_OPTIMIZED and CRC64_ARCH_OPTIMIZED.

ifunc will only be used with x86-64 CLMUL because the runtime detection
methods needed with ARM64 are not compatible with ifunc."
61908e816049af7a9f43ea804a57ee8570e2e644,Jia Tan,Jia Tan,2024-01-21 16:42:28,2024-02-01 12:09:11,CMake: Add support for ARM64 CRC32 instruction detection.
c5f6d79cc9515a7f22d7ea4860c6cc394b295732,Jia Tan,Jia Tan,2024-01-21 16:36:47,2024-02-01 12:09:09,"Build: Add support for ARM64 CRC32 instruction detection.

This adds --enable-arm64-crc32/--disable-arm64-crc32 (enabled by
default) for using the ARM64 CRC32 instruction. This can be disabled if
one knows the binary will never need to run on an ARM64 machine
with this instruction extension."
849d0f282a6a890c5cf5a0e0f02980b12d9ebb0f,Chenxi Mao,Jia Tan,2024-01-09 09:23:11,2024-01-27 13:49:26,"Speed up CRC32 calculation on ARM64

The CRC32 instructions in ARM64 can calculate the CRC32 result
for 8 bytes in a single operation, making the use of ARM64
instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if ARM64 has CRC extension
running on Linux.

Signed-off-by: Chenxi Mao <chenxi.mao2013@gmail.com>"
b43c3e48bf6097095eef36d44cdbec811074940a,Jia Tan,Jia Tan,2024-01-26 11:05:51,2024-01-26 11:05:51,Bump version number for 5.5.1alpha.
c7a7ae1500ea90bd3c2d54533e4f433933eb598f,Jia Tan,Jia Tan,2024-01-26 11:00:52,2024-01-26 11:00:52,Add NEWS for 5.5.1alpha
0ef8192e8d5af4e6200d5d4aee22d1f177f7a2df,Jia Tan,Jia Tan,2024-01-26 10:54:24,2024-01-26 10:54:24,Add NEWS for 5.4.6.
93de7e751d17731315a899264f2a7239d7d2d316,Lasse Collin,Lasse Collin,2024-01-24 18:00:57,2024-01-24 18:00:57,"Move doc/logo/xz-logo.png to ""doc"" and Doxygen footer to ""doxygen"".

The footer isn't a complete HTML file so having it in the doxygen
directory is a tiny bit clearer."
00fa01698df51c58ae2acf8c7fa4e1fb159f75a9,Jia Tan,Jia Tan,2024-01-09 09:05:01,2024-01-24 17:39:35,"README: Add COPYING.CC-BY-SA-4.0 entry to section 1.1.

The Overall documentation section (1.1) table spacing had to be adjusted
since the filename was very long."
e280470040b27c5e58d78b25b9e2bb71fc6c3882,Jia Tan,Jia Tan,2024-01-09 08:56:16,2024-01-24 17:39:35,Build: Add the logo and license to the release.
b1ee6cf259bb49ce91abe9f622294524e37edf4c,Jia Tan,Jia Tan,2024-01-09 08:44:42,2024-01-24 17:39:29,COPYING: Add the license for the XZ logo.
31293ae7074802cc7286089a89c7b552d930c97f,Jia Tan,Jia Tan,2024-01-09 08:40:56,2024-01-24 17:06:01,"Doxygen: Added the XZ logo and copyright information.

The PROJECT_LOGO field is now used to include the XZ logo. The footer
of each page now lists the copyright information instead of the default
footer. The license is also copied to statisfy the copyright and so the
link in the documentation can be local."
6daa4d0ea46a8441f21f609149f3633158bf4704,Lasse Collin,Lasse Collin,2024-01-23 16:29:28,2024-01-23 16:29:28,"xz: Use threaded mode by defaut (as if --threads=0 was used).

This hopefully does more good than bad:

  + It's faster by default.

  + Only the threaded compressor creates files that
    can be decompressed in threaded mode.

  - Compression ratio is worse, usually not too much though.
    When it matters, -T1 must be used.

  - Memory usage increases.

  - Scripts that assume single-threaded mode but don't use -T1 will
    possibly use too much resources, for example, if they run
    multiple xz processes in parallel to compress multiple files.

  - Output from single-threaded and multi-threaded compressors
    differ but such changes could happen for other reasons too
    (they just haven't happened since 5.0.0)."
a2dd2dc8e5307a7280bb99868bc478560facba2c,Jia Tan,Jia Tan,2024-01-23 15:52:49,2024-01-23 15:55:44,CI: Use RISC-V filter when building with BCJ support.
3060e1070b2421b26c0e17794c1307ec5622f11d,Jia Tan,Jia Tan,2024-01-23 15:52:14,2024-01-23 15:55:44,Tests: Use smaller dictionary size in RISC-V test files.
44ff2fa5c94dc345c4dd69195a19fc5238df60b3,Jia Tan,Jia Tan,2024-01-23 15:50:57,2024-01-23 15:55:39,Tests: Skip RISC-V test files if decoder was not built.
6133a3f30049d3beaf7d22535b1e5d38e109be4e,Lasse Collin,Jia Tan,2024-01-23 14:11:54,2024-01-23 15:05:47,xz: Man page: Add more examples of LZMA2 options with BCJ filters.
50255feeaabcc7e7db22b858a6bd64a9b5b4f16d,Lasse Collin,Jia Tan,2024-01-22 22:09:48,2024-01-23 15:05:47,"liblzma: RISC-V filter: Use byte-by-byte access.

Not all RISC-V processors support fast unaligned access so
it's better to read only one byte in the main loop. This can
be faster even on x86-64 when compared to reading 32 bits at
a time as half the time the address is only 16-bit aligned.

The downside is larger code size on archs that do support
fast unaligned access."
db5eb5f563e8baa8d912ecf576f53391ff861596,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,"xz: Update xz -lvv for RISC-V filter.

Version 5.6.0 will be shown, even though upcoming alphas and betas
will be able to support this filter. 5.6.0 looks nicer in the output and
people shouldn't be encouraged to use an unstable version in production
in any way."
e2870db5be1503e6a489fc3d47daf950d6f62723,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,"Tests: Add two RISC-V Filter test files.

These test files achieve 100% code coverage in
src/liblzma/simple/riscv.c. They contain all of the instructions that
should be filtered and a few cases that should not."
b26a89869315ece2f6d9d10d32d45f672550f245,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,xz: Update message in --long-help for RISC-V Filter.
283f778908873eca61388029fc418fa800c9d7d7,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,"xz: Update the man page for the RISC-V Filter.

A special note was added to suggest using four-byte alignment when the
compressed instruction extension is not present in a RISC-V binary."
ac3691ccca051d67f60b4a3b05b88e511d0b1b28,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,Tests: Add RISC-V Filter test in test_compress.sh.
2959dbc7358efcf421ce51bc9cd7eae8fdd8fec4,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,liblzma: Update string_conversion.c to support RISC-V Filter.
34372a5adbe5a7f6bf29498410ba3a463a720966,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,CMake: Support RISC-V BCJ Filter for encoding and decoding.
440a2eccb082dc13400c09e22308a58fef85146c,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:41,"liblzma: Add RISC-V BCJ filter.

The new Filter ID is 0x0B.

Thanks to Chien Wong <m@xv97.com> for the initial version of the Filter,
the xz CLI updates, and the Autotools build system modifications.

Thanks to Igor Pavlov for his many contributions to the design of
the filter."
5540f4329bbdb4deb4850d4af48b18ad074bba19,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,"Docs: Update .xz file format specification to 1.2.0.

The new RISC-V filter was added to the specification, in addition to
updating the specification URL."
22d86192f8cf00902a1f90ee2a83ca600794459b,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,xz: Update website URLs in the man pages.
6b63c4c6139fa1bb21b570521d3d2b4a608bc34d,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,liblzma: Update website URL.
fce4758018f3a3589236f3fe7999fd9dd08c77e9,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,Docs: Update website URLs.
c26812c5b2c8a2a47f43214afe6b0b840c73e4f5,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,Build: Update website URL.
fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b,Lasse Collin,Lasse Collin,2024-01-11 13:01:50,2024-01-11 13:25:00,liblzma: CRC: Add a comment to crc_x86_clmul.h about BUILDING_ macros.
4f518c1b6b7b7ce5dcefea81acd44d7a086a8882,Lasse Collin,Lasse Collin,2024-01-11 13:22:36,2024-01-11 13:24:35,"liblzma: CRC: Remove crc_always_inline, use lzma_always_inline instead.

Now crc_simd_body() in crc_x86_clmul.h is only called once
in a translation unit, we no longer need to be so cautious
about ensuring the always-inline behavior."
35c03ec6bf66f1b159964c9721a2dce0e2859b20,Lasse Collin,Lasse Collin,2024-01-11 12:39:46,2024-01-11 12:39:46,liblzma: CRC: Update CLMUL comments to more generic wording.
66f080e8016129576536482ac377e2ecac7a2b90,Lasse Collin,Lasse Collin,2024-01-10 16:23:31,2024-01-11 12:29:42,"liblzma: Rename arch-specific CRC functions and macros.

CRC_CLMUL was split to CRC_ARCH_OPTIMIZED and CRC_X86_CLMUL.
CRC_ARCH_OPTIMIZED is defined when an arch-optimized version is used.
Currently the x86 CLMUL implementations are the only arch-optimized
versions, and these also use the CRC_x86_CLMUL macro to tell when
crc_x86_clmul.h needs to be included.

is_clmul_supported() was renamed to is_arch_extension_supported().
crc32_clmul() and crc64_clmul() were renamed to
crc32_arch_optimized() and crc64_arch_optimized().
This way the names make sense with arch-specific non-CLMUL
implementations as well."
3dbed75b0b9c7087c76fe687acb5cf582cd57b99,Lasse Collin,Lasse Collin,2024-01-10 16:19:21,2024-01-11 12:29:42,liblzma: Fix a comment in crc_common.h.
419f55f9dfc2df8792902b8953d50690121afeea,Lasse Collin,Lasse Collin,2023-10-20 20:35:10,2024-01-11 12:29:42,"liblzma: Avoid extern lzma_crc32_clmul() and lzma_crc64_clmul().

A CLMUL-only build will have the crcxx_clmul() inlined into
lzma_crcxx(). Previously a jump to the extern lzma_crcxx_clmul()
was needed. Notes about shared liblzma on ELF platforms:

  - On platforms that support ifunc and -fvisibility=hidden, this
    was silly because CLMUL-only build would have that single extra
    jump instruction of extra overhead.

  - On platforms that support neither -fvisibility=hidden nor linker
    version script (liblzma*.map), jumping to lzma_crcxx_clmul()
    would go via PLT so a few more instructions of overhead (still
    not a big issue but silly nevertheless).

There was a downside with static liblzma too: if an application only
needs lzma_crc64(), static linking would make the linker include the
CLMUL code for both CRC32 and CRC64 from crc_x86_clmul.o even though
the CRC32 code wouldn't be needed, thus increasing code size of the
executable (assuming that -ffunction-sections isn't used).

Also, now compilers are likely to inline crc_simd_body()
even if they don't support the always_inline attribute
(or MSVC's __forceinline). Quite possibly all compilers
that build the code do support such an attribute. But now
it likely isn't a problem even if the attribute wasn't supported.

Now all x86-specific stuff is in crc_x86_clmul.h. If other archs
The other archs can then have their own headers with their own
is_clmul_supported() and crcxx_clmul().

Another bonus is that the build system doesn't need to care if
crc_clmul.c is needed.

is_clmul_supported() stays as inline function as it's not needed
when doing a CLMUL-only build (avoids a warning about unused function)."
e3833e297dfb5021a197bda34ba2a795e30aaf8a,Lasse Collin,Lasse Collin,2023-10-20 21:06:52,2024-01-11 12:29:42,"liblzma: crc_clmul.c: Add crc_attr_target macro.

This reduces the number of the complex #if directives."
d164ac0e62904126f7920c25f9a2875c8cd28b97,Lasse Collin,Lasse Collin,2023-10-20 19:49:48,2024-01-11 12:29:42,liblzma: Simplify existing cases with lzma_attr_no_sanitize_address.
9523c1300d22fa715765c181cf991d14d6112fb1,Lasse Collin,Lasse Collin,2023-10-20 18:53:35,2024-01-11 12:29:38,liblzma: #define crc_attr_no_sanitize_address in crc_common.h.
93d144f0930821590524247bd174afd38003d7f0,Lasse Collin,Lasse Collin,2023-10-20 20:25:14,2024-01-10 15:19:03,"liblzma: CRC: Add empty lines.

And remove one too."
0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae,Lasse Collin,Lasse Collin,2023-10-20 20:19:33,2024-01-10 15:19:03,"liblzma: crc_clmul.c: Tidy up the location of MSVC pragma.

It makes no difference in practice."
15cf3f04f270d707a5c91cc0208b23b6db42b774,Lasse Collin,Lasse Collin,2023-12-20 19:16:24,2023-12-28 15:17:39,Update THANKS.
cd64dd70d5665b6048829c45772d08606f44672e,Lasse Collin,Lasse Collin,2023-12-20 19:15:16,2023-12-28 15:17:39,"liblzma: Use 8-byte method in memcmplen.h on ARM64.

It requires fast unaligned access to 64-bit integers
and a fast instruction to count leading zeros in
a 64-bit integer (__builtin_ctzll()). This perhaps
should be enabled on some other archs too.

Thanks to Chenxi Mao for the original patch:
https://github.com/tukaani-project/xz/pull/75 (the first commit)
According to the numbers there, this may improve encoding
speed by about 3-5 %.

This enables the 8-byte method on MSVC ARM64 too which
should work but wasn't tested."
12c90c00f05e19da3c0c91d8cd8e0d0d45965606,Lasse Collin,Lasse Collin,2023-12-20 19:01:06,2023-12-28 15:17:39,"liblzma: Check also for __clang__ in memcmplen.h.

This change hopefully makes no practical difference as Clang
likely was detected via __GNUC__ or _MSC_VER already."
133c5851eb917c6d99d0b623c1689c8518e65f38,Jia Tan,Jia Tan,2023-12-21 13:39:08,2023-12-21 13:39:08,Translations: Update the French translation.
710cbc186cad0ac601c38bd6bf31167648a5581e,Jia Tan,Jia Tan,2023-12-21 08:39:53,2023-12-21 12:53:27,"xz: Add a comment to Capsicum sandbox setup.

This comment is repeated in xzdec.c to help remind us why all the
capabilities are removed from stdin in certain situations."
4e1c695676bafbaecc9fb307f6ee94138ae72c12,Jia Tan,Jia Tan,2023-12-20 14:19:19,2023-12-21 12:53:27,"Docs: Update --enable-sandbox option in INSTALL.

xzdec now also uses the sandbox when its configured."
ebddf20214143a8e002ab897e95e880bb4c5ac44,Jia Tan,Jia Tan,2023-12-20 14:39:13,2023-12-21 12:53:23,"CMake: Move sandbox detection outside of xz section.

The sandbox is now enabled for xzdec as well, so it no longer belongs
in just the xz section. xz and xzdec are always built, except for older
MSVC versions, so there isn't a need to conditionally show the sandbox
configuration. CMake will do a little unecessary work on older MSVC
versions that can't build xz or xzdec, but this is a very small
downside."
5feb09266fd2928ec0a4dcb98c1dc7f053111316,Jia Tan,Jia Tan,2023-12-20 14:43:44,2023-12-20 14:43:44,"Build: Allow sandbox to be configured for just xzdec.

If xz is disabled, then xzdec can still use the sandbox."
d74fb5f060b76db709b50f5fd37490394e52f975,Jia Tan,Jia Tan,2023-12-19 13:18:28,2023-12-19 13:18:28,"xzdec: Add sandbox support for Pledge, Capsicum, and Landlock.

A very strict sandbox is used when the last file is decompressed. The
likely most common use case of xzdec is to decompress a single file.
The Pledge sandbox is applied to the entire process with slightly more
relaxed promises, until the last file is processed.

Thanks to Christian Weisgerber for the initial patch adding Pledge
sandboxing."
b34b6a9912d6165e34ba0db151b7f9941d2e06d5,Jia Tan,Jia Tan,2023-12-20 13:31:34,2023-12-20 13:38:39,"liblzma: Initialize lzma_lz_encoder pointers with NULL.

This fixes the recent change to lzma_lz_encoder that used memzero
instead of the NULL constant. On some compilers the NULL constant
(always 0) may not equal the NULL pointer (this only needs to guarentee
to not point to valid memory address).

Later code compares the pointers to the NULL pointer so we must
initialize them with the NULL pointer instead of 0 to guarentee
code correctness."
183a62f0b540ff4d23cc19b2b6bc2525f0bd64df,Jia Tan,Jia Tan,2023-12-16 12:51:38,2023-12-16 12:51:38,"liblzma: Set all values in lzma_lz_encoder to NULL after allocation.

The first member of lzma_lz_encoder doesn't necessarily need to be set
to NULL since it will always be set before anything tries to use it.
However the function pointer members must be set to NULL since other
functions rely on this NULL value to determine if this behavior is
supported or not.

This fixes a somewhat serious bug, where the options_update() and
set_out_limit() function pointers are not set to NULL. This seems to
have been forgotten since these function pointers were added many years
after the original two (code() and end()).

The problem is that by not setting this to NULL we are relying on the
memory allocation to zero things out if lzma_filters_update() is called
on a LZMA1 encoder. The function pointer for set_out_limit() is less
serious because there is not an API function that could call this in an
incorrect way. set_out_limit() is only called by the MicroLZMA encoder,
which must use LZMA1 where set_out_limit() is always set. Its currently
not possible to call set_out_limit() on an LZMA2 encoder at this time.

So calling lzma_filters_update() on an LZMA1 encoder had undefined
behavior since its possible that memory could be manipulated so the
options_update member pointed to a different instruction sequence.

This is unlikely to be a bug in an existing application since it relies
on calling lzma_filters_update() on an LZMA1 encoder in the first place.
For instance, it does not affect xz because lzma_filters_update() can
only be used when encoding to the .xz format.

This is fixed by using memzero() to set all members of lzma_lz_encoder
to NULL after it is allocated. This ensures this mistake will not occur
here in the future if any additional function pointers are added."
1a1bb381db7a20cf86cb45a350e5cca35224d017,Jia Tan,Jia Tan,2023-12-16 12:30:55,2023-12-16 12:30:55,liblzma: Tweak a comment.
55810780e04f759747b02683fb8020b8cd022a85,Jia Tan,Jia Tan,2023-12-16 12:28:21,2023-12-16 12:28:21,"liblzma: Make parameter names in function definition match declaration.

lzma_raw_encoder() and lzma_raw_encoder_init() used ""options"" as the
parameter name instead of ""filters"" (used by the declaration). ""filters""
is more clear since the parameter represents the list of filters passed
to the raw encoder, each of which contains filter options."
5dad6f628af742bab826819760deb677597445f7,Jia Tan,Jia Tan,2023-12-16 12:18:47,2023-12-16 12:18:47,"liblzma: Improve lzma encoder init function consistency.

lzma_encoder_init() did not check for NULL options, but
lzma2_encoder_init() did. This is more of a code style improvement than
anything else to help make lzma_encoder_init() and lzma2_encoder_init()
more similar."
e1b1a9d6370b788bd6078952c6c201e12bc27cbf,Jia Tan,Jia Tan,2023-12-16 03:20:20,2023-12-16 03:20:20,Docs: Update repository URL in Changelog.
f9b82bc64a9405e486575c65c1729229eb0a8198,Jia Tan,Jia Tan,2023-12-15 08:56:31,2023-12-15 08:56:31,CI: Update Upload Artifact Action.
d0b24efe6cdc47db5b0fdf6306f70a2e0e63e49e,Jia Tan,Jia Tan,2023-12-07 13:48:07,2023-12-07 13:48:07,"Tests: Silence -Wsign-conversion warning on GCC version < 10.

Since GCC version 10, GCC no longer complains about simple implicit
integer conversions with Arithmetic operators.

For instance:

    uint8_t a = 5;
    uint32_t b = a + 5;

Give a warning on GCC 9 and earlier but this:

    uint8_t a = 5;
    uint32_t b = (a + 5) * 2;

Gives a warning with GCC 10+."
4a972a8ee3ed88ac14067c1d2f15b78988e5dae8,Jia Tan,Jia Tan,2023-12-06 10:39:03,2023-12-07 12:06:57,Update THANKS.
ee2f48350099201694a7586e41d7aa2f09fc74da,Jia Tan,Jia Tan,2023-12-06 10:30:25,2023-12-07 12:06:57,"Tests: Minor cleanups to OSS-Fuzz files.

Most of these fixes are small typos and tweaks. A few were caused by bad
advice from me. Here is the summary of what is changed:

- Author line edits

- Small comment changes/additions

- Using the return value in the error messages in the fuzz targets'
  coder initialization code

- Removed fuzz_encode_stream.options. This set a max length, which may
  prevent some worthwhile code paths from being properly exercised.

- Removed the max_len option from fuzz_decode_stream.options for the
  same reason as fuzz_encode_stream. The alone decoder fuzz target still
  has this restriction.

- Altered the dictionary contents for fuzz_lzma.dict. Instead of keeping
  the properties static and varying the dictionary size, the properties
  are varied and the dictionary size is kept small. The dictionary size
  doesn't have much impact on the code paths but the properties do.

Closes: https://github.com/tukaani-project/xz/pull/73"
483bb90eec7c83e1c2bcd06287714afd62d8c17d,Maksym Vatsyk,Jia Tan,2023-12-05 15:31:09,2023-12-07 12:06:57,"Tests: Add fuzz_encode_stream ossfuzz target.

This fuzz target handles .xz stream encoding. The first byte of input
is used to dynamically set the preset level in order to increase the
fuzz coverage of complex critical code paths."
7ca8c9869df82756c3128c4fcf1058da4d18aa48,Maksym Vatsyk,Jia Tan,2023-12-04 16:23:24,2023-12-07 12:06:57,"Tests: Add fuzz_decode_alone OSS-Fuzz target

This fuzz target that handles LZMA alone decoding. A new fuzz
dictionary .dict was also created with common LZMA header values to
help speed up the discovery of valid headers."
37581a77ad5a49615325b1d1925fdc402b1e1d5a,Maksym Vatsyk,Jia Tan,2023-12-04 16:21:29,2023-12-07 12:06:54,"Tests: Update OSS-Fuzz Makefile.

All .c files can be built as separate fuzz targets. This simplifies
the Makefile by allowing us to use wildcards instead of having a
Makefile target for each fuzz target."
28ce6a1c2a74866c51f7996a6869679c236d3c94,Maksym Vatsyk,Jia Tan,2023-12-04 16:20:08,2023-12-07 12:06:54,Tests: Move common OSS-Fuzz target code to .h file.
bf0521ea1591c25b9d510c1b8be86073e9d847c6,Maksym Vatsyk,Jia Tan,2023-12-04 16:18:20,2023-12-07 12:06:51,Tests: Rename OSS-Fuzz files.
685094b8e1c1aa1bf934de0366ca42ef599d25f7,Jia Tan,Jia Tan,2023-11-30 15:10:43,2023-11-30 15:10:43,Update THANKS.
3b3023e00b0071e10f589bbc3674e0ec432b8add,Kian-Meng Ang,Jia Tan,2023-11-30 15:01:19,2023-11-30 15:08:05,Tests: Fix typos
424d46ead8cbc0da57f406b76926ec4ed47437f5,Kian-Meng Ang,Jia Tan,2023-11-30 14:59:47,2023-11-30 15:08:05,xz: Fix typo
35558adf9c45e5597f2c8dbd969885dd484038d2,Jia Tan,Jia Tan,2023-11-30 12:41:00,2023-11-30 12:41:00,Update THANKS.
fd170e8557727bed6bec0518c16415064d972e4e,Jia Tan,Jia Tan,2023-11-22 13:20:12,2023-11-30 12:09:46,CI: Test musl libc builds on Ubuntu runner.
db2b4aa068a492c0013279a4ed43803e8ff9bb3e,Jia Tan,Jia Tan,2023-11-22 13:12:15,2023-11-30 12:09:46,CI: Allow ci_build.sh to set a different C compiler.
ff7badef53c2cd698d4b72b945f34dfd0835e13c,Jia Tan,Jia Tan,2023-11-24 13:19:12,2023-11-30 12:09:46,CMake: Use consistent indentation with check_c_source_compiles().
d4af167570f2c14b002ee18a39d5b1e7e5a892b1,Jia Tan,Jia Tan,2023-11-22 12:33:36,2023-11-30 12:07:34,"CMake: Change __attribute__((__ifunc__())) detection.

This renames ALLOW_ATTR_IFUNC to USE_ATTR_IFUNC and applies the ifunc
detection changes that were made to the Autotools build.

Fixes: https://github.com/tukaani-project/xz/issues/70"
20ecee40a0053fd16371ef0628046bf45e548d72,Jia Tan,Jia Tan,2023-11-24 12:19:11,2023-11-30 12:05:09,Docs: Update INSTALL for --enable_ifunc change.
ffb456593d695d70052a2f71c7a2e6269217d194,Jia Tan,Jia Tan,2023-11-21 12:56:55,2023-11-30 12:04:42,"Build: Change --enable-ifunc handling.

Some compilers support __attribute__((__ifunc__())) even though the
dynamic linker does not. The compiler is able to create the binary
but it will fail on startup. So it is not enough to just test if
the attribute is supported.

The default value for enable_ifunc is now auto, which will attempt
to compile a program using __attribute__((__ifunc__())). There are
additional checks in this program if glibc is being used or if it
is running on FreeBSD.

Setting --enable-ifunc will skip this test and always enable
__attribute__((__ifunc__())), even if is not supported."
12b89bcc9915090eb42ae638e565af44b6832a23,Lasse Collin,Lasse Collin,2023-11-23 15:39:10,2023-11-23 15:39:10,xz: Tweak a comment.
2ab2e4b5a542eab93902985ce4e642719a8b7a4e,Jia Tan,Jia Tan,2023-11-23 14:13:39,2023-11-23 14:40:27,xz: Use is_tty() in message.c.
584e3a258f32d579b1d07f99b4dc6e856c10ac7e,Jia Tan,Jia Tan,2023-11-23 14:04:35,2023-11-23 14:40:20,"xz: Create separate is_tty() function.

The new is_tty() will report if a file descriptor is a terminal or not.
On POSIX systems, it is a wrapper around isatty(). However, the native
Windows implementation of isatty() will return true for all character
devices, not just terminals. So is_tty() has a special case for Windows
so it can use alternative Windows API functions to determine if a file
descriptor is a terminal.

This fixes a bug with MSVC and MinGW-w64 builds that refused to read from
or write to non-terminal character devices because xz thought it was a
terminal. For instance:

    xz foo -c > /dev/null

would fail because /dev/null was assumed to be a terminal."
6b05f827f50e686537e9a23c49c5aa4c0aa6b23d,Jia Tan,Jia Tan,2023-11-22 12:39:41,2023-11-22 12:39:41,"tuklib_integer: Fix typo discovered by codespell.

Based on internet dictionary searches, 'choise' is an outdated spelling
of 'choice'."
659aca0d695807c0762d4101765189e4e33d1e2c,Lasse Collin,Jia Tan,2023-11-17 17:35:19,2023-11-17 17:56:09,"xz: Move the check for --suffix with --format=raw a few lines earlier.

Now it reads from argv[] instead of args->arg_names."
ca278eb2b7f5a4940f5ab18955297b398d423824,Jia Tan,Jia Tan,2023-11-17 12:35:11,2023-11-17 17:56:05,"Tests: Create test_suffix.sh.

This tests some complicated interactions with the --suffix= option.
The suffix option must be used with --format=raw, but can optionally
be used to override the default .xz suffix.

This test also verifies some recent bugs have been correctly solved
and to hopefully avoid further regressions in the future."
2a732aba22da1b0d4a1241cb32280ed010ba03ce,Jia Tan,Jia Tan,2023-11-17 12:19:26,2023-11-17 15:16:55,"xz: Fix a bug with --files and --files0 in raw mode without a suffix.

The following command caused a segmentation fault:

    xz -Fraw --lzma1 --files=foo

when foo was a valid file. The usage of --files or --files0 was not
being checked when compressing or decompressing in raw mode without a
suffix. The suffix checking code was meant to validate that all files
to be processed are ""-"" (if not writing to standard out), meaning the
data is only coming from standard in. In this case, there were no file
names to check since --files and --files0 store their file name in a
different place.

Later code assumed the suffix was set and caused a segmentation fault.
Now, the above command results in an error."
299920bab9ae258a247366339264e8aefca9e3ce,Jia Tan,Jia Tan,2023-11-17 12:04:58,2023-11-17 12:04:58,Tests: Fix typo in a comment.
f481523baac946fa3bc13d79186ffaf0c0b818a7,Jia Tan,Jia Tan,2023-11-15 15:40:13,2023-11-15 15:40:13,"xz: Refactor suffix test with raw format.

The previous version set opt_stdout, but this caused an issue with
copying an input file to standard out when decompressing an unknown file
type. The following needs to result in an error:

    echo foo | xz -df

since -c, --stdout is not used. This fixes the previous error by not
setting opt_stdout."
837ea40b1c9d4998cac4500b55171bf33e0c31a6,Jia Tan,Jia Tan,2023-11-14 12:27:46,2023-11-14 12:27:46,"xz: Move suffix check after stdout mode is detected.

This fixes a bug introduced in cc5aa9ab138beeecaee5a1e81197591893ee9ca0
when the suffix check was initially moved. This caused a situation that
previously worked:

    echo foo | xz -Fraw --lzma1 | wc -c

to fail because the old code knew that this would write to standard out
so a suffix was not needed."
d4f4a4d040ef47a5e82dffd0f067e92716606ddf,Jia Tan,Jia Tan,2023-11-14 12:27:04,2023-11-14 12:27:04,"xz: Detect when all data will be written to standard out earlier.

If the -c, --stdout argument is not used, then we can still detect when
the data will be written to standard out if all of the provided
filenames are ""-"" (denoting standard in) or if no filenames are
provided."
2ade7246e7ba729a91460d2fab0f4c7b89d3998b,Jia Tan,Jia Tan,2023-11-08 17:21:53,2023-11-08 17:21:53,liblzma: Add missing comments to lz_encoder.h.
5fe1450603dc625340b8b7866fb4a83ff748ad06,Jia Tan,Jia Tan,2023-11-01 12:18:30,2023-11-01 12:58:58,Add NEWS for 5.4.5.
46007049cd42e606543dbe650feb17bdf4469c29,Lasse Collin,Lasse Collin,2023-10-31 19:41:09,2023-10-31 19:41:09,"liblzma: Fix compilation of fastpos_tablegen.c.

The macro lzma_attr_visibility_hidden has to be defined to make
fastpos.h usable. The visibility attribute is irrelevant to
fastpos_tablegen.c so simply #define the macro to an empty value.

fastpos_tablegen.c is never built by the included build systems
and so the problem wasn't noticed earlier. It's just a standalone
program for generating fastpos_table.c.

Fixes: https://github.com/tukaani-project/xz/pull/69
Thanks to GitHub user Jamaika1."
148e20607e95781558bdfc823ecba07b7af4b590,Jia Tan,Jia Tan,2023-10-31 13:51:40,2023-10-31 13:54:11,Build: Fix text wrapping in an output message.
8c36ab79cbf23104ce7a3d533d5ac98cd492e57c,Lasse Collin,Lasse Collin,2023-10-30 16:09:53,2023-10-30 16:44:32,"liblzma: Add a note why crc_always_inline exists for now.

Solaris Studio is a possible example (not tested) which
supports the always_inline attribute but might not get
detected by the common.h #ifdefs."
e7a86b94cd247435ac96bc79ba528b690b9ca388,Lasse Collin,Lasse Collin,2023-10-22 14:59:11,2023-10-30 16:44:32,liblzma: Use lzma_always_inline in memcmplen.h.
dcfe5632992fb7f06f921da13fcdd84f83d0d285,Lasse Collin,Lasse Collin,2023-10-30 15:43:03,2023-10-30 16:44:32,liblzma: #define lzma_always_inline in common.h.
41113fe30a47f6fd3e30cb4494dd538e86212edf,Lasse Collin,Lasse Collin,2023-10-22 14:15:32,2023-10-30 16:06:25,"liblzma: Use lzma_attr_visibility_hidden on private extern declarations.

These variables are internal to liblzma and not exposed in the API."
a2f5ca706acc6f7715b8d260a8c6ed50d7717478,Lasse Collin,Lasse Collin,2023-10-22 14:08:39,2023-10-30 16:03:39,"liblzma: #define lzma_attr_visibility_hidden in common.h.

In ELF shared libs:

-fvisibility=hidden affects definitions of symbols but not
declarations.[*] This doesn't affect direct calls to functions
inside liblzma as a linker can replace a call to lzma_foo@plt
with a call directly to lzma_foo when -fvisibility=hidden is used.

[*] It has to be like this because otherwise every installed
    header file would need to explictly set the symbol visibility
    to default.

When accessing extern variables that aren't defined in the
same translation unit, compiler assumes that the variable has
the default visibility and thus indirection is needed. Unlike
function calls, linker cannot optimize this.

Using __attribute__((__visibility__(""hidden""))) with the extern
variable declarations tells the compiler that indirection isn't
needed because the definition is in the same shared library.

About 15+ years ago, someone told me that it would be good if
the CRC tables would be defined in the same translation unit
as the C code of the CRC functions. While I understood that it
could help a tiny amount, I didn't want to change the code because
a separate translation unit for the CRC tables was needed for the
x86 assembly code anyway. But when visibility attributes are
supported, simply marking the extern declaration with the
hidden attribute will get identical result. When there are only
a few affected variables, this is trivial to do. I wish I had
understood this back then already."
2c7ee92e44e1e66f0a427555233eb22c78f6c4f8,Lasse Collin,Lasse Collin,2023-09-30 19:54:28,2023-10-26 18:46:06,"liblzma: Refer to MinGW-w64 instead of MinGW in the API headers.

MinGW (formely a MinGW.org Project, later the MinGW.OSDN Project
at <https://osdn.net/projects/mingw/>) has GCC 9.2.0 as the
most recent GCC package (released 2021-02-02). The project might
still be alive but majority of people have switched to MinGW-w64.
Thus it seems clearer to refer to MinGW-w64 in our API headers too.
Building with MinGW is likely to still work but I haven't tested it
in the recent years."
597f49b61475438a43a417236989b2acc968a686,Lasse Collin,Lasse Collin,2023-09-26 21:58:17,2023-10-26 18:46:06,"CMake: Use -D_FILE_OFFSET_BITS=64 if (and only if) needed.

A CMake option LARGE_FILE_SUPPORT is created if and only if
-D_FILE_OFFSET_BITS=64 affects sizeof(off_t).

This is needed on many 32-bit platforms and even with 64-bit builds
with MinGW-w64 to get support for files larger than 2 GiB."
1bc548b8210366e44ba35b0b11577a8e328c1228,Lasse Collin,Lasse Collin,2023-09-29 23:14:25,2023-10-26 18:46:06,"CMake: Generate and install liblzma.pc if not using MSVC.

Autotools based build uses -pthread and thus adds it to Libs.private
in liblzma.pc. CMake doesn't use -pthread at all if pthread functions
are available in libc so Libs.private doesn't get -pthread either."
2add71966f891d315105d6245f724ed4f43a4eff,Lasse Collin,Lasse Collin,2023-09-29 22:13:13,2023-10-26 18:46:06,"CMake: Rearrange the PACKAGE_ variables.

The windres workaround now replaces spaces with \x20 so
the package name isn't repeated.

These changes will help with creation of liblzma.pc."
a7d1b2825c49dc83f1910eeb8ba0f1dfbd886d91,Lasse Collin,Lasse Collin,2023-09-29 17:46:11,2023-10-26 18:46:06,"liblzma: Add Cflags.private to liblzma.pc.in for MSYS2.

It properly adds -DLZMA_API_STATIC when compiling code that
will be linked against static liblzma. Having it there on
systems other than Windows does no harm.

See: https://www.msys2.org/docs/pkgconfig/"
80e0750e3996c1c659e972ce9cf789ca2e99f702,Lasse Collin,Lasse Collin,2023-09-27 19:46:20,2023-10-26 18:46:06,CMake: Create liblzma.def when building liblzma.dll with MinGW-w64.
08d12595f486890cf601b87f36ee0ddbce57728e,Lasse Collin,Lasse Collin,2023-10-26 18:44:42,2023-10-26 18:46:06,"CMake: Change one CMAKE_CURRENT_SOURCE_DIR to CMAKE_CURRENT_LIST_DIR.

In this case they have identical values."
e67aaf698de75c73443a5ec786781cbf2034461d,Lasse Collin,Lasse Collin,2023-10-01 16:10:57,2023-10-26 15:58:21,"CMake/Windows: Fix the import library filename.

Both PREFIX and IMPORT_PERFIX have to be set to """" to get
liblzma.dll and liblzma.dll.a."
88588b1246d8c26ffbc138b3e5c413c5f14c3179,Lasse Collin,Lasse Collin,2023-10-25 16:13:25,2023-10-25 17:18:04,"Build: Detect -fsanitize= in CFLAGS and incompatible build options.

Now configure will fail if -fsanitize= is found in CFLAGS
and sanitizer-incompatible ifunc or Landlock sandboxing
would be used. These are incompatible with one or more sanitizers.
It's simpler to reject all -fsanitize= uses instead of trying to
pass those that might not cause problems.

CMake-based build was updated similarly. It lets the configuration
finish (SEND_ERROR instead of FATAL_ERROR) so that both error
messages can be seen at once."
5e3d890f8862a7d4fbef5e38e11b6c9fbd98f468,Jia Tan,Jia Tan,2023-10-23 16:50:08,2023-10-23 16:50:08,"CI: Disable sandboxing in fsanitize=address,undefined job.

The sandboxing on Linux now supports Landlock, which restricts all
supported filesystem actions after xz opens the files it needs. The
sandbox is only enabled when one file is input and we are writing to
standard out. With fsanitize=address,undefined, the instrumentation
needs to read additional files after the sandbox is in place. This
forces all xz based test to fail, so the sandbox must instead be
disabled."
b1408987ea832e2760e478ae960a636df17a1363,Jia Tan,Jia Tan,2023-10-23 16:15:39,2023-10-23 16:15:39,CI: Allow disabling the sandbox in ci_build.sh.
91c435cf1c7a1e893706d4d716dfd361621ed824,Lasse Collin,Lasse Collin,2023-10-11 16:47:44,2023-10-22 16:03:52,"CMake: Don't shadow the cache entry ENABLE_THREADS with a normal variable.

Using set(ENABLE_THREADS ""posix"") is confusing because it sets
a new normal variable and leaves the cache entry with the same
name unchanged. The intent wasn't to change the cache entry so
this switches to a different variable name."
fa1609eb9393ecd30decfed4891c907829f06710,Lasse Collin,Lasse Collin,2023-10-09 19:28:49,2023-10-22 16:03:52,Docs: Update INSTALL about sandboxing support.
8276c7f41c671eee4aa3239490658b23dcfd3021,Lasse Collin,Lasse Collin,2023-10-09 19:07:52,2023-10-22 16:03:52,"xz: Support basic sandboxing with Linux Landlock (ABI versions 1-3).

It is enabled only when decompressing one file to stdout,
similar to how Capsicum is used.

Landlock was added in Linux 5.13."
3a1e9fd031b9320d769d63b503ef4e82e1b6ea8c,Lasse Collin,Lasse Collin,2023-10-09 18:12:31,2023-10-22 16:03:52,"CMake: Edit threading related messages.

It's mostly to change from ""thread method"" to ""threading method""."
bf011352528ae3539ea7b780b45b96736ee57a99,Lasse Collin,Lasse Collin,2023-10-09 17:59:24,2023-10-22 16:03:52,"CMake: Use FATAL_ERROR if user-supplied options aren't understood.

This way typos are caught quickly and compounding error messages
are avoided (a single typo could cause more than one error).

This keeps using SEND_ERROR when the system is lacking a feature
(like threading library or sandboxing method). This way the whole
configuration log will be generated in case someone wishes to
report a problem upstream."
3f53870c249945d657ca3d75e0993e6267d71f75,Lasse Collin,Lasse Collin,2023-10-09 15:37:32,2023-10-22 16:03:52,CMake: Add sandboxing support.
2e2cd11535ad77364cf021297e0b3f162fa3a3d0,Lasse Collin,Lasse Collin,2023-10-09 15:13:08,2023-10-22 16:03:52,"Simplify detection of Capsicum support.

This removes support for FreeBSD 10.0 and 10.1 which used
<sys/capability.h> instead of <sys/capsicum.h>. Support for
FreeBSD 10.1 ended on 2016-12-31. So now FreeBSD >= 10.2 is
required to enable Capsicum support.

This also removes support for Capsicum on Linux (libcaprights)
which seems to have been unmaintained since 2017 and Linux 4.11:
https://github.com/google/capsicum-linux"
c57858b60e186d020b2dbaf7aabd9b32c71da824,Lasse Collin,Lasse Collin,2023-09-24 22:46:36,2023-10-22 15:59:45,"xz/Windows: Allow clock_gettime with POSIX threads.

If winpthreads are used for threading, it's OK to use clock_gettime()
from winpthreads too."
dd32f628bb5541ef4e8ce66966ef456a1934084c,Lasse Collin,Lasse Collin,2023-09-24 22:39:26,2023-10-22 15:59:45,"mythread.h: Make MYTHREAD_POSIX compatible with MinGW-w64's winpthreads.

This might be almost useless but it doesn't need much extra code either."
680e52cdd086e92691d8a0bca2c98815565f60ca,Lasse Collin,Lasse Collin,2023-09-23 00:06:36,2023-10-22 15:59:45,"CMake: Check for clock_gettime() even on Windows.

This mirrors configure.ac although currently MinGW-w64 builds
don't use clock_gettime() even if it is found."
1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419,Lasse Collin,Lasse Collin,2023-09-23 00:23:32,2023-10-22 15:59:45,"Build: Check for clock_gettime() even if not using POSIX threads.

See the new comment in the code.

This also makes the check for clock_gettime() run with MinGW-w64
with which we don't want to use clock_gettime(). The previous
commit already took care of this situation."
46fd991cd2808ef62554853864c946232e7547f0,Lasse Collin,Lasse Collin,2023-09-24 19:58:53,2023-10-22 15:59:45,"xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.

This commit alone doesn't change anything in the real-world:

  - configure.ac currently checks for clock_gettime() only
    when using pthreads.

  - CMakeLists.txt doesn't check for clock_gettime() on Windows.

So clock_gettime() wasn't used with MinGW-w64 before either.

clock_gettime() provides monotonic time and it's better than
gettimeofday() in this sense. But clock_gettime() is defined
in winpthreads, and liblzma or xz needs nothing else from
winpthreads. By avoiding clock_gettime(), we avoid the dependency on
libwinpthread-1.dll or the need to link against the static version.

As a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be
faster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution
is more than good enough for the progress indicator in xz."
cdb4d91f2464b50c985ef7b9517314ea237ddda7,Lasse Collin,Lasse Collin,2023-09-23 21:21:22,2023-10-22 15:59:45,xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.
988e09f27b9b04a43d45d10f92782e0092ee27a9,Jia Tan,Jia Tan,2023-10-20 11:17:46,2023-10-20 16:01:29,"liblzma: Move is_clmul_supported() back to crc_common.h.

This partially reverts creating crc_clmul.c
(8c0f9376f58c0696d5d6719705164d35542dd891) where is_clmul_supported()
was moved, extern'ed, and renamed to lzma_is_clmul_supported(). This
caused a problem when the function call to lzma_is_clmul_supported()
results in a call through the PLT. ifunc resolvers run very early in
the dynamic loading sequence, so the PLT may not be setup properly at
this point. Whether the PLT is used or not for
lzma_is_clmul_supported() depened upon the compiler-toolchain used and
flags.

In liblzma compiled with GCC, for instance, GCC will go through the PLT
for function calls internal to liblzma if the version scripts and
symbol visibility hiding are not used. If lazy-binding is disabled,
then it would have made any program linked with liblzma fail during
dynamic loading in the ifunc resolver."
105c7ca90d4152942e0798580a37f736d02faa22,Jia Tan,Jia Tan,2023-10-19 08:23:32,2023-10-19 08:23:32,"Build: Remove check for COND_CHECK_CRC32 in check/Makefile.inc.

Currently crc32 is always enabled, so COND_CHECK_CRC32 must always be
set. Because of this, it makes the recent change to conditionally
compile check/crc_clmul.c appear wrong since that file has CLMUL
implementations for both CRC32 and CRC64."
139757170468f0f1fafdf0a8ffa74363d1ea1d0c,Jia Tan,Jia Tan,2023-10-19 08:09:01,2023-10-19 08:09:01,"CMake: Add ALLOW_CLMUL_CRC option to enable/disable CLMUL.

The option is enabled by default, but will only be visible to a user
listing cache variables or using a CMake GUI application if the
immintrin.h header file is found.

This mirrors our Autotools build --disable-clmul-crc functionality."
c60b25569d414bb73b705977a4dd342f8f9f1965,Jia Tan,Jia Tan,2023-10-18 16:22:50,2023-10-18 17:15:20,"liblzma: Fix -fsanitize=address failure with crc_clmul functions.

After forcing crc_simd_body() to always be inlined it caused
-fsanitize=address to fail for lzma_crc32_clmul() and
lzma_crc64_clmul(). The __no_sanitize_address__ attribute was added
to lzma_crc32_clmul() and lzma_crc64_clmul(), but not removed from
crc_simd_body(). ASAN and inline functions behavior has changed over
the years for GCC specifically, so while strictly required we will
keep __attribute__((__no_sanitize_address__)) on crc_simd_body() in
case this becomes a requirement in the future.

Older GCC versions refuse to inline a function with ASAN if the
caller and callee do not agree on sanitization flags
(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89124#c3). If the
function was forced to be inlined, it will not compile if the callee
function has __no_sanitize_address__ but the caller doesn't."
9a78971261bc67622cbd7dae02f6966968ac1393,Lasse Collin,Lasse Collin,2023-10-14 17:16:13,2023-10-18 16:02:45,tuklib_integer: Update the CMake test for fast unaligned access.
2f81ac852bc5aafc91c8e2adc66b5114761703c4,Lasse Collin,Lasse Collin,2023-09-23 20:28:48,2023-10-18 16:02:45,"Build: Enabled unaligned access by default on PowerPC64LE and some RISC-V.

PowerPC64LE wasn't tested but it seems like a safe change.
POWER8 supports unaligned access in little endian mode. Testing
on godbolt.org shows that GCC uses unaligned access by default.

The RISC-V macro __riscv_misaligned_fast is very new and not
in any stable compiler release yet.

Documentation in INSTALL was updated to match.

Documentation about an autodetection bug when using ARM64 GCC
with -mstrict-align was added to INSTALL.

CMake files weren't updated yet."
c8f715f1bca4c30db814fcf1fd2fe88b8992ede2,Lasse Collin,Lasse Collin,2023-10-14 14:56:59,2023-10-18 16:02:45,"tuklib_integer: Revise unaligned reads and writes on strict-align archs.

In XZ Utils context this doesn't matter much because
unaligned reads and writes aren't used in hot code
when TUKLIB_FAST_UNALIGNED_ACCESS isn't #defined."
6828242735cbf61b93d140383336e1e51a006f2d,Lasse Collin,Lasse Collin,2023-09-22 23:21:49,2023-10-18 16:02:45,tuklib_integer: Add missing write64be and write64le fallback functions.
1c8884f0af28b3a4690bb573cdf3240a8ec73416,Jia Tan,Jia Tan,2023-10-18 11:57:10,2023-10-18 15:54:41,"liblzma: Set the MSVC optimization fix to only cover lzma_crc64_clmul().

After testing a 32-bit Release build on MSVC, only lzma_crc64_clmul()
has the bug. crc_simd_body() and lzma_crc32_clmul() do not need the
optimizations disabled."
5ce0f7a48bdf5c3b45430850a4487307afac6143,Lasse Collin,Jia Tan,2023-10-18 11:30:00,2023-10-18 15:54:41,liblzma: CRC_USE_GENERIC_FOR_SMALL_INPUTS cannot be used with ifunc.
27735380491bb5ce0d0f41d5244d89c1d0825f6b,Lasse Collin,Jia Tan,2023-10-17 18:53:11,2023-10-18 15:54:41,"liblzma: Include common.h in crc_common.h.

crc_common.h depends on common.h. The headers include common.h except
when there is a reason to not do so."
e13b7947b92355c334edd594295d3a2c99c4bca1,Jia Tan,Jia Tan,2023-10-17 17:23:26,2023-10-18 15:54:41,liblzma: Add include guards to crc_common.h.
40abd88afcc61a8157fcd12d78d491caeb8e12be,Jia Tan,Jia Tan,2023-10-18 14:50:25,2023-10-18 15:54:41,"liblzma: Add the crc_always_inline macro to crc_simd_body().

Forcing this to be inline has a significant speed improvement at the
cost of a few repeated instructions. The compilers tested on did not
inline this function since it is large and is used twice in the same
translation unit."
a5966c276bd6fa975f0389f8a8dc61393de750b0,Jia Tan,Jia Tan,2023-10-18 14:48:19,2023-10-18 15:54:41,"liblzma: Create crc_always_inline macro.

This macro must be used instead of the inline keyword. On MSVC, it is
a replacement for __forceinline which is an MSVC specific keyword that
should not be used with inline (it will issue a warning if it is).

It does not use a build system check to determine if
__attribute__((__always_inline__)) since all compilers that can use
CLMUL extensions (except the special case for MSVC) should support this
attribute. If this assumption is incorrect then it will result in a bug
report instead of silently producing slow code."
96b663f67c0e738a99ba8f35d9f4ced9add74544,Jia Tan,Jia Tan,2023-10-14 05:23:23,2023-10-18 15:54:41,"liblzma: Refactor CRC comments.

A detailed description of the three dispatch methods was added. Also,
duplicated comments now only appear in crc32_fast.c or were removed from
both crc32_fast.c and crc64_fast.c if they appeared in crc_clmul.c."
8c0f9376f58c0696d5d6719705164d35542dd891,Jia Tan,Jia Tan,2023-10-14 04:17:57,2023-10-18 15:54:36,"liblzma: Create crc_clmul.c.

Both crc32_clmul() and crc64_clmul() are now exported from
crc32_clmul.c as lzma_crc32_clmul() and lzma_crc64_clmul(). This
ensures that is_clmul_supported() (now lzma_is_clmul_supported()) is
not duplicated between crc32_fast.c and crc64_fast.c.

Also, it encapsulates the complexity of the CLMUL implementations into a
single file and reduces the complexity of crc32_fast.c and crc64_fast.c.
Before, CLMUL code was present in crc32_fast.c, crc64_fast.c, and
crc_common.h.

During the conversion, various cleanups were applied to code (thanks to
Lasse Collin) including:

- Require using semicolons with MASK_/L/H/LH macros.
- Variable typing and const handling improvements.
- Improvements to comments.
- Fixes to the pragmas used.
- Removed unneeded variables.
- Whitespace improvements.
- Fixed CRC_USE_GENERIC_FOR_SMALL_INPUTS handling.
- Silenced warnings and removed the need for some #pragmas"
a3ebc2c516b09616638060806c841bd4bcf7bce3,Jia Tan,Jia Tan,2023-10-14 02:23:03,2023-10-18 12:41:11,"liblzma: Define CRC_USE_IFUNC in crc_common.h.

When ifunc is supported, we can define a simpler macro instead of
repeating the more complex check in both crc32_fast.c and crc64_fast.c."
f1cd9d7194f005cd66ec03c6635ceae75f90ef17,Hans Jansen,Jia Tan,2023-10-12 17:37:01,2023-10-13 12:54:05,liblzma: Added crc32_clmul to crc32_fast.c.
93e6fb08b22c7c13be2dd1e7274fe78413436254,Hans Jansen,Jia Tan,2023-10-12 17:23:40,2023-10-13 12:54:05,"liblzma: Moved CLMUL CRC logic to crc_common.h.

crc64_fast.c was updated to use the code from crc_common.h instead."
233885a437f8b55a5c8442984ebc0aaa579e92de,Hans Jansen,Jia Tan,2023-10-12 17:07:50,2023-10-13 12:54:05,liblzma: Rename crc_macros.h to crc_common.h.
37947d4a7565b87e4cec8b89229d35b0a3f8d2cd,Gabriela Gutierrez,Jia Tan,2023-09-26 15:55:13,2023-10-13 12:03:13,"CI: Bump and ref actions by commit SHA in windows-ci.yml

Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.

It's important to make sure the SHA's are from the original repositories and not forks.

For reference:

https://github.com/msys2/setup-msys2/releases/tag/v2.20.1
https://github.com/msys2/setup-msys2/commit/27b3aa77f672cb6b3054121cfd80c3d22ceebb1d

https://github.com/actions/checkout/releases/tag/v4.1.0
https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608

https://github.com/actions/upload-artifact/releases/tag/v3.1.3
https://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32

Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>"
f28cc9bd481ce493da11f98c18526d324211599a,Gabriela Gutierrez,Jia Tan,2023-09-26 14:35:08,2023-10-13 12:03:13,"CI: Bump and ref actions by commit SHA in ci.yml

Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.

It's important to make sure the SHA's are from the original repositories and not forks.

For reference:

https://github.com/actions/checkout/releases/tag/v4.1.0
https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608

https://github.com/actions/upload-artifact/releases/tag/v3.1.3
https://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32

Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>"
f74f1740067b75042497edbfa6ea457ff75484b9,Jia Tan,Jia Tan,2023-10-12 12:12:18,2023-10-12 12:12:18,"Build: Update visibility.m4 from Gnulib.

Updating from version 6 -> 8 from upstream. Declarations for variables
and function bodies were added to avoid unnecessary failures with
-Werror."
5c4bca521e6fb435898a0012b3276eee70a6dadf,Lasse Collin,Lasse Collin,2023-10-06 16:36:35,2023-10-06 16:36:35,Update THANKS.
d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b,Lasse Collin,Lasse Collin,2023-10-06 15:55:57,2023-10-06 16:32:06,"CMake/Windows: Fix when the windres workaround is applied.

CMake doesn't set WIN32 on CYGWIN but the workaround is
probably needed on Cygwin too. Same for MSYS and MSYS2.

The workaround must not be used with Clang that is acting in
MSVC mode. This fixes it by checking for the known environments
that need the workaround instead of using ""NOT MSVC"".

Thanks to Martin Storsjö.
https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431"
01e34aa1171b04f8b28960b1cc6135a903e0c13d,Jia Tan,Jia Tan,2023-09-29 14:11:54,2023-09-29 14:11:54,"CI: Disable CLANG64 MSYS2 environment until bug is resolved.

lld 17.0.1 searches for libraries to link first in the toolchain
directories before the local directory when building. The is a problem
for us because liblzma.a is installed in MSYS2 CLANG64 by default and
xz.exe will thus use the installed library instead of the one being
built.

This causes tests to fail when they are expecting features to be
disabled. More importantly, it will compile xz.exe with an incorrect
liblzma and could cause unexpected behavior by being unable to update
liblzma code in static builds. The CLANG64 environment can be tested
again once this is fixed.

Link to bug: https://github.com/llvm/llvm-project/issues/67779."
30d0c35327f3639cb11224872aa58fdbf0b1526e,Jia Tan,Jia Tan,2023-09-29 12:14:39,2023-09-29 12:14:39,"CMake: Rename xz and man page symlink custom targets.

The Ninja Generator for CMake cannot have a custom target and its
BYPRODUCTS have the same name. This has prevented Ninja builds on
Unix-like systems since the xz symlinks were introduced in
80a1a8bb838842a2be343bd88ad1462c21c5e2c9."
506d03127a8565442b028ec991e1578124fd3025,Jia Tan,Jia Tan,2023-09-29 11:58:44,2023-09-29 11:58:44,"CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.

CMake is unable to guess the linker language for just a header file so
it must be explicitly set."
0570308ddd9c0e39e85597ebc0e31d4fc81d436f,Lasse Collin,Lasse Collin,2023-09-27 16:54:35,2023-09-27 17:49:46,"CMake: Fix Windows build with Clang/LLVM 17.

llvm-windres 17.0.0 has more accurate emulation of GNU windres, so
the hack for GNU windres must now be used with llvm-windres too.

LLVM 16.0.6 has the old behavior and there likely won't be more
16.x releases. So we can simply check for >= 17.0.0.

See also:
https://github.com/llvm/llvm-project/commit/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"
5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1,Lasse Collin,Lasse Collin,2023-09-26 18:47:13,2023-09-26 18:47:13,"liblzma: Update a comment.

The C standards don't allow an empty translation unit which can be
avoided by declaring something, without exporting any symbols.

When I committed f644473a211394447824ea00518d0a214ff3f7f2 I had
a feeling that some specific toolchain somewhere didn't like
empty object files (assembler or maybe ""ar"" complained) but
I cannot find anything to confirm this now. Quite likely I
remembered nonsense. I leave this here as a note to my future self. :-)"
8ebaf3f665ddc7e4f19c613005050dde5ccbe499,Jia Tan,Jia Tan,2023-09-26 16:02:11,2023-09-26 16:04:40,"liblzma: Avoid compiler warning without creating extra symbol.

When the generic fast crc64 method is used, then we omit
lzma_crc64_table[][]. Similar to
d9166b52cf3458a4da3eb92224837ca8fc208d79, we can avoid compiler warnings
with -Wempty-translation-unit (Clang) or -pedantic (GCC) by creating a
never used typedef instead of an extra symbol."
092d21db2e5eea19fe079264ce48c178989c7606,Lasse Collin,Lasse Collin,2023-09-26 14:24:15,2023-09-26 14:24:15,Build: Update the comment about -Werror usage in checks.
a37a2763383e6c204fe878e1416dd35e7711d3a9,Lasse Collin,Lasse Collin,2023-09-26 12:00:43,2023-09-26 12:00:43,"Build: Fix __attribute__((ifunc(...))) detection with clang -Wall.

Now if user-supplied CFLAGS contains -Wall -Wextra -Wpedantic
the two checks that need -Werror will still work.

At CMake side there is add_compile_options(-Wall -Wextra)
but it didn't affect the -Werror tests. So with both Autotools
and CMake only user-supplied CFLAGS could make the checks fail
when they shouldn't.

This is not a full fix as things like -Wunused-macros in
user-supplied CFLAGS will still cause problems with both
GCC and Clang."
9c42f936939b813f25d0ff4e99c3eb9c2d17a0d2,Lasse Collin,Lasse Collin,2023-09-26 10:51:31,2023-09-26 10:51:31,"Build: Fix underquoted AC_LANG_SOURCE.

It made no practical difference in this case."
9f1444a8a5c0e724b2c7ef83424f642f07a95982,Lasse Collin,Lasse Collin,2023-09-26 10:14:37,2023-09-26 10:50:19,"Build: Silence two Autoconf warnings.

There were two uses of AC_COMPILE_IFELSE that didn't use
AC_LANG_SOURCE and Autoconf warned about these. The omission
had been intentional but it turned out that this didn't do
what I thought it would.

Autoconf 2.71 manual gives an impression that AC_LANG_SOURCE
inserts all #defines that have been made with AC_DEFINE so
far (confdefs.h). The idea was that omitting AC_LANG_SOURCE
would mean that only the exact code included in the
AC_COMPILE_IFELSE call would be compiled.

With C programs this is not true: the #defines get added without
AC_LANG_SOURCE too. There seems to be no neat way to avoid this.
Thus, with the C language at least, adding AC_LANG_SOURCE makes
no other difference than silencing a warning from Autoconf. The
generated ""configure"" remains identical. (Docs of AC_LANG_CONFTEST
say that the #defines have been inserted since Autoconf 2.63b and
that AC_COMPILE_IFELSE uses AC_LANG_CONFTEST. So the behavior is
documented if one also reads the docs of macros that one isn't
calling directly.)

Any extra code, including #defines, can cause problems for
these two tests because these tests must use -Werror.
CC=clang CFLAGS=-Weverything is the most extreme example.
It enables -Wreserved-macro-identifier which warns about
#define __EXTENSIONS__ 1 because it begins with two underscores.
It's possible to write a test file that passes -Weverything but
it becomes impossible when Autoconf inserts confdefs.h.

So this commit adds AC_LANG_SOURCE to silence Autoconf warnings.
A different solution is needed for -Werror tests."
519e47c2818acde571fadc79551294527fe6cc22,Jia Tan,Jia Tan,2023-09-25 17:17:11,2023-09-25 17:17:11,CMake: Remove accidental extra newline.
bbb42412da6a02705ba3e668e90840c2683e4e67,Jia Tan,Jia Tan,2023-09-25 16:47:26,2023-09-25 16:47:26,"Build: Remove Gnulib dependency from tests.

The tests do not use any Gnulib replacements so they do not need to link
libgnu.a or have /lib in the include path."
d265f6b75691c6c8fa876eb5320c3ff5aed17dfa,Jia Tan,Jia Tan,2023-09-25 16:43:43,2023-09-25 16:43:43,"CMake: Remove /lib from tests include path.

The tests never included anything from /lib, so this was not needed."
9fb5de41f2fb654ca952d4bda15cf3777c2b720f,Jia Tan,Jia Tan,2023-09-24 14:10:41,2023-09-24 14:10:41,Scripts: Change quoting style from `...' to '...'.
eaebdef4d4de3c088b0905f42626b74e0d23abf3,Jia Tan,Jia Tan,2023-09-24 14:10:18,2023-09-24 14:10:18,xz: Change quoting style from `...' to '...'.
f6667702bf075a05fbe336dbf3576ad1a82ec645,Jia Tan,Jia Tan,2023-09-24 14:09:47,2023-09-24 14:09:47,"liblzma: Change quoting style from `...' to '...'.

This was done for both internal and API headers."
be012b8097a4eaee335b51357d6befa745f753ce,Jia Tan,Jia Tan,2023-09-24 14:09:16,2023-09-24 14:09:16,Build: Change quoting style from `...' to '...'.
ce162db07f03495bd333696e66883c8f36abdc1e,Jia Tan,Jia Tan,2023-09-24 14:05:02,2023-09-24 14:05:02,"Docs: Change quoting style from `...' to '...'.

These days the ` and ' do not look symmetric. This quoting style has
been changed in various apps over the years including the GNU tools."
db17656721e43939bfa4ec13506e7c76f4b86da6,Jia Tan,Jia Tan,2023-09-24 13:25:01,2023-09-24 13:25:01,lib: Silence -Wsign-conversion in getopt.c.
a6234f677d66888f435010bc0b67de6a32fefcf6,Jia Tan,Jia Tan,2023-09-24 12:48:52,2023-09-24 12:48:52,"Build: Update getopt.m4 from Gnulib.

This file was modified from upstream since we do not need to replace
getopt() and can avoid complexity and feature tests."
84808b68f1075e8603a8ef95d361a61fdc6a5b10,Jia Tan,Jia Tan,2023-09-25 16:09:53,2023-09-25 16:09:53,CMake: Add /lib to include path.
01804a0b4b64e0f33568e947e0579263808c59d3,Jia Tan,Jia Tan,2023-09-24 12:36:34,2023-09-24 12:36:34,CMake: Update libgnu target with new header files.
d34558388fe1d8929f6478d61dc322eb4f2900af,Jia Tan,Jia Tan,2023-09-22 16:47:52,2023-09-22 16:47:52,lib: Update Makefile.am for new header files.
52bf644bdf536e20fcc743b712cede135e05eec5,Jia Tan,Jia Tan,2023-09-24 12:34:03,2023-09-24 12:34:03,"lib: Update getopt1.c from Gnulib.

The only difference was maintaining the conditional inclusion for
config.h."
7e884c00d0093c38339f17fb1d280eec493f42ca,Jia Tan,Jia Tan,2023-09-22 19:27:00,2023-09-22 19:27:00,"lib: Update getopt.in.h from Gnulib with modifications.

We can still avoid modifying the contents of this file during
configuration to simplify the build systems. Gnulib added replacements
for inclusions guards for Cygwin. Cygwin should not need getopt_long
replacement so this feature can be omitted.

<unistd.h> is conditionally included to avoid MSVC since it is not
available.

The definition for _GL_ARG_NONNULL was also copied into this file from
Gnulib since this stage is usually done during gnulib-tool."
cff05f82066ca3ce9425dafdb086325a8eef8de3,Jia Tan,Jia Tan,2023-09-22 16:31:55,2023-09-22 16:31:55,lib: Update getopt_int.h from Gnulib.
04bd86a4b010d43c6a016a3857ecb38dc1d5b024,Jia Tan,Jia Tan,2023-09-22 16:27:23,2023-09-22 16:27:23,"lib: Update getopt.c from Gnulib with modifications.

The code maintains the prior modifications of conditionally including
config.h and disabling NLS support.

_GL_UNUSED is repalced with the simple cast to void trick. _GL_UNUSED
is only used for these two parameters so its simpler than having to
define it."
56b42be7287844db20b3a3bc1372c6ae8c040d63,Jia Tan,Jia Tan,2023-09-22 16:18:56,2023-09-22 16:18:56,"lib: Add getopt-cdefs.h for getopt_long update.

This was modified slightly from Gnulib. In Gnulib, it expects the
@HAVE_SYS_CDEFS_H@ to be replaced. Instead, we can set HAVE_SYS_CDEFS_H
on systems that have it and avoid copying another file into the build
directory. Since we are not using gnulib-tool, copying extra files
requires extra build system updates (and special handling with CMake) so
we should avoid when possible."
9834e591a4cf9dc2f49e42e26bf28d1d247bc196,Jia Tan,Jia Tan,2023-09-22 16:15:25,2023-09-22 16:15:25,"lib: Copy new header files from Gnulib without modification.

The getopt related files have changed from Gnulib by splitting up
getopt.in.h into more modular header files. We could have kept
everything in just getopt.in.h, but this will help us continue to update
in the future."
5b7a6f06e93d99d6635a740fd2e12fab66096c93,Lasse Collin,Lasse Collin,2023-09-22 18:16:52,2023-09-24 14:48:13,Windows: Update the version requirement comments from Win95 to W2k.
e582f8e0fee46e7cd967f42f465d6bb608b73bc1,Lasse Collin,Lasse Collin,2023-09-22 18:12:54,2023-09-24 14:48:13,tuklib_physmem: Comment out support for Windows versions older than 2000.
7d73d1f0e08f96c4ab7aac91b958e37a3dadf07a,Lasse Collin,Lasse Collin,2023-09-24 13:32:32,2023-09-24 13:32:32,sysdefs.h: Update the comment about __USE_MINGW_ANSI_STDIO.
2a9929af0ab7e6c0ab725565034afe3293e51d71,Lasse Collin,Lasse Collin,2023-09-21 23:33:29,2023-09-22 17:16:40,"xz: Windows: Don't (de)compress to special files like ""con"" or ""nul"".

Before this commit, the following writes ""foo"" to the
console and deletes the input file:

    echo foo | xz > con_xz
    xz --suffix=_xz --decompress con_xz

It cannot happen without --suffix because names like con.xz
are also special and so attempting to decompress con.xz
(or compress con to con.xz) will already fail when opening
the input file.

Similar thing is possible when compressing. The following
writes to ""nul"" and the input file ""n"" is deleted.

    echo foo | xz > n
    xz --suffix=ul n

Now xz checks if the destination is a special file before
continuing. DOS/DJGPP version had a check for this but
Windows (and OS/2) didn't."
01311b81f03cce1c0ce847a3d556f84dbd439343,Lasse Collin,Lasse Collin,2023-09-21 17:42:52,2023-09-22 17:10:10,CMake: Wrap two overlong lines that are possible to wrap.
152d0771ddd0cffcac9042ad1a66f110d228eee2,Lasse Collin,Lasse Collin,2023-09-21 17:36:31,2023-09-22 17:10:10,CMake: Add a comment about threads on Cygwin.
6df988cceffaa3100b428ed816fad334935b27bf,Lasse Collin,Lasse Collin,2023-09-12 20:53:25,2023-09-22 17:10:10,"MSVC: Remove Visual Studio project files and update INSTALL-MSVC.txt.

CMake is now the preferred build file generator when building
with MSVC."
edd563daf0da1d00018684614803c77ab62efcd6,Lasse Collin,Lasse Collin,2023-09-21 16:17:40,2023-09-22 17:10:10,"CMake: Require VS2015 or later for building xzdec.

xzdec might build with VS2013 but it hasn't been tested.
It was never supported before and VS2013 is old anyway
so for simplicity only liblzma is supported with VS2013."
daea64d158a7151ca6c255a0e4554c6d521cd589,Lasse Collin,Lasse Collin,2023-09-12 20:43:49,2023-09-22 17:06:27,"CMake: Allow building xz with Visual Studio 2015 and later.

Building the command line tools xz and xzdec with the combination
of CMake + Visual Studio 2015/2017/2019/2022 works now.

VS2013 update 2 should still be able to build liblzma.
VS2013 cannot build the xz command line tool because xz
needs snprintf() that roughly conforms to C99.
VS2013 is old and no extra code will be added to support it.

Thanks to Kelvin Lee and Jia Tan for testing."
8c2d197c940d246849b2ec48109bb22e54036927,Lasse Collin,Lasse Collin,2023-09-12 20:34:31,2023-09-22 17:06:27,"MSVC: #define inline and restrict only when needed.

This also drops the check for _WIN32 as that shouldn't be needed."
af66cd585902045e5689a0418103ec81f19f1d0a,Lasse Collin,Lasse Collin,2023-09-12 19:16:56,2023-09-22 17:06:27,"CMake: Add support for replacement getopt_long (lib/getopt*).

Thanks to Jia Tan for the initial work. I added the libgnu target
and made a few related minor edits."
e3288fdb45c580cb849f6799cf419c4922004ae5,Lasse Collin,Lasse Collin,2023-09-12 18:12:34,2023-09-22 17:06:27,"CMake: Bump maximum policy version to 3.27.

There are several new policies. CMP0149 may affect the Windows SDK
version that CMake will choose by default. The new behavior is more
predictable, always choosing the latest SDK version by default.

The other new policies shouldn't affect this package."
aff1b479c7b168652bd20305ceed4317d5db6661,Lasse Collin,Lasse Collin,2023-09-12 17:55:10,2023-09-22 17:06:27,"lib/getopt*.c: Include <config.h> only HAVE_CONFIG_H is defined.

The CMake-based build doesn't use config.h.

Up-to-date getopt_long in Gnulib is LGPLv2 so at some
point it could be included in XZ Utils too but for now
this commit is enough to make CMake-based build possible."
aa0cd585d2ed1455d35732798e0d90e3520e8ba5,Lasse Collin,Lasse Collin,2023-09-08 16:08:57,2023-09-22 17:06:27,Doxygen: Add more C macro names to PREDEFINED.
ee7709bae53637e1765ce142ef102914f1423cb5,Lasse Collin,Lasse Collin,2023-09-11 15:47:26,2023-09-22 17:06:27,"liblzma: Move a few __attribute__ uses in function declarations.

The API headers have many attributes but these were left
as is for now."
217958d88713b5dc73d366d24dd64b2b311b86fe,Lasse Collin,Lasse Collin,2023-09-11 16:03:35,2023-09-22 17:06:27,"xz, xzdec, lzmainfo: Use tuklib_attr_noreturn.

For compatibility with C23's [[noreturn]], tuklib_attr_noreturn
must be at the beginning of declaration (before ""extern"" or
""static"", and even before any GNU C's __attribute__).

This commit also moves all other function attributes to
the beginning of function declarations. ""extern"" is kept
at the beginning of a line so the attributes are listed on
separate lines before ""extern"" or ""static""."
18a66fbac031c98f9c2077fc88846e4d07849197,Lasse Collin,Lasse Collin,2023-09-11 15:53:31,2023-09-22 17:06:27,"Remove incorrect uses of __attribute__((__malloc__)).

xrealloc() is obviously incorrect, modern GCC docs even
mention realloc() as an example where this attribute
cannot be used.

liblzma's lzma_alloc() and lzma_alloc_zero() would be
correct uses most of the time but custom allocators
may use a memory pool or otherwise hold the pointer
so aliasing issues could happen in theory.

The xstrdup() case likely was correct but I removed it anyway.
Now there are no __malloc__ attributes left in the code.
The allocations aren't in hot paths so this should make
no practical difference."
74b0e900c92d5b222b36f474f1efa431f8e262f7,Lasse Collin,Lasse Collin,2023-09-08 15:41:25,2023-09-22 17:06:26,Build: Omit -Wc99-c11-compat since it warns about _Noreturn.
90c94dddfd57b7d744bfad64c54e10d15778144b,Lasse Collin,Lasse Collin,2023-09-08 15:19:26,2023-09-22 17:06:21,"tuklib: Update tuklib_attr_noreturn for C11/C17 and C23.

This makes no difference for GCC or Clang as they support
GNU C's __attribute__((__noreturn__)) but this helps with MSVC:

  - VS 2019 version 16.7 and later support _Noreturn if the
    options /std:c11 or /std:c17 are used. This gets handled
    with the check for __STDC_VERSION__ >= 201112.

  - When MSVC isn't in C11/C17 mode, __declspec(noreturn) is used.

C23 will deprecate _Noreturn (and <stdnoreturn.h>)
for [[noreturn]]. This commit anticipates that but
the final __STDC_VERSION__ value isn't known yet."
189f72581329ab281ad6af37f60135910cb1b146,Lasse Collin,Lasse Collin,2023-09-11 14:22:44,2023-09-22 17:00:38,Update THANKS.
79334e7f20f2bf9e0de095835b48868f1238f584,Lasse Collin,Lasse Collin,2023-09-05 19:42:10,2023-09-22 17:00:38,"MSVC: xz: Make file_io.c and file_io.h compatible with MSVC.

Thanks to Kelvin Lee for the original patches
and testing the modifications I made."
c660b8d78b7bda43b12b285550d8c70e8ccec698,Lasse Collin,Lasse Collin,2023-09-05 18:33:35,2023-09-22 17:00:38,"MSVC: xz: Use GetTickCount64() to implement mytime_now().

It's available since Windows Vista."
5c6f892d411670e3060f4bc309402617a209e57c,Kelvin Lee,Lasse Collin,2023-09-05 12:05:09,2023-09-22 17:00:38,MSVC: xz: Use _stricmp() instead of strcasecmp() in suffix.c.
e241051f50044259d174e8b4633dd9a1c4478408,Kelvin Lee,Lasse Collin,2023-09-05 12:01:10,2023-09-22 17:00:38,MSVC: xz: Use _isatty() from <io.h> to implement isatty().
d14bba8fc2be02a9fed8c9bcaaf61103451755f8,Kelvin Lee,Lasse Collin,2023-09-05 12:10:31,2023-09-22 17:00:38,MSVC: xz: Use _fileno() instead of fileno().
c4edd367678e6a38c42b149856159bf417da7fe1,Kelvin Lee,Lasse Collin,2023-09-05 12:00:07,2023-09-22 17:00:37,MSVC: xzdec: Use _fileno and _setmode.
cfd1054b9b539ee92524901e95d7bb5a1fe670a0,Kelvin Lee,Lasse Collin,2023-09-05 11:37:50,2023-09-22 17:00:37,MSVC: Don't #include <unistd.h>.
adef92f23563a2cc088b31ddee9040ecc96bc996,Lasse Collin,Lasse Collin,2023-09-19 11:03:45,2023-09-19 11:03:45,Update THANKS.
953e775941a25bfcfa353f802b13e66acb1edf2c,Jia Tan,Jia Tan,2023-09-14 13:13:23,2023-09-14 13:43:34,"CI: Enable CLMUL in address sanitization test.

The crc64_clmul() function should be ignored by the address sanitizer
now so these builds should still pass."
f167e79bc98f3f56af2e767b83aa81c2d2b9ed77,Lasse Collin,Lasse Collin,2023-09-14 13:35:46,2023-09-14 13:35:46,Update THANKS.
4f44ef86758a41a8ec814096f4cb6ee6de04c82e,Lasse Collin,Lasse Collin,2023-09-14 13:34:07,2023-09-14 13:34:07,"liblzma: Mark crc64_clmul() with __attribute__((__no_sanitize_address__)).

Thanks to Agostino Sarubbo.
Fixes: https://github.com/tukaani-project/xz/issues/62"
7379bb3eed428c0ae734d0cc4a1fd04359d53f08,Jia Tan,Jia Tan,2023-09-12 14:36:12,2023-09-12 14:49:03,"CMake: Fix time.h checks not running on second CMake run.

If CMake was configured more than once, HAVE_CLOCK_GETTIME and
HAVE_CLOCK_MONOTONIC would not be set as compile definitions. The check
for librt being needed to provide HAVE_CLOCK_GETTIME was also
simplified."
5d691fe58286b92d704c0dc5cd0c4df22881c6c6,Jia Tan,Jia Tan,2023-09-12 14:34:06,2023-09-12 14:34:06,"CMake: Fix unconditionally defining HAVE_CLOCK_MONOTONIC.

If HAVE_CLOCK_GETTIME was defined, then HAVE_CLOCK_MONOTONIC was always
added as a compile definition even if the check for it failed."
eccf12866527b8d24c7d7f92f755142be8ef9b11,Lasse Collin,Lasse Collin,2023-08-31 16:50:05,2023-08-31 16:50:05,"xz: Refactor thousand separator detection and disable it on MSVC.

Now the two variations of the format strings are created with
a macro, and the whole detection code can be easily disabled
on platforms where thousand separator formatting is known to
not work (MSVC has no support, and on DJGPP 2.05 it can have
problems in some cases)."
f7093cd9d130477c234b40aeda613964171f8f21,Lasse Collin,Lasse Collin,2023-08-31 15:14:43,2023-08-31 15:14:43,"xz: Fix a too relaxed assertion and remove uses of SSIZE_MAX.

SSIZE_MAX isn't readily available on MSVC. Removing it means
that there is one thing less to worry when porting to MSVC."
74c3449d8b816a724b12ebce7417e00fb597309a,Jia Tan,Jia Tan,2023-08-28 15:14:45,2023-08-28 15:14:45,"Tests: Improve invalid unpadded size check in test_lzma_index_append().

This check was extended to test the code added to fix a failing assert
in ae5c07b22a6b3766b84f409f1b6b5c100469068a."
2544274a8b8a27f4ea6c457d2c4c32eb1e4cd336,Jia Tan,Jia Tan,2023-08-28 13:54:41,2023-08-28 15:05:55,Tests: Improve comments in test_index.c.
49be29d6380b94e6fb26e511dd2cdbd9afce0f8b,Jia Tan,Jia Tan,2023-08-28 13:52:54,2023-08-28 15:05:46,Update THANKS.
721e3d9f7a82f59f32795d5fb97e0210d1aa839a,Jia Tan,Jia Tan,2023-08-28 13:50:16,2023-08-28 15:05:34,"liblzma: Update assert in vli_ceil4().

The argument to vli_ceil4() should always guarantee the return value
is also a valid lzma_vli. Thus the highest three valid lzma_vli values
are invalid arguments. All uses of the function ensure this so the
assert is updated to match this."
ae5c07b22a6b3766b84f409f1b6b5c100469068a,Jia Tan,Jia Tan,2023-08-28 13:31:25,2023-08-28 15:04:56,"liblzma: Add overflow check for Unpadded size in lzma_index_append().

This was not a security bug since there was no path to overflow
UINT64_MAX in lzma_index_append() or when it calls index_file_size().
The bug was discovered by a failing assert() in vli_ceil4() when called
from index_file_size() when unpadded_sum (the sum of the compressed size
of current Stream and the unpadded_size parameter) exceeds LZMA_VLI_MAX.

Previously, the unpadded_size parameter was checked to be not greater
than UNPADDED_SIZE_MAX, but no check was done once compressed_base was
added.

This could not have caused an integer overflow in index_file_size() when
called by lzma_index_append(). The calculation for file_size breaks down
into the sum of:

- Compressed base from all previous Streams
- 2 * LZMA_STREAM_HEADER_SIZE (size of the current Streams header and
  footer)
- stream_padding (can be set by lzma_index_stream_padding())
- Compressed base from the current Stream
- Unpadded size (parameter to lzma_index_append())

The sum of everything except for Unpadded size must be less than
LZMA_VLI_MAX. This is guarenteed by overflow checks in the functions
that can set these values including lzma_index_stream_padding(),
lzma_index_append(), and lzma_index_cat(). The maximum value for
Unpadded size is enforced by lzma_index_append() to be less than or
equal UNPADDED_SIZE_MAX. Thus, the sum cannot exceed UINT64_MAX since
LZMA_VLI_MAX is half of UINT64_MAX.

Thanks to Joona Kannisto for reporting this."
1057765aaabfe0f1397b8094531846655376ae38,Jia Tan,Jia Tan,2023-08-28 14:18:29,2023-08-28 14:18:29,Translations: Update the Esperanto translation.
f2e94d064f305bb8ad77ca70f91d93e55f5cf856,Jia Tan,Jia Tan,2023-08-26 12:10:23,2023-08-26 12:10:23,Translations: Update the Esperanto translation.
2b871f4dbffe3801d0da3f89806b5935f758d5f3,Jia Tan,Jia Tan,2023-08-09 12:55:36,2023-08-14 12:39:22,"Docs: Update INSTALL for --enable-threads method win95.

The Autotools build allows win95 threads and --enable-small together now
if the compiler supports __attribute__((__constructor__))."
356ad5b26b4196f085ce3afa1869154ca81faad8,Jia Tan,Jia Tan,2023-08-09 12:54:15,2023-08-14 12:39:18,CMake: Conditionally allow win95 threads and --enable-small.
de574404c4c2f87aca049f232c38526e3ce092aa,Jia Tan,Jia Tan,2023-08-09 12:35:16,2023-08-09 12:35:16,"Build: Conditionally allow win95 threads and --enable-small.

When the compiler supports __attribute__((__constructor__))
mythread_once() is never used, even with --enable-small. A configuration
with win95 threads and --enable-small will compile and be thread safe so
it can be allowed.

This isn't a very common configuration since MSVC does not support
__attribute__((__constructor__)), but MINGW32 and CLANG32 environments
for MSYS2 can use win95 threads and have
__attribute__((__constructor__)) support."
6bf33b704cd31dccf25e68480464aa22d3fcad5a,Jamaika1,GitHub,2023-08-08 12:07:59,2023-08-08 12:07:59,"mythread.h: Fix typo error in Vista threads mythread_once().

The ""once_"" variable was accidentally referred to as just ""once"". This
prevented building with Vista threads when
HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR was not defined."
80cb961e5380a3878246d41341ff91378ca59e05,Jia Tan,Jia Tan,2023-08-04 14:17:11,2023-08-04 14:17:11,"codespell: Add .codespellrc to set default options.

The .codespellrc allows setting default options to avoid false positive
matches, set additional dictionaries, etc. For now, codespell can be
used locally before committing doc and comment changes.

It should help prevent silly errors and fix up commits in the future."
cd678a6077358935249b64a4a16fe8d17434f9c9,Jia Tan,Jia Tan,2023-08-03 12:10:21,2023-08-03 12:10:21,Tests: Style fixes to test_lzip_decoder.c.
1cac5ed4fa45c9861d745b02d80575cb2ff01d81,Jia Tan,Jia Tan,2023-08-03 07:56:20,2023-08-03 07:56:20,Translations: Update the Chinese (simplified) translation.
16068f6c30b888cdb873f6285af941d00f95741d,Lasse Collin,Lasse Collin,2023-08-02 14:15:12,2023-08-02 14:15:12,xz: Omit an empty paragraph on the man page.
9ae4371b5106189486e850ce777e40f7b6021c0b,Jia Tan,Jia Tan,2023-08-02 12:30:07,2023-08-02 12:30:07,Add NEWS for 5.4.4.
e8c2203b2c76466d8d3387c5212b46151de8e605,Lasse Collin,Lasse Collin,2023-08-02 12:19:43,2023-08-02 12:19:43,"build-aux/manconv.sh: Fix US-ASCII and UTF-8 output.

groff defaults to SGR escapes. Using -P-c passes -c to grotty
which restores the old behavior. Perhaps there is a better way to
get pure plain text output but this works for now."
9a706167b0d903d92fd134895acb4bc6a5e3e688,Lasse Collin,Lasse Collin,2023-08-01 16:10:43,2023-08-01 16:10:43,Update THANKS.
33e25a0f5650754c38bed640deedefe3b4fec5ef,Lasse Collin,Lasse Collin,2023-08-01 15:22:24,2023-08-01 15:22:24,Update THANKS.
81db3b889830132334d1f2129bdc93177ac2ca7d,ChanTsune,Lasse Collin,2023-08-01 15:17:17,2023-08-01 15:18:05,"mythread.h: Disable signal functions in builds targeting Wasm + WASI.

signal.h in WASI SDK doesn't currently provide sigprocmask()
or sigset_t. liblzma doesn't need them so this change makes
liblzma and xzdec build against WASI SDK. xz doesn't build yet
and the tests don't either as tuktest needs setjmp() which
isn't (yet?) implemented in WASI SDK.

Closes: https://github.com/tukaani-project/xz/pull/57
See also: https://github.com/tukaani-project/xz/pull/56

(The original commit was edited a little by Lasse Collin.)"
71c638c611324e606d324c8189fef8fe79db6991,Jia Tan,Jia Tan,2023-08-01 13:58:51,2023-08-01 13:58:51,"Add newline to end of .gitignore.

Newline was accidentally removed in commit
01cbb7f023ee7fda8ddde04bd17cf7d3c2418706."
42df7c7aa1cca385e509eb33c65136e61890f0bf,Dimitri Papadopoulos Orfanos,GitHub,2023-07-31 12:02:21,2023-07-31 12:02:21,Docs: Fix typos found by codespell
01cbb7f023ee7fda8ddde04bd17cf7d3c2418706,Jia Tan,Jia Tan,2023-07-26 12:26:23,2023-07-28 14:17:50,Update .gitignore.
f97a1afd564c48ad9cb94682e10972a72e11fa08,Jia Tan,Jia Tan,2023-07-28 14:03:08,2023-07-28 14:03:08,"CMake: Conditionally allow the creation of broken symlinks.

The CMake build will try to create broken symlinks on Unix and Unix-like
platforms. Cygwin and MSYS2 are Unix-like, but may not be able to create
broken symlinks. The value of the CYGWIN or MSYS environment variables
determine if broken symlinks are valid.

The default for MSYS2 does not allow for broken symlinks, so the CMake
build has been broken for MSYS2 since commit
80a1a8bb838842a2be343bd88ad1462c21c5e2c9."
7190f4cc7c9ade5b9b3675d0cbfa3b6d6ec9cb4f,Jia Tan,Jia Tan,2023-07-28 13:56:48,2023-07-28 13:56:48,"CI: Fix windows-ci dependency installation.

All of the MSYS2 environments need make, and it does not come with the
toolchain package. The toolchain package will install the needed
compiler toolchains since without this package CMake cannot properly
generate the Makefiles."
a048f472cd9a2245265cb292853cbbcdd4f02001,Jia Tan,Jia Tan,2023-07-28 13:54:22,2023-07-28 13:54:22,"CI: Update ci_build.sh CMake to always make Unix Makefiles.

The default for many of the MSYS2 environments is for CMake to create
Ninja build files. This would complicate the build script since we would
need a different command to run the tests. Its simpler to always use
Unix Makefiles so that ""make test"" is always a usable target for
testing."
7870396a0ca945473aa0d1d790f4cbef456610bd,Jia Tan,Jia Tan,2023-07-25 12:17:23,2023-07-25 12:17:23,CI: Test CMake builds and test framework with MSYS2.
6497d1f8875cb7e3007f714336cc09c06fed235b,Jia Tan,Jia Tan,2023-07-25 12:14:53,2023-07-25 12:14:53,"CI: Windows CI rename system matrix variable -> msys2_env.

Calling the MSYS2 environment ""system"" was a bit vague and should be
more specific."
785e4121d9b2921ad36bd3af1cf61fa20a9265bd,Jia Tan,Jia Tan,2023-07-24 15:11:45,2023-07-24 15:11:45,CI: Add Clang64 MSYS2 environment to Windows CI.
d9166b52cf3458a4da3eb92224837ca8fc208d79,Jia Tan,Jia Tan,2023-07-24 13:43:44,2023-07-24 15:11:13,"liblzma: Prevent an empty translation unit in Windows builds.

To workaround Automake lacking Windows resource compiler support, an
empty source file is compiled to overwrite the resource files for static
library builds. Translation units without an external declaration are
not allowed by the C standard and result in a warning when used with
-Wempty-translation-unit (Clang) or -pedantic (GCC)."
db5019d691f980d622fb56fdcf383af2c3519c98,Jia Tan,Jia Tan,2023-07-22 10:37:56,2023-07-22 10:37:56,Translations: Update the Vietnamese translation.
f3a055f762ba5b71b746fc2d44a6ababde2c61b5,Jia Tan,Jia Tan,2023-07-22 06:55:42,2023-07-22 10:31:02,"CI: Add Windows runner for Autotools builds with MSYS2.

Only a subset of the tests run by the Linux and MacOS Autotools builds
are run. The most interesting tests are the ones that disable threads,
encoders, and decoders.

The Windows runner will only be run manually since these tests will
likely take much longer than the Linux and MacOS runners. This runner
should be used before merging any large features and before releases.

Currently the clang64 environment fails to due to a warning and
-Werror is enabled for the CI tests. This is still an early version
since the CMake build can be done for MSVC and optionally each of the
MSYS2 environments. GitHub does not allow manually running the CI tests
unless the workflow is checked on the default branch so checking in a
minimum version is a good idea.

Thanks to Arthur S for the original proposing the original patch.

Closes: https://github.com/tukaani-project/xz/pull/34"
556536a3525df9e5ed78b8c7057991cfa9edfac8,Jia Tan,Jia Tan,2023-07-21 14:11:01,2023-07-22 10:13:43,CI: Add argument to ci_build.sh to pass flags to autogen.sh.
39a32d36fc465c4e70f13192eea380e518ba6e8a,Jia Tan,Jia Tan,2023-07-21 10:05:44,2023-07-21 10:05:44,"Tests: Skip .lz files in test_files.sh if not configured.

Previously if the lzip decoder was not configured then test_files.sh
would pass the lzip tests instead of skipping them."
194d12724b30fe42789d12a0184f9d412c449347,Jia Tan,Jia Tan,2023-07-20 14:11:13,2023-07-20 14:11:13,Tests: Add ARM64 filter test to test_compress.sh.
d850365c444368102c69beaddf849ed463c33467,Jia Tan,Jia Tan,2023-07-20 12:30:05,2023-07-20 12:30:05,Translations: Update the Croatian translation.
24049eb7acf6d42a60f00efe4e7289fe8e1797fe,Jia Tan,Jia Tan,2023-07-20 12:28:32,2023-07-20 12:28:32,Translations: Update the Korean man page translations.
4d4a4fa07de6cb9d913fb2f97712fddda2527b49,Jia Tan,Jia Tan,2023-07-20 12:25:24,2023-07-20 12:25:24,Translations: Update the Korean translation.
237f06d9c55cf438a7538a598354bcf103f23711,Jia Tan,Jia Tan,2023-07-20 12:24:05,2023-07-20 12:24:05,Translations: Update the Polish translation.
80c2c832136656d5ac7a1bca8bc42d95e13d281a,Jia Tan,Jia Tan,2023-07-20 12:22:23,2023-07-20 12:22:23,Translations: Update the German man page translations.
fdbde14503ca03069d3649aa51926f5f796b89d8,Jia Tan,Jia Tan,2023-07-20 12:18:44,2023-07-20 12:18:44,Translations: Update the German translation.
9f3bf5ff5b2b5cf0b252a2bf381238ca49dc4101,Jia Tan,Jia Tan,2023-07-20 12:17:10,2023-07-20 12:17:10,Translations: Update the Chinese (simplified) translation.
376938c588011567c74f1d5a160c0ccce6336d46,Jia Tan,Jia Tan,2023-07-20 12:15:47,2023-07-20 12:15:47,Translations: Update the Swedish translation.
26b0bc6eb82c84559936a7c7080de5c71c8276f8,Jia Tan,Jia Tan,2023-07-20 12:14:00,2023-07-20 12:14:00,Translations: Update the Ukrainian man page translations.
2d02c8b7640b54f3c5aa1c8b5990ba56f322393b,Jia Tan,Jia Tan,2023-07-20 12:09:15,2023-07-20 12:09:15,Translations: Update the Ukrainian translation.
f881018b503fd334331c24a09075429558abbce1,Jia Tan,Jia Tan,2023-07-20 12:06:57,2023-07-20 12:06:57,Translations: Update the Spanish translation.
791fe6d3ffd6877fa5f852be69d9251397dfaa31,Jia Tan,Jia Tan,2023-07-20 12:05:19,2023-07-20 12:05:19,Translations: Update the Romanian translation.
8827e90704f699fe08bb5bed56b1717a2bc0eb77,Jia Tan,Jia Tan,2023-07-20 12:02:56,2023-07-20 12:02:56,Translations: Update the Romanian man page translations.
0184d344fa4f215cd345bb131db9068e077c69b8,Jia Tan,Jia Tan,2023-07-19 15:36:00,2023-07-19 15:36:00,"liblzma: Suppress -Wunused-function warning.

Clang 16.0.0 and earlier have a bug that the ifunc resolver function
triggers the -Wunused-function warning. The resolver function is static
and only ""used"" by the __attribute__((__ifunc()__)).

At this time, the bug is still unresolved, but has been reported:
https://github.com/llvm/llvm-project/issues/63957

This is not a problem in GCC."
43845fa70fc751736c44c18f4cee42d49bfd1392,Jia Tan,Jia Tan,2023-07-18 14:52:25,2023-07-18 14:57:58,"liblzma: Reword lzma_str_list_filters() documentation.

This further improves the documentation from commit
f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf. The previous wording of
""supported options"" was slightly misleading since the options that are
printed are the ones that are relevant for encoding/decoding. It is not
about which options can or must be specified."
818701ba1c9dff780b7fbf28f9ab8eb11a25dd67,Jia Tan,Jia Tan,2023-07-18 14:49:57,2023-07-18 14:56:47,"liblzma: Improve comment in string_conversion.c.

The comment used ""flag"" when referring to decoder options. Just
referring to them as options is more clear and consistent."
b6b7d065853cd4c3f5b8d9be8aea0b6dcb0fe090,Lasse Collin,Lasse Collin,2023-07-18 14:37:33,2023-07-18 14:37:33,"xz: Translate the second ""%s: "" in message.c since French needs ""%s : "".

This string is used to print a filename when using ""xz -v"" and
stderr isn't a terminal."
be644042c3066d8e7a2834f989671ba74d27f749,Lasse Collin,Lasse Collin,2023-07-18 11:35:33,2023-07-18 14:34:18,"xz: Make ""%s: %s"" translatable because French needs ""%s : %s""."
97fd5cb669ee0afc48d2087675ab166aff89eaa2,Lasse Collin,Lasse Collin,2023-07-18 10:57:54,2023-07-18 10:57:54,"liblzma: Tweak #if condition in memcmplen.h.

Maybe ICC always #defines _MSC_VER on Windows but now
it's very clear which code will get used."
40392c19f71985852d75997f109dea97177d6f3f,Lasse Collin,Lasse Collin,2023-07-18 10:49:43,2023-07-18 10:49:43,liblzma: Omit unnecessary parenthesis in a preprocessor directive.
abc1d5601b7e419ebc28a1ab4b268613b52e6f98,Jia Tan,Jia Tan,2023-07-17 16:51:48,2023-07-17 16:51:48,xz: Update Authors list in a few files.
289034a168878baa9df6ff6e159110aade69cba5,Jia Tan,Jia Tan,2023-07-14 15:20:33,2023-07-17 16:45:31,"Docs: Add a new section to INSTALL for Tests.

The new Tests section describes basic information about the tests, how
to run them, and important details when cross compiling. We have had a
few questions about how to compile the tests without running them, so
hopefully this information will help others with the same question in the
future.

Fixes: https://github.com/tukaani-project/xz/issues/54"
1119e5f5a519b0ab71c81fc4dc84c0cc72abe513,Jia Tan,Jia Tan,2023-07-14 13:10:27,2023-07-17 15:53:30,"Docs: Update README.

This adds an entry to ""Other implementations of the .xz format"" for
XZ for Java."
f99e2e4e53b7ea89e4eef32ddd4882e0416357c9,Jia Tan,Jia Tan,2023-07-13 15:32:10,2023-07-17 15:34:55,"xz: Fix typo in man page.

The Memory limit information section described three output
columns when it actually has six. This was reworded to
""multiple"" to make it more future proof."
f907705eb1f6c5edaafc9668a34c51a989932f1d,Jia Tan,Jia Tan,2023-07-13 13:46:12,2023-07-17 15:34:55,"xz: Minor clean up for coder.c

* Moved max_block_list_size from a global to local variable.
* Reworded error message in validate_block_list_filter().
* Removed helper function filter_chain_error().
* Changed 1 << X to 1U << X in many places"
9adc9e56157ecbf2948e5036df8567809b9ae177,Jia Tan,Jia Tan,2023-07-13 13:26:47,2023-07-17 15:34:55,xz: Update man page Authors and date.
c12e429f2635da8d8f5749e5f733f451baca6945,Jia Tan,Jia Tan,2023-06-20 12:32:59,2023-07-17 15:34:55,xz: Add a section to man page for robot mode --filters-help.
e10f2db5d10300c16fa482a136ed31c1aa6e8e8d,Jia Tan,Jia Tan,2023-06-19 15:11:41,2023-07-17 15:34:55,"xz: Slight reword in xz man page for consistency.

Changed will print => prints in xz --robot --version description to
match --robot --info-memory description."
f5dc172a402fa946f3c45a16929d7fe14c9f5e81,Jia Tan,Jia Tan,2023-06-19 15:07:10,2023-07-17 15:34:55,"xz: Reorder robot mode subsections in the man page.

The order is now consistent with the order the command line arguments
are documented earlier in the man page. The new order is:
1. --list
2. --info-memory
3. --version

Instead of the previous order:
1. --version
2. --info-memory
3. --list"
9628be23aef2784249fd9f3199799d785d2ec5cc,Jia Tan,Jia Tan,2023-05-12 16:46:50,2023-07-17 15:34:55,xz: Update man page for new --filters-help option.
a165d7df1964121eb9df715e6f836a31c865beef,Jia Tan,Jia Tan,2023-05-12 16:44:41,2023-07-17 15:34:55,"xz: Add a new --filters-help option.

The --filters-help can be used to help create filter chains with the
--filters and --filtersX options. The message in --long-help is too
short to fully explain the syntax to construct complex filter chains.

In --robot mode, xz will only print the output from liblzma function
lzma_str_list_filters."
95f1a414b156ee35d3e71862a14915fdd138f913,Jia Tan,Jia Tan,2023-04-21 12:28:11,2023-07-17 15:34:55,"xz: Update the man page for --block-list and --filtersX

The --block-list option description needed updating since the new
--filtersX option changes how it can be used. The new entry for
--filters1=FILTERS ... --filter9=FILTERS was created right after
the --filters option."
47a63cad2aa778280e0c1926b7159427ea028cb1,Jia Tan,Jia Tan,2023-04-21 11:50:14,2023-07-17 15:34:55,xz: Update --long-help for the new --filtersX option.
8b9913a13daca2550d02dfdcdc9be15f55ca4d13,Jia Tan,Jia Tan,2023-06-17 12:46:21,2023-07-17 15:34:55,"xz: Ignore filter chains that are set but never used in --block-list.

If a filter chain is set but not used in --block-list, it introduced
unexpected behavior such as requiring an unneeded amount of memory to
compress, reducing the number of threads in multi-threaded encoding, and
printing an incorrect amount of memory needed to decompress.

This also renames filters_init_mask => filters_used_mask. A filter is
assumed to be used if it is specified in --filtersX until
coder_set_compression_settings() determines which filters are referenced
in --block-list."
183819bfd9efac8c184d9bf123325719b7eee30f,Jia Tan,Jia Tan,2023-05-13 12:11:13,2023-07-17 15:34:55,"xz: Set the Block size for mt encoding correctly.

When opt_block_size is not used, the Block size for mt encoder is
derived from the minimum of the largest Block specified by
--block-list and the recommended Block size on all filter chains
calculated by lzma_mt_block_size(). This avoids using unnecessary
memory and ensures that all Blocks are large enough for the most memory
needy filter chain."
afb2dbec3d857b026486b75e42a4728e12d234cb,Jia Tan,Jia Tan,2023-05-10 16:09:41,2023-07-17 15:34:55,xz: Validate --flush-timeout for all specified filter chains.
5f0c5a04388f8334962c70bc37a8c2ff8f605e0a,Jia Tan,Jia Tan,2023-05-13 11:54:33,2023-07-17 15:34:55,"xz: Allows --block-list filters to scale down memory usage.

Previously, only the default filter chain could have its memory usage
adjusted. The filter chains specified with --filtersX were not checked
for memory usage. Now, all used filter chains will be adjusted if
necessary."
479fd58d60622331fcbe48fddf756927b9f80d9a,Jia Tan,Jia Tan,2023-05-10 13:50:33,2023-07-17 15:34:55,"xz: Do not include block splitting if encoders are disabled.

The block splitting logic and split_block() function are not needed if
encoders are disabled. This will help slightly reduce the binary size
when built without encoders and allow split_block() to use functions
that require encoders being enabled."
f86ede22500f7ae024ec3ec3f3489ab5a857a3b3,Jia Tan,Jia Tan,2023-05-10 14:38:59,2023-07-17 15:34:55,"xz: Free filters[] in debug mode.

This will only free filter chains created with --filters1-9 since the
default filter chain may be set from a static function variable. The
complexity to free the default filter chain is not worth the burden on
code maintenance."
f281cd0d692ac0c70fc7669b80dddb863ea947e1,Jia Tan,Jia Tan,2023-05-13 11:28:23,2023-07-17 15:34:55,"xz: Add a message if --block-list is used outside of xz compresssion.

--block-list is only supported with compression in xz format. This avoids
silently ignoring when --block-list is unused."
d6af7f347077b22403133239592e478931307759,Jia Tan,Jia Tan,2023-04-18 12:29:09,2023-07-17 15:34:55,"xz: Create command line options for filters[1-9].

The new command line options are meant to be combined with --block-list.
They work as an optional extension to --block-list to specify a custom
filter chain for each block listed. The new options allow the creation
of up to 9 reusable filter chains. For instance:

xz --block-list=1:10MiB,3:5MiB,,2:5MiB,1:0 --filters1=delta--lzma2 \
--filters2=x86--lzma2 --filters3=arm64--lzma2

Will create the following blocks:
1. A block of size 10 MiB with filter chain delta, lzma2.
2. A block of size 5 MiB with filter chain arm64, lzma2.
3. A block of size 5 MiB with filter chain arm64, lzma2.
4. A block of size 5 MiB with filter chain x86, lzma2.
5. A block containing the rest of the file contents with filter chain
   delta, lzma2."
072d29250113268536719ad0e040ab8a66fb6435,Jia Tan,Jia Tan,2023-05-13 11:36:09,2023-07-17 15:34:55,"xz: Use lzma_filters_free() in forget_filter_chain().

This is a little cleaner than the previous implementation of
forget_filter_chain(). It is also more consistent since
lzma_str_to_filters() will always terminate the filter chain so there
is no need to terminate it later in coder_set_compression_settings()."
3d21da5cff4b511633cb6e0d8a1090485c0c1059,Jia Tan,Jia Tan,2023-04-17 14:22:45,2023-07-17 15:34:55,"xz: Separate string to filter conversion into a helper function.

Converting from string to filter will also need to be done for block
specific filter chains."
a6583726e5f950278f96abcf79c04f1056810be6,Jia Tan,Jia Tan,2023-01-05 16:03:35,2023-07-17 15:34:55,Tests: Use new --filters option in test_compress.sh
5f3b898d07cc9b7160c7c88b3120b7edabb8a5b0,Jia Tan,Jia Tan,2023-01-05 16:03:06,2023-07-17 15:34:55,xz: Update --long-help and man page for new --filters option.
9ded880a0221f4d1256845fc4ab957ffd377c760,Jia Tan,Jia Tan,2023-01-05 16:02:29,2023-07-17 15:34:55,"xz: Add --filters option to CLI.

The --filters option uses the new lzma_str_to_filters() function
to convert a string into a full filter chain. Using this option
will reset all previous filters set by --preset, --[filter], or
--filters."
2c189bb00af73dc7ba1a67a9d274d5be03ee3a88,Jia Tan,Jia Tan,2023-07-14 13:30:25,2023-07-14 13:30:25,"Tests: Improve feature testing for skipping.

Fixed a bug where test_compress_* would all fail if arm64 or armthumb
filters were enabled for compression but arm was disabled. Since the
grep tests only checked for ""define HAVE_ENCODER_ARM"", this would match
on HAVE_ENCODER_ARM64 or HAVE_ENCODER_ARMTHUMB.

Now the config.h feature test requires "" 1"" at the end to prevent the
prefix problem. have_feature() was also updated for this even though
there were known current bugs affecting it. This is just in case future
features have a similar prefix problem."
80a6b9bcad016c99c9ba3f3eeb4a619fcadfd357,Jia Tan,Jia Tan,2023-07-10 12:56:28,2023-07-10 12:56:28,Translations: Update the Chinese (traditional) translation.
17f8844e6fc355abf997d77637a7447c4f7bbcbd,Jia Tan,Jia Tan,2023-07-08 13:24:19,2023-07-08 13:24:19,"liblzma: Remove non-portable empty initializer.

Commit 78704f36e74205857c898a351c757719a6c8b666 added an empty
initializer {} to prevent a warning. The empty initializer is a GNU
extension and results in a build failure on MSVC. The -wpedantic flag
warns about empty initializers."
3aca4f629cd577f0c54f594d5d88722edf0b0413,Jia Tan,Jia Tan,2023-07-08 12:03:59,2023-07-08 12:03:59,Translations: Update the Vietnamese translation.
66bdcfa85fef2911cc80f5f30fed3f9610faccb4,Jia Tan,Jia Tan,2023-06-28 12:46:31,2023-06-28 16:07:16,"Tests: Fix memory leaks in test_index.

Several tests were missing calls to lzma_index_end() to clean up the
lzma_index structs. The memory leaks were discovered by using
-fsanitize=address with GCC."
fe3bd438fb119f9bad3f08dc29d331e4956196e1,Jia Tan,Jia Tan,2023-06-28 12:43:29,2023-06-28 16:07:05,"Tests: Fix memory leaks in test_block_header.

test_block_header was not properly freeing the filter options between
calls to lzma_block_header_decode(). The memory leaks were discovered by
using -fsanitize=address with GCC."
78704f36e74205857c898a351c757719a6c8b666,Jia Tan,Jia Tan,2023-06-28 12:31:11,2023-06-28 16:06:16,"liblzma: Prevent uninitialzed warning in mt stream encoder.

This change only impacts the compiler warning since it was impossible
for the wait_abs struct in stream_encode_mt() to be used before it was
initialized since mythread_condtime_set() will always be called before
mythread_cond_timedwait().

Since the mythread.h code is different between the POSIX and
Windows versions, this warning was only present on Windows builds.

Thanks to Arthur S for reporting the warning and providing an initial
patch."
e3356a204c5ae02db3ec4552b6c1be354e9b6142,Jia Tan,Jia Tan,2023-06-28 12:22:38,2023-06-28 15:59:51,"liblzma: Prevent warning for MSYS2 Windows build.

In lzma_memcmplen(), the <intrin.h> header file is only included if
_MSC_VER and _M_X64 are both defined but _BitScanForward64() was
previously used if _M_X64 was defined. GCC for MSYS2 defines _M_X64 but
not _MSC_VER so _BitScanForward64() was used without including
<intrin.h>.

Now, lzma_memcmplen() will use __builtin_ctzll() for MSYS2 GCC builds as
expected."
45e250a9e9f3c3e8e8af2983366b170bf54f890e,Jia Tan,Jia Tan,2023-06-28 13:01:22,2023-06-28 15:59:47,"CI: Add test with -fsanitize=address,undefined.

ci_build.sh was updated to accept disabling of __attribute__ ifunc
and CLMUL. This will allow -fsanitize=address to pass because ifunc
is incompatible with -fsanitize=address. The CLMUL implementation has
optimizations that potentially read past the buffer and mask out the
unwanted bytes.

This test will only run on Autotools Linux."
596ee722cd7ddf0afae584fc06365adc0e735977,Jia Tan,Jia Tan,2023-06-28 12:16:04,2023-06-28 12:48:49,CI: Upgrade checkout action from v2 to v3.
86118ea320f867e09e98a8682cc08cbbdfd640e2,Jia Tan,Jia Tan,2023-06-27 15:38:32,2023-06-27 15:56:06,Update THANKS.
3d1fdddf92321b516d55651888b9c669e254634e,Jia Tan,Jia Tan,2023-06-27 14:27:09,2023-06-27 15:56:06,Docs: Document the configure option --disable-ifunc in INSTALL.
b4cf7a2822e8d30eb2b12a1a07fd04383b10ade3,Lasse Collin,Jia Tan,2023-06-27 14:24:49,2023-06-27 15:56:06,Minor tweaks to style and comments.
23fb9e3a329117c2968c1e7388b6ef07c782dba1,Lasse Collin,Jia Tan,2023-06-27 14:19:49,2023-06-27 15:56:06,"CMake: Rename CHECK_ATTR_IFUNC to ALLOW_ATTR_IFUNC.

It's so that there's a clear difference in wording compared
to liblzma's integrity check types."
ee44863ae88e377a5df10db007ba9bfadde3d314,Lasse Collin,Jia Tan,2023-06-27 14:05:23,2023-06-27 15:55:59,"liblzma: Add ifunc implementation to crc64_fast.c.

The ifunc method avoids indirection via the function pointer
crc64_func. This works on GNU/Linux and probably on FreeBSD too.
The previous __attribute((__constructor__)) method is kept for
compatibility with ELF platforms which do support ifunc.

The ifunc method has some limitations, for example, building
liblzma with -fsanitize=address will result in segfaults.
The configure option --disable-ifunc must be used for such builds.

Thanks to Hans Jansen for the original patch.
Closes: https://github.com/tukaani-project/xz/pull/53"
b72d21202402a603db6d512fb9271cfa83249639,Hans Jansen,Lasse Collin,2023-06-22 17:49:30,2023-06-27 12:33:15,"Add ifunc check to CMakeLists.txt

CMake build system will now verify if __attribute__((__ifunc__())) can be
used in the build system. If so, HAVE_FUNC_ATTRIBUTE_IFUNC will be
defined to 1."
23b5c36fb71904bfbe16bb20f976da38dadf6c3b,Hans Jansen,Lasse Collin,2023-06-22 17:46:55,2023-06-27 12:33:15,"Add ifunc check to configure.ac

configure.ac will now verify if __attribute__((__ifunc__())) can be used in
the build system. If so, HAVE_FUNC_ATTRIBUTE_IFUNC will be defined to 1."
dbb3a536ed9873ffa0870321f6873e564c6a9da8,Jia Tan,Jia Tan,2023-06-06 16:18:30,2023-06-06 16:23:02,"CI: Add apt update command before installing dependencies.

Without the extra command, all of the CI tests were automatically
failing because the Ubuntu servers could not be reached properly."
6bcd516812331de42b347922913230895bebad34,Jia Tan,Jia Tan,2023-06-06 16:10:38,2023-06-06 16:10:38,Update THANKS.
0d94ba69220d894d2a86081821d2d7a89df5a10b,Benjamin Buch,GitHub,2023-06-06 13:32:45,2023-06-06 13:32:45,"CMake: Protects against double find_package

Boost iostream uses `find_package` in quiet mode and then again uses
`find_package` with required. This second call triggers a 
`add_library cannot create imported target ""ZLIB::ZLIB"" because another
target with the same name already exists.`

This can simply be fixed by skipping the alias part on secondary
`find_package` runs."
045d7aae286ecd2ce163be9e0d9041343a03f89a,Jia Tan,Jia Tan,2023-05-31 12:26:42,2023-05-31 15:57:57,Translations: Update the Esperanto translation.
b0cc7c2dcefe4cbc4e1e697598c14fb687ed0b78,Jia Tan,Jia Tan,2023-05-31 12:25:00,2023-05-31 15:57:57,Translations: Update the Croatian translation.
af045ef6f848f02cd14c9ad195a5f87bb0c02dce,Jia Tan,Jia Tan,2023-05-31 12:15:53,2023-05-31 12:15:53,Translations: Update the Chinese (simplified) translation.
e6b92d5817fe91ad27a0f7f57bd0f2144311e383,Jia Tan,Jia Tan,2023-05-17 15:12:13,2023-05-17 15:12:13,Translations: Update German translation of man pages.
592961ccdbba39c7d60fe37e36764232feb57c60,Jia Tan,Jia Tan,2023-05-17 15:09:18,2023-05-17 15:09:18,Translations: Update the German translation.
13572cb2c391f5b7503e333c6e05b20bd5bbb524,Jia Tan,Jia Tan,2023-05-17 12:30:01,2023-05-17 12:30:01,Translations: Update the Croatian translation.
4e6e425ea8f097c6fb43e69cc9540294dca3680d,Jia Tan,Jia Tan,2023-05-17 12:26:54,2023-05-17 12:26:54,Translations: Update Korean translation of man pages.
d5ef1f6faf7c270f60093629257150085ecf19ca,Jia Tan,Jia Tan,2023-05-17 12:13:01,2023-05-17 12:13:01,Translations: Update the Korean translation.
e22d0b0f2e301e7906d0106689d967ed84362028,Jia Tan,Jia Tan,2023-05-16 15:49:09,2023-05-16 15:49:09,Translations: Update the Spanish translation.
f50da74d52d01f6cfd826a921249e289cf671678,Jia Tan,Jia Tan,2023-05-16 15:47:23,2023-05-16 15:47:23,Translations: Update the Romanian translation.
4b9ad60a7305e9841b7cb4ea611bdf5fa7271696,Jia Tan,Jia Tan,2023-05-16 15:45:43,2023-05-16 15:45:43,Translations: Update Romanian translation of man pages.
cb6fd57f889c5d9fab36ae8c9e10083a5fe32dea,Jia Tan,Jia Tan,2023-05-16 15:43:51,2023-05-16 15:44:45,Translations: Update Ukrainian translation of man pages.
c3e8fcbc2db4861f92ad15606c995bd255803c52,Jia Tan,Jia Tan,2023-05-16 15:37:54,2023-05-16 15:44:45,Translations: Update the Ukrainian translation.
27b81b84fcedbc55aa6e6b21004c44070b15b038,Jia Tan,Jia Tan,2023-05-16 15:07:35,2023-05-16 15:44:36,Translations: Update the Polish translation.
8024ad636a65ed6ea95c94d57255be4c6724d6ed,Jia Tan,Jia Tan,2023-05-16 14:52:14,2023-05-16 14:52:14,Translations: Update the Swedish translation.
6699a29673f227c4664826db485ed9f7596320d2,Jia Tan,Jia Tan,2023-05-16 13:21:38,2023-05-16 13:21:38,Translations: Update the Esperanto translation.
f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf,Jia Tan,Jia Tan,2023-05-13 13:21:54,2023-05-13 13:21:54,"liblzma: Slightly rewords lzma_str_list_filters() documentation.

Reword ""options required"" to ""supported options"". The previous may have
suggested that the options listed were all required anytime a filter is
used for encoding or decoding. The reword makes this more clear that
adjusting the options is optional."
3374a5359e52f1671d8f831d65827d5020fe2595,Jia Tan,Jia Tan,2023-05-11 15:49:23,2023-05-11 16:00:47,"liblzma: Adds lzma_nothrow to MicroLZMA API functions.

None of the liblzma functions may throw an exception, so this
attribute should be applied to all liblzma API functions."
8f236574986e7c414c0ea059f441982d1387e6a4,Jia Tan,Jia Tan,2023-05-09 12:20:06,2023-05-11 15:54:44,"liblzma: Exports lzma_mt_block_size() as an API function.

The lzma_mt_block_size() was previously just an internal function for
the multithreaded .xz encoder. It is used to provide a recommended Block
size for a given filter chain.

This function is helpful to determine the maximum Block size for the
multithreaded .xz encoder when one wants to change the filters between
blocks. Then, this determined Block size can be provided to
lzma_stream_encoder_mt() in the lzma_mt options parameter when
intializing the coder. This requires one to know all the filter chains
they are using before starting to encode (or at least the filter chain
that will need the largest Block size), but that isn't a bad limitation."
d0f33d672a4da7985ebb5ba8d829f885de49c171,Jia Tan,Jia Tan,2023-05-08 14:58:09,2023-05-11 14:28:45,"liblzma: Creates IS_ENC_DICT_SIZE_VALID() macro.

This creates an internal liblzma macro to test if the dictionary size
is valid for encoding."
c247d06e1f6cada9a76f4f6225cbd97ea760f52f,Jia Tan,Jia Tan,2023-05-02 12:39:56,2023-05-04 14:15:35,Add NEWS for 5.4.3.
77050b78364ffb6b0f129e742b7c31602d725c08,Jia Tan,Jia Tan,2023-05-02 12:39:37,2023-05-04 14:15:30,Add NEWS for 5.2.12.
713e15e43eb6279a7ab4bbad3d1325ebfdcf09a0,Jia Tan,Jia Tan,2023-05-04 12:38:52,2023-05-04 12:38:52,Translations: Update the Croatian translation.
9ad64bdf309844b6ca6c3e8a4dfb6dbaedda0ca9,Jia Tan,Jia Tan,2023-05-04 12:30:25,2023-05-04 12:30:25,"tuklib_integer.h: Reverts previous commit.

Previous commit 6be460dde07113fe3f08f814b61ddc3264125a96 would cause an
error if the integer size was 32 bit."
6be460dde07113fe3f08f814b61ddc3264125a96,Jia Tan,Jia Tan,2023-05-04 11:25:20,2023-05-04 11:25:20,tuklib_integer.h: Changes two other UINT_MAX == UINT32_MAX to >=.
44c0c5eae990a22ef04e9b88c1a15838a0d00878,Lasse Collin,Lasse Collin,2023-05-03 19:46:42,2023-05-03 19:55:16,"tuklib_integer.h: Fix a recent copypaste error in Clang detection.

Wrong line was changed in 7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7.
Also, this has >= instead of == since ints larger than 32 bits would
work too even if not relevant in practice."
2cf5ae5b5b279b0b2e69ca4724e7bd705865fe68,Jia Tan,Jia Tan,2023-04-25 12:06:15,2023-04-25 14:14:28,CI: Adds a build and test for small configuration.
16b81a057a87c2f18e6ed6447f003af0cbdcfe43,Jia Tan,Jia Tan,2023-04-25 12:05:26,2023-04-25 12:05:26,CI: ci_build.sh allows configuring small build.
78ccd93951f9e988d447bcdd70b24f6df5448d1d,Jia Tan,Jia Tan,2023-04-20 12:15:00,2023-04-20 12:15:00,Update THANKS.
f41df2ac2fed347d3f107f3533e76e000d29c6cb,Jia Tan,Jia Tan,2023-04-19 14:22:16,2023-04-19 14:22:16,"Windows: Include <intrin.h> when needed.

Legacy Windows did not need to #include <intrin.h> to use the MSVC
intrinsics. Newer versions likely just issue a warning, but the MSVC
documentation says to include the header file for the intrinsics we use.

GCC and Clang can ""pretend"" to be MSVC on Windows, so extra checks are
needed in tuklib_integer.h to only include <intrin.h> when it will is
actually needed."
7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7,Jia Tan,Jia Tan,2023-04-19 13:59:03,2023-04-19 13:59:03,"tuklib_integer: Use __builtin_clz() with Clang.

Clang has support for __builtin_clz(), but previously Clang would
fallback to either the MSVC intrinsic or the regular C code. This was
discovered due to a bug where a new version of Clang required the
<intrin.h> header file in order to use the MSVC intrinsics.

Thanks to Anton Kochkov for notifying us about the bug."
3938718ce3773c90755785c0df8777f133b7ae29,Lasse Collin,Lasse Collin,2023-04-14 15:42:33,2023-04-14 15:42:33,"liblzma: Update project maintainers in lzma.h.

AUTHORS was updated earlier, lzma.h was simply forgotten."
2a89670ab295e377f8b44f5bda6d198deb8ea285,Jia Tan,Jia Tan,2023-04-13 12:45:19,2023-04-13 12:45:19,liblzma: Cleans up old commented out code.
0fbb2b87a7b5a1dd9d0f4a5e84ac7919557dbe81,Jia Tan,Jia Tan,2023-04-07 12:46:41,2023-04-07 12:46:41,Docs: Add missing word to SECURITY.md.
fb9c50f38a17bf37581de4034b36c8df8ec90a87,Jia Tan,Jia Tan,2023-04-07 12:43:22,2023-04-07 12:43:56,Update THANKS.
537c6cd8a9db0dd6b13683e64ddac2943190d715,Jia Tan,Jia Tan,2023-04-07 12:42:12,2023-04-07 12:43:56,Docs: Minor edits to SECURITY.md.
6549df8dd53f358345957e232648fdb699930074,Gabriela Gutierrez,Jia Tan,2023-04-07 12:08:30,2023-04-07 12:43:49,"Docs: Create SECURITY.md

Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>"
d0faa85df5a5d253a4625d45313cf5e9277e6cd2,Jia Tan,Jia Tan,2023-03-28 14:48:24,2023-03-29 15:46:43,CI: Tests for disabling threading on CMake builds.
8be5cc3b1359d88b4b30a39067466c0ae0bfbc4d,Jia Tan,Jia Tan,2023-03-28 14:45:42,2023-03-29 15:46:43,"CI: Removes CMakeCache.txt between builds.

If the cache file is not removed, CMake will not reset configurations
back to their default values. In order to make the tests independent, it
is simplest to purge the cache. Unfortunatly, this will slow down the
tests a little and repeat some checks."
2cb6028fc31de082b7f927632363bb1426b61aaa,Jia Tan,Jia Tan,2023-03-28 14:32:40,2023-03-29 15:46:38,"CMake: Update liblzma-config.cmake generation.

Now that the threading is configurable, the liblzma CMake package only
needs the threading library when using POSIX threads."
4d7fac0b07cc722825ba8d7838c558827e635611,Jia Tan,Jia Tan,2023-03-28 14:25:33,2023-03-29 15:24:12,"CMake: Allows setting thread method.

The thread method is now configurable for the CMake build. It matches
the Autotools build by allowing ON (pick the best threading method),
OFF (no threading), posix, win95, and vista. If both Windows and
posix threading are both available, then ON will choose Windows
threading. Windows threading will also not use:

target_link_libraries(liblzma Threads::Threads)

since on systems like MinGW-w64 it would link the posix threads
without purpose."
20cd905d898c1494dee42b78530769bb9c9f8076,Jia Tan,Jia Tan,2023-03-24 15:05:48,2023-03-24 15:41:06,"CI: Runs CMake feature tests.

Now, CMake will run similar feature disable tests that the Autotools
version did before. In order to do this without repeating lines in
ci.yml, it now makes sense to use the GitHub Workflow matrix to create
a loop."
4fabdb269f1fc5624b3b94a170c4efb329d1d229,Jia Tan,Jia Tan,2023-03-24 12:35:11,2023-03-24 15:08:24,"CI: ci_build.sh allows CMake features to be configured.

Also included various clean ups for style and helper functions for
repeated work."
cf3d1f130e50cf63da4bb1031771605f6f443b6a,Jia Tan,Jia Tan,2023-03-24 12:06:33,2023-03-24 12:06:33,"CI: Change ci_build.sh to use bash instead of sh.

This script is only meant to be run as part of the CI build/test process
on machines that are known to have bash (Ubuntu and MacOS). If this
assumption changes in the future, then the bash specific commands will
need to be replaced with a more portable option. For now, it is
convenient to use bash commands."
ddfe164368e779c40d061aa4ccc376129e92f8e1,Jia Tan,Jia Tan,2023-03-24 12:05:59,2023-03-24 12:05:59,CMake: Only build xzdec if decoders are enabled.
116e81f002c503d3c3cd12726db8f9116e58ef25,Jia Tan,Jia Tan,2023-03-22 07:42:04,2023-03-23 13:48:52,Build: Removes redundant check for LZMA1 filter support.
0ba234f692772595329d225462d391fe2c199d0a,Lasse Collin,Jia Tan,2023-03-23 13:14:29,2023-03-23 13:48:52,"CMake: Bump maximum policy version to 3.26.

It adds only one new policy related to FOLDERS which we don't use.
This makes it clear that the code is compatible with the policies
up to 3.26."
b0891684b4436aed31510fddcbb218d513bd5489,Jia Tan,Jia Tan,2023-03-21 15:36:00,2023-03-23 13:48:52,CMake: Conditionally build xz list.* files if decoders are enabled.
2c1a830efb61d9d65906a09c9ee3ce27c2c49227,Jia Tan,Jia Tan,2023-02-25 03:46:50,2023-03-23 13:48:52,"CMake: Allow configuring features as cache variables.

This allows users to change the features they build either in
CMakeCache.txt or by using a CMake GUI. The sources built for
liblzma are affected by this too, so only the necessary files
will be compiled."
8be136f667aaeb8f9e16fbd57a83cb282f0c27ff,Lasse Collin,Lasse Collin,2023-03-21 12:07:51,2023-03-21 12:07:51,"Build: Add a comment that AC_PROG_CC_C99 is needed for Autoconf 2.69.

It's obsolete in Autoconf >= 2.70 and just an alias for AC_PROG_CC
but Autoconf 2.69 requires AC_PROG_CC_C99 to get a C99 compiler."
53cc475f2652d9e390ca002018dfd0af0626ef80,Lasse Collin,Lasse Collin,2023-03-21 12:04:37,2023-03-21 12:04:37,"Build: configure.ac: Use AS_IF and AS_CASE where required.

This makes no functional difference in the generated configure
(at least with the Autotools versions I have installed) but this
change might prevent future bugs like the one that was just
fixed in the commit 5a5bd7f871818029d5ccbe189f087f591258c294."
3b8890a40233b6c783bb101ec14405e786871775,Lasse Collin,Lasse Collin,2023-03-21 11:12:03,2023-03-21 11:12:03,Update THANKS.
5a5bd7f871818029d5ccbe189f087f591258c294,Lasse Collin,Lasse Collin,2023-03-21 11:11:49,2023-03-21 11:11:49,"Build: Fix --disable-threads breaking the building of shared libs.

This is broken in the releases 5.2.6 to 5.4.2. A workaround
for these releases is to pass EGREP='grep -E' as an argument
to configure in addition to --disable-threads.

The problem appeared when m4/ax_pthread.m4 was updated in
the commit 6629ed929cc7d45a11e385f357ab58ec15e7e4ad which
introduced the use of AC_EGREP_CPP. AC_EGREP_CPP calls
AC_REQUIRE([AC_PROG_EGREP]) to set the shell variable EGREP
but this was only executed if POSIX threads were enabled.
Libtool code also has AC_REQUIRE([AC_PROG_EGREP]) but Autoconf
omits it as AC_PROG_EGREP has already been required earlier.
Thus, if not using POSIX threads, the shell variable EGREP
would be undefined in the Libtool code in configure.

ax_pthread.m4 is fine. The bug was in configure.ac which called
AX_PTHREAD conditionally in an incorrect way. Using AS_CASE
ensures that all AC_REQUIREs get always run.

Thanks to Frank Busse for reporting the bug.
Fixes: https://github.com/tukaani-project/xz/issues/45"
dfe1710784c0a3c3a90c17b80c9e1fe19b5fce06,Lasse Collin,Lasse Collin,2023-03-19 20:45:59,2023-03-19 20:45:59,"liblzma: Silence -Wsign-conversion in SSE2 code in memcmplen.h.

Thanks to Christian Hesse for reporting the issue.
Fixes: https://github.com/tukaani-project/xz/issues/44"
f0c580c5fc38bf49a184b48d76c1d8c057d499ce,Jia Tan,Jia Tan,2023-03-18 14:10:57,2023-03-18 14:23:39,Add NEWS for 5.4.2.
af4925e6043113ec9b5f9c0cf13abf2a18ccb1f6,Jia Tan,Jia Tan,2023-03-18 14:10:12,2023-03-18 14:10:12,Add NEWS for 5.2.11.
5a7b930efa7f9849d8da8397e8e5d8638f92be40,Lasse Collin,Lasse Collin,2023-03-18 14:00:54,2023-03-18 14:00:54,Update the copy of GNU GPLv3 from gnu.org to COPYING.GPLv3.
b473a92891f7e991398a3b5eff305f6f2b6d7293,Lasse Collin,Lasse Collin,2023-03-18 13:51:57,2023-03-18 13:56:07,"Change a few HTTP URLs to HTTPS.

The xz man page timestamp was intentionally left unchanged."
8b2f6001b4f412c259a7883427f2f2c8cea98ea8,Jia Tan,Jia Tan,2023-03-17 16:40:28,2023-03-17 16:40:28,CMake: Fix typo in a comment.
76e2315e14c399c15cc90e7930fd4d3d086b0227,Lasse Collin,Lasse Collin,2023-03-17 16:36:22,2023-03-17 16:36:22,Windows: build.bash: Copy liblzma API docs to the output package.
133cf55edc5ce92952d2709abd992e48ef1f45ee,Lasse Collin,Lasse Collin,2023-03-17 06:53:38,2023-03-17 06:53:38,"Windows: Add microlzma_*.c to the VS project files.

These should have been included in 5.3.2alpha already."
75c9ca450fab6982fda9286b168081c9d54126cd,Lasse Collin,Lasse Collin,2023-03-17 06:43:51,2023-03-17 06:43:51,"CMake: Add microlzma_*.c to the build.

These should have been included in 5.3.2alpha already."
0cc3313bd4e569c51e686e5aab8c40c35241d34b,Lasse Collin,Lasse Collin,2023-03-17 06:41:36,2023-03-17 06:41:36,Build: Update comments about unaligned access to mention 64-bit.
5e57e3301319f20c35f8111dea73fa58403b96b1,Lasse Collin,Lasse Collin,2023-03-16 22:02:30,2023-03-16 22:02:34,Tests: Update .gitignore.
0007394d54e21bf30abb9a5e09cbc1e8d44a73ac,Lasse Collin,Lasse Collin,2023-03-14 18:04:03,2023-03-16 22:02:34,po4a/update-po: Display the script name consistently in error messages.
509157c80c500426ec853bd992d684ebafc8500c,Jia Tan,Jia Tan,2023-03-16 17:30:36,2023-03-16 17:42:28,"Doc: Rename Doxygen HTML doc directory name liblzma => api.

When the docs are installed, calling the directory ""liblzma"" is
confusing since multiple other files in the doc directory are for
liblzma. This should also make it more natural for distros when they
package the documentation."
fd90e2f4c29180b44e33c7ef726f94e4eae54ed3,Jia Tan,Jia Tan,2023-03-16 14:07:15,2023-03-16 17:42:28,"liblzma: Remove note from lzma_options_bcj about the ARM64 exception.

This was left in by mistake since an early version of the ARM64 filter
used a different struct for its options."
4f50763b981f9056c5f1763dfb26cfa4a26a181d,Jia Tan,Jia Tan,2023-03-16 13:44:02,2023-03-16 17:42:28,"CI: Add doxygen as a dependency.

Autogen now requires --no-doxygen or having doxygen installed to run
without errors."
f68f4b27f62f53fdac570885a1f4f23367ce6599,Lasse Collin,Jia Tan,2023-03-15 17:19:13,2023-03-16 17:42:28,COPYING: Add a note about the included Doxygen-generated HTML.
8979308528c1f45cb9ee52d511f05232b4ad90a1,Jia Tan,Jia Tan,2023-03-16 13:41:09,2023-03-16 17:42:28,Doc: Update PACKAGERS with details about liblzma API docs install.
55ba6e93004842ae0a0792214a23504267ad8f43,Jia Tan,Jia Tan,2023-03-16 13:38:32,2023-03-16 17:42:28,"liblzma: Add set lzma.h as the main page for Doxygen documentation.

The \mainpage command is used in the first block of comments in lzma.h.
This changes the previously nearly empty index.html to use the first
comment block in lzma.h for its contents.

lzma.h is no longer documented separately, but this is for the better
since lzma.h only defined a few macros that users do not need to use.
The individual API header files all have a disclaimer that they should
not be #included directly, so there should be no confusion on the fact
that lzma.h should be the only header used by applications.

Additionally, the note ""See ../lzma.h for information about liblzma as
a whole."" was removed since lzma.h is now the main page of the
generated HTML and does not have its own page anymore. So it would be
confusing in the HTML version and was only a ""nice to have"" when
browsing the source files."
16f21255597f6a57e5692780f962cdc090f62b8c,Jia Tan,Jia Tan,2023-03-16 13:37:32,2023-03-16 17:42:28,"Build: Generate doxygen documentation in autogen.sh.

Another command line option (--no-doxygen) was added to disable
creating the doxygen documenation in cases where it not wanted or
if the doxygen tool is not installed."
1321852a3be7196bd7fcfd146221a5669e46407c,Jia Tan,Jia Tan,2023-03-16 13:35:55,2023-03-16 17:42:28,"Build: Create doxygen/update-doxygen script.

This is a helper script to generate the Doxygen documentation. It can be
run in 'liblzma' or 'internal' mode by setting the first argument. It
will default to 'liblzma' mode and only generate documentation for the
liblzma API header files.

The helper script will be run during the custom mydist hook when we
create releases. This hook already alters the source directory, so its
fine to do it here too. This way, we can include the Doxygen generated
files in the distrubtion and when installing.

In 'liblzma' mode, the JavaScript is stripped from the .html files and
the .js files are removed. This avoids license hassle from jQuery and
other libraries that Doxygen 1.9.6 puts into jquery.js in minified form."
b1216a7772952d2fe7fe9c6acfcbd98d30abbc7b,Jia Tan,Jia Tan,2023-03-16 13:34:36,2023-03-16 17:42:28,"Build: Install Doxygen docs and include in distribution if generated.

Added a install-data-local target to install the Doxygen documentation
only when it has been generated. In order to correctly remove the docs,
a corresponding uninstall-local target was added.

If the doxygen docs exist in the source tree, they will also be included
in the distribution now too."
c97d12f300b2a94c9f54a44c8931c8bc08cf0a73,Lasse Collin,Jia Tan,2023-03-16 13:23:48,2023-03-16 17:42:28,"Doxygen: Refactor Doxyfile.in to doxygen/Doxyfile.

Instead of having Doxyfile.in configured by Autoconf, the Doxyfile
can have the tags that need to be configured piped into the doxygen
command through stdin with the overrides after Doxyfile's contents.

Going forward, the documentation should be generated in two different
modes: liblzma or internal.

liblzma is useful for most users. It is the documentation for just
the liblzma API header files. This is the default.

internal is for people who want to understand how xz and liblzma work.
It might be useful for people who want to contribute to the project."
1b7661faa4bbf4a54c6b75900b5059835c382a0f,Jia Tan,Jia Tan,2023-02-28 15:22:36,2023-03-13 12:49:53,Tests: Remove unused macros and functions.
af55191102f01e76de658c881299f0909ca0feda,Jia Tan,Jia Tan,2022-12-29 13:52:15,2023-03-13 12:49:53,liblzma: Defines masks for return values from lzma_index_checks().
8f38cdd9ab71e2a9d5a9787550222b7578243b73,Jia Tan,Jia Tan,2023-01-12 14:29:07,2023-03-13 12:49:53,"Tests: Refactors existing lzma_index tests.

Converts the existing lzma_index tests into tuktests and covers every
API function from index.h except for lzma_file_info_decoder, which can
be tested in the future."
717aa3651ce582807f379d8654c2516e1594df77,Lasse Collin,Lasse Collin,2023-03-11 16:42:08,2023-03-11 16:46:45,"xz: Simplify the error-label in Capsicum sandbox code.

Also remove unneeded ""sandbox_allowed = false;"" as this code
will never be run more than once (making it work with multiple
input files isn't trivial)."
a0eecc235d3ba8ad3453da98b46c7bc3e644de75,Lasse Collin,Jia Tan,2023-03-07 17:59:23,2023-03-08 15:22:15,xz: Make Capsicum sandbox more strict with stdin and stdout.
916448d624aaf55cef0fc3e53754affb8c4f309d,Jia Tan,Jia Tan,2023-03-08 15:08:46,2023-03-08 15:22:11,"Revert: ""Add warning if Capsicum sandbox system calls are unsupported.""

The warning causes the exit status to be 2, so this will cause problems
for many scripted use cases for xz. The sandbox usage is already very
limited already, so silently disabling this allows it to be more usable."
01587dda2a8f13fef7e12fd624e6d05da5f9624f,Jia Tan,Jia Tan,2023-03-07 12:02:22,2023-03-07 12:02:22,"xz: Fix -Wunused-label in io_sandbox_enter().

Thanks to Xin Li for recommending the fix."
5fb936786601a1cd013a5d436adde65982b1e13c,Jia Tan,Jia Tan,2023-03-06 13:37:45,2023-03-06 13:37:45,"xz: Add warning if Capsicum sandbox system calls are unsupported.

The warning is only used when errno == ENOSYS. Otherwise, xz still
issues a fatal error."
61ee82cb1232a402c82282bbae42821f2b952b0d,Jia Tan,Jia Tan,2023-03-06 13:27:53,2023-03-06 13:27:53,"xz: Skip Capsicum sandbox system calls when they are unsupported.

If a system has the Capsicum header files but does not actually
implement the system calls, then this would render xz unusable. Instead,
we can check if errno == ENOSYS and not issue a fatal error."
f070722b57ba975a0dff36492d766f03026b1d21,Jia Tan,Jia Tan,2023-03-06 13:08:26,2023-03-06 13:08:26,"xz: Reorder cap_enter() to beginning of capsicum sandbox code.

cap_enter() puts the process into the sandbox. If later calls to
cap_rights_limit() fail, then the process can still have some extra
protections."
f1ab1f6b339d16a53ac53efeb97779ecd2bae70f,Jia Tan,Jia Tan,2023-02-24 15:46:23,2023-03-01 13:42:31,"liblzma: Clarify lzma_lzma_preset() documentation in lzma12.h.

lzma_lzma_preset() does not guarentee that the lzma_options_lzma are
usable in an encoder even if it returns false (success). If liblzma
is built with default configurations, then the options will always be
usable. However if the match finders hc3, hc4, or bt4 are disabled, then
the options may not be usable depending on the preset level requested.

The documentation was updated to reflect this complexity, since this
behavior was unclear before."
4b7fb3bf41a0ca4c97fad3799949a2aa61b13b99,Lasse Collin,Lasse Collin,2023-02-27 16:38:35,2023-02-27 16:38:35,"CMake: Require that the C compiler supports C99 or a newer standard.

Thanks to autoantwort for reporting the issue and suggesting
a different patch:
https://github.com/tukaani-project/xz/pull/42"
9aa7fdeb04c486d2700967090956af88fdccab7e,Jia Tan,Jia Tan,2023-02-24 10:10:37,2023-02-24 13:11:18,"Tests: Small tweak to test-vli.c.

The static global variables can be disabled if encoders and decoders
are not built. If they are not disabled and -Werror is used, it will
cause an usused warning as an error."
3cf72c4bcba5370f07477c9b9b62ae33069ef9a9,Jia Tan,Jia Tan,2023-02-06 13:46:43,2023-02-24 13:09:39,"liblzma: Replace '\n' -> newline in filter.h documentation.

The '\n' renders as a newline when the comments are converted to html
by Doxygen."
002006be62d77c706565fa6ec828bea64be302da,Jia Tan,Jia Tan,2023-02-06 13:45:37,2023-02-24 13:09:39,"liblzma: Shorten return description for two functions in filter.h.

Shorten the description for lzma_raw_encoder_memusage() and
lzma_raw_decoder_memusage()."
463d9359b8595f01d44ada1739d75aeb87f36524,Jia Tan,Jia Tan,2023-02-06 13:44:45,2023-02-24 13:09:39,liblzma: Reword a few lines in filter.h
01441df92c0fd6a6c02fe5ac27982a54ce887cc0,Jia Tan,Jia Tan,2023-02-06 13:35:06,2023-02-24 13:09:39,"liblzma: Improve documentation in filter.h.

All functions now explicitly specify parameter and return values.
The notes and code annotations were moved before the parameter and
return value descriptions for consistency.

Also, the description above lzma_filter_encoder_is_supported() about
not being able to list available filters was removed since
lzma_str_list_filters() will do this."
805b45cd60bfd5da3d3d89077de3789df179b324,Lasse Collin,Lasse Collin,2023-02-23 18:46:16,2023-02-23 18:46:16,Update THANKS.
30e95bb44c36ae26b2ab12a94343b215fec285e7,Lasse Collin,Lasse Collin,2023-02-21 20:57:10,2023-02-23 18:41:22,"liblzma: Avoid null pointer + 0 (undefined behavior in C).

In the C99 and C17 standards, section 6.5.6 paragraph 8 means that
adding 0 to a null pointer is undefined behavior. As of writing,
""clang -fsanitize=undefined"" (Clang 15) diagnoses this. However,
I'm not aware of any compiler that would take advantage of this
when optimizing (Clang 15 included). It's good to avoid this anyway
since compilers might some day infer that pointer arithmetic implies
that the pointer is not NULL. That is, the following foo() would then
unconditionally return 0, even for foo(NULL, 0):

    void bar(char *a, char *b);

    int foo(char *a, size_t n)
    {
        bar(a, a + n);
        return a == NULL;
    }

In contrast to C, C++ explicitly allows null pointer + 0. So if
the above is compiled as C++ then there is no undefined behavior
in the foo(NULL, 0) call.

To me it seems that changing the C standard would be the sane
thing to do (just add one sentence) as it would ensure that a huge
amount of old code won't break in the future. Based on web searches
it seems that a large number of codebases (where null pointer + 0
occurs) are being fixed instead to be future-proof in case compilers
will some day optimize based on it (like making the above foo(NULL, 0)
return 0) which in the worst case will cause security bugs.

Some projects don't plan to change it. For example, gnulib and thus
many GNU tools currently require that null pointer + 0 is defined:

    https://lists.gnu.org/archive/html/bug-gnulib/2021-11/msg00000.html

    https://www.gnu.org/software/gnulib/manual/html_node/Other-portability-assumptions.html

In XZ Utils null pointer + 0 issue should be fixed after this
commit. This adds a few if-statements and thus branches to avoid
null pointer + 0. These check for size > 0 instead of ptr != NULL
because this way bugs where size > 0 && ptr == NULL will likely
get caught quickly. None of them are in hot spots so it shouldn't
matter for performance.

A little less readable version would be replacing

    ptr + offset

with

    offset != 0 ? ptr + offset : ptr

or creating a macro for it:

    #define my_ptr_add(ptr, offset) \
            ((offset) != 0 ? ((ptr) + (offset)) : (ptr))

Checking for offset != 0 instead of ptr != NULL allows GCC >= 8.1,
Clang >= 7, and Clang-based ICX to optimize it to the very same code
as ptr + offset. That is, it won't create a branch. So for hot code
this could be a good solution to avoid null pointer + 0. Unfortunately
other compilers like ICC 2021 or MSVC 19.33 (VS2022) will create a
branch from my_ptr_add().

Thanks to Marcin Kowalczyk for reporting the problem:
https://github.com/tukaani-project/xz/issues/36"
fa9065fac54194fe0407fc7f0cc9633fdce13c21,Jia Tan,Jia Tan,2023-02-06 16:00:44,2023-02-23 12:27:59,liblzma: Adjust container.h for consistency with filter.h.
00a721b63d82dfb658dca8d8cb599d8a245c663f,Jia Tan,Jia Tan,2023-02-06 16:00:09,2023-02-23 12:27:59,liblzma: Fix small typos and reword a few things in filter.h.
5b1c171d4ffe89ef18fa31509bb0185d6fd11d39,Jia Tan,Jia Tan,2023-02-06 15:42:08,2023-02-23 12:27:59,liblzma: Convert list of flags in lzma_mt to bulleted list.
dbd47622eb99fefb3538a22baec3def002aa56f5,Jia Tan,Jia Tan,2023-01-26 15:17:41,2023-02-23 12:27:59,"liblzma: Fix typo in documentation in container.h

lzma_microlzma_decoder -> lzma_microlzma_encoder"
14cd30806d69e55906073745bcce3ee50e0ec942,Jia Tan,Jia Tan,2023-01-26 15:16:34,2023-02-23 12:27:59,"liblzma: Improve documentation for container.h

Standardizing each function to always specify parameters and return
values. Also moved the parameters and return values to the end of each
function description."
c9c8bfae3502842dcead85eeb2b951b437c2cd88,Jia Tan,Jia Tan,2023-02-22 12:59:41,2023-02-22 13:10:28,CMake: Add LZIP decoder test to list of tests.
b9f171dd00a3cc32b6d41ea8e082cf545640ec2a,Lasse Collin,Lasse Collin,2023-02-17 18:56:49,2023-02-17 18:56:49,Update THANKS.
2ee86d20e49985b903b78ebcfa3fa672e73e93aa,Lasse Collin,Lasse Collin,2023-02-17 18:48:28,2023-02-17 18:48:28,"Build: Use only the generic symbol versioning on MicroBlaze.

On MicroBlaze, GCC 12 is broken in sense that
__has_attribute(__symver__) returns true but it still doesn't
support the __symver__ attribute even though the platform is ELF
and symbol versioning is supported if using the traditional
__asm__("".symver ..."") method. Avoiding the traditional method is
good because it breaks LTO (-flto) builds with GCC.

See also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766

For now the only extra symbols in liblzma_linux.map are the
compatibility symbols with the patch that spread from RHEL/CentOS 7.
These require the use of __symver__ attribute or __asm__("".symver ..."")
in the C code. Compatibility with the patch from CentOS 7 doesn't
seem valuable on MicroBlaze so use liblzma_generic.map on MicroBlaze
instead. It doesn't require anything special in the C code and thus
no LTO issues either.

An alternative would be to detect support for __symver__
attribute in configure.ac and CMakeLists.txt and fall back
to __asm__("".symver ..."") but then LTO would be silently broken
on MicroBlaze. It sounds likely that MicroBlaze is a special
case so let's treat it as a such because that is simpler. If
a similar issue exists on some other platform too then hopefully
someone will report it and this can be reconsidered.

(This doesn't do the same fix in CMakeLists.txt. Perhaps it should
but perhaps CMake build of liblzma doesn't matter much on MicroBlaze.
The problem breaks the build so it's easy to notice and can be fixed
later.)

Thanks to Vincent Fazio for reporting the problem and proposing
a patch (in the end that solution wasn't used):
https://github.com/tukaani-project/xz/pull/32"
d831072cceca458d94d2d5da201862f6d43a417b,Lasse Collin,Lasse Collin,2023-02-16 19:09:00,2023-02-16 19:09:00,"liblzma: Very minor API doc tweaks.

Use ""member"" to refer to struct members as that's the term used
by the C standard.

Use lzma_options_delta.dist and such in docs so that in Doxygen's
HTML output they will link to the doc of the struct member.

Clean up a few trailing white spaces too."
f029daea39c215fd7d5cb6b6798818b055cf5b22,Jia Tan,Jia Tan,2023-02-16 16:54:33,2023-02-16 16:54:33,liblzma: Adjust spacing in doc headers in bcj.h.
a5de68bac2bb7e1b9119e6cea7d761a22ea73e9c,Jia Tan,Jia Tan,2023-02-16 16:44:44,2023-02-16 16:49:47,liblzma: Adjust documentation in bcj.h for consistent style.
efa498c13b883810497e0ea8a169efd6f48f5026,Jia Tan,Jia Tan,2023-02-16 16:36:05,2023-02-16 16:49:47,"liblzma: Rename field => member in documentation.

Also adjusted preset value => preset level."
718b22a6c5e3ee5de123323ea798872381f9320e,Lasse Collin,Lasse Collin,2023-02-16 15:59:50,2023-02-16 15:59:50,"liblzma: Silence a warning from MSVC.

It gives C4146 here since unary minus with unsigned integer
is still unsigned (which is the intention here). Doing it
with substraction makes it clearer and avoids the warning.

Thanks to Nathan Moinvaziri for reporting this."
87c53553fa7d50f777b4edfa99f2083628f590fe,Jia Tan,Jia Tan,2023-02-16 13:04:54,2023-02-16 13:04:54," liblzma: Improve documentation for stream_flags.h

Standardizing each function to always specify parameters and return
values. Also moved the parameters and return values to the end of each
function description.

A few small things were reworded and long sentences broken up."
13d99e75a543e9e5f8633cc241eae55b91a3b242,Jia Tan,Jia Tan,2023-02-14 13:50:16,2023-02-15 14:21:44,"liblzma: Improve documentation in lzma12.h.

All functions now explicitly specify parameter and return values."
43ec344c868f930e96879eb9e49212cce92a9884,Jia Tan,Jia Tan,2023-01-27 14:44:06,2023-02-14 16:59:16,"liblzma: Improve documentation in check.h.

All functions now explicitly specify parameter and return values.
Also moved the note about SHA-256 functions not being exported to the
top of the file."
9c71db4e884fd49aea3d1e711036bff45ca66487,Jia Tan,Jia Tan,2023-02-08 13:33:52,2023-02-14 16:20:44,"liblzma: Improve documentation in index.h

All functions now explicitly specify parameter and return values."
421f2f2e160720f6009e3b6a125cafe2feaa9419,Jia Tan,Jia Tan,2023-02-08 12:35:32,2023-02-14 16:20:44,liblzma: Reword a comment in index.h.
b67539484981351d501b68de5e925425e50c59b1,Jia Tan,Jia Tan,2023-02-08 12:30:23,2023-02-14 16:20:44,"liblzma: Omit lzma_index_iter's internal field from Doxygen docs.

Add \private above this field and its sub-fields since it is not meant
to be modified by users."
0c9e4fc2ad6d88d54f299240fcc5a2ce7d695d96,Jia Tan,Jia Tan,2023-01-21 13:32:03,2023-02-14 12:41:05,"liblzma: Fix documentation for LZMA_MEMLIMIT_ERROR.

LZMA_MEMLIMIT_ERROR was missing the ""<"" character needed to put
documentation after a member."
816fec125aa74bcef46512c73acc6d9e5a700d15,Jia Tan,Jia Tan,2023-01-20 16:29:38,2023-02-14 12:41:05,"liblzma: Improve documentation for base.h.

Standardizing each function to always specify params and return values.
Also fixed a small grammar mistake."
862dacef1a4e7e1b28d465956fa4244ed01df154,Jia Tan,Jia Tan,2023-02-13 16:12:34,2023-02-13 16:12:34,liblzma: Add one more missing [out] annotation in vli.h
867b08ae4254bf55dd1f7fd502cc618231b92f75,Jia Tan,Jia Tan,2023-02-13 16:08:33,2023-02-13 16:08:33,"liblzma: Minor improvements to vli.h.

Added [out] annotations to parameters that are pointers and can have
their value changed. Also added a clarification to lzma_vli_is_valid."
90d0e628ff11e5030bcc4fc000bca056adda6603,Jia Tan,Jia Tan,2023-02-10 13:38:02,2023-02-10 13:38:25,"liblzma: Add comments for macros in delta.h.

Document LZMA_DELTA_DIST_MIN and LZMA_DELTA_DIST_MAX for completeness
and to avoid Doxygen warnings."
9255fffdb13e59874bf7f95c370c410ad3a7e114,Jia Tan,Jia Tan,2023-02-10 13:35:23,2023-02-10 13:35:23,"liblzma: Improve documentation in index_hash.h.

All functions now explicitly specify parameter and return values.
Also reworded the description of lzma_index_hash_init() for readability."
1dbe12b90cff79bb51923733ac0840747b4b4131,Lasse Collin,Lasse Collin,2023-02-07 17:07:45,2023-02-07 17:07:45,"xz: Improve the comment about start_time in mytime.c.

start_time is relative to an arbitary point in time, it's not
time of day, so using it for anything else than time differences
wouldn't make sense."
7673ef5aa80c1af7fb693360dd82f527b46c2c56,Jia Tan,Jia Tan,2023-02-04 13:06:35,2023-02-04 13:06:35,"Build: Adjust CMake version search regex.

Now, the LZMA_VERSION_MAJOR, LZMA_VERSION_MINOR, and LZMA_VERSION_PATCH
macros do not need to be on consecutive lines in version.h. They can be
separated by more whitespace, comments, or even other content, as long
as they appear in the proper order (major, minor, patch)."
b8bce89be7fb5bffe5fef4a2782ca9b2b107eaac,Jia Tan,Jia Tan,2023-02-04 04:01:23,2023-02-04 12:11:51,xz: Add a comment clarifying the use of start_time in mytime.c.
912af91b10a18fb9bb3167247ecaaefca8248ee9,Jia Tan,Jia Tan,2023-01-26 01:50:21,2023-02-04 12:11:36,"liblzma: Improve documentation for version.h.

Specified parameter and return values for API functions and documented
a few more of the macros."
850adec171203cd22b57d016084d713f72ae5307,Jia Tan,Jia Tan,2023-02-03 14:52:55,2023-02-03 14:52:55,Docs: Omit SIGTSTP not handled from TODO.
2c78a83c6faec70154d9eb78022a618ed62cdcb3,Jia Tan,Jia Tan,2023-02-02 16:33:32,2023-02-02 16:42:27,"liblzma: Fix bug in lzma_str_from_filters() not checking filters[] length.

The bug is only a problem in applications that do not properly terminate
the filters[] array with LZMA_VLI_UNKNOWN or have more than
LZMA_FILTERS_MAX filters. This bug does not affect xz."
e01f01b9af1c074463b92694a16ecc16a31907c0,Jia Tan,Jia Tan,2023-02-02 16:32:47,2023-02-02 16:42:27,"Tests: Create test_filter_str.c.

Tests lzma_str_to_filters(), lzma_str_from_filters(), and
lzma_str_list_filters() API functions."
8dfc029e7a4ce45809c30313dc0e502f0d22be26,Jia Tan,Jia Tan,2023-01-22 00:49:00,2023-02-02 16:42:27,liblzma: Fix typos in comments in string_conversion.c.
54ad83c1ae2180dcc0cb2445b181dc1e9732a5d6,Jia Tan,Jia Tan,2023-02-02 16:20:20,2023-02-02 16:22:53,"liblzma: Clarify block encoder and decoder documentation.

Added a few sentences to the description for lzma_block_encoder() and
lzma_block_decoder() to highlight that the Block Header must be coded
before calling these functions."
f680e771b3eb2a46310fe85b3e000ac3a1a0640f,Jia Tan,Jia Tan,2023-02-02 16:12:24,2023-02-02 16:22:53,Update lzma_block documentation for lzma_block_uncomp_encode().
504cf4af895fd45aad0c56eb3b49d90acd54465b,Jia Tan,Jia Tan,2023-02-02 16:11:37,2023-02-02 16:22:53,liblzma: Minor edits to lzma_block header_size documentation.
115b720fb521f99aa832d06b2c12b7f8c6c50680,Jia Tan,Jia Tan,2023-02-02 16:11:07,2023-02-02 16:22:53,liblzma: Enumerate functions that read version in lzma_block.
85ea0979adcf808a3830aefbe7a4ec884e542ea1,Jia Tan,Jia Tan,2023-02-02 16:10:34,2023-02-02 16:22:53,liblzma: Clarify comment in block.h.
1f7ab90d9ce224230a04de6b921ad6e2029023a8,Jia Tan,Jia Tan,2023-02-02 16:07:23,2023-02-02 16:22:53,"liblzma: Improve documentation for block.h.

Standardizing each function to always specify params and return values.
Output pointer parameters are also marked with doxygen style [out] to
make it clear. Any note sections were also moved above the parameter and
return sections for consistency."
c563a4bc554a96bd0b6aab3c139715b7ec8f6ca3,Jia Tan,Jia Tan,2023-02-01 15:38:30,2023-02-01 15:39:45,"liblzma: Clarify a comment about LZMA_STR_NO_VALIDATION.

The flag description for LZMA_STR_NO_VALIDATION was previously confusing
about the treatment for filters than cannot be used with .xz format
(lzma1) without using LZMA_STR_ALL_FILTERS. Now, it is clear that
LZMA_STR_NO_VALIDATION is not a super set of LZMA_STR_ALL_FILTERS."
315c64c7e18acc59a745b68148188a73e998252b,Jia Tan,Jia Tan,2023-02-01 13:43:33,2023-02-01 13:47:35,"CI: Update .gitignore for artifacts directory in build-aux.

The workflow action for our CI pipeline can only reference artifacts in
the source directory, so we should ignore these files if the ci_build.sh
is run locally."
2c1341f4fa06e7f487d61142aa354c433e17ec7f,Jia Tan,Jia Tan,2023-02-01 13:36:46,2023-02-01 13:47:35,CI: Add quotes around variables in a few places.
3a401b0e0c7a2658af7801dd0690256ef24149e0,Jia Tan,Jia Tan,2023-02-01 13:36:22,2023-02-01 13:47:35,CI: Upload test logs as artifacts if a test fails.
610dde15a88f12cc540424eb3eb3ed61f3876f74,Lasse Collin,Lasse Collin,2023-01-27 18:02:49,2023-01-27 18:02:49,"xz: Use clock_gettime() even if CLOCK_MONOTONIC isn't available.

mythread.h and thus liblzma already does it."
2e02877288f6576cd4595e9ac7684f867cd47d68,Lasse Collin,Lasse Collin,2023-01-27 17:41:19,2023-01-27 17:41:19,po4a/po4a.conf: Sort the language identifiers in alphabetical order.
ff592c616eda274215b485cf1b8d34f060c9f3be,Lasse Collin,Lasse Collin,2023-01-26 16:29:17,2023-01-27 17:37:47,"xz: Add SIGTSTP handler for progress indicator time keeping.

This way, if xz is stopped the elapsed time and estimated time
remaining won't get confused by the amount of time spent in
the stopped state.

This raises SIGSTOP. It's not clear to me if this is the correct way.
POSIX and glibc docs say that SIGTSTP shouldn't stop the process if
it is orphaned but this commit doesn't attempt to handle that.

Search for SIGTSTP in section 2.4.3:

https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html"
3b1c8ac8d1d553cbb1fb22b545d2b1424c752b76,Jia Tan,Jia Tan,2023-01-27 12:14:51,2023-01-27 12:16:54,"Translations: Add Brazilian Portuguese translation of man pages.

Thanks to Rafael Fontenelle."
a15a7552f9f67c4e402f5d2967324e0ccfd6fccc,Lasse Collin,Lasse Collin,2023-01-26 15:51:06,2023-01-26 15:51:06,Build: Avoid different quoting style in --enable-doxygen doc.
af5a4bd5afc089d9697756dded38feafaa987ae4,Lasse Collin,Lasse Collin,2023-01-26 15:39:46,2023-01-26 15:39:46,"tuklib_physmem: Check for __has_warning before GCC version.

Clang can be configured to fake a too high GCC version so
this way it's more robust."
f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4,Jia Tan,Jia Tan,2023-01-24 12:48:50,2023-01-24 12:48:50,"liblzma: Fix documentation in filter.h for lzma_str_to_filters()

The previous documentation for lzma_str_to_filters() was technically
correct, but misleading. lzma_str_to_filters() returns NULL on success,
which is in practice always defined to 0. This is the same value as
LZMA_OK, but lzma_str_to_filters() does not return lzma_ret so we should
be more clear."
2f78ecc5939b3d97ddfc2a6bd31b50108a28d0a2,Lasse Collin,Jia Tan,2023-01-23 21:44:58,2023-01-24 12:20:51,"Revert ""tuklib_common: Define __has_warning if it is not defined.""

This reverts commit 82e3c968bfa10e3ff13333bd9cbbadb5988d6766.

Macros in the reserved namespace (_foo or __foo) shouldn't be #defined
without a very good reason. Here the alternative would have been
to #define tuklib_has_warning(str) to an approriate value.

Also the tuklib_* files should stay namespace clean if possible."
8366cf8738e8b7bb74c967d07bf0fd2a1878e575,Lasse Collin,Jia Tan,2023-01-23 21:38:34,2023-01-24 12:20:40,"tuklib_physmem: Clean up the way -Wcast-function-type is silenced on Windows.

__has_warning and other __has_foo macros are meant to become
compiler-agnostic so it's not good to check for __clang__ with it.

This also relied on tuklib_common.h for #defining __has_warning
which was confusing as #defining reserved macros is generally
not a good idea."
683a3c7e2fcd922200c31078e5c9dd1348e90941,Lasse Collin,Jia Tan,2023-01-23 22:05:38,2023-01-24 12:20:04,"xz: Flip the return value of suffix_is_set to match the documentation.

Also edit style to match the existing coding style in the project."
cc5aa9ab138beeecaee5a1e81197591893ee9ca0,Jia Tan,Jia Tan,2023-01-07 13:55:06,2023-01-21 14:10:51,xz: Refactor duplicated check for custom suffix when using --format=raw
9663141274e01592a281a7f2df5d7a31a1dac8bf,Jia Tan,Jia Tan,2023-01-20 13:53:14,2023-01-21 13:37:48,"liblzma: Set documentation on all reserved fields to private.

This prevents the reserved fields from being part of the generated
Doxygen documentation."
6327a045f34d48fc5afc58ba0d32a82c94403049,Jia Tan,Jia Tan,2022-12-20 13:39:59,2023-01-19 16:51:12,"Doxygen: Update Doxyfile.in from 1.4.7 to 1.8.17.

A few Doxygen tags were obsolete from 1.4.7. Version 1.8.17 released
in 2019, so this should be compatible with resonable modern distros.
The purpose of Doxygen these days is for docs on the website, so it
doesn't necessarily have to work for everyone. Just when the maintainers
want to update the docs."
bbf71b69ebf9d0d62a0af150a5c37d193b8159ad,Jia Tan,Jia Tan,2023-01-03 12:37:30,2023-01-19 16:51:12,"Doxygen: Make Doxygen only produce liblzma API documentation by default.

Doxygen is now configurable in autotools only with
--enable-doxygen=[api|all]. The default is ""api"", which will only
generate HTML output for liblzma API functions. The LaTex documentation
output was also disabled."
6fcf4671b6047113c583a0919fc850987a4ec5f4,Jia Tan,Jia Tan,2022-12-21 15:59:43,2023-01-19 16:51:12,"liblzma: Highlight liblzma API headers should not be included directly.

This improves the generated Doxygen HTML files to better highlight
how to properly use the liblzma API header files."
b43ff180fb2e372adce876bfa155fc9bcf0c3db4,Jia Tan,Jia Tan,2023-01-19 12:35:09,2023-01-19 12:35:09,"tuklib_physmem: Silence warning from -Wcast-function-type on MinGW-w64.

tuklib_physmem depends on GetProcAddress() for both MSVC and MinGW-w64
to retrieve a function address. The proper way to do this is to cast the
return value to the type of function pointer retrieved. Unfortunately,
this causes a cast-function-type warning, so the best solution is to
simply ignore the warning."
82e3c968bfa10e3ff13333bd9cbbadb5988d6766,Jia Tan,Jia Tan,2023-01-19 12:32:40,2023-01-19 12:32:40,"tuklib_common: Define __has_warning if it is not defined.

clang supports the __has_warning macro to determine if the version of
clang compiling the code supports a given warning. If we do not define
it for other compilers, it may cause a preprocessor error."
b2ba1a489df451cdcd93b2334e319dd06778de19,Jia Tan,Jia Tan,2023-01-18 14:11:05,2023-01-18 14:11:05,"CI: Reorder 32-bit build first for Linux autotool builds.

The 32-bit build needs to be first so the configure cache only needs to
be reset one time. The 32-bit build sets the CFLAGS env variable, so any
build using that flag after will fail unless the cache is reset."
dd1c1135741057c91e8d018be9ec4d43968b0e64,Jia Tan,Jia Tan,2023-01-18 13:51:43,2023-01-18 13:51:43,"CI: Enable --config-cache in autotool builds.

If CFLAGS are set in a build, the cache must be cleared with
""make distclean"", or by deleting the cache file."
d3e11477053764c003eec2daa5198c747d70ff69,Jia Tan,Jia Tan,2023-01-16 13:35:45,2023-01-16 13:35:45,xz: Add missing comment for coder_set_compression_settings()
123255b6ed15f4428b2aa92e4962015a5362f6bf,Jia Tan,Jia Tan,2023-01-16 12:55:10,2023-01-16 12:55:10,"xz: Do not set compression settings with raw format in list mode.

Calling coder_set_compression_settings() in list mode with verbose mode
on caused the filter chain and memory requirements to print. This was
unnecessary since the command results in an error and not consistent
with other formats like lzma and alone."
571919c47b9ff5171ede84378620ed0a9aeb98c0,Jia Tan,Jia Tan,2023-01-13 12:37:06,2023-01-13 14:21:49,Translations: Update the Brazilian Portuguese translation.
81cb02e2c22bbc036cdfaa2d2c4176f6bd60d3cf,Jia Tan,Jia Tan,2023-01-12 15:43:06,2023-01-12 15:43:06,"CI: Disable shared and nls from various jobs in autotool runners.

Disabling shared library generation and linking should help speed up the
runners. The shared library is still being tested in the 32 bit build
and the full feature.

Disabling nls is to check for any unexpected warnings or errors."
58a052198a7bcaf6e958f87fad72e69e19a2579b,Jia Tan,Jia Tan,2023-01-12 15:39:19,2023-01-12 15:39:19,"CI: Reorder the 32-bit job in the Ubuntu runner.

Run the 32 bit job sooner since this is a more interesting test than
some of the later jobs."
4110a998b83459fe2bc9bc1bec30ad68afa8f797,Jia Tan,Jia Tan,2023-01-12 15:09:03,2023-01-12 15:09:03,CI: Allow disabling Native Language Support.
0dec634e705b5bf89a37c5d62d71e8511d480058,Jia Tan,Jia Tan,2023-01-12 15:02:20,2023-01-12 15:02:20,CI: Only run autogen.sh if it has not already run.
32287dc8def94df4546e903495d14c132bd54cc4,Jia Tan,Jia Tan,2023-01-12 14:58:36,2023-01-12 14:58:36,CI: Allow disabling shared library in autotools builds.
77d1ebcc99ddd82a300d1838f608150221931dcd,Jia Tan,Jia Tan,2023-01-12 14:44:18,2023-01-12 14:44:18,CI: Improve Usage readability and add -h option.
a8bb8358d10b059274f3cf993d9b8f490bafb268,Lasse Collin,Lasse Collin,2023-01-12 11:04:05,2023-01-12 11:04:05,"Build: Omit -Wmissing-noreturn from the default warnings.

It's not that important. It can be annoying in builds that
disable many features since in those cases the tests programs
will correctly trigger this warning with Clang."
52dc033d0bde0d19e3912303c6c74bae559d6498,Lasse Collin,Lasse Collin,2023-01-12 04:05:58,2023-01-12 04:05:58,"xz: Use ssize_t for the to-be-ignored return value from write(fd, ptr, 1).

It makes no difference here as the return value fits into an int
too and it then gets ignored but this looks better."
b1a6d180a363d57b2b1c89526ff3f0782bf863d3,Lasse Collin,Lasse Collin,2023-01-12 04:01:12,2023-01-12 04:01:12,xz: Silence warnings from -Wsign-conversion in a 32-bit build.
31c21c734b7c7d7428a3da7402a2cb7bc2587339,Lasse Collin,Lasse Collin,2023-01-12 03:38:48,2023-01-12 03:38:48,"liblzma: Silence another warning from -Wsign-conversion in a 32-bit build.

It doesn't warn on a 64-bit system because truncating
a ptrdiff_t (signed long) to uint32_t is diagnosed under
-Wconversion by GCC and -Wshorten-64-to-32 by Clang."
37fbdfb7263522c11c7ad2685413d6295532581d,Lasse Collin,Lasse Collin,2023-01-12 02:46:45,2023-01-12 02:46:45,liblzma: Silence a warning from -Wsign-conversion in a 32-bit build.
5ce6ddc221d0bfb57d810d845bb65fb0aac0b008,Lasse Collin,Lasse Collin,2023-01-12 02:17:24,2023-01-12 02:17:24,"Build: Make configure add more warning flags for GCC and Clang.

-Wstrict-aliasing was removed from the list since it is enabled
by -Wall already.

A normal build is clean with these on GNU/Linux x86-64 with
GCC 12.2.0 and Clang 14.0.6."
bfc3a0a8ac16de90049c1b1ba1445a7626d0230c,Lasse Collin,Lasse Collin,2023-01-12 02:14:18,2023-01-12 02:14:18,"Tests: Fix warnings from clang --Wassign-enum.

Explicitly casting the integer to lzma_check silences the warning.
Since such an invalid value is needed in multiple tests, a constant
INVALID_LZMA_CHECK_ID was added to tests.h.

The use of 0x1000 for lzma_block.check wasn't optimal as if
the underlying type is a char then 0x1000 will be truncated to 0.
However, in these test cases the value is ignored, thus even with
such truncation the test would have passed."
49245bb31e215ad455a1ab85e4ed6783152dc522,Lasse Collin,Lasse Collin,2023-01-12 01:51:07,2023-01-12 01:56:24,"Tests: Silence warnings from -Wsign-conversion.

Note that assigning an unsigned int to lzma_check doesn't warn
on GNU/Linux x86-64 since the enum type is unsigned on that
platform. The enum can be signed on some other platform though
so it's best to use enumeration type lzma_check in these situations."
3f13bf6b9e8624cbe6d6e3e82d6c98a3ed1ad571,Lasse Collin,Lasse Collin,2023-01-12 01:19:59,2023-01-12 01:19:59,"liblzma: Silence warnings from clang -Wconditional-uninitialized.

This is similar to 2ce4f36f179a81d0c6e182a409f363df759d1ad0.
The actual initialization of the variables is done inside
mythread_sync() macro. Clang doesn't seem to see that
the initialization code inside the macro is always executed."
6c886cc5b3c90c6a75e6be8b1278ec2261e452a6,Lasse Collin,Lasse Collin,2023-01-12 01:11:40,2023-01-12 01:11:40,Fix warnings from clang -Wdocumentation.
a0e7fb1c1ea658b67f30517f5d1975efd0226dba,Lasse Collin,Lasse Collin,2023-01-12 01:04:28,2023-01-12 01:04:28,Tests: test_lzip_decoder: Remove trailing white-space.
c0f8d6782f29e219fd496dd23f6a033270509d5c,Lasse Collin,Lasse Collin,2023-01-12 01:03:55,2023-01-12 01:03:55,Tests: test_lzip_decoder: Silence warnings from -Wsign-conversion.
62efd48a825e8f439e84c85e165d8774ddc68fd2,Jia Tan,GitHub,2023-01-11 15:58:16,2023-01-11 15:58:16,Add NEWS for 5.4.1.
d1561c47ec8cd3844a785d3741dc932f9b9c5790,Jia Tan,GitHub,2023-01-11 14:46:48,2023-01-11 14:46:48,"xz: Fix warning -Wformat-nonliteral on clang in message.c.

clang and gcc differ in how they handle -Wformat-nonliteral. gcc will
allow a non-literal format string as long as the function takes its
format arguments as a va_list."
8c0f115cc489331c48df77beca92fe378039d919,Jia Tan,Jia Tan,2023-01-11 12:58:31,2023-01-11 12:58:31,Tests: Fix test_filter_flags copy/paste error.
25035813d1d596fde692addc33e7f715f1fe55eb,Jia Tan,Jia Tan,2023-01-11 12:42:29,2023-01-11 12:42:29,"Tests: Fix type-limits warning in test_filter_flags.

This only occurs in test_filter_flags when the BCJ filters are not
configured and built. In this case, ARRAY_SIZE() returns 0 and causes a
type-limits warning with the loop variable since an unsigned number will
always be >= 0."
0b8fa310cf56fec55663f62340e49e8e1441594f,Lasse Collin,Lasse Collin,2023-01-10 20:14:03,2023-01-10 20:15:55,"liblzma: CLMUL CRC64: Work around a bug in MSVC, second attempt.

This affects only 32-bit x86 builds. x86-64 is OK as is.

I still cannot easily test this myself. The reporter has tested
this and it passes the tests included in the CMake build and
performance is good: raw CRC64 is 2-3 times faster than the
C version of the slice-by-four method. (Note that liblzma doesn't
include a MSVC-compatible version of the 32-bit x86 assembly code
for the slice-by-four method.)

Thanks to Iouri Kharon for figuring out a fix, testing, and
benchmarking."
765354b50c2886fc0d294d6be3b207f7ae2ada70,Jia Tan,Jia Tan,2023-01-10 17:18:50,2023-01-10 17:18:50,"Tests: Fix unused function warning in test_block_header.

One of the global arrays of filters was only used in a test that
required both encoders and decoders to be configured in the build."
7c23c05befdcc73231c0d6632a7d943dbeaea1aa,Jia Tan,Jia Tan,2023-01-10 17:08:03,2023-01-10 17:08:03,"Tests: Fix unused function warning in test_index_hash.

test_index_hash does not use fill_index_hash() unless both encoders
and decoders are configured in the build."
57464bb4ebd6c00dc8b19803f05ea55ddd0826f6,Jia Tan,Jia Tan,2023-01-10 16:54:45,2023-01-10 16:54:45,"CI/CD: Add 32-bit build and test steps to Ubuntu autotools runner.

If all goes well, Mac autotools and Linux and Mac CMake will be added
later for 32-bit builds."
923eb689a4b863b6cca8df6360d4962aae994edf,Jia Tan,Jia Tan,2023-01-10 16:51:01,2023-01-10 16:51:01,"CI/CD: Enables warnings as errors in autotool build.

This will help us catch warnings and potential bugs in builds that are
not often tested by us."
feae5528a30c006b6e2f96a95116e20b983703fc,Jia Tan,Jia Tan,2023-01-10 16:48:35,2023-01-10 16:48:35,"CI/CD: Add -f argument to set CFLAGS in ci_build.sh.

For now, the suggested option is for -m32 only, but this can be updated
later if other flags are deemed useful."
cfabb62a4874c146e7d6f30445637602545bc054,Lasse Collin,Lasse Collin,2023-01-10 10:47:16,2023-01-10 10:47:16,"Revert ""liblzma: CLMUL CRC64: Workaround a bug in MSVC (VS2015-2022).""

This reverts commit 36edc65ab4cf10a131f239acbd423b4510ba52d5.

It was reported that it wasn't a good enough fix and MSVC
still produced (different kind of) bad code when building
for 32-bit x86 if optimizations are enabled.

Thanks to Iouri Kharon."
0b64215170dd3562f207ef26f794755bcd600526,Lasse Collin,Lasse Collin,2023-01-10 09:56:11,2023-01-10 09:56:11,"sysdefs.h: Don't include strings.h anymore.

On some platforms src/xz/suffix.c may need <strings.h> for
strcasecmp() but suffix.c includes the header when it needs it.

Unless there is an old system that otherwise supports enough C99
to build XZ Utils but doesn't have C89/C90-compatible <string.h>,
there should be no need to include <strings.h> in sysdefs.h."
ec2fc39fe4f4e6e242b3a669585049763968cdeb,Lasse Collin,Lasse Collin,2023-01-10 09:23:41,2023-01-10 09:23:41,"xz: Include <strings.h> in suffix.c if needed for strcasecmp().

SUSv2 and POSIX.1‐2017 declare only a few functions in <strings.h>.
Of these, strcasecmp() is used on some platforms in suffix.c.
Nothing else in the project needs <strings.h> (at least if
building on a modern system).

sysdefs.h currently includes <strings.h> if HAVE_STRINGS_H is
defined and suffix.c relied on this.

Note that dos/config.h doesn't #define HAVE_STRINGS_H even though
DJGPP does have strings.h. It isn't needed with DJGPP as strcasecmp()
is also in <string.h> in DJGPP."
7049c4a76c805ad27d6cf4ee119a2ef2a7add59f,Lasse Collin,Lasse Collin,2023-01-10 08:05:13,2023-01-10 08:05:13,sysdefs.h: Fix a comment.
194a5fab69277d9e804a6113b5f676b8666b3a61,Lasse Collin,Lasse Collin,2023-01-10 08:04:06,2023-01-10 08:04:06,"sysdefs.h: Don't include memory.h anymore even if it were available.

It quite probably was never needed, that is, any system where memory.h
was required likely couldn't compile XZ Utils for other reasons anyway.

XZ Utils 5.2.6 and later source packages were generated using
Autoconf 2.71 which no longer defines HAVE_MEMORY_H. So the code
being removed is no longer used anyway."
5e34774c31d1b7509b5cb77a3be9973adec59ea0,Lasse Collin,Lasse Collin,2023-01-10 06:29:32,2023-01-10 06:29:32,"CMake: Fix appending to CMAKE_RC_FLAGS.

It's a string, not a list. It only worked when the variable was empty.

Thanks to Iouri Kharon."
6e652ceb18c615c578c869db300fa0756788b4e0,Lasse Collin,Lasse Collin,2023-01-09 22:33:14,2023-01-09 22:35:09,Windows: Update INSTALL-MSVC.txt to recommend CMake over project files.
6b117d3b1fe91eb26d533ab16a2e552f84148d47,Lasse Collin,Lasse Collin,2023-01-09 21:41:25,2023-01-09 21:41:25,"CMake: Fix windres issues again.

At least on some systems, GNU windres needs --use-temp-file
in addition to the \x20 hack to avoid spaces in the command line
argument. Hovever, that \x20 syntax is broken with llvm-windres
version 15.0.0 (results in ""XZx20Utils"") but luckily it works
with a regular space. Thus it is best to limit the workarounds
to GNU toolchain on Windows."
0c210ca7f489e971e94e1ddc72b0b0806e3c7935,Lasse Collin,Jia Tan,2023-01-06 20:53:38,2023-01-09 12:35:20,"Tests: test_filter_flags: Clean up minor issues.

Here are the list of the most significant issues addressed:
- Avoid using internal common.h header. It's not good to copy the
constants like this but common.h cannot be included for use outside
of liblzma. This is the quickest thing to do that could be fixed later.

- Omit the INIT_FILTER macro. Initialization should be done with just
regular designated initializers.

- Use start_offset = 257 for BCJ tests. It demonstrates that Filter
Flags encoder and decoder don't validate the options thoroughly.
257 is valid only for the x86 filter. This is a bit silly but
not a significant problem in practice because the encoder and
decoder initialization functions will catch bad alignment still.
Perhaps this should be fixed but it's not urgent and doesn't need
to be in 5.4.x.

- Various tweaks to comments such as filter id -> Filter ID"
5c9fdd3bf53a9655f5eb2807d662b3af0d5e1865,Jia Tan,Jia Tan,2022-12-29 15:33:33,2023-01-09 12:35:20,"Tests: Refactors existing filter flags tests.

Converts the existing filter flags tests into tuktests."
36edc65ab4cf10a131f239acbd423b4510ba52d5,Lasse Collin,Lasse Collin,2023-01-09 10:22:05,2023-01-09 10:22:05,"liblzma: CLMUL CRC64: Workaround a bug in MSVC (VS2015-2022).

I haven't tested with MSVC myself and there doesn't seem to be
information about the problem online, so I'm relying on the bug report.

Thanks to Iouri Kharon for the bug report and the patch."
790a12a95a78ff82d8c6d4efe3b789851ca9470d,Lasse Collin,Lasse Collin,2023-01-09 09:27:24,2023-01-09 09:27:24,"CMake: Fix a copypaste error in xzdec Windows resource file handling.

It was my mistake. Thanks to Iouri Kharon for the bug report."
0e1545fea39c0514c7b7032a0a3592a9a33d2848,Lasse Collin,Lasse Collin,2023-01-07 22:32:29,2023-01-07 22:32:29,"Tests: tuktest.h: Support tuktest_malloc(0).

It's not needed in XZ Utils at least for now. It's good to support
it still because if such use is needed later, it wouldn't be
caught on GNU/Linux since malloc(0) from glibc returns non-NULL."
69d5d78c6904668eb09a131da86276beec3281f8,Lasse Collin,Lasse Collin,2023-01-07 22:24:23,2023-01-07 22:24:23,Update THANKS.
dd38655f80c113c9db73b9ed370dc900e1c4dc41,Lasse Collin,Lasse Collin,2023-01-07 19:57:11,2023-01-07 22:20:42,"CMake: Update cmake_minimum_required from 3.13...3.16 to 3.13...3.25.

The changes listed on cmake-policies(7) for versions 3.17 to 3.25
shouldn't affect this project."
a890a637bee9193d5b690aefa9a59eba5b8532ae,Lasse Collin,Lasse Collin,2023-01-07 17:50:35,2023-01-07 22:20:42,Update THANKS.
6e38e595dd56ac1800478cef1f6f754d0eba0d2e,Lasse Collin,Lasse Collin,2023-01-07 17:50:03,2023-01-07 22:20:42,"CMake/Windows: Add resource files to xz.exe and xzdec.exe.

The command line tools cannot be built with MSVC for now but
they can be built with MinGW-w64.

Thanks to Iouri Kharon for the bug report and the original patch."
443dfebced041adc88f10d824188eeef5b5821a9,Lasse Collin,Lasse Collin,2023-01-07 17:48:52,2023-01-07 22:20:42,"CMake/Windows: Add a workaround for windres from GNU binutils.

Thanks to Iouri Kharon for the bug report and the original patch."
ceb805011747d04a915f3f39e4bed9eed151c634,Lasse Collin,Lasse Collin,2023-01-07 17:31:15,2023-01-07 22:20:42,"Build: Require that _mm_set_epi64x() is usable to enable CLMUL support.

VS2013 doesn't have _mm_set_epi64x() so this way CLMUL gets
disabled with VS2013.

Thanks to Iouri Kharon for the bug report."
8d372bd94066b1a5b0570b2550f83c2868486adf,Jia Tan,Jia Tan,2023-01-07 13:05:15,2023-01-07 13:15:18,"CI/CD: Split CMake Linux and MacOS build phase to build and test.

The phase split was only done for Autotools before, so should also
apply to CMake."
747c7f2b34bd498f6702c6875500a26b06201772,Jia Tan,Jia Tan,2023-01-07 03:16:55,2023-01-07 13:15:16,"CI/CD: Reduce job runners to 4 instead of using matrix strategy.

The old version used too many runners that resulted in unnecessary
dependency downloads. Now, the runners are reused for the different
configurations for each OS and build system."
4de35fd6b58d46fc887c78faf163f6a37b790c45,Jia Tan,Jia Tan,2023-01-07 02:07:20,2023-01-07 13:15:14,"CI/CD: Add new -p (PHASE) argument to ci_build.sh

The new PHASE argument can be build, test, or all. all is the default.
This way, the CI/CD script can differentiate between the build and test
phases to make it easier to track down errors when they happen."
6fd39664de47801e670a16617863196bfbde4755,Jia Tan,GitHub,2023-01-06 16:10:50,2023-01-06 16:10:50,"Merge pull request #7 from tukaani-project/tuktest_index_hash

Tuktest index hash"
fc0c788469159f634f09ff23c8cef6925c91da57,Lasse Collin,Lasse Collin,2023-01-06 15:58:48,2023-01-06 15:58:48,Tests: test_index_hash: Add an assert_uint_eq().
d550304f5343b3a082da265107cd820e0d81dc71,Lasse Collin,Lasse Collin,2023-01-06 15:55:06,2023-01-06 15:55:06,Tests: test_index_hash: Fix a memory leak.
02608f74ea1f2d2d56585711ff241c34b4ad0937,Lasse Collin,Lasse Collin,2023-01-06 15:53:03,2023-01-06 15:53:03,Tests: test_index_hash: Don't treat pointers as booleans.
056766c8601a3808bea1761f6cc833197a35a3e0,Lasse Collin,Lasse Collin,2023-01-06 15:51:41,2023-01-06 15:51:41,Tests: test_index_hash: Fix a typo in a comment.
873e684028ba9738f071c5236db7d452ed797b4c,Lasse Collin,Lasse Collin,2023-01-06 15:44:29,2023-01-06 15:44:29,"Tests: test_index_hash: Avoid the variable name ""index"".

It can trigger warnings from -Wshadow on some systems."
d1f24c35874eeba8432d75aa77b06c50375ed937,Lasse Collin,Lasse Collin,2023-01-06 15:35:50,2023-01-06 15:35:50,"Tests: test_index_hash: Use the word ""Record"" instead of ""entry""."
b93f7c5cbb02b42024ac866fc0af541de3d816e2,Lasse Collin,Lasse Collin,2023-01-06 15:35:05,2023-01-06 15:35:05,"Tests: test_index_hash: Tweak comments and style.

The words defined in the .xz file format specification
begin with capital letter to emphasize that they have
a specific meaning."
c48b24fc06d98569adb72f13c2e8e5ff30bb8036,Lasse Collin,Lasse Collin,2023-01-06 15:17:37,2023-01-06 15:17:37,Tests: test_index_hash: Use INDEX_INDICATOR constant instead of 0.
78e0561dfebaa9d5e34558de537efcda890e0629,Jia Tan,Jia Tan,2023-01-06 12:43:31,2023-01-06 12:43:31,Style: Change #if !defined() to #ifndef in mythread.h.
e834e1e934ed0af673598d8c0c34afb2af56bee0,Jia Tan,Jia Tan,2023-01-06 12:35:55,2023-01-06 12:42:18,"Build: Add missing stream_decoder_mt.c to .vcxproj files.

The line in the .vcxproj files for building with was missing in 5.4.0.
Thank to Hajin Jang for reporting the issue."
84f9687cbae972c2c342e10bf69f8ec8f70ae111,Jia Tan,Jia Tan,2023-01-05 12:57:25,2023-01-05 12:57:25,"liblzma: Remove common.h include from common/index.h.

common/index.h is needed by liblzma internally and tests. common.h will
include and define many things that are not needed by the tests. Also,
this prevents include order problems because common.h will redefine
LZMA_API resulting in a warning."
7657ce1c3c4abff7560336a7b687d98e0e2bd14f,Lasse Collin,Lasse Collin,2023-01-04 20:40:54,2023-01-04 21:16:26,Update THANKS.
aafd67fba045ab99683971263a5a26fb2a6e8ce2,Lasse Collin,Lasse Collin,2023-01-04 16:40:28,2023-01-04 16:40:28,Tests: Adjust style in test_compress.sh.
52380678f42364daa4510f92f6d3b18ec98c3638,Jia Tan,GitHub,2023-01-04 15:58:58,2023-01-04 15:58:58,"Tests: Replace non portable shell parameter expansion

The shell parameter expansion using # and ## is not supported in
Solaris 10 Bourne shell (/bin/sh). Even though this is POSIX, it is not fully
portable, so we should avoid it."
d0eb345bb7d148a62883ee299adec2b74a0f6f3b,Jia Tan,Jia Tan,2023-01-03 13:02:38,2023-01-03 13:02:38,"Translations: Add Korean translation of man pages.

Thanks to Seong-ho Cho"
c4145978d95ebf1690c778d354e15f7c2823d7a8,Jia Tan,Jia Tan,2023-01-03 12:47:27,2023-01-03 12:47:27,Translations: Update the Esperanto translation.
4103a2e78ac60b00c888485cd967a5fe5d1b917c,Lasse Collin,Lasse Collin,2023-01-02 15:20:47,2023-01-02 15:20:47,"Bump version and soname for 5.5.0alpha.

5.5.0alpha won't be released, it's just to mark that
the branch is not for stable 5.4.x.

Once again there is no API/ABI stability for new features
in devel versions. The major soname won't be bumped even
if API/ABI of new features breaks between devel releases."
73c9e6d6b970ccc3d5ad61dcaa21cba050e5df0a,Lasse Collin,Lasse Collin,2023-01-02 15:05:07,2023-01-02 15:05:07,Build: Fix config.h comments.
bb740e3b117f1a3c65152d01e5755523a908ecb1,Jia Tan,GitHub,2023-01-02 14:33:48,2023-01-02 14:33:48,"Build: Only define HAVE_PROGRAM_INVOCATION_NAME if it is set to 1.

HAVE_DECL_PROGRAM_INVOCATION_NAME is renamed to
HAVE_PROGRAM_INVOCATION_NAME. Previously,
HAVE_DECL_PROGRAM_INVOCATION_NAME was always set when
building with autotools. CMake would only set this when it was 1, and the
dos/config.h did not define it. The new macro definition is consistent
across build systems."
064cd385a716abc78d93a3612411a82d69ceb221,Jia Tan,Jia Tan,2022-12-28 16:30:52,2023-01-02 14:20:04,Adds test_index_hash to .gitignore.
3959162baec074511d83ba0fec1284c3ed724799,Jia Tan,Jia Tan,2022-12-28 16:25:18,2023-01-02 14:20:04,"Tests: Creates test_index_hash.c

Tests all API functions exported from index_hash.h. Does not have a
dedicated test for lzma_index_hash_end."
f16e12d5e755d371247202fcccbcccd1ec16b2cf,Jia Tan,Jia Tan,2022-08-17 12:20:16,2023-01-02 14:20:04,"liblzma: Add NULL check to lzma_index_hash_append.

This is for consistency with lzma_index_append."
203b008eb220208981902e0db541c02d1c1c9f5e,Jia Tan,Jia Tan,2022-08-17 09:59:51,2023-01-02 14:20:04,liblzma: Replaced hardcoded 0x0 index indicator byte with macro
dfecda875211f737d0db92dc1d3c58a3a2afb0c0,Lasse Collin,Lasse Collin,2022-12-30 18:10:08,2022-12-30 18:10:08,Tests: test_check: Test corner cases of CLMUL CRC64.
ce96bb20435212fe797d6d84738fb9fd4ea13cc7,Lasse Collin,Lasse Collin,2022-12-30 17:36:49,2022-12-30 17:36:49,Tests: Clarify a comment in test_lzip_decoder.c.
2fcba17fc4d7eda8fc60567169cf2a0e6fcfb2f8,Jia Tan,Jia Tan,2022-12-28 17:55:19,2022-12-30 15:34:31,"xz: Includes <time.h> and <sys/time.h> conditionally in mytime.c.

Previously, mytime.c depended on mythread.h for <time.h> to be included."
f82294c8318a7a0990583d51ac5c7de682ad36ef,Jia Tan,Jia Tan,2022-12-28 17:15:27,2022-12-30 15:34:31,"liblzma: Includes sys/time.h conditionally in mythread

Previously, <sys/time.h> was always included, even if mythread only used
clock_gettime. <time.h> is still needed even if clock_gettime is not used
though because struct timespec is needed for mythread_condtime."
74dae7d30091e906d6a92a57952dea4354473f9b,Jia Tan,Jia Tan,2022-12-28 17:10:53,2022-12-30 15:34:31,"Build: No longer require HAVE_DECL_CLOCK_MONOTONIC to always be set.

Previously, if threading was enabled HAVE_DECL_CLOCK_MONOTONIC would always
be set to 0 or 1. However, this macro was needed in xz so if xz was not
built with threading and HAVE_DECL_CLOCK_MONOTONIC was not defined but
HAVE_CLOCK_GETTIME was, it caused a warning during build. Now,
HAVE_DECL_CLOCK_MONOTONIC has been renamed to HAVE_CLOCK_MONOTONIC and
will only be set if it is 1."
7339e39dc060df6eda74a2c5b69961befc3d5d24,Jia Tan,Jia Tan,2022-12-27 17:14:07,2022-12-30 15:34:31,"Translations: Add Ukrainian translations of man pages.

Thanks to Yuri Chornoivan"
9f05c27a58ce8cd7803079aa295e41c24665ce6e,Jia Tan,Jia Tan,2022-12-22 16:34:48,2022-12-30 15:34:31,"CI/CD: Create initial version of CI/CD workflow.

The CI/CD workflow will only execute on Ubuntu and MacOS latest version.
The workflow will attempt to build with autotools and CMake and execute
the tests. The workflow will run for all pull requests and pushes done
to the master branch."
1275ebfba74230dbd028049141423c79c8b83b8f,Jia Tan,Jia Tan,2022-12-22 15:14:53,2022-12-30 15:34:31,liblzma: Update documentation for lzma_filter_encoder.
7c9ff5f1667a16733163b75dfd4b509662c387f4,Jia Tan,Jia Tan,2022-12-21 13:12:03,2022-12-30 15:34:31,Tests: Adds lzip decoder tests
799ead162de63b8400733603d3abcd2e1977bdca,Jia Cheong Tan,Jia Tan,2022-12-20 14:05:21,2022-12-30 15:34:31,"Doxygen: Update .gitignore for generating docs for in source build.

In source builds are not recommended, but we should still ignore
the generated artifacts."
5f7ce42a16b1e86ca8408b5c670c25e2a12acc4e,Jia Tan,Jia Tan,2022-12-20 12:46:44,2022-12-30 15:34:31,"liblzma: Fix lzma_microlzma_encoder() return value.

Using return_if_error on lzma_lzma_lclppb_encode was improper because
return_if_error is expecting an lzma_ret value, but
lzma_lzma_lclppb_encode returns a boolean. This could result in
lzma_microlzma_encoder, which would be misleading for applications."
8ace358d65059152d9a1f43f4770170d29d35754,Jia Tan,Jia Tan,2022-12-16 12:58:55,2022-12-30 15:34:31,"CMake: Update .gitignore for CMake artifacts from in source build.

In source builds are not recommended, but we can make it easier
by ignoring the generated artifacts from CMake."
8fd225a2c149f30aeac377e68eb5abf6b28300ad,Lasse Collin,Lasse Collin,2022-12-16 16:30:02,2022-12-16 16:30:02,liblzma: Update authors list in arm64.c.
b69da6d4bb6bb11fc0cf066920791990d2b22a06,Lasse Collin,Lasse Collin,2022-12-13 18:37:17,2022-12-13 18:46:41,Bump version to 5.4.0 and soname to 5.4.0.
20869eb3fb280ff4f271ef527b12b6bf68b05e19,Lasse Collin,Lasse Collin,2022-12-13 18:29:39,2022-12-13 18:29:39,"Update INSTALL: CMake on Windows isn't experimental anymore.

Using CMake to build liblzma should work on a few other OSes
but building the command line tools is still subtly broken.

It is known that shared library versioning may differ between
CMake and Libtool builds on some OSes, most notably Darwin."
cbbd84451944e3e8c63acfaa3c923f6d8aff7852,Lasse Collin,Lasse Collin,2022-12-13 17:47:53,2022-12-13 18:27:39,Add NEWS for 5.4.0.
c3e94d37e8d10a3e96019864b6f5d7b578db2c14,Lasse Collin,Lasse Collin,2022-12-13 15:41:20,2022-12-13 15:41:20,Fix a typo in NEWS.
0d2a2e0a545c3da2b3e9500f1e531eb903087245,Lasse Collin,Lasse Collin,2022-12-13 15:41:03,2022-12-13 15:41:03,Add NEWS for 5.2.10.
177ece1c8eb007188fb1b04eff09ca2193fbdea6,Lasse Collin,Lasse Collin,2022-12-13 10:30:45,2022-12-13 10:30:45,Tests: Fix a typo in tests/files/README.
60f45bdbaa6b07558b3f4baac285739b0c6342f5,Lasse Collin,Lasse Collin,2022-12-13 10:30:09,2022-12-13 10:30:09,Tests: Add two ARM64 test files.
f5e419550619c548c7c35d7e367cf00580a56521,Lasse Collin,Lasse Collin,2022-12-12 20:44:21,2022-12-12 20:44:21,Translations: Update the Catalan translation.
0fb9d355da3789b1757040af475b4e6bbc8b8af8,Lasse Collin,Lasse Collin,2022-12-12 17:18:12,2022-12-12 17:18:12,Update THANKS.
e5b6c161c61a37c54dcb76a99bbb83ac4abe02dc,Lasse Collin,Lasse Collin,2022-12-12 17:07:58,2022-12-12 17:07:58,Update AUTHORS.
f2d98e691099d82054d5f3071ef6f5e809932e44,Lasse Collin,Lasse Collin,2022-12-12 13:31:14,2022-12-12 13:31:14,"Docs: Omit multi-threaded decompress from TODO.

The TODO file outdated still."
b42908c42a4cc091db45a7e5ba0e0ecceaa3f6da,Lasse Collin,Lasse Collin,2022-12-11 19:16:09,2022-12-11 19:16:09,Docs: Update xz-file-format.txt to 1.1.0 for ARM64 filter.
854f2f5946b353cb0963fd6dfd54d363adc89b9f,Lasse Collin,Lasse Collin,2022-12-11 19:13:57,2022-12-11 19:13:57,xz: Rename --experimental-arm64 to --arm64.
31dbd1e5fb65831915a7bbb531c3f19aea8d57a5,Lasse Collin,Lasse Collin,2022-12-11 19:13:06,2022-12-11 19:13:06,liblzma: Change LZMA_FILTER_ARM64 to the official Filter ID 0x0A.
01b3549e523edac899ec4925b282ceddd20da116,Lasse Collin,Lasse Collin,2022-12-08 17:24:22,2022-12-08 17:24:22,xz: Make args_info.files_name a const pointer.
bc665b84ea6bf7946394a08122177efe41b26a5f,Lasse Collin,Lasse Collin,2022-12-08 17:18:16,2022-12-08 17:18:16,"xz: Don't modify argv[].

The code that parses --memlimit options and --block-list modified
the argv[] when parsing the option string from optarg. This was
visible in ""ps auxf"" and such and could be confusing. I didn't
understand it back in the day when I wrote that code. Now a copy
is allocated when modifiable strings are needed."
a13064e1c290de7933db72b6dffbd65cfce59c9f,Lasse Collin,Lasse Collin,2022-12-08 16:18:57,2022-12-08 16:18:57,Translations: Update the German man page translations.
8bdbe42a8d0d75dff70206b923fc4bce5c69a40a,Jia Tan,Lasse Collin,2022-12-06 15:05:56,2022-12-08 16:18:06,Translations: Update the German translation.
5c304b57c24ef40ff57f864301065f0244c05bde,Jia Tan,Lasse Collin,2022-12-06 15:04:25,2022-12-08 16:18:06,Translations: Update the Turkish translation.
6d86781fdb937970486500447ebb49b98244235b,Jia Tan,Lasse Collin,2022-12-06 15:02:11,2022-12-08 16:18:06,Translations: Update the Croatian translation.
7a5b4b8075eb36026b1796f04ffed5830c42396a,Jia Tan,Lasse Collin,2022-12-06 14:56:30,2022-12-08 16:18:06,"Translations: Add Romanian translation of man pages.

Thanks to Remus-Gabriel Chelu."
c6977e7400088177556e8771bcb839eb7d90caa3,Jia Tan,Lasse Collin,2022-12-06 14:52:13,2022-12-08 16:18:06,Translations: Update the Romanian translation.
ac2a747e939c2cbccff7a49c399769af5e02d2ab,Lasse Collin,Lasse Collin,2022-12-08 15:30:09,2022-12-08 15:30:09,"liblzma: Check for unexpected NULL pointers in block_header_decode().

The API docs gave an impression that such checks are done
but they actually weren't done. In practice it made little
difference since the calling code has a bug if these are NULL.

Thanks to Jia Tan for the original patch that checked for
block->filters == NULL."
24790f49ae66938c1c7574315e1c0aba1ed5ed25,Lasse Collin,Lasse Collin,2022-12-01 18:59:32,2022-12-01 18:59:32,"Bump version number for 5.3.5beta.

This also sorts the symbol names alphabetically in liblzma_*.map."
7e53c5bcb3c2c17f47c096c06ff6b1481e6ecafa,Lasse Collin,Lasse Collin,2022-12-01 18:57:26,2022-12-01 18:57:26,Add NEWS for 5.3.5beta.
5865f2aaac326fcbd9f8a7d62defa230e4cb644e,Lasse Collin,Lasse Collin,2022-12-01 18:57:09,2022-12-01 18:57:09,Update THANKS.
62b270988ec67314d69976df484d2974c6eacfda,Lasse Collin,Lasse Collin,2022-12-01 18:04:17,2022-12-01 18:55:21,"liblzma: Use __has_attribute(__symver__) to fix Clang detection.

If someone sets up Clang to define __GNUC__ to 10 or greater
then symvers broke. __has_attribute is supported by such GCC
and Clang versions that don't support __symver__ so this should
be much better and simpler way to detect if __symver__ is
actually supported.

Thanks to Tomasz Gajc for the bug report."
f9ca7d45162664ddd9fb70e19335c2426e5d75bb,Lasse Collin,Lasse Collin,2022-12-01 16:51:52,2022-12-01 16:55:00,"liblzma: Omit zero-skipping from ARM64 filter.

It has some complicated downsides and its usefulness is more limited
than I originally thought. So this change is bad for certain very
specific situations but a generic solution that works for other
filters (and is otherwise better too) is planned anyway. And this
way 7-Zip can use the same compatible filter for the .7z format.

This is still marked as experimental with a new temporary Filter ID."
5baec3f0a9c85e6abf45c0f652f699b074129a8b,Lasse Collin,Lasse Collin,2022-12-01 16:13:27,2022-12-01 16:13:27,xz: Omit the special notes about ARM64 filter on the man page.
0c3627b51862eb0dcdd4fc283d046250571991c6,Lasse Collin,Lasse Collin,2022-12-01 16:12:03,2022-12-01 16:12:03,liblzma: Don't be over-specific in lzma_str_to_filters API doc.
94adf057f27b1970f493dc99cd166407d7255639,Lasse Collin,Lasse Collin,2022-12-01 15:54:23,2022-12-01 15:54:23,"liblzma: Silence unused variable warning when BCJ filters are disabled.

Thanks to Jia Tan for the original patch."
c68af4441744e5ffc41a472e1be9c9d53a1d9780,Lasse Collin,Lasse Collin,2022-12-01 15:38:03,2022-12-01 15:38:03,Translations: Update the Chinese (simplified) translation.
3be6942e5c27d29995d41da52fbe274e4ce4a537,Lasse Collin,Lasse Collin,2022-11-30 16:55:03,2022-11-30 16:55:03,Add NEWS for 5.2.9.
7c16e312cb2f40b81154c0e5be13a3c6b8da485d,Jia Tan,Lasse Collin,2022-11-30 15:33:08,2022-11-30 16:12:35,"xz: Remove message_filters_to_str function prototype from message.h.

This was forgotten from 7484744af6cbabe81e92af7d9e061dfd597fff7b."
764955e2d4f2a5e8d6d6fec63af694f799e050e7,Lasse Collin,Lasse Collin,2022-11-30 16:08:34,2022-11-30 16:08:34,"Change the bug report address.

It forwards to me and Jia Tan.

Also update the IRC reference in README as #tukaani was moved
to Libera Chat long ago."
c21983c76031e01da01ad3c6cc716fe4b8a75070,Lasse Collin,Lasse Collin,2022-11-30 15:50:17,2022-11-30 15:50:17,"Build: Add string_conversion.c to CMake, DOS, and VS files."
30be0c35d24eb5175459d69dbf7d92e2b087ef82,Lasse Collin,Lasse Collin,2022-11-30 15:38:32,2022-11-30 15:38:32,Update to HTTPS URLs in AUTHORS.
0a72b9ca2fe20082da9b7128fe0d908af947a851,Jia Tan,Lasse Collin,2022-11-29 16:52:06,2022-11-29 20:29:15,liblzma: Improve documentation for string to filter functions.
a6e21fcede3b196160a52dd294d965c508a4bb33,Lasse Collin,Lasse Collin,2022-11-29 20:27:42,2022-11-29 20:27:42,"liblzma: Two fixes to lzma_str_list_filters() API docs.

Thanks to Jia Tan."
7484744af6cbabe81e92af7d9e061dfd597fff7b,Lasse Collin,Lasse Collin,2022-11-28 19:57:47,2022-11-28 20:05:32,"xz: Use lzma_str_from_filters().

Two uses: Displaying encoder filter chain when compressing with -vv,
and displaying the decoder filter chain in --list -vv."
cedeeca2ea6ada5b0411b2ae10d7a859e837f203,Lasse Collin,Lasse Collin,2022-11-28 19:37:48,2022-11-28 19:54:24,"liblzma: Add lzma_str_to_filters, _from_filters, and _list_filters.

lzma_str_to_filters() uses static error messages which makes
them not very precise. It tells the position in the string
where an error occurred though which helps quite a bit if
applications take advantage of it. Dynamic error messages can
be added later with a new flag if it seems important enough."
072ebf7b1335421193ffa9d4a70d5533786b8995,Lasse Collin,Lasse Collin,2022-11-28 19:02:19,2022-11-28 19:02:19,liblzma: Make lzma_validate_chain() available outside filter_common.c.
5f22bd2d37e3bd01a5d701b51750eb51f09c11bf,Lasse Collin,Lasse Collin,2022-11-28 08:51:03,2022-11-28 08:51:03,liblzma: Remove lzma_lz_decoder_uncompressed() as it's now unused.
cee83206465b95729ab649aa2f57fdbde8dcaf89,Lasse Collin,Lasse Collin,2022-11-28 08:48:53,2022-11-28 08:48:53,"liblzma: Use LZMA1EXT feature in lzma_microlzma_decoder().

Here too this avoids the slightly ugly method to set
the uncompressed size.

Also moved the setting of dict_size to the struct initializer."
e310e8b6a490dfb468f4ed68feff246d776b323c,Lasse Collin,Lasse Collin,2022-11-28 08:28:20,2022-11-28 08:28:20,"liblzma: Use LZMA1EXT feature in lzma_alone_decoder().

This avoids the need to use the slightly ugly method to
set the uncompressed size."
33b8a24b6646a9dbfd8358405aec466b13078559,Lasse Collin,Lasse Collin,2022-11-27 21:16:21,2022-11-27 21:16:21,"liblzma: Add LZMA_FILTER_LZMA1EXT to support LZMA1 without end marker.

Some file formats need support for LZMA1 streams that don't use
the end of payload marker (EOPM) alias end of stream (EOS) marker.
So far liblzma API has supported decompressing such streams via
lzma_alone_decoder() when .lzma header specifies a known
uncompressed size. Encoding support hasn't been available in the API.

Instead of adding a new LZMA1-only API for this purpose, this commit
adds a new filter ID for use with raw encoder and decoder. The main
benefit of this approach is that then also filter chains are possible,
for example, if someone wants to implement support for .7z files that
use the x86 BCJ filter with LZMA1 (not BCJ2 as that isn't supported
in liblzma)."
9a304bf1e45b3ddf61aaeaa7c764915b34618ede,Lasse Collin,Lasse Collin,2022-11-27 16:43:07,2022-11-27 16:43:07,liblzma: Avoid unneeded use of void pointer in LZMA decoder.
218394958c7683f892275bb40eae880620feebcc,Lasse Collin,Lasse Collin,2022-11-27 16:20:33,2022-11-27 16:20:33,"liblzma: Pass the Filter ID to LZ encoder and decoder.

This allows using two Filter IDs with the same
initialization function and data structures."
1663c7676b76f4c514031797f3db1896e8100f7f,Lasse Collin,Lasse Collin,2022-11-26 23:03:16,2022-11-26 23:03:16,liblzma: Remove two FIXME comments.
11fe708db783ac36ebeeb85da164e29e8c300910,Lasse Collin,Lasse Collin,2022-11-26 20:25:30,2022-11-26 20:25:30,xz: Use lzma_filters_free().
e782af9110d8499c7ac2929bc871540eefea5ea1,Lasse Collin,Lasse Collin,2022-11-26 20:21:13,2022-11-26 20:21:13,liblzma: Use lzma_filters_free() in more places.
90caaded2dc6db1d6a55b01160d7e87f4a423628,Lasse Collin,Lasse Collin,2022-11-25 16:04:37,2022-11-25 16:04:37,liblzma: Omit simple coder init functions if they are disabled.
5cd9f0df78cc4f8a7807bf6104adea13034fbb45,Lasse Collin,Lasse Collin,2022-11-24 21:24:59,2022-11-24 21:24:59,"xz: Allow nice_len 2 and 3 even if match finder requires 3 or 4.

Now that liblzma accepts these, we avoid the extra check and
there's one message less for translators too."
3be88ae071371caa279b44e13f4836fb178fe4ae,Lasse Collin,Lasse Collin,2022-11-24 21:23:55,2022-11-24 21:23:55,"liblzma: Allow nice_len 2 and 3 even if match finder requires 3 or 4.

That is, if the specified nice_len is smaller than the minimum
of the match finder, silently use the match finder's minimum value
instead of reporting an error. The old behavior is annoying to users
and it complicates xz options handling too."
93439cfafe1768b3b18d67d2356ef7e7559bba59,Lasse Collin,Lasse Collin,2022-11-24 14:25:10,2022-11-24 14:25:10,"liblzma: Add lzma_filters_update() support to the multi-threaded encoder.

A tiny downside of this is that now a 1-4 tiny allocations are made
for every Block because each worker thread needs its own copy of
the filter chain."
17ac51e689794eb41cab3e80946fec689caea2d2,Lasse Collin,Lasse Collin,2022-11-24 12:53:22,2022-11-24 12:53:22,Update THANKS.
06824396b2b6c84f3a235cb7c19c2a9701167797,Lasse Collin,Lasse Collin,2022-11-24 12:52:44,2022-11-24 12:52:44,"Build: Don't put GNU/Linux-specific symbol versions into static liblzma.

It not only makes no sense to put symbol versions into a static library
but it can also cause breakage.

By default Libtool #defines PIC if building a shared library and
doesn't define it for static libraries. This is documented in the
Libtool manual. It can be overriden using --with-pic or --without-pic.
configure.ac detects if --with-pic or --without-pic is used and then
gives an error if neither --disable-shared nor --disable-static was
used at the same time. Thus, in normal situations it works to build
both shared and static library at the same time on GNU/Linux,
only --with-pic or --without-pic requires that only one type of
library is built.

Thanks to John Paul Adrian Glaubitz from Debian for reporting
the problem that occurred on ia64:
https://www.mail-archive.com/xz-devel@tukaani.org/msg00610.html"
e1acf7107291f8b3d6d609a7133331ff36d35d14,Lasse Collin,Lasse Collin,2022-11-23 23:32:16,2022-11-23 23:32:16,"liblzma: Refactor to use lzma_filters_free().

lzma_filters_free() sets the options to NULL and ids to
LZMA_VLI_UNKNOWN so there is no need to do it by caller;
the filter arrays will always be left in a safe state.

Also use memcpy() instead of a loop to copy a filter chain
when it is known to be safe to copy LZMA_FILTERS_MAX + 1
(even if the elements past the terminator might be uninitialized)."
cb05dbcf8b868441ec805016222f3fd77f1c5caa,Lasse Collin,Lasse Collin,2022-11-23 23:26:37,2022-11-23 23:26:37,"liblzma: Fix another invalid free() after memory allocation failure.

This time it can happen when lzma_stream_encoder_mt() is used
to reinitialize an existing multi-threaded Stream encoder
and one of 1-4 tiny allocations in lzma_filters_copy() fail.

It's very similar to the previous bug
10430fbf3820dafd4eafd38ec8be161a6978ed2b, happening with
an array of lzma_filter structures whose old options are freed
but the replacement never arrives due to a memory allocation
failure in lzma_filters_copy()."
75f1a6c26df4ce329da0882786403e3ccf5cd898,Jia Tan,Lasse Collin,2022-05-05 12:53:42,2022-11-23 23:07:32,"liblzma: Add support for LZMA_SYNC_FLUSH in the Block encoder.

The documentation mentions that lzma_block_encoder() supports
LZMA_SYNC_FLUSH but it was never added to supported_actions[]
in the internal structure. Because of this, LZMA_SYNC_FLUSH could
not be used with the Block encoder unless it was the next coder
after something like stream_encoder() or stream_encoder_mt()."
d0901645170b638c517f5c50866b6ef48f491c65,Lasse Collin,Lasse Collin,2022-11-23 23:02:50,2022-11-23 23:02:50,"liblzma: Add new API function lzma_filters_free().

This is small but convenient and should have been added
a long time ago."
ae1f8a723dcde2f2c5cf444bcbb5fc5026b3c3c5,Lasse Collin,Lasse Collin,2022-11-23 22:02:31,2022-11-23 22:02:31,CMake: Don't use symbol versioning with static library.
48c1b99dc537a27e1ca929d8837e778e5ba32191,Lasse Collin,Lasse Collin,2022-11-23 19:55:22,2022-11-23 19:55:22,liblzma: Add lzma_attr_warn_unused_result to lzma_filters_copy().
10430fbf3820dafd4eafd38ec8be161a6978ed2b,Lasse Collin,Lasse Collin,2022-11-23 19:26:21,2022-11-23 19:26:21,"liblzma: Fix invalid free() after memory allocation failure.

The bug was in the single-threaded .xz Stream encoder
in the code that is used for both re-initialization and for
lzma_filters_update(). To trigger it, an application had
to either re-initialize an existing encoder instance with
lzma_stream_encoder() or use lzma_filters_update(), and
then one of the 1-4 tiny allocations in lzma_filters_copy()
(called from stream_encoder_update()) must fail. An error
was correctly reported but the encoder state was corrupted.

This is related to the recent fix in
f8ee61e74eb40600445fdb601c374d582e1e9c8a which is good but
it wasn't enough to fix the main problem in stream_encoder.c."
cafd6dc397ca8b5b5f7775e8d6876b8fe70f8e70,Lasse Collin,Lasse Collin,2022-11-22 14:37:15,2022-11-22 14:37:15,liblzma: Fix language in a comment.
c392bf8ccba857baaf50399c4b460119befacd54,Lasse Collin,Lasse Collin,2022-11-22 09:20:17,2022-11-22 09:23:23,"liblzma: Fix infinite loop in LZMA encoder init with dict_size >= 2 GiB.

The encoder doesn't support dictionary sizes larger than 1536 MiB.
This is validated, for example, when calculating the memory usage
via lzma_raw_encoder_memusage(). It is also enforced by the LZ
part of the encoder initialization. However, LZMA encoder with
LZMA_MODE_NORMAL did an unsafe calculation with dict_size before
such validation and that results in an infinite loop if dict_size
was 2 << 30 or greater."
f50534c973a591ccf65485adfc827a8a7126ca6c,Lasse Collin,Lasse Collin,2022-11-21 11:02:33,2022-11-21 11:02:33,"liblzma: Fix two Doxygen commands in the API headers.

These were caught by clang -Wdocumentation."
649d4872ed2f55196114a061d45b416fc4353569,Lasse Collin,Lasse Collin,2022-11-19 17:09:55,2022-11-19 17:09:55,xz: Refactor duplicate code from hardware_memlimit_mtenc_get().
d327743bb547a53364e5951a16e5f1663fe4b9ff,Lasse Collin,Lasse Collin,2022-11-19 17:06:13,2022-11-19 17:06:13,xz: Add support --threads=+N so that -T+1 gives threaded mode.
a11a2b8b5e830ba682c1d81aaa7078842b296995,Jia Tan,Lasse Collin,2022-11-19 15:18:04,2022-11-19 15:35:38,CMake: Adds test_memlimit to CMake tests
2af8d9e9b3f44f62d19e7c39297ec63af2e8c64f,Lasse Collin,Lasse Collin,2022-11-15 17:10:21,2022-11-15 17:10:21,Translations: Update the Korean translation.
16ac05677292f7e21a4feaddcfb2ab062ea5f385,Lasse Collin,Lasse Collin,2022-11-15 17:09:28,2022-11-15 17:09:28,Translations: Update the Turkish translation.
b9a67d9a5fa207062d4aa8a01639234609315d31,Lasse Collin,Lasse Collin,2022-11-15 08:58:39,2022-11-15 09:18:28,Bump version number for 5.3.4alpha.
5b999ba289b3280457b7386b9ac65dbbdf1575a5,Lasse Collin,Lasse Collin,2022-11-15 08:54:40,2022-11-15 08:58:19,Add NEWS for 5.3.4alpha.
ce8db9e37da4f6c87691c5066f51f91f2411c44a,Lasse Collin,Lasse Collin,2022-11-15 08:54:08,2022-11-15 08:54:08,Add NEWS for 5.2.8.
b56bc8251d2736224af6bdaaae734ceb8926a879,Lasse Collin,Lasse Collin,2022-11-14 21:19:57,2022-11-14 21:19:57,"Revert ""liblzma: Simple/BCJ filters: Allow disabling generic BCJ options.""

This reverts commit 177bdc922cb17bd0fd831ab8139dfae912a5c2b8
and also does equivalent change to arm64.c.

Now that ARM64 filter will use lzma_options_bcj, this change
is not needed anymore."
8370ec8edf9ddf8d1d9fef03d8d1027503ec4c35,Lasse Collin,Lasse Collin,2022-11-14 21:14:41,2022-11-14 21:16:38,"Replace the experimental ARM64 filter with a new experimental version.

This is incompatible with the previous version.

This has space/tab fixes in filter_*.c and bcj.h too."
f644473a211394447824ea00518d0a214ff3f7f2,Lasse Collin,Lasse Collin,2022-11-14 19:34:57,2022-11-14 21:05:46,"liblzma: Add fast CRC64 for 32/64-bit x86 using SSSE3 + SSE4.1 + CLMUL.

It also works on E2K as it supports these intrinsics.

On x86-64 runtime detection is used so the code keeps working on
older processors too. A CLMUL-only build can be done by using
-msse4.1 -mpclmul in CFLAGS and this will reduce the library
size since the generic implementation and its 8 KiB lookup table
will be omitted.

On 32-bit x86 this isn't used by default for now because by default
on 32-bit x86 the separate assembly file crc64_x86.S is used.
If --disable-assembler is used then this new CLMUL code is used
the same way as on 64-bit x86. However, a CLMUL-only build
(-msse4.1 -mpclmul) won't omit the 8 KiB lookup table on
32-bit x86 due to a currently-missing check for disabled
assembler usage.

The configure.ac check should be such that the code won't be
built if something in the toolchain doesn't support it but
--disable-clmul-crc option can be used to unconditionally
disable this feature.

CLMUL speeds up decompression of files that have compressed very
well (assuming CRC64 is used as a check type). It is know that
the CLMUL code is significantly slower than the generic code for
tiny inputs (especially 1-8 bytes but up to 16 bytes). If that
is a real-world problem then there is already a commented-out
variant that uses the generic version for small inputs.

Thanks to Ilya Kurdyukov for the original patch which was
derived from a white paper from Intel [1] (published in 2009)
and public domain code from [2] (released in 2016).

[1] https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/fast-crc-computation-generic-polynomials-pclmulqdq-paper.pdf
[2] https://github.com/rawrunprotected/crc"
3b466bc79672bb2b06d1245a500588e6026e0ba0,Lasse Collin,Lasse Collin,2022-11-14 18:14:34,2022-11-14 18:14:34,Translations: Update the Swedish translation one more time.
e963379a8622ebdff6ce78e76b803bcd1e1d16d6,Lasse Collin,Lasse Collin,2022-11-14 17:34:15,2022-11-14 17:34:15,Translations: Update the Swedish translation again.
a4bc689a823a2254f29ac9d233170add5121b307,Lasse Collin,Lasse Collin,2022-11-14 17:07:45,2022-11-14 17:07:45,Translations: Update the Swedish translation.
bbf2073d824ab4ba33bed4b77f467435abd333a5,Lasse Collin,Lasse Collin,2022-11-14 16:58:09,2022-11-14 16:58:09,Translations: Update the Ukrainian translation.
ac10b1b3622e70881595586edfb8a3ebdcd76bb6,Lasse Collin,Lasse Collin,2022-11-14 15:58:07,2022-11-14 15:58:07,"Build: Omit x86_64 from --enable-assembler.

It didn't do anything. There are only 32-bit x86 assembly files
and it feels likely that new files won't be added as intrinsics
in C are more portable across toolchains and OSes."
eb0f1450ad9f23dac03050d9c8375980240aee21,Lasse Collin,Lasse Collin,2022-11-14 14:00:52,2022-11-14 14:00:52,"liblzma: Use __attribute__((__constructor__)) if available.

This uses it for CRC table initializations when using --disable-small.
It avoids mythread_once() overhead. It also means that then
--disable-small --disable-threads is thread-safe if this attribute
is supported."
6553f49b11dafad35c73b05f12e14865ea1fd8a1,Lasse Collin,Lasse Collin,2022-11-12 19:19:52,2022-11-12 19:19:52,Translations: Update the Romanian translation.
db97e69e12393becc29f8febd53133d0d36989bd,Lasse Collin,Lasse Collin,2022-11-12 19:17:45,2022-11-12 19:17:45,Translations: Update the Hungarian translation.
2bbb9c0f3829a8b121b36998d273a6c6f92000f4,Lasse Collin,Lasse Collin,2022-11-11 15:58:57,2022-11-11 15:58:57,Translations: Update the Finnish translation.
3c8cbb8137b6f8ed9416c1209d73cdbcb015251f,Lasse Collin,Lasse Collin,2022-11-11 15:58:18,2022-11-11 15:58:18,Translations: Update the Croatian translation.
26c3359eac0988d6f3986735cd1363bec1678e8e,Lasse Collin,Lasse Collin,2022-11-11 15:57:18,2022-11-11 15:57:18,Translations: Update the Polish translation.
577e467b137c735afb8de6ae71ac7a73c2960cc4,Lasse Collin,Lasse Collin,2022-11-11 15:56:44,2022-11-11 15:56:44,Translations: Update the Spanish translation.
f9b4ff6e9a0f1678650775582d3e4fe782abce97,Lasse Collin,Lasse Collin,2022-11-11 15:16:03,2022-11-11 15:16:03,Update THANKS.
a39961ef211e1bf030b17edeea3cff29fe263b67,Lasse Collin,Lasse Collin,2022-11-11 15:15:25,2022-11-11 15:15:25,"liblzma: Fix building with Intel ICC (the classic compiler).

It claims __GNUC__ >= 10 but doesn't support __symver__ attribute.

Thanks to Stephen Sachs."
c715f683dcb1a817d565da292cddfbceda643e12,Lasse Collin,Lasse Collin,2022-11-11 12:35:58,2022-11-11 12:35:58,"liblzma: Fix incorrect #ifdef for x86 SSE2 support.

__SSE2__ is the correct macro for SSE2 support with GCC, Clang,
and ICC. __SSE2_MATH__ means doing floating point math with SSE2
instead of 387. Often the latter macro is defined if the first
one is but it was still a bug."
bd334ae56afe7f642ad4d0f1ac19e74e82daa1ce,Lasse Collin,Lasse Collin,2022-11-11 11:27:06,2022-11-11 11:27:06,Add NEWS for 5.2.7 (forgotten cherry-pick from v5.2).
3c7860cf49de6f81046b3a4034a89f3a4803a576,Lasse Collin,Lasse Collin,2022-11-11 11:16:21,2022-11-11 11:16:21,"xzdiff: Add support for .lz files.

The other scripts don't need changes for .lz support because
in those scripts it is enough that xz supports .lz."
d76c752a6d77052e5ad57ade555082585f7ac5d8,Lasse Collin,Lasse Collin,2022-11-11 10:23:58,2022-11-11 10:23:58,"Scripts: Ignore warnings from xz.

In practice this means making the scripts work when
the input files have an unsupported check type which
isn't a problem in practice unless support for
some check types has been disabled at build time."
6552535afd1fe29d726ab6e68cf14ce3624fd48c,Lasse Collin,Lasse Collin,2022-11-10 10:34:43,2022-11-10 10:39:08,"Translations: Rename poa4/fr_FR.po to po4a/fr.po.

That's how it is preferred at the Translation Project.
On my system /usr/share/man/fr_FR doesn't contain any
other man pages than XZ Utils while /usr/share/man/fr
has quite a few, so this will fix that too.

Thanks to Benno Schulenberg from the Translation Project."
0918159ce4c75bfb60aff0193b559f8a9f41d25a,Lasse Collin,Lasse Collin,2022-11-09 16:48:50,2022-11-09 17:09:26,"xz: Update the man page about BCJ filters, including upcoming --arm64.

The --arm64 isn't actually implemented yet in the form
described in this commit.

Thanks to Jia Tan."
ba2ae3596f6be1587495f33b367488f6e00e56f1,Lasse Collin,Lasse Collin,2022-11-09 16:14:14,2022-11-09 16:14:14,"xz: Add --arm64 to --long-help and omit endianness from ARM(-Thumb).

Modern 32-bit ARM in big endian mode use little endian for
instruction encoding still, so the filters work on such
executables too. It's likely less confusing for users this way.

The --arm64 option hasn't been implemented yet (there is
--experimental-arm64 but it's different). The --arm64 option
is added now anyway because this is the likely result and the
strings need to be ready for translators.

Thanks to Jia Tan."
802d57d9215d9c81dbee86edb43c9e93a7f7ec55,Lasse Collin,Lasse Collin,2022-11-09 13:12:13,2022-11-09 13:12:13,Windows: Update the VS project files for ARM64 and .lz support.
5846aeda05972bc803c6094821ae836229ebe691,Lasse Collin,Lasse Collin,2022-11-09 12:57:48,2022-11-09 12:57:48,DOS: Update Makefile and config.h to include ARM64 and .lz support.
781da8d6c44de6aa278c916375250668a0b107f2,Lasse Collin,Lasse Collin,2022-11-09 12:45:05,2022-11-09 12:45:05,CMake: Add lzip decoder files and #define to the build.
df8ad4af65a9c4846b108550d0083770a69dee64,Lasse Collin,Lasse Collin,2022-11-09 12:41:56,2022-11-09 12:41:56,Docs: Update INSTALL and also add new prohibited options to PACKAGERS.
c8ef089c149afaab413c3a51be827dd1d11afe0e,Lasse Collin,Lasse Collin,2022-10-20 14:39:06,2022-11-09 12:32:33,Tests: Test the .lz files in test_files.sh.
c8f70ebb4628ceb6cb29cc9195d9deadf69d2bd7,Lasse Collin,Lasse Collin,2022-10-20 12:35:59,2022-11-09 12:31:21,Tests: Add .lz (lzip) test files.
731db13e6fa3ad3e3fc786c0ccf6eac4cce6865f,Lasse Collin,Lasse Collin,2022-10-19 19:32:51,2022-11-09 12:31:10,"xz: Remove the commented-out FORMAT_GZIP, gzip, .gz, and .tgz."
3176f992c55b8d788c4633809aaf9447376a5a12,Lasse Collin,Lasse Collin,2022-10-08 18:28:15,2022-11-09 12:28:41,"xz: Add .lz (lzip) decompression support.

If configured with --disable-lzip-decoder then --long-help will
still list `lzip' in --format but I left it like that since
due to translations it would be messy to have two help strings.
Features are disabled only in special situations so wrong help
in such a situation shouldn't matter much.

Thanks to Michał Górny for the original patch."
034086e1ae1459210837a24e04878435c86dc41b,Lasse Collin,Lasse Collin,2022-10-07 21:29:20,2022-11-09 12:25:26,"liblzma: Add .lz support to lzma_auto_decoder().

Thanks to Michał Górny for the original patch."
0538db038f3cdc352007dacb42454aa1806b8e40,Lasse Collin,Lasse Collin,2022-10-06 12:50:20,2022-11-09 12:24:20,"liblzma: Add .lz (lzip) decompression support (format versions 0 and 1).

Support for format version 0 was removed from lzip 1.18 for some
reason. .lz format version 0 files are rare (and old) but some
source packages were released in this format, and some people might
have personal files in this format too. It's very little extra code
to support it along side format version 1 so this commits adds
support for both.

The Sync Flush marker extentension to the original .lz format
version 1 isn't supported. It would require changes to the
LZMA decoder itself. Such files are very rare anyway.

See the API doc for lzma_lzip_decoder() for more details about
the .lz format support.

Thanks to Michał Górny for the original patch."
633d48a075b9ce4b9c08a7a56a7eb4cabc18100c,Lasse Collin,Lasse Collin,2022-11-09 12:17:23,2022-11-09 12:17:23,"liblzma: Add the missing Makefile.inc change for --disable-microlzma.

This was forgotten from commit 59c4d6e1390f6f4176f43ac1dad1f7ac03c449b8."
724285dadbdc88765c8fb83eab9816575a260966,Lasse Collin,Lasse Collin,2022-11-09 12:10:52,2022-11-09 12:10:52,"xz: Add comments about stdin and src_st.st_size.

""xz -v < regular_file > out.xz"" doesn't display the percentage
and estimated remaining time because it doesn't even try to
check the input file size when input is read from stdin.
This could be improved but for now there's just a comment
to remind about it."
f723eec68b0e44234910f669a29119de33018967,Lasse Collin,Lasse Collin,2022-11-09 10:48:22,2022-11-09 10:48:22,"xz: Fix displaying of file sizes in progress indicator in passthru mode.

It worked for one input file since the counters are zero when
xz starts but they weren't reset when starting a new file in
passthru mode. For example, if files A, B, and C are one byte each,
then ""xz -dcvf A B C"" would show file sizes as 1, 2, and 3 bytes
instead of 1, 1, and 1 byte."
69265d0f223ddf1d66f799b8b047df22923e376f,Lasse Collin,Lasse Collin,2022-11-09 09:27:20,2022-11-09 09:27:20,"xz: Add a comment why --to-stdout is not in --help.

It is on the man page still."
fe6b8852a3c6a0eb5a3c33512e0a69af257d3bc7,Lasse Collin,Lasse Collin,2022-11-08 21:05:37,2022-11-08 21:05:37,xz: Make xz -lvv show that the upcoming --arm64 needs 5.4.0 to decompress.
fb3f05ac9f2b4b0e3643401960fbeab31997ac7a,Lasse Collin,Lasse Collin,2022-11-08 20:26:54,2022-11-08 20:26:54,Docs: Update faq.txt a little.
05331f091ec3b68eccbfb2a9a7a576072768fb4b,Lasse Collin,Lasse Collin,2022-11-08 14:57:17,2022-11-08 14:59:12,Translations: Update Turkish translation.
ed3a4822963b4940d84e6f44d47277c394fc046d,Lasse Collin,Lasse Collin,2022-11-08 12:55:32,2022-11-08 14:59:12,Translations: Update Croatian translation.
4746f5ec721316bc4c6fec9905b2902e0360e0af,Lasse Collin,Lasse Collin,2022-11-08 12:13:03,2022-11-08 12:13:03,liblzma: Update API docs about decoder flags.
8779a9db5d0cec00c9dc9e9965dd2dda04f9d80d,Lasse Collin,Lasse Collin,2022-11-08 12:01:50,2022-11-08 12:01:50,liblzma: Use the return_if_error() macro in alone_decoder.c.
3f4990b6822961e75cd9b4e2e82b1df63f6f8fcc,Lasse Collin,Lasse Collin,2022-11-08 12:00:58,2022-11-08 12:00:58,liblzma: Fix a comment in auto_decoder.c.
026a5897c72a2041ae08ceec54ce8b1cdeb51334,Lasse Collin,Lasse Collin,2022-11-08 11:43:19,2022-11-08 11:43:19,"xz: Initialize the pledge(2) sandbox at the very beginning of main().

It feels better that the initializations are sandboxed too.
They don't do anything that the pledge() call wouldn't allow."
49a59f6ca001c3ce9affa2c162b437aad021b4d5,Lasse Collin,Lasse Collin,2022-11-07 20:51:16,2022-11-07 20:51:16,"xz: Extend --robot --info-memory output.

Now it includes everything that the human-readable --info-memory shows."
5e2450c75cbac966c62cf2231c824f2cc91ddba8,Lasse Collin,Lasse Collin,2022-11-07 15:22:04,2022-11-07 15:22:04,"liblzma: Include cached memory in reported memusage in threaded decoder.

This affects lzma_memusage() and lzma_memlimit_set() when used
with the threaded decompressor. Now all allocations are reported
by lzma_memusage() (so it's not misleading) and lzma_memlimit_set()
cannot lower the limit below that value.

The alternative would have been to allow lowering the limit if
doing so is possible by freeing the cached memory but since
the primary use case of lzma_memlimit_set() is to increase
memlimit after LZMA_MEMLIMIT_ERROR this simple approach
was selected.

The cached memory was always included when enforcing
the memory usage limit while decoding.

Thanks to Jia Tan."
1fc6e7dd1fabdb60124d449b99273330ccab3ff1,Jia Tan,Lasse Collin,2022-11-07 14:24:14,2022-11-07 14:24:56,"xz: Avoid a compiler warning in progress_speed() in message.c.

This should be smaller too since it avoids the string constants."
cf118c014683069b5dbe91898acdc40f2f0a1f5d,Lasse Collin,Lasse Collin,2022-10-31 14:26:05,2022-10-31 14:26:05,Build: Clarify comment in configure.ac about SSE2.
aad3c609ffb72f581a7a2b67be3ad70b2b327840,Lasse Collin,Lasse Collin,2022-10-31 14:16:37,2022-10-31 14:16:37,Build: Remove obsolete commented-out lines from configure.ac.
e53e0e2186c6b8ce866bd19aec52f1c318ed31ba,Lasse Collin,Lasse Collin,2022-10-31 11:31:58,2022-10-31 11:31:58,"Windows: Fix mythread_once() macro with Vista threads.

Don't call InitOnceComplete() if initialization was already done.

So far mythread_once() has been needed only when building
with --enable-small. windows/build.bash does this together
with --disable-threads so the Vista-specific mythread_once()
is never needed by those builds. VS project files or
CMake-builds don't support HAVE_SMALL builds at all."
48dde3bab9dc04081acb5aa7cf7c5044b8a49f58,Lasse Collin,Lasse Collin,2022-10-31 09:54:44,2022-10-31 09:54:44,liblzma: Silence -Wconversion warning from crc64_fast.c.
a243c617ff249d915ac123de4f536b80322c1fdb,Lasse Collin,Lasse Collin,2022-10-31 09:49:47,2022-10-31 09:49:47,"CMake: Sync tuklib_cpucores.cmake with tuklib_cpucores.m4.

This was forgotten from commit 2611c4d90535652d3eb7ef4a026a6691276fab43."
05c72de06fcaaedc78f8abba7d5ec568ddcf1e75,Lasse Collin,Lasse Collin,2022-10-27 12:49:18,2022-10-27 12:49:18,"Tests: test_files.sh: Make it not fail if features were disabled at build.

It now tries to test as many files as easily possible.
The exit status indicates skipping if any of the files were
skipped. This way it is easy to notice if something is being
skipped when it isn't expected."
b3459327a51f4b8239d19e6c34b4e0c6bc2d81de,Lasse Collin,Lasse Collin,2022-10-27 12:30:13,2022-10-27 12:30:13,"Tests: test_files.sh: Suppress an expected warning from the log.

xz (but not xzdec) will normally warn about unsupported check
but since we are testing specifically such a file, it's better
to silence that warning so that it doesn't look suspicious in
test_files.sh.log.

The use of -q and -Q in xzdec is just for consistency and
doesn't affect the result at least for now."
798c86e4231e0835ab76ccd0810c8ea30833b2ce,Lasse Collin,Lasse Collin,2022-10-27 12:27:50,2022-10-27 12:27:50,Tests: test_files.sh: Print the reason for skipping if xz & xzdec missing.
c1dd8524e1af07f16b790463899de06a6a5fcc08,Lasse Collin,Lasse Collin,2022-10-26 22:12:40,2022-10-26 22:12:40,Tests: Keep test_compress_* working when some filters are unavailable.
ce30ada91951d0746879ae438da11f1ee8a90aa0,Jia Tan,Lasse Collin,2022-10-23 13:01:08,2022-10-26 17:12:01,Tests: test_bcj_exact_size skips properly now if PowerPC filter disabled.
89c5cfcacaca7130509fac836e2f30c46b824502,Lasse Collin,Lasse Collin,2022-10-25 21:05:57,2022-10-25 21:05:57,Tests: Test also unsupported-*.xz.
a4b214b93ac741edef9c41e55865b0b867ca2587,Lasse Collin,Lasse Collin,2022-10-25 20:45:03,2022-10-25 20:45:03,"Build: Use AC_CONFIG_HEADERS instead of the ancient AC_CONFIG_HEADER.

We require Autoconf >= 2.69 and that has AC_CONFIG_HEADERS.

There is a warning about AC_PROG_CC_C99 being obsolete but
it cannot be removed because it is needed with Autoconf 2.69."
04f299b64e73f50afc188c2590ebebc6b73ed744,Lasse Collin,Lasse Collin,2022-10-25 20:31:44,2022-10-25 20:31:44,Build: Update m4/ax_pthread.m4 from Autoconf Archive.
59c4d6e1390f6f4176f43ac1dad1f7ac03c449b8,Lasse Collin,Lasse Collin,2022-10-25 20:28:34,2022-10-25 20:28:34,"Build: Add configure option --disable-microlzma.

MicroLZMA was made for EROFS and used by erofs-utils.
It might be used by something else in the future but
those wanting a smaller build for specific situations
can now disable this rarely-needed feature."
054ccd6d14b2cc6eddc56897af280d3221414150,Lasse Collin,Lasse Collin,2022-10-25 20:09:11,2022-10-25 20:09:11,"xz: Fix --single-stream with an empty .xz Stream.

Example:

    $ xz -dc --single-stream good-0-empty.xz
    xz: good-0-empty.xz: Internal error (bug)

The code, that is tries to catch some input file issues early,
didn't anticipate LZMA_STREAM_END which is possible in that
code only when --single-stream is used."
563288ea705e83ff5cb292adf794650c263bca1d,Lasse Collin,Lasse Collin,2022-10-25 18:11:58,2022-10-25 18:30:48,xz: Add support for OpenBSD's pledge() sandbox.
f9913e8ee2ba0b1e4ff4d0aa4c001aae305ed944,Lasse Collin,Lasse Collin,2022-10-25 16:07:17,2022-10-25 16:07:17,"xz: Fix decompressor behavior if input uses an unsupported check type.

Now files with unsupported check will make xz display
a warning, set the exit status to 2 (unless --no-warn is used),
and then decompress the file normally. This is how it was
supposed to work since the beginning but this was broken by
the commit 231c3c7098f1099a56abb8afece76fc9b8699f05, that is,
a little before 5.0.0 was released. The buggy behavior displayed
a message, set exit status 1 (error), and xz didn't attempt to
to decompress the file.

This doesn't matter today except for special builds that disable
CRC64 or SHA-256 at build time (but such builds should be used
in special situations only). The bug matters if new check type
is added in the future and an old xz version is used to decompress
such a file; however, it's likely that such files would use a new
filter too and an old xz wouldn't be able to decompress the file
anyway.

The first hunk in the commit is the actual fix. The second hunk
is a cleanup since LZMA_TELL_ANY_CHECK isn't used in xz.

There is a test file for unsupported check type but it wasn't
used by test_files.sh, perhaps due to different behavior between
xz and the simpler xzdec."
aa4fe145b9486adc454f44fd3e09be9add808a0f,Lasse Collin,Lasse Collin,2022-10-25 15:36:19,2022-10-25 15:36:19,xz: Clarify the man page: input file isn't removed if an error occurs.
8b46ae8cdeddfd7dc01fec92971b8696e9a96c5d,Lasse Collin,Lasse Collin,2022-10-25 15:30:55,2022-10-25 15:30:55,"xz: Refactor to remove is_empty_filename().

Long ago it was used in list.c too but nowadays it's needed
only in io_open_src() so it's nicer to avoid a separate function."
85624015978b0de294cff3df79006df987c552b1,Lasse Collin,Lasse Collin,2022-10-25 15:23:54,2022-10-25 15:23:54,"xz: If input file cannot be removed, treat it as a warning, not error.

Treating it as a warning (message + exit status 2) matches gzip
and it seems more logical as at that point the output file has
already been successfully closed. When it's a warning it is
possible to suppress it with --no-warn."
fda9f85f52c546f7ca0313cf89481da4707fecb3,Lasse Collin,Lasse Collin,2022-10-24 13:25:09,2022-10-24 13:25:09,"liblzma: Threaded decoder: Stop the worker threads on errors.

It's waste of CPU time and electricity to leave the unfinished
worker threads running when it is known that their output will
get ignored."
2611c4d90535652d3eb7ef4a026a6691276fab43,Lasse Collin,Lasse Collin,2022-10-20 17:22:50,2022-10-20 17:22:50,"tuklib_cpucores: Use HW_NCPUONLINE on OpenBSD.

On OpenBSD the number of cores online is often less
than what HW_NCPU would return because OpenBSD disables
simultaneous multi-threading (SMT) by default.

Thanks to Christian Weisgerber."
424ac91c7e0419393ff2bde4f62e21fa611c776d,Lasse Collin,Lasse Collin,2022-10-19 16:39:35,2022-10-19 16:39:35,"Tests: Skip tests in test_*.sh if encoders and/or decoders are disabled.

This isn't perfect as the scripts can still fail if only
certain filters are disabled. This is still an improvement
as now ""make check"" has better behavior when all encoders
or decoders are disabled.

Grepping ../config.h is simple and fairly clean but it only
works if config.h was created. CMake builds don't create
config.h but they don't use these test scripts either.

Thanks to Sebastian Andrzej Siewior for reporting the problem.
Thanks to Jia Tan for the original patch which grepped xz
error messages instead of config.h."
ca8bf9d7c5a30be8ba1eeb106fd892f19e83ed09,Lasse Collin,Lasse Collin,2022-10-19 15:54:34,2022-10-19 16:03:50,"Test: Remove the (exit 1) lines.

I suspect that I used these in the original version because
Autoconf's manual describes that such a trick is needed in
some specific situations for portability reasons. None of those
situations listed on Autoconf 2.71 manual apply to these test
scripts though so this cleans them up."
82fcb7cfc17ce62f79ebc7ca2374e1daca5e4d5e,Lasse Collin,Lasse Collin,2022-10-19 14:14:57,2022-10-19 14:14:57,Tests: Fix a warning in test_memlimit.c when decoders are disabled.
b5f8271b45b9b0e59485ffba3640ca3418835ec4,Lasse Collin,Lasse Collin,2022-10-19 14:11:46,2022-10-19 14:11:46,"Tests: Add test_memlimit to .gitignore.

Thanks to Jia Tan."
6a86e81cab202d0a812a7b2e9efacaf70c58ba38,Jia Tan,Lasse Collin,2022-10-06 18:53:09,2022-10-06 19:06:17,"Tests: Refactor test_stream_flags.c.

Converts test_stream_flags to tuktest. Also the test will now
compile and skip properly if encoders or decoders are disabled.

Thanks to Sebastian Andrzej Siewior."
827ac5b4821491fd3afe0d0e1ddac326253aeb66,Jia Tan,Lasse Collin,2022-10-06 09:00:38,2022-10-06 18:51:48,"Tests: Refactor test_block_header.c.

test_block_header now achieves higher test coverage. Also the
test will now compile and skip properly if encoders or decoders
are disabled.

Thanks to Sebastian Andrzej Siewior."
84963318952064a93bfc52edd6b0ef70593384ee,Jia Tan,Lasse Collin,2022-10-05 15:54:12,2022-10-06 14:34:27,"Tests: Fix compilation issues.

test_bcj_exact_size, test_check, test_hardware, and test_index will
all now compile and skip properly if encoders or decoders are disabled.

Also fixed a small typo (disabed -> disabled).

Thanks to Sebastian Andrzej Siewior."
7dcabeec63d46b436fa5f043c3d1f09d0e15be16,Lasse Collin,Lasse Collin,2022-10-05 13:20:47,2022-10-05 13:20:47,Tests: Include mythread.h in the tests that use MYTHREAD_ENABLED.
14af758a770c7781af18fb66d6d21ee5b1c27f04,Jia Tan,Lasse Collin,2022-10-05 12:57:16,2022-10-05 13:11:33,"liblzma: Fix a compilation issue when encoders are disabled.

When encoders were disabled and threading enabled, outqueue.c and
outqueue.h were not compiled. The multi threaded decoder required
these files, so compilation failed."
6ca5c354bd4620aa7f81da68870eef1b1f26288f,Jia Tan,Lasse Collin,2022-10-05 08:41:38,2022-10-05 13:10:21,"Tests: Fix compilation error when threading support has been disabled.

Now tests that require threading are skipped when threading
support has been disabled.

Thanks to Sebastian Andrzej Siewior."
fae37ad2affd8fe8871f4ff93d5cab5ec14d5e58,Lasse Collin,Lasse Collin,2022-10-05 11:26:00,2022-10-05 11:26:00,"tuklib_integer: Add 64-bit endianness-converting reads and writes.

Also update the comment in liblzma's memcmplen.h.

Thanks to Michał Górny for the original patch for the reads."
508a44372c5b0dede8863fd0d358d4a9d8645c95,Lasse Collin,Lasse Collin,2022-09-30 09:06:13,2022-09-30 09:06:13,"liblzma: Add API doc note about the .xz decoder LZMA_MEMLIMIT_ERROR bug.

The bug was fixed in 660739f99ab211edec4071de98889fb32ed04e98."
8cc9874a7974cd575aee44f218836f7acdbeb0ed,Jia Tan,Lasse Collin,2022-09-21 08:15:50,2022-09-28 12:48:03,"liblzma: Add dest and src NULL checks to lzma_index_cat.

The documentation states LZMA_PROG_ERROR can be returned from
lzma_index_cat. Previously, lzma_index_cat could not return
LZMA_PROG_ERROR. Now, the validation is similar to
lzma_index_append, which does a NULL check on the index
parameter."
afd5a8bf5374eba82804a999e1ea7af680784086,Jia Tan,Lasse Collin,2022-09-21 12:29:28,2022-09-28 12:34:23,Tests: Create a test for the lzma_index_cat bug.
3d5a99ca373a4e86faf671226ca6487febb9eeac,Jia Tan,Lasse Collin,2022-09-21 11:28:53,2022-09-28 12:29:49,"liblzma: Fix copying of check type statistics in lzma_index_cat().

The check type of the last Stream in dest was never copied to
dest->checks (the code tried to copy it but it was done too late).
This meant that the value returned by lzma_index_checks() would
only include the check type of the last Stream when multiple
lzma_indexes had been concatenated.

In xz --list this meant that the summary would only list the
check type of the last Stream, so in this sense this was only
a visual bug. However, it's possible that some applications
use this information for purposes other than merely showing
it to the users in an informational message. I'm not aware of
such applications though and it's quite possible that such
applications don't exist.

Regular streamed decompression in xz or any other application
doesn't use lzma_index_cat() and so this bug cannot affect them."
a61d32172789735350a941e23baf6b587c49e5d9,Lasse Collin,Lasse Collin,2022-09-28 09:20:41,2022-09-28 09:20:41,"tuklib_physmem: Fix Unicode builds on Windows.

Thanks to ArSaCiA Game."
5a4d3548ab214fdca364d5c734baf1d1fab47308,Lasse Collin,Lasse Collin,2022-09-28 08:12:07,2022-09-28 08:12:07,Tests: Add test_memlimit.c to test restarting after LZMA_MEMLIMIT_ERROR.
660739f99ab211edec4071de98889fb32ed04e98,Lasse Collin,Lasse Collin,2022-09-28 08:05:15,2022-09-28 08:05:15,"liblzma: Stream decoder: Fix restarting after LZMA_MEMLIMIT_ERROR.

If lzma_code() returns LZMA_MEMLIMIT_ERROR it is now possible
to use lzma_memlimit_set() to increase the limit and continue
decoding. This was supposed to work from the beginning but
there was a bug. With other decoders (.lzma or threaded .xz)
this already worked correctly."
7e68fda58c74ad9e5b876cc22fcbe80fc0e4747b,Lasse Collin,Lasse Collin,2022-09-28 08:00:23,2022-09-28 08:00:23,liblzma: Stream decoder: Fix comments.
f664cb25841fc1c478b819034a224a558e2ac6e7,Lasse Collin,Lasse Collin,2022-09-20 13:58:22,2022-09-20 13:58:22,liblzma: ARM64: Add comments.
b557b4a0eea05470fae8ba5ef4ad5a6dfb36ac41,Lasse Collin,Lasse Collin,2022-09-20 13:27:50,2022-09-20 13:27:50,"liblzma: ARM64: Fix wrong comment in API doc.

Thanks to Jia Tan."
d5b0906fa55157f48c200188a3951d80df9cb308,Lasse Collin,Lasse Collin,2022-09-19 17:24:26,2022-09-19 17:24:26,"xz: Add --experimental-arm64[=width=WIDTH].

It will be renamed to --arm64 once it is stable.

Man page or --long-help weren't updated yet."
ecb966de308c255bb4735a7307ef9901c643a9de,Lasse Collin,Lasse Collin,2022-09-19 16:34:56,2022-09-19 17:23:46,"liblzma: Add experimental ARM64 BCJ filter with a temporary Filter ID.

That is, the Filter ID will be changed once the design is final.
The current version will be removed. So files created with the
tempoary Filter ID won't be supported in the future."
177bdc922cb17bd0fd831ab8139dfae912a5c2b8,Lasse Collin,Lasse Collin,2022-09-17 19:42:18,2022-09-17 19:42:18,"liblzma: Simple/BCJ filters: Allow disabling generic BCJ options.

This will be needed for the ARM64 BCJ filter as it will use
its own options struct."
c3592d0a55114144686ecf960cb516d6b31c98e9,Lasse Collin,Lasse Collin,2022-09-16 14:08:53,2022-09-16 14:08:53,"Tests: Add a test file for lzma_index_append() integer overflow bug.

This test fails before commit 18d7facd3802b55c287581405c4d49c98708c136.

test_files.sh now runs xz -l for bad-3-index-uncomp-overflow.xz
because only then the previously-buggy code path gets tested.
Normal decompression doesn't use lzma_index_append() at all.
Instead, lzma_index_hash functions are used and those already
did the overflow check."
982b29f828079a2a26253a40e975127a40a7d2bd,Lasse Collin,Lasse Collin,2022-09-16 12:10:07,2022-09-16 12:15:05,Translations: Add Turkish translation.
1fc088d9f6d1697924aaeac8cd1fb9918d1532e2,Lasse Collin,Lasse Collin,2022-09-16 11:09:07,2022-09-16 11:09:07,Update THANKS.
097c7b67ce86ff16a7cef7631b39e5ca4ee3d420,Lasse Collin,Lasse Collin,2022-09-16 11:07:03,2022-09-16 11:07:03,"xzgrep: Fix compatibility with old shells.

Running the current xzgrep on Slackware 10.1 with GNU bash 3.00.15:

    xzgrep: line 231: syntax error near unexpected token `;;'

On SCO OpenServer 5.0.7 with Korn Shell 93r:

    syntax error at line 231 : `;;' unexpected

Turns out that some old shells don't like apostrophes (') inside
command substitutions. For example, the following fails:

    x=$(echo foo
    # asdf'zxcv
    echo bar)
    printf '%s\n' ""$x""

The problem was introduced by commits
69d1b3fc29677af8ade8dc15dba83f0589cb63d6 (2022-03-29),
bd7b290f3fe4faeceb7d3497ed9bf2e6ed5e7dc5 (2022-07-18), and
a648978b20495b7aa4a8b029c5a810b5ad9d08ff (2022-07-19).
5.2.6 is the only stable release that included
this problem.

Thanks to Kevin R. Bulgrien for reporting the problem
on SCO OpenServer 5.0.7 and for providing the fix."
f2d084fe3f0d6d71488bfc6987f26542f67bfd99,Lasse Collin,Lasse Collin,2022-09-09 11:12:30,2022-09-09 11:12:30,"Tests: Silence warnings about unused functions from tuktest.h.

Warnings about unused tuktest_run_test conveniently tell which
test programs haven't been converted to tuktest.h yet but I
silenced that warning too for now anyway.

It is fine to use __attribute__((__unused__)) even when the
function is actually used because the attribute only means
that the function might be unused."
f8ee61e74eb40600445fdb601c374d582e1e9c8a,Lasse Collin,Lasse Collin,2022-09-09 10:51:57,2022-09-09 10:51:57,"liblzma: lzma_filters_copy: Keep dest[] unmodified if an error occurs.

lzma_stream_encoder() and lzma_stream_encoder_mt() always assumed
this. Before this patch, failing lzma_filters_copy() could result
in free(invalid_pointer) or invalid memory reads in stream_encoder.c
or stream_encoder_mt.c.

To trigger this, allocating memory for a filter options structure
has to fail. These are tiny allocations so in practice they very
rarely fail.

Certain badness in the filter chain array could also make
lzma_filters_copy() fail but both stream_encoder.c and
stream_encoder_mt.c validate the filter chain before
trying to copy it, so the crash cannot occur this way."
18d7facd3802b55c287581405c4d49c98708c136,Jia Tan,Lasse Collin,2022-09-02 12:18:55,2022-09-08 12:19:19,"liblzma: lzma_index_append: Add missing integer overflow check.

The documentation in src/liblzma/api/lzma/index.h suggests that
both the unpadded (compressed) size and the uncompressed size
are checked for overflow, but only the unpadded size was checked.
The uncompressed check is done first since that is more likely to
occur than the unpadded or index field size overflows."
9ac06cb5b85274d18f9f70d82cf2d8c9c1151bd4,Lasse Collin,Lasse Collin,2022-09-08 12:11:08,2022-09-08 12:11:08,Update THANKS.
ba3e4ba2de034ae93a513f9c3a0823b80cdb66dc,Jia Tan,Lasse Collin,2022-09-08 12:07:00,2022-09-08 12:07:00,CMake: Clarify a comment about Windows symlinks without file extension.
17485e884ce5c74315f29a8a1507bc706cd5cd1d,Lasse Collin,Lasse Collin,2022-09-08 12:02:41,2022-09-08 12:02:41,"CMake: Update for liblzma_*.map files and fix wrong common_w32res.rc dep.

The previous commit split liblzma.map into liblzma_linux.map and
liblzma_generic.map. This commit updates the CMake build for those.

common_w32res.rc dependency was listed under Linux/FreeBSD while
obviously it belongs to Windows when building a DLL."
913ddc5572b9455fa0cf299be2e35c708840e922,Lasse Collin,Lasse Collin,2022-09-04 20:23:00,2022-09-08 12:01:29,"liblzma: Vaccinate against an ill patch from RHEL/CentOS 7.

RHEL/CentOS 7 shipped with 5.1.2alpha, including the threaded
encoder that is behind #ifdef LZMA_UNSTABLE in the API headers.
In 5.1.2alpha these symbols are under XZ_5.1.2alpha in liblzma.map.
API/ABI compatibility tracking isn't done between development
releases so newer releases didn't have XZ_5.1.2alpha anymore.

Later RHEL/CentOS 7 updated xz to 5.2.2 but they wanted to keep
the exported symbols compatible with 5.1.2alpha. After checking
the ABI changes it turned out that >= 5.2.0 ABI is backward
compatible with the threaded encoder functions from 5.1.2alpha
(but not vice versa as fixes and extensions to these functions
were made between 5.1.2alpha and 5.2.0).

In RHEL/CentOS 7, XZ Utils 5.2.2 was patched with
xz-5.2.2-compat-libs.patch to modify liblzma.map:

  - XZ_5.1.2alpha was added with lzma_stream_encoder_mt and
    lzma_stream_encoder_mt_memusage. This matched XZ Utils 5.1.2alpha.

  - XZ_5.2 was replaced with XZ_5.2.2. It is clear that this was
    an error; the intention was to keep using XZ_5.2 (XZ_5.2.2
    has never been used in XZ Utils). So XZ_5.2.2 lists all
    symbols that were listed under XZ_5.2 before the patch.
    lzma_stream_encoder_mt and _mt_memusage are included too so
    they are listed both here and under XZ_5.1.2alpha.

The patch didn't add any __asm__("".symver ..."") lines to the .c
files. Thus the resulting liblzma.so exports the threaded encoder
functions under XZ_5.1.2alpha only. Listing the two functions
also under XZ_5.2.2 in liblzma.map has no effect without
matching .symver lines.

The lack of XZ_5.2 in RHEL/CentOS 7 means that binaries linked
against unpatched XZ Utils 5.2.x won't run on RHEL/CentOS 7.
This is unfortunate but this alone isn't too bad as the problem
is contained within RHEL/CentOS 7 and doesn't affect users
of other distributions. It could also be fixed internally in
RHEL/CentOS 7.

The second problem is more serious: In XZ Utils 5.2.2 the API
headers don't have #ifdef LZMA_UNSTABLE for obvious reasons.
This is true in RHEL/CentOS 7 version too. Thus now programs
using new APIs can be compiled without an extra #define. However,
the programs end up depending on symbol version XZ_5.1.2alpha
(and possibly also XZ_5.2.2) instead of XZ_5.2 as they would
with an unpatched XZ Utils 5.2.2. This means that such binaries
won't run on other distributions shipping XZ Utils >= 5.2.0 as
they don't provide XZ_5.1.2alpha or XZ_5.2.2; they only provide
XZ_5.2 (and XZ_5.0). (This includes RHEL/CentOS 8 as the patch
luckily isn't included there anymore with XZ Utils 5.2.4.)

Binaries built by RHEL/CentOS 7 users get distributed and then
people wonder why they don't run on some other distribution.
Seems that people have found out about the patch and been copying
it to some build scripts, seemingly curing the symptoms but
actually spreading the illness further and outside RHEL/CentOS 7.

The ill patch seems to be from late 2016 (RHEL 7.3) and in 2017 it
had spread at least to EasyBuild. I heard about the events only
recently. :-(

This commit splits liblzma.map into two versions: one for
GNU/Linux and another for other OSes that can use symbol versioning
(FreeBSD, Solaris, maybe others). The Linux-specific file and the
matching additions to .c files add full compatibility with binaries
that have been built against a RHEL/CentOS-patched liblzma. Builds
for OSes other than GNU/Linux won't get the vaccine as they should
be immune to the problem (I really hope that no build script uses
the RHEL/CentOS 7 patch outside GNU/Linux).

The RHEL/CentOS compatibility symbols XZ_5.1.2alpha and XZ_5.2.2
are intentionally put *after* XZ_5.2 in liblzma_linux.map. This way
if one forgets to #define HAVE_SYMBOL_VERSIONS_LINUX when building,
the resulting liblzma.so.5 will have lzma_stream_encoder_mt@@XZ_5.2
since XZ_5.2 {...} is the first one that lists that function.
Without HAVE_SYMBOL_VERSIONS_LINUX @XZ_5.1.2alpha and @XZ_5.2.2
will be missing but that's still a minor problem compared to
only having lzma_stream_encoder_mt@@XZ_5.1.2alpha!

The ""local: *;"" line was moved to XZ_5.0 so that it doesn't need
to be moved around. It doesn't matter where it is put.

Having two similar liblzma_*.map files is a bit silly as it is,
at least for now, easily possible to generate the generic one
from the Linux-specific file. But that adds extra steps and
increases the risk of mistakes when supporting more than one
build system. So I rather maintain two files in parallel and let
validate_map.sh check that they are in sync when ""make mydist""
is run.

This adds .symver lines for lzma_stream_encoder_mt@XZ_5.2.2 and
lzma_stream_encoder_mt_memusage@XZ_5.2.2 even though these
weren't exported by RHEL/CentOS 7 (only @@XZ_5.1.2alpha was
for these two). I added these anyway because someone might
misunderstand the RHEL/CentOS 7 patch and think that @XZ_5.2.2
(@@XZ_5.2.2) versions were exported too.

At glance one could suggest using __typeof__ to copy the function
prototypes when making aliases. However, this doesn't work trivially
because __typeof__ won't copy attributes (lzma_nothrow, lzma_pure)
and it won't change symbol visibility from hidden to default (done
by LZMA_API()). Attributes could be copied with __copy__ attribute
but that needs GCC 9 and a fallback method would be needed anyway.

This uses __symver__ attribute with GCC >= 10 and
__asm__("".symver ..."") with everything else. The attribute method
is required for LTO (-flto) support with GCC. Using -flto with
GCC older than 10 is now broken on GNU/Linux and will not be fixed
(can silently result in a broken liblzma build that has dangerously
incorrect symbol versions). LTO builds with Clang seem to work
with the traditional __asm__("".symver ..."") method.

Thanks to Boud Roukema for reporting the problem and discussing
the details and testing the fix."
80a1a8bb838842a2be343bd88ad1462c21c5e2c9,Lasse Collin,Lasse Collin,2022-08-31 13:42:04,2022-08-31 13:42:04,"CMake: Add xz symlinks.

These are a minor thing especially since the xz build has
some real problems still like lack of large file support
on 32-bit systems but I'll commit this since the code exists.

Thanks to Jia Tan."
a4193bb6d85d7765b1b87faeab3e50106d3ab2e9,Lasse Collin,Lasse Collin,2022-08-31 13:29:38,2022-08-31 13:29:38,"CMake: Put xz man page install under if(UNIX) like is for xzdec.

Thanks to Jia Tan."
c1555b1a221a1427d4d650647531016d754bc4da,Lasse Collin,Lasse Collin,2022-08-22 15:16:40,2022-08-22 15:16:40,Bump version number for 5.3.3alpha.
44fedddc11c3f6ec2f7fe35a3e38f15ca93f90eb,Lasse Collin,Lasse Collin,2022-08-22 15:13:56,2022-08-22 15:13:56,Add NEWS for 5.3.3alpha.
a93e235d7ca764cc19f8f9f9063b40ff361c3cfa,Lasse Collin,Lasse Collin,2022-07-12 14:59:41,2022-08-22 15:06:38,"Translations: Add Portuguese translation.

Jia Tan made white-space changes and also changed ""Language: pt_BR\n""
to pt. The translator wasn't reached so I'm hoping these changes
are OK and will commit it without translator's approval.

Thanks to Pedro Albuquerque and Jia Tan."
e7cf5a946f25e40d77f45e41f0dee7d42a04e9ae,Lasse Collin,Lasse Collin,2022-07-10 18:16:40,2022-08-22 15:06:37,"Translations: Add Serbian translation.

Quite a few white-space changes were made by Jia Tan to make
this look good. Contacting the translator didn't succeed so
I'm committing this without getting translator's approval.

Thanks to Мирослав Николић (Miroslav Nikolic) and Jia Tan."
cc8617ab53b1f2a4da212fa76c92fe538269c5de,Lasse Collin,Lasse Collin,2022-07-04 20:51:36,2022-08-22 15:06:37,"Translations: Add Swedish translation.

Thanks to Sebastian Rasmussen and Jia Tan."
c613598c358b640682d0ca2aed38fa7df763e8c7,Lasse Collin,Lasse Collin,2022-07-04 20:40:27,2022-08-22 15:06:37,"Translations: Add Esperanto translation.

Thanks to Keith Bowes and Jia Tan."
659a587d678f21e98e91d2751c31d4ce050c081a,Lasse Collin,Lasse Collin,2022-06-30 21:22:33,2022-08-22 15:06:37,"Translations: Add Catalan translation.

Thanks to Jordi Mas and Jia Tan."
739fd8c9bdf1d85f57d56642aad87148d4779530,Lasse Collin,Lasse Collin,2022-06-30 14:47:08,2022-08-22 15:06:37,"Translations: Add Ukrainian translation.

Thanks to Yuri Chornoivan and Jia Tan."
73280550b111930c62a667e56add8fd574f80bc8,Lasse Collin,Lasse Collin,2022-06-30 14:45:26,2022-08-22 15:06:37,"Translators: Add Romanian translation.

Thanks to Remus-Gabriel Chelu and Jia Tan."
2465f5b825152714b2c357d96c2422c31109d320,Lasse Collin,Lasse Collin,2022-06-29 15:33:32,2022-08-22 15:06:37,"Translations: Update Brazilian Portuguese translation.

One msgstr was changed. The diff is long due to changes
in the source code line numbers in the comments.

Thanks to Rafael Fontenelle."
434e1ffd3e62719d509da10b646216f5ef53fe4d,Lasse Collin,Lasse Collin,2022-06-29 15:04:44,2022-08-22 15:06:37,"Translations: Add Croatian translation.

Thanks to Božidar Putanec and Jia Tan."
0732d0f7065c9bd48bfe4f5983144ae970c4a499,Lasse Collin,Lasse Collin,2022-06-29 14:58:48,2022-08-22 15:06:37,"Translations: Add Spanish translation.

Thanks to Cristian Othón Martínez Vera and Jia Tan."
9899b0f82bc130998d1f1f618a6ab805b73f2696,Lasse Collin,Lasse Collin,2022-06-29 14:49:43,2022-08-22 15:06:37,"Translations: Add Korean translation.

Thanks to Seong-ho Cho and Jia Tan."
65217eaf6bd195f3ef027d4ac55d57b7d133d69f,Lasse Collin,Lasse Collin,2020-03-16 19:57:21,2022-08-22 15:06:37,"Translations: Rebuild cs.po to avoid incorrect fuzzy strings.

""make dist"" updates the .po files and the fuzzy strings would
result in multiple very wrong translations."
e56ff423ee7af9e648e16b132f0d835d2cb4db26,Lasse Collin,Lasse Collin,2020-03-16 15:30:39,2022-08-22 15:06:37,"Translations: Add partial Danish translation.

I made a few minor white space changes without getting them
approved by the Danish translation team."
43e09c62e77cb8807d932c81de4decbdb956e184,Lasse Collin,Lasse Collin,2020-03-11 20:37:54,2022-08-22 15:06:37,"Translations: Add hu, zh_CN, and zh_TW.

I made a few white space changes to these without getting them
approved by the translation teams. (I tried to contact the hu and
zh_TW teams but didn't succeed. I didn't contact the zh_CN team.)"
982b6b198ae1ffe6093236dd8a3d03d1415b912b,Lasse Collin,Lasse Collin,2020-03-11 12:33:30,2022-08-22 15:06:37,"Translations: Update vi.po to match the file from the TP.

The translated strings haven't been updated but word wrapping
is different."
801f39691fc4abc6dd33d7653d498781b593f3eb,Lasse Collin,Lasse Collin,2020-03-11 12:18:03,2022-08-22 15:06:37,"Translations: Add fi and pt_BR, and update de, fr, it, and pl.

The German translation isn't identical to the file in
the Translation Project but the changes (white space changes
only) were approved by the translator Mario Blättermann."
311e4f85ede5d2f0bb71f3ad70b5b7db1b5adf33,Lasse Collin,Lasse Collin,2022-08-22 14:27:19,2022-08-22 15:01:21,xz: Try to clarify --memlimit-mt-decompress vs. --memlimit-compress.
df23c31000283c00e5ef1ca32a0bc3bb757bd707,Lasse Collin,Lasse Collin,2022-08-22 13:46:18,2022-08-22 13:46:18,"CMake: Add liblzma tests.

Thanks to Jia Tan for the patch."
02a777f9c422d3b5ec895078530bb1a2b6f7bdf5,Lasse Collin,Lasse Collin,2022-08-19 20:32:22,2022-08-19 20:40:00,"xz: Revise --info-memory output.

The strings could be more descriptive but it's good
to have some version of this committed now.

--robot mode wasn't changed yet."
f864f6d42eab57ea8ed82cc2dd19a03b51377442,Lasse Collin,Lasse Collin,2022-08-19 20:12:02,2022-08-19 20:15:56,"xz: Update the man page for threaded decompression and memlimits.

This documents the changes made in commits
6c6da57ae2aa962aabde6892442227063d87e88c,
cad299008cf73ec566f0662a9cf2b94f86a99659, and
898faa97287a756231c663a3ed5165672b417207.

The --info-memory bit hasn't been finished yet
even though it's already mentioned in this commit
under --memlimit-mt-decompress and --threads."
d13bfcc0056617dd648f655a01653932fad7067f,Lasse Collin,Lasse Collin,2022-08-18 14:49:16,2022-08-18 14:49:16,"Build: Include the CMake files in the distribution.

This was supposed to be done in 2020 with 5.2.5 release
already but it was noticed only today. 5.2.5 and 5.2.6
even mention experiemental CMake support in the NEWS entries.

Thanks to Olivier B. for reporting the problem."
e66787bcfefdb93f19c974f895f65969a77937b0,Lasse Collin,Lasse Collin,2022-08-18 14:38:05,2022-08-18 14:38:05,"Windows: Fix broken liblzma.dll build with Visual Studio project files.

The bug was introduced in 352ba2d69af2136bc814aa1df1a132559d445616
""Windows: Fix building of resource files when config.h isn't used.""

That commit fixed liblzma.dll build with CMake while keeping it
working with Autotools on Windows but the VS project files were
forgotten.

I haven't tested these changes.

Thanks to Olivier B. for reporting the bug and for the initial patch."
c4e8e5fb311225b8b48d34157891a640b2535e0c,Lasse Collin,Lasse Collin,2022-08-18 14:16:49,2022-08-18 14:16:49,"liblzma: Threaded decoder: Improve LZMA_FAIL_FAST when LZMA_FINISH is used.

It will now return LZMA_DATA_ERROR (not LZMA_OK or LZMA_BUF_ERROR)
if LZMA_FINISH is used and there isn't enough input to finish
decoding the Block Header or the Block. The use of LZMA_DATA_ERROR
is simpler and the less risky than LZMA_BUF_ERROR but this might
be changed before 5.4.0."
6dcf606e7efa2b259f0262f9e2f61e00116842d3,Lasse Collin,Lasse Collin,2022-08-12 15:31:47,2022-08-12 15:31:47,Add NEWS for 5.2.6.
413b86fcf8934fae5a004f378a9483d37d8fcaab,Lasse Collin,Lasse Collin,2022-08-12 11:28:41,2022-08-12 11:28:41,Add Jia Tan to AUTHORS.
352672732c346c546ff3c26d0605bc0ed1c8b7c7,Lasse Collin,Lasse Collin,2022-07-25 16:28:26,2022-07-25 16:28:26,"Build: Start the generated ChangeLog from around 5.2.0 instead of 5.0.0.

This makes ChangeLog smaller."
6f6d11225d6016be2bbb55d845b66f6b04d048df,Lasse Collin,Lasse Collin,2022-07-25 16:11:05,2022-07-25 16:11:05,"Translations: Change the copyright comment string to use with po4a.

This affects the second line in po4a/xz-man.pot. The man pages of
xzdiff, xzgrep, and xzmore are from GNU gzip and under GNU GPLv2+
while the rest of the man pages are in the public domain."
61f8ec804abdb4c5dac01e8ae9b90c7be58a5c24,Jia Tan,Lasse Collin,2022-07-25 15:30:05,2022-07-25 15:30:10,liblzma: Refactor lzma_mf_is_supported() to use a switch-statement.
4d80b463a1251aa22eabc87d2732fec13b1adda6,Jia Tan,Lasse Collin,2022-07-25 15:20:01,2022-07-25 15:20:01,"Build: Don't allow empty LIST in --enable-match-finders=LIST.

It's enforced only when a match finder is needed, that is,
when LZMA1 or LZMA2 encoder is enabled."
9cc721af5436908f2d5a828aebbc4050a32a3487,Lasse Collin,Lasse Collin,2022-07-24 10:27:48,2022-07-24 10:27:48,xz: Update the man page that change to --keep will be in 5.2.6.
b81bf0c7d1873e52a4086a9abb494471d652cb55,Lasse Collin,Lasse Collin,2022-07-19 20:23:54,2022-07-19 20:23:54,Update THANKS.
340cf1ec3927767046b8293a49da3db4e393f426,Nicholas Jackson,Lasse Collin,2022-07-18 00:39:23,2022-07-19 20:21:44,CMake: Add missing source file to liblzma build
d796b6d7fdb8b7238b277056cf9146cce25db604,Lasse Collin,Lasse Collin,2022-07-19 20:19:49,2022-07-19 20:19:49,xzgrep man page: Document exit statuses.
923bf96b55e5216a6c8df9d8331934f54784390e,Lasse Collin,Lasse Collin,2022-07-19 20:13:24,2022-07-19 20:13:24,"xzgrep: Improve error handling, especially signals.

xzgrep wouldn't exit on SIGPIPE or SIGQUIT when it clearly
should have. It's quite possible that it's not perfect still
but at least it's much better.

If multiple exit statuses compete, now it tries to pick
the largest of value.

Some comments were added.

The exit status handling of signals is still broken if the shell
uses values larger than 255 in $? to indicate that a process
died due to a signal ***and*** their ""exit"" command doesn't take
this into account. This seems to work well with the ksh and yash
versions I tried. However, there is a report in gzip/zgrep that
OpenSolaris 5.11 (not 5.10) has a problem with ""exit"" truncating
the argument to 8 bits:

    https://debbugs.gnu.org/cgi/bugreport.cgi?bug=22900#25

Such a bug would break xzgrep but I didn't add a workaround
at least for now. 5.11 is old and I don't know if the problem
exists in modern descendants, or if the problem exists in other
ksh implementations in use."
a648978b20495b7aa4a8b029c5a810b5ad9d08ff,Lasse Collin,Lasse Collin,2022-07-18 21:10:55,2022-07-18 21:10:55,"xzgrep: Make the fix for ZDI-CAN-16587 more robust.

I don't know if this can make a difference in the real world
but it looked kind of suspicious (what happens with sed
implementations that cannot process very long lines?).
At least this commit shouldn't make it worse."
bd7b290f3fe4faeceb7d3497ed9bf2e6ed5e7dc5,Lasse Collin,Lasse Collin,2022-07-18 18:52:31,2022-07-18 19:06:10,"xzgrep: Use grep -H --label when available (GNU, *BSDs).

It avoids the use of sed for prefixing filenames to output lines.
Using sed for that is slower and prone to security bugs so now
the sed method is only used as a fallback.

This also fixes an actual bug: When grepping a binary file,
GNU grep nowadays prints its diagnostics to stderr instead of
stdout and thus the sed-method for prefixing the filename doesn't
work. So with this commit grepping binary files gives reasonable
output with GNU grep now.

This was inspired by zgrep but the implementation is different."
b56729af9f1a596e57aeefd7570d8d7dce5c9f52,Lasse Collin,Lasse Collin,2022-07-18 18:10:25,2022-07-18 18:10:25,"xzgrep: Use -e to specify the pattern to grep.

Now we don't need the separate test for adding the -q option
as it can be added directly in the two places where it's needed."
bad61b5997e6647911974022bfb72f3d4818a594,Lasse Collin,Lasse Collin,2022-07-18 16:18:48,2022-07-18 16:18:48,"Scripts: Use printf instead of echo in a few places.

It's a good habbit as echo has some portability corner cases
when the string contents can be anything."
6a4a4a7d2667837dc824c26fcb19ed6ca5aff645,Lasse Collin,Lasse Collin,2022-07-17 18:36:25,2022-07-17 18:36:25,"xzgrep: Add more LC_ALL=C to avoid bugs with multibyte characters.

Also replace one use of expr with printf.

The rationale for LC_ALL=C was already mentioned in
69d1b3fc29677af8ade8dc15dba83f0589cb63d6 that fixed a security
issue. However, unrelated uses weren't changed in that commit yet.

POSIX says that with sed and such tools one should use LC_ALL=C
to ensure predictable behavior when strings contain byte sequences
that aren't valid multibyte characters in the current locale. See
under ""Application usage"" in here:

https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html

With GNU sed invalid multibyte strings would work without this;
it's documented in its Texinfo manual. Some other implementations
aren't so forgiving."
b48f9d615f2c2e8d2f6e253d0e48ee66d0652b68,Lasse Collin,Lasse Collin,2022-07-17 17:55:16,2022-07-17 17:57:06,"xzgrep: Fix parsing of certain options.

Fix handling of ""xzgrep -25 foo"" (in GNU grep ""grep -25 foo"" is
an alias for ""grep -C25 foo""). xzgrep would treat ""foo"" as filename
instead of as a pattern. This bug was fixed in zgrep in gzip in 2012.

Add -E, -F, -G, and -P to the ""no argument required"" list.

Add -X to ""argument required"" list. It is an
intentionally-undocumented GNU grep option so this isn't
an important option for xzgrep but it seems that other grep
implementations (well, those that I checked) don't support -X
so I hope this change is an improvement still.

grep -d (grep --directories=ACTION) requires an argument. In
contrast to zgrep, I kept -d in the ""no argument required"" list
because it's not supported in xzgrep (or zgrep). This way
""xzgrep -d"" gives an error about option being unsupported instead
of telling that it requires an argument. Both zgrep and xzgrep
tell that it's unsupported if an argument is specified.

Add comments."
2d2201bc6315deda4d43625aa510972467bd51d4,Lasse Collin,Lasse Collin,2022-07-14 17:33:05,2022-07-14 17:33:05,Tests: Add the .lzma files to test_files.sh.
ce5549a591bf126300618879f5b24023351baff6,Lasse Collin,Lasse Collin,2022-07-14 16:37:42,2022-07-14 16:37:42,Tests: Add .lzma test files.
107c93ee5cad51a6ea0cee471209bfe8d76deaa3,Lasse Collin,Lasse Collin,2022-07-14 15:12:38,2022-07-14 15:12:38,liblzma: Rename a variable and improve a comment.
511feb5eadb988d641b025d597f4fac7502003b8,Lasse Collin,Lasse Collin,2022-07-13 19:24:41,2022-07-13 19:24:41,Update THANKS.
9595a3119b9faf0ce01375329cad8bbf85c35ea2,Lasse Collin,Lasse Collin,2022-07-13 19:24:07,2022-07-13 19:24:07,"liblzma: Add optional autodetection of LZMA end marker.

Turns out that this is needed for .lzma files as the spec in
LZMA SDK says that end marker may be present even if the size
is stored in the header. Such files are rare but exist in the
real world. The code in liblzma is so old that the spec didn't
exist in LZMA SDK back then and I had understood that such
files weren't possible (the lzma tool in LZMA SDK didn't
create such files).

This modifies the internal API so that LZMA decoder can be told
if EOPM is allowed even when the uncompressed size is known.
It's allowed with .lzma and not with other uses.

Thanks to Karl Beldan for reporting the problem."
0c0f8e9761eb6eaf199082cf144db7ac5f9d8cb2,Lasse Collin,Lasse Collin,2022-07-12 15:53:04,2022-07-12 15:53:04,"xz: Document the special memlimit case of 2000 MiB on MIPS32.

See commit fc3d3a7296ef58bb799a73943636b8bfd95339f7."
d1bfa3dc703325ecd974167e864a8712fdfe936e,Jia Tan,Lasse Collin,2022-07-01 13:19:26,2022-07-10 19:42:22,"Created script to generate code coverage reports.

The script uses lcov and genhtml after running the tests
to show the code coverage statistics. The script will create
a coverage directory where it is run. It can be run both in
and out of the source directory."
86a30b0255d8064169fabfd213d907016d2f9f2a,Jia Tan,Lasse Collin,2022-06-16 14:32:19,2022-06-16 14:39:59,Tests: Add more tests into test_check.
82e30fed66a89706388a8c15dc954d84e63f38fa,Lasse Collin,Lasse Collin,2022-06-16 12:02:57,2022-06-16 12:02:57,"Tests: Use char[][24] array for enum_strings_lzma_ret.

Array of pointers to short strings is a bit pointless here
and now it's fully const."
5ba9459e6c4a29f6870ca78ce8ac6e519d59c41e,Lasse Collin,Lasse Collin,2022-06-16 11:12:14,2022-06-16 11:12:14,Tests: tuktest.h: Add tuktest_error_impl to help with error conditions.
b339892668da20aea22a93668c82b87a38e4a97f,Lasse Collin,Lasse Collin,2022-06-16 10:29:59,2022-06-16 10:29:59,Tests: tuktest.h: Rename file_from_* and use tuktest_malloc there.
d8b63a0ad68d1c461eb373466679ebc41fbc207d,Lasse Collin,Lasse Collin,2022-06-16 10:08:19,2022-06-16 10:08:19,Tests: tuktest.h: Add malloc wrapper with automatic freeing.
1d51536a4b19a8fae768f8eb462fc2238cb36d53,Lasse Collin,Lasse Collin,2022-06-16 08:47:37,2022-06-16 08:47:37,Tests: tuktest.h: Move a function.
70c7555f6403553ee35539e869de0025592d8564,Lasse Collin,Lasse Collin,2022-06-14 19:21:15,2022-06-14 19:21:15,"Tests: test_vli: Remove an invalid test-assertion.

lzma_vli is unsigned so trying a signed value results in
a compiler warning from -Wsign-conversion. (lzma_vli)-1
equals to LZMA_VLI_UNKNOWN anyway which is the next assertion."
154b73c5a1092c3f785e01666b564ad7ff1be555,Lasse Collin,Lasse Collin,2022-06-14 19:10:10,2022-06-14 19:17:01,Tests: test_vli: Add const where appropriate.
0354d6cce3ff98ea6f927107baf216253f6ce2bb,Jia Tan,Lasse Collin,2022-06-13 12:27:03,2022-06-14 19:03:55,Added vli tests to .gitignore
a08f5ccf6bdc20ef70e41f6f3321618ef146f96e,Jia Tan,Lasse Collin,2022-06-12 03:31:40,2022-06-14 19:00:34,"Created tests for all functions exported in vli.h

Achieved 100% code coverage vli_encoder.c, vli_decoder.c, and vli_size.c"
1e3eb61815a91c0a1bfbb802e2d95593f523491f,jiat75,Lasse Collin,2022-06-03 13:24:54,2022-06-14 18:47:09,Added parallel test artifacts to .gitignore
00e3613f1212eaa84e721585fdb4de6967cf2476,Lasse Collin,Lasse Collin,2022-06-14 18:29:21,2022-06-14 18:29:21,"Tests: Use good-1-empty-bcj-lzma2.xz in test_bcj_exact_size.

It's much nicer this way so that the test data isn't a hardcoded
table inside the C file."
86bab755be252bfd3e0a9aee8e7b83a9bbb23ed0,Lasse Collin,Lasse Collin,2022-06-14 18:26:13,2022-06-14 18:26:13,Tests: Add file reading helpers to tuktest.h.
83d2337b72dbf391c6f3b41889eea99e51679105,Lasse Collin,Lasse Collin,2022-06-14 15:21:57,2022-06-14 15:21:57,Tests: tuktest.h: Move a printf from a macro to a helper function.
f9e8176ea7d520797a2db2d49a5a632c285674a8,Lasse Collin,Lasse Collin,2022-06-14 14:20:49,2022-06-14 14:20:49,"Tests: Add test file good-1-empty-bcj-lzma2.xz.

This is from test_bcj_exact_size.c.
It's good to have it as a standalone file."
aa75c5563a760aea3aa23d997d519e702e82726b,Jia Tan,Lasse Collin,2022-06-10 13:35:18,2022-06-10 13:58:47,"Tests: Created tests for hardware functions.

Created tests for all API functions exported in
src/liblzma/api/lzma/hardware.h. The tests are fairly trivial
but are helpful because they will inform users if their machines
cannot support these functions. They also improve the code
coverage metrics."
5c8ffdca20813939818843476fb212dfae8838a3,Lasse Collin,Lasse Collin,2022-06-02 18:01:45,2022-06-02 18:06:58,"Tests: Convert test_check to tuktest.

Thanks to Jia Tan for help with all the tests."
faf5ff8899d539b4dcd2a7e5280cb820a4746c86,Lasse Collin,Lasse Collin,2022-06-02 17:31:03,2022-06-02 17:45:05,Tests: Convert test_block_header to tuktest.
754d39fbebee3782258d42f154a223d3c5770ec7,Lasse Collin,Lasse Collin,2022-06-02 17:28:23,2022-06-02 17:28:23,"Tests: Convert test_bcj_exact_size to tuktest.

The compress() and decompress() functions were merged because
the later depends on the former so they need to be a single
test case."
96da21470f9570cd08286906a050a7c22631775b,Lasse Collin,Lasse Collin,2022-06-02 17:27:00,2022-06-02 17:27:00,"Tests: Include tuktest.h in tests.h.

This breaks -Werror because none of the tests so far use
tuktest.h and thus there are warnings about unused variables
and functions."
df71ba1c991f60c3269aaadd398247e632714626,Lasse Collin,Lasse Collin,2022-06-02 17:25:21,2022-06-02 17:25:21,Tests: Add tuktest.h mini-test-framework.
4773608554d1b684a05ff9c1d879cf5c42266d33,Lasse Collin,Lasse Collin,2022-05-23 18:31:36,2022-05-23 18:31:36,"Build: Enable Automake's parallel test harness.

It has been the default for quite some time already and
the old serial harness isn't discouraged. The downside is
that with parallel tests one cannot print progress info or
other diagnostics to the terminal; all output from the tests
will be in the log files only. But now that the compression
tests are separated the parallel tests will speed things up."
9a6dd6d46f7f256a5573e5d874c1052033ed7b05,Lasse Collin,Lasse Collin,2022-05-23 18:17:47,2022-05-23 18:31:20,"Tests: Split test_compress.sh into separate test unit for each file.

test_compress.sh now takes one command line argument:
a filename to be tested. If it begins with ""compress_generated_""
the file will be created with create_compress_files.

This will allow parallel execution of the slow tests."
c7758ac9c734707514dd34f254173ebac5eea7f8,Lasse Collin,Lasse Collin,2022-05-23 17:32:49,2022-05-23 17:59:47,"Test: Make create_compress_files.c a little more flexible.

If a command line argument is given, then only the test file
of that type is created. It's quite dumb in sense that unknown
names don't give an error but it's good enough here.

Also use EXIT_FAILURE instead of 1 as exit status for errors."
4a8e4a7b0ad4b03c0ac6862716c3457452cdaf8c,Lasse Collin,Lasse Collin,2022-05-23 17:17:42,2022-05-23 17:17:42,Tests: Remove unneeded commented lines from test_compress.sh.
2ee50d150ee009f36135540b459e6ff328549725,Lasse Collin,Lasse Collin,2022-05-23 17:16:00,2022-05-23 17:16:00,"Tests: Remove progress indicator from test_compress.sh.

It will be useless with Automake's parallel tests."
2ce4f36f179a81d0c6e182a409f363df759d1ad0,Lasse Collin,Lasse Collin,2022-05-23 16:37:18,2022-05-23 16:37:18,"liblzma: Silence a warning.

The actual initialization is done via mythread_sync and seems
that GCC doesn't necessarily see that it gets initialized there."
5d8f3764ef43c35910e6d7003c0900a961ef6544,Lasse Collin,Lasse Collin,2022-04-14 17:53:16,2022-04-14 17:53:16,xz: Fix build with --disable-threads.
1d592897278b172d8549aa29c3a1f3a4f432a9b9,Lasse Collin,Lasse Collin,2022-04-14 11:50:17,2022-04-14 11:50:17,"xz: Change the cap of the default -T0 memlimit for 32-bit xz.

The SIZE_MAX / 3 was 1365 MiB. 1400 MiB gives little more room
and it looks like a round (artificial) number in --info-memory
once --info-memory is made to display it.

Also, using #if avoids useless code on 64-bit builds."
c77fe55ddb7752ed0fec46967c5ec9a72632ea0c,Lasse Collin,Lasse Collin,2022-04-14 11:20:46,2022-04-14 11:20:46,"xz: Add a default soft memory usage limit for --threads=0.

This is a soft limit in sense that it only affects the number of
threads. It never makes xz fail and it never makes xz change
settings that would affect the compressed output.

The idea is to make -T0 have more reasonable behavior when
the system has very many cores or when a memory-hungry
compression options are used. This also helps with 32-bit xz,
preventing it from running out of address space.

The downside of this commit is that now the number of threads
might become too low compared to what the user expected. I
hope this to be an acceptable compromise as the old behavior
has been a source of well-argued complaints for a long time."
0adc13bfe32c14f3e4c6ce9f2d4fdf4112ab53f4,Lasse Collin,Lasse Collin,2022-04-14 09:59:09,2022-04-14 10:00:40,"xz: Make -T0 use multithreaded mode on single-core systems.

The main problem withi the old behavior is that the compressed
output is different on single-core systems vs. multicore systems.
This commit fixes it by making -T0 one thread in multithreaded mode
on single-core systems.

The downside of this is that it uses more memory. However, if
--memlimit-compress is used, xz can (thanks to the previous commit)
drop to the single-threaded mode still."
898faa97287a756231c663a3ed5165672b417207,Lasse Collin,Lasse Collin,2022-04-14 09:38:00,2022-04-14 09:38:00,"xz: Changes to --memlimit-compress and --no-adjust.

In single-threaded mode, --memlimit-compress can make xz scale down
the LZMA2 dictionary size to meet the memory usage limit. This
obviously affects the compressed output. However, if xz was in
threaded mode, --memlimit-compress could make xz reduce the number
of threads but it wouldn't make xz switch from multithreaded mode
to single-threaded mode or scale down the LZMA2 dictionary size.
This seemed illogical and there was even a ""FIXME?"" about it.

Now --memlimit-compress can make xz switch to single-threaded
mode if one thread in multithreaded mode uses too much memory.
If memory usage is still too high, then the LZMA2 dictionary
size can be scaled down too.

The option --no-adjust was also changed so that it no longer
prevents xz from scaling down the number of threads as that
doesn't affect compressed output (only performance). After
this commit --no-adjust only prevents adjustments that affect
compressed output, that is, with --no-adjust xz won't switch
from multithreaded mode to single-threaded mode and won't
scale down the LZMA2 dictionary size.

The man page wasn't updated yet."
cad299008cf73ec566f0662a9cf2b94f86a99659,Lasse Collin,Lasse Collin,2022-04-11 19:20:49,2022-04-11 21:04:30,"xz: Add --memlimit-mt-decompress along with a default limit value.

--memlimit-mt-decompress allows specifying the limit for
multithreaded decompression. This matches memlimit_threading in
liblzma. This limit can only affect the number of threads being
used; it will never prevent xz from decompressing a file. The
old --memlimit-decompress option is still used at the same time.

If the value of --memlimit-decompress (the default value or
one specified by the user) is less than the value of
--memlimit-mt-decompress , then --memlimit-mt-decompress is
reduced to match --memlimit-decompress.

Man page wasn't updated yet."
fe87b4cd5364f5bbb6a75a0299f1500c852d7c9a,Lasse Collin,Lasse Collin,2022-04-06 20:11:59,2022-04-06 20:11:59,"liblzma: Threaded decoder: Improve setting of pending_error.

It doesn't need to be done conditionally. The comments try
to explain it."
90621da7f6e1bfd6d91d60415eae04b2bca274c2,Lasse Collin,Lasse Collin,2022-04-06 09:39:49,2022-04-06 10:16:00,"liblzma: Add a new flag LZMA_FAIL_FAST for threaded decoder.

In most cases if the input file is corrupt the application won't
care about the uncompressed content at all. With this new flag
the threaded decoder will return an error as soon as any thread
has detected an error; it won't wait to copy out the data before
the location of the error.

I don't plan to use this in xz to keep the behavior consistent
between single-threaded and multi-threaded modes."
64b6d496dc815a176d8307f418f6834a26783484,Lasse Collin,Lasse Collin,2022-04-05 09:24:57,2022-04-05 09:24:57,"liblzma: Threaded decoder: Always wait for output if LZMA_FINISH is used.

This makes the behavior consistent with the single-threaded
decoder when handling truncated .xz files.

Thanks to Jia Tan for finding this issue."
e671bc8828b9c0c5406c3a22c541301d0eb54518,Lasse Collin,Lasse Collin,2022-04-02 18:49:59,2022-04-02 18:49:59,"liblzma: Threaded decoder: Support zpipe.c-style decoding loop.

This makes it possible to call lzma_code() in a loop that only
reads new input when lzma_code() didn't fill the output buffer
completely. That isn't the calling style suggested by the
liblzma example program 02_decompress.c so perhaps the usefulness
of this feature is limited.

Also, it is possible to write such a loop so that it works
with the single-threaded decoder but not with the threaded
decoder even after this commit, or so that it works only if
lzma_mt.timeout = 0.

The zlib tutorial <https://zlib.net/zlib_how.html> is a well-known
example of a loop where more input is read only when output isn't
full. Porting this as is to liblzma would work with the
single-threaded decoder (if LZMA_CONCATENATED isn't used) but it
wouldn't work with threaded decoder even after this commit because
the loop assumes that no more output is possible when it cannot
read more input (""if (strm.avail_in == 0) break;""). This cannot
be fixed at liblzma side; the loop has to be modified at least
a little.

I'm adding this in any case because the actual code is simple
and short and should have no harmful side-effects in other
situations."
2ba8173e27be4793edb46497e499ac2ae753a316,Lasse Collin,Lasse Collin,2022-03-30 21:05:07,2022-03-30 21:05:07,Update THANKS.
69d1b3fc29677af8ade8dc15dba83f0589cb63d6,Lasse Collin,Lasse Collin,2022-03-29 16:19:12,2022-03-29 17:10:50,"xzgrep: Fix escaping of malicious filenames (ZDI-CAN-16587).

Malicious filenames can make xzgrep to write to arbitrary files
or (with a GNU sed extension) lead to arbitrary code execution.

xzgrep from XZ Utils versions up to and including 5.2.5 are
affected. 5.3.1alpha and 5.3.2alpha are affected as well.
This patch works for all of them.

This bug was inherited from gzip's zgrep. gzip 1.12 includes
a fix for zgrep.

The issue with the old sed script is that with multiple newlines,
the N-command will read the second line of input, then the
s-commands will be skipped because it's not the end of the
file yet, then a new sed cycle starts and the pattern space
is printed and emptied. So only the last line or two get escaped.

One way to fix this would be to read all lines into the pattern
space first. However, the included fix is even simpler: All lines
except the last line get a backslash appended at the end. To ensure
that shell command substitution doesn't eat a possible trailing
newline, a colon is appended to the filename before escaping.
The colon is later used to separate the filename from the grep
output so it is fine to add it here instead of a few lines later.

The old code also wasn't POSIX compliant as it used \n in the
replacement section of the s-command. Using \<newline> is the
POSIX compatible method.

LC_ALL=C was added to the two critical sed commands. POSIX sed
manual recommends it when using sed to manipulate pathnames
because in other locales invalid multibyte sequences might
cause issues with some sed implementations. In case of GNU sed,
these particular sed scripts wouldn't have such problems but some
other scripts could have, see:

    info '(sed)Locale Considerations'

This vulnerability was discovered by:
cleemy desu wayo working with Trend Micro Zero Day Initiative

Thanks to Jim Meyering and Paul Eggert discussing the different
ways to fix this and for coordinating the patch release schedule
with gzip."
bd93b776c1bd15e90661033c918cdeb354dbcc38,Lasse Collin,Lasse Collin,2022-03-25 23:02:44,2022-03-25 23:15:32,"liblzma: Fix a deadlock in threaded decoder.

If a worker thread has consumed all input so far and it's
waiting on thr->cond and then the main thread enables
partial update for that thread, the code used to deadlock.
This commit allows one dummy decoding pass to occur in this
situation which then also does the partial update.

As part of the fix, this moves thr->progress_* updates to
avoid the second thr->mutex locking.

Thanks to Jia Tan for finding, debugging, and reporting the bug."
e0394e94230f208682ac1e1f4c41f22f9ad79916,Lasse Collin,Lasse Collin,2022-03-23 14:34:00,2022-03-23 14:34:00,Update THANKS.
487c77d48760564b1949c5067630b675b87be4de,Lasse Collin,Lasse Collin,2022-03-23 14:28:55,2022-03-23 14:28:55,"liblzma: Threaded decoder: Don't stop threads on LZMA_TIMED_OUT.

LZMA_TIMED_OUT is not an error and thus stopping threads on
LZMA_TIMED_OUT breaks the decoder badly.

Thanks to Jia Tan for finding the bug and for the patch."
6c6da57ae2aa962aabde6892442227063d87e88c,Lasse Collin,Lasse Collin,2022-03-06 22:36:16,2022-03-06 22:36:16,"xz: Add initial support for threaded decompression.

If threading support is enabled at build time, this will
use lzma_stream_decoder_mt() even for single-threaded mode.
With memlimit_threading=0 the behavior should be identical.

This needs some work like adding --memlimit-threading=LIMIT.

The original patch from Sebastian Andrzej Siewior included
a method to get currently available RAM on Linux. It might
be one way to go but as it is Linux-only, the available-RAM
approach needs work for portability or using a fallback method
on other OSes.

The man page wasn't updated yet."
4cce3e27f529af33e0e7749a8cbcec59954946b5,Lasse Collin,Lasse Collin,2022-03-06 21:36:20,2022-03-06 22:35:53,"liblzma: Add threaded .xz decompressor.

I realize that this is about a decade late.

Big thanks to Sebastian Andrzej Siewior for the original patch.
I made a bunch of smaller changes but after a while quite a few
things got rewritten. So any bugs in the commit were created by me."
717631b9788dc9c100ee0c87d3c14a2782638ff4,Lasse Collin,Lasse Collin,2022-03-06 14:54:23,2022-03-06 14:54:23,"liblzma: Fix docs: lzma_block_decoder() cannot return LZMA_UNSUPPORTED_CHECK.

If Check is unsupported, it will be silently ignored.
It's the caller's job to handle it."
1a4bb97a00936535e30ac61945aeee38882b5d1a,Lasse Collin,Lasse Collin,2022-03-06 14:41:19,2022-03-06 14:41:19,"liblzma: Add new output queue (lzma_outq) features.

Add lzma_outq_clear_cache2() which may leave one buffer allocated
in the cache.

Add lzma_outq_outbuf_memusage() to get the memory needed for
a single lzma_outbuf. This is now used internally in outqueue.c too.

Track both the total amount of memory allocated and the amount of
memory that is in active use (not in cache).

In lzma_outbuf, allow storing the current input position that
matches the current output position. This way the main thread
can notice when no more output is possible without first providing
more input.

Allow specifying return code for lzma_outq_read() in a finished
lzma_outbuf."
ddbc6f58c2de388eed24cd7ea91b523d397da5f4,Lasse Collin,Lasse Collin,2022-03-06 13:18:58,2022-03-06 13:18:58,liblzma: Index hash: Change return value type of hash_append() to void.
20e7a33e2d59c6a814447d3991f21e2702174b20,Lasse Collin,Lasse Collin,2022-02-22 01:42:57,2022-02-22 01:42:57,"liblzma: Minor addition to lzma_vli_size() API doc.

Thanks to Jia Tan."
4f78f5fcf63592f2d77e921cfe0d5de300867374,Lasse Collin,Lasse Collin,2022-02-22 00:04:18,2022-02-22 00:04:18,"liblzma: Check the return value of lzma_index_append() in threaded encoder.

If lzma_index_append() failed (most likely memory allocation failure)
it could have gone unnoticed and the resulting .xz file would have
an incorrect Index. Decompressing such a file would produce the
correct uncompressed data but then an error would occur when
verifying the Index field."
5313ad66b40aab822ddca3e9905254cb99a4080d,Lasse Collin,Lasse Collin,2022-02-21 23:37:39,2022-02-21 23:37:39,Update THANKS.
865e0a3689a25a7ee8eecae1a34c1775e3aa676e,Ed Maste,Lasse Collin,2022-02-11 15:25:46,2022-02-21 23:23:34,liblzma: Use non-executable stack on FreeBSD as on Linux
1c9a5786d206b4abc8e427326651c8174baea753,Lasse Collin,Lasse Collin,2022-02-20 18:36:27,2022-02-20 18:36:27,"liblzma: Make Block decoder catch certain types of errors better.

Now it limits the input and output buffer sizes that are
passed to a raw decoder. This way there's no need to check
if the sizes can grow too big or overflow when updating
Compressed Size and Uncompressed Size counts. This also means
that a corrupt file cannot cause the raw decoder to process
useless extra input or output that would exceed the size info
in Block Header (and thus cause LZMA_DATA_ERROR anyway).

More importantly, now the size information is verified more
carefully in case raw decoder returns LZMA_OK. This doesn't
really matter with the current single-threaded .xz decoder
as the errors would be detected slightly later anyway. But
this helps avoiding corner cases in the upcoming threaded
decompressor, and it might help other Block decoder uses
outside liblzma too.

The test files bad-1-lzma2-{9,10,11}.xz test these conditions.
With the single-threaded .xz decoder the only difference is
that LZMA_DATA_ERROR is detected in a difference place now."
555de11873eb00c9b94a8be70645db502e5a9dbd,Lasse Collin,Lasse Collin,2022-02-20 17:38:55,2022-02-20 17:38:55,Tests: Add bad-1-lzma2-11.xz.
f0da507f22e7f4e3edb75b45b74d344244ca03fb,Lasse Collin,Lasse Collin,2022-02-18 16:51:10,2022-02-18 16:51:10,"Translations: Fix po4a failure with the French man page translations.

Thanks to Mario Blättermann for the patch."
f7711d228c3c32395460c82498c60a9f730d0239,Lasse Collin,Lasse Collin,2022-02-06 23:14:37,2022-02-06 23:30:06,"Translations: Add French translation of man pages.

This matches xz-utils 5.2.5-2 in Debian.

The translation was done by ""bubu"", proofread by the debian-l10n-french
mailing list contributors, and submitted to me on the xz-devel mailing
list by Jean-Pierre Giraud. Thanks to everyone!"
6468f7e41a8e9c611e4ba8d34e2175c5dacdbeb4,jiat75,Lasse Collin,2022-01-28 12:47:55,2022-02-06 22:20:01,"liblzma: Add NULL checks to LZMA and LZMA2 properties encoders.

Previously lzma_lzma_props_encode() and lzma_lzma2_props_encode()
assumed that the options pointers must be non-NULL because the
with these filters the API says it must never be NULL. It is
good to do these checks anyway."
2523c30705f49eabd27b854aa656ae87cc224808,Lasse Collin,Lasse Collin,2022-02-06 21:19:32,2022-02-06 21:19:32,"liblzma: Fix uint64_t vs. size_t confusion.

This broke 32-bit builds due to a pointer type mismatch.

This bug was introduced with the output-size-limited encoding
in 625f4c7c99b2fcc4db9e7ab2deb4884790e2e17c.

Thanks to huangqinjin for the bug report."
2bd36c91d03e03b31a4f12fd0afc100ae32d66e2,huangqinjin,Lasse Collin,2021-12-13 12:49:21,2022-02-06 20:49:39,CMake: Keep compatible with Windows 95 for 32-bit build.
2024fbf2794885277d05378d40b2b8015a7c3b40,Lasse Collin,Lasse Collin,2021-11-13 19:04:05,2021-11-13 19:04:05,xzgrep: Update man page timestamp.
400e7a239a53282cedaad927a41f3463d7f542e5,Lasse Collin,Lasse Collin,2021-11-13 16:23:24,2021-11-13 16:23:24,Update THANKS.
3a512c7787b2642ca946f4adc6e9a0a5d9b0d5a0,Ville Skyttä,Lasse Collin,2021-11-13 08:11:57,2021-11-13 16:17:33,"xzgrep: use `grep -E/-F` instead of `egrep` and `fgrep`

`egrep` and `fgrep` have been deprecated in GNU grep since 2007, and in
current post 3.7 Git they have been made to emit obsolescence warnings:
https://git.savannah.gnu.org/cgit/grep.git/commit/?id=a9515624709865d480e3142fd959bccd1c9372d1"
edf525e2b1840dcaf377df472c67d8f11f8ace1b,Lasse Collin,Lasse Collin,2021-10-28 20:02:11,2021-10-28 20:02:11,Bump the version number for 5.3.2alpha.
ea8c948655a86290524efe59cff067e06a886709,Lasse Collin,Lasse Collin,2021-10-28 19:59:52,2021-10-28 19:59:52,Add NEWS for 5.3.2alpha.
52435f302f4724157ec50b4210cbe42b285c3cbc,Lasse Collin,Lasse Collin,2021-10-27 20:27:48,2021-10-27 20:27:48,Update THANKS.
f2aea1d5a504b2021bf47a238390e4f12bdd518d,Lasse Collin,Lasse Collin,2021-10-27 20:23:11,2021-10-27 20:23:11,"xz: Change the coding style of the previous commit.

It isn't any better now but it's consistent with
the rest of the code base."
892b16cc282f5b4e1c49871b326f4db25c5b4d81,Alexander Bluhm,Lasse Collin,2021-10-05 21:33:16,2021-10-27 17:49:41,"xz: Avoid fchown(2) failure.

OpenBSD does not allow to change the group of a file if the user
does not belong to this group.  In contrast to Linux, OpenBSD also
fails if the new group is the same as the old one.  Do not call
fchown(2) in this case, it would change nothing anyway.

This fixes an issue with Perl Alien::Build module.
https://github.com/PerlAlien/Alien-Build/issues/62"
2b509c868cae3988bf21cd693fbf9021cdc85628,Lasse Collin,Lasse Collin,2021-09-17 14:31:11,2021-09-17 14:31:11,"liblzma: Fix liblzma.map for the lzma_microlzma_* symbols.

This should have been part of d267d109c370a40b502e73f8664b154b15e4f253.

Thanks to Gao Xiang."
cacb06a954b58255dfc084a0bc9708f43a0fd6d6,Lasse Collin,Lasse Collin,2021-09-09 19:21:07,2021-09-09 19:21:07,Update THANKS.
6928aac9da6ba612780b9f72ba1d6ecbe1e8b54e,Lasse Collin,Lasse Collin,2021-09-09 18:41:51,2021-09-09 18:41:51,"liblzma: Use _MSVC_LANG to detect when ""noexcept"" can be used with MSVC.

By default, MSVC always sets __cplusplus to 199711L. The real
C++ standard version is available in _MSVC_LANG (or one could
use /Zc:__cplusplus to set __cplusplus correctly).

Fixes <https://sourceforge.net/p/lzmautils/discussion/708858/thread/f6bc3b108a/>.

Thanks to Dan Weiss."
d267d109c370a40b502e73f8664b154b15e4f253,Lasse Collin,Lasse Collin,2021-09-05 17:38:12,2021-09-05 17:38:12,"liblzma: Rename EROFS LZMA to MicroLZMA.

It still exists primarily for EROFS but MicroLZMA is
a more generic name (that hopefully doesn't clash with
something that already exists)."
3247e95115acb95bc27f41e8cf4501db5b0b4309,Lasse Collin,Lasse Collin,2021-06-04 16:02:38,2021-06-04 16:02:38,"xzdiff: Update the man page about the exit status.

This was forgotten from 194029ffaf74282a81f0c299c07f73caca3232ca."
96f5a28a46fc93ac4e296808ac0f8631d05498bc,Lasse Collin,Lasse Collin,2021-06-04 15:52:48,2021-06-04 15:52:48,"xzless: Fix less(1) version detection when it contains a dot.

Sometimes the version number from ""less -V"" contains a dot,
sometimes not. xzless failed detect the version number when
it does contain a dot. This fixes it.

Thanks to nick87720z for reporting this. Apparently it had been
reported here <https://bugs.gentoo.org/489362> in 2013."
5fb5212d816addbc523d0798cb482fdd0484f8fa,Lasse Collin,Lasse Collin,2021-04-11 16:58:10,2021-04-11 16:58:10,Update THANKS.
fc3d3a7296ef58bb799a73943636b8bfd95339f7,Ivan A. Melnikov,Lasse Collin,2021-04-09 08:45:10,2021-04-11 16:50:41,"Reduce maximum possible memory limit on MIPS32

Due to architectural limitations, address space available to a single
userspace process on MIPS32 is limited to 2 GiB, not 4, even on systems
that have more physical RAM -- e.g. 64-bit systems with 32-bit
userspace, or systems that use XPA (an extension similar to x86's PAE).

So, for MIPS32, we have to impose stronger memory limits. I've chosen
2000MiB to give the process some headroom."
e7da44d5151e21f153925781ad29334ae0786101,Lasse Collin,Lasse Collin,2021-02-13 21:31:27,2021-02-13 21:31:27,"CMake: Use interface library for better FindLibLZMA compatibility.

https://www.mail-archive.com/xz-devel@tukaani.org/msg00446.html

Thanks to Markus Rickert."
a61dd82ada39030f41b4ffca9ea551714908bedc,Lasse Collin,Lasse Collin,2021-01-30 16:36:04,2021-01-30 16:36:04,"CMake: Try to improve compatibility with the FindLibLZMA module.

The naming conflict with FindLibLZMA module gets worse.
Not avoiding it in the first place was stupid.

Normally find_package(LibLZMA) will use the module and
find_package(liblzma 5.2.5 REQUIRED CONFIG) will use the config
file even with a case insensitive file system. However, if
CMAKE_FIND_PACKAGE_PREFER_CONFIG is TRUE and the file system
is case insensitive, find_package(LibLZMA) will find our liblzma
config file instead of using FindLibLZMA module.

One big problem with this is that FindLibLZMA uses
LibLZMA::LibLZMA and we use liblzma::liblzma as the target
name. With target names CMake happens to be case sensitive.
To workaround this, this commit adds

    add_library(LibLZMA::LibLZMA ALIAS liblzma::liblzma)

to the config file. Then both spellings work.

To make the behavior consistent between case sensitive and
insensitive file systems, the config and related files are
renamed from liblzmaConfig.cmake to liblzma-config.cmake style.
With this style CMake looks for lowercase version of the package
name so find_package(LiBLzmA 5.2.5 REQUIRED CONFIG) will work
to find our config file.

There are other differences between our config file and
FindLibLZMA so it's still possible that things break for
reasons other than the spelling of the target name. Hopefully
those situations aren't too common.

When the config file is available, it should always give as good or
better results as FindLibLZMA so this commit doesn't affect the
recommendation to use find_package(liblzma 5.2.5 REQUIRED CONFIG)
which explicitly avoids FindLibLZMA.

Thanks to Markus Rickert."
5b7bc1b8ae766a76710ca1b99f909cf52c697f05,Lasse Collin,Lasse Collin,2021-01-29 19:19:43,2021-01-29 19:19:43,Update THANKS.
6c6f0db340dcb8bb424411cedba713405d55f6b8,Lasse Collin,Lasse Collin,2021-01-29 19:19:08,2021-01-29 19:19:08,"liblzma: Fix unitialized variable.

This was introduced two weeks ago in the commit
625f4c7c99b2fcc4db9e7ab2deb4884790e2e17c.

Thanks to Nathan Moinvaziri."
bb1d5c1fdd30550d4221ecd336e0be1206132a5c,Lasse Collin,Lasse Collin,2021-01-24 20:32:41,2021-01-24 20:32:41,Tests: Add bad-1-lzma2-10.xz and also modify -9.xz.
6b8abc84a5469792e0355d0bfc0784d41cfdfef7,Lasse Collin,Lasse Collin,2021-01-24 17:22:35,2021-01-24 17:22:35,liblzma: Fix a wrong comment in stream_encoder_mt.c.
939fc5ed654aac25fe0c8684b2df8dbeadb2de1e,Lasse Collin,Lasse Collin,2021-01-24 16:51:51,2021-01-24 16:51:51,Tests: Add bad-1-lzma2-9.xz.
fdd30032f8531ac89519b48c21d810ecf06825f6,Lasse Collin,Lasse Collin,2021-01-24 15:02:00,2021-01-24 15:04:51,Tests: Add bad-1-check-crc32-2.xz.
db465419ae26ec7fb9b9472183911ff521620c77,Lasse Collin,Lasse Collin,2021-01-17 17:20:50,2021-01-17 17:20:50,"liblzma: In EROFS LZMA decoder, verify that comp_size matches at the end.

When the uncompressed size is known to be exact, after decompressing
the stream exactly comp_size bytes of input must have been consumed.
This is a minor improvement to error detection."
774cc0118ba2496581cb2621505a04bb6598cc75,Lasse Collin,Lasse Collin,2021-01-17 16:53:34,2021-01-17 16:53:34,"liblzma: Make EROFS LZMA decoder work when exact uncomp_size isn't known.

The caller must still not specify an uncompressed size bigger
than the actual uncompressed size.

As a downside, this now needs the exact compressed size."
421b0aa352da244075db10205cf33712f91b9835,Lasse Collin,Lasse Collin,2021-01-14 18:57:11,2021-01-14 18:57:11,"liblzma: Fix missing normalization in rc_encode_dummy().

Without this fix it could attempt to create too much output."
601ec0311e769fc704daaaa7dac0ca840aff080e,Lasse Collin,Lasse Collin,2021-01-14 18:07:01,2021-01-14 18:10:59,"liblzma: Add EROFS LZMA encoder and decoder.

Right now this is just a planned extra-compact format for use
in the EROFS file system in Linux. At this point it's possible
that the format will either change or be abandoned and removed
completely.

The special thing about the encoder is that it uses the
output-size-limited encoding added in the previous commit.
EROFS uses fixed-sized blocks (e.g. 4 KiB) to hold compressed
data so the compressors must be able to create valid streams
that fill the given block size."
625f4c7c99b2fcc4db9e7ab2deb4884790e2e17c,Lasse Collin,Lasse Collin,2021-01-13 17:16:32,2021-01-14 16:58:13,"liblzma: Add rough support for output-size-limited encoding in LZMA1.

With this it is possible to encode LZMA1 data without EOPM so that
the encoder will encode as much input as it can without exceeding
the specified output size limit. The resulting LZMA1 stream will
be a normal LZMA1 stream without EOPM. The actual uncompressed size
will be available to the caller via the uncomp_size pointer.

One missing thing is that the LZMA layer doesn't inform the LZ layer
when the encoding is finished and thus the LZ may read more input
when it won't be used. However, this doesn't matter if encoding is
done with a single call (which is the planned use case for now).
For proper multi-call encoding this should be improved.

This commit only adds the functionality for internal use.
Nothing uses it yet."
9cdabbeea891e8f1e7741b076f7db6ac05ae392a,Lasse Collin,Lasse Collin,2021-01-11 21:57:11,2021-01-11 21:57:11,Scripts: Add zstd support to xzdiff.
d9ec3add97cf4c999a7f594c6529680227b6c274,Lasse Collin,Lasse Collin,2021-01-11 21:41:30,2021-01-11 21:41:30,Update THANKS.
074259f4f3966aeac6edb205fecbc1a8d2b58bb2,Lasse Collin,Lasse Collin,2021-01-11 21:41:16,2021-01-11 21:41:16,"xz: Make --keep accept symlinks, hardlinks, and setuid/setgid/sticky.

Previously this required using --force but that has other
effects too which might be undesirable. Changing the behavior
of --keep has a small risk of breaking existing scripts but
since this is a fairly special corner case I expect the
likehood of breakage to be low enough.

I think the new behavior is more logical. The only reason for
the old behavior was to be consistent with gzip and bzip2.

Thanks to Vincent Lefevre and Sebastian Andrzej Siewior."
73c555b3077c19dda29b6f4592ced2af876f8333,Lasse Collin,Lasse Collin,2021-01-11 21:28:52,2021-01-11 21:28:52,"Scripts: Fix exit status of xzgrep.

Omit the -q option from xz, gzip, and bzip2. With xz this shouldn't
matter. With gzip it's important because -q makes gzip replace SIGPIPE
with exit status 2. With bzip2 it's important because with -q bzip2
is completely silent if input is corrupt while other decompressors
still give an error message.

Avoiding exit status 2 from gzip is important because bzip2 uses
exit status 2 to indicate corrupt input. Before this commit xzgrep
didn't recognize corrupt .bz2 files because xzgrep was treating
exit status 2 as SIGPIPE for gzip compatibility.

zstd still needs -q because otherwise it is noisy in normal
operation.

The code to detect real SIGPIPE didn't check if the exit status
was due to a signal (>= 128) and so could ignore some other exit
status too."
194029ffaf74282a81f0c299c07f73caca3232ca,Lasse Collin,Lasse Collin,2021-01-11 20:01:51,2021-01-11 20:58:58,"Scripts: Fix exit status of xzdiff/xzcmp.

This is a minor fix since this affects only the situation when
the files differ and the exit status is something else than 0.
In such case there could be SIGPIPE from a decompression tool
and that would result in exit status of 2 from xzdiff/xzcmp
while the correct behavior would be to return 1 or whatever
else diff or cmp may have returned.

This commit omits the -q option from xz/gzip/bzip2/lzop arguments.
I'm not sure why the -q was used in the first place, perhaps it
hides warnings in some situation that I cannot see at the moment.
Hopefully the removal won't introduce a new bug.

With gzip the -q option was harmful because it made gzip return 2
instead of >= 128 with SIGPIPE. Ignoring exit status 2 (warning
from gzip) isn't practical because bzip2 uses exit status 2 to
indicate corrupt input file. It's better if SIGPIPE results in
exit status >= 128.

With bzip2 the removal of -q seems to be good because with -q
it prints nothing if input is corrupt. The other tools aren't
silent in this situation even with -q. On the other hand, if
zstd support is added, it will need -q since otherwise it's
noisy in normal situations.

Thanks to Étienne Mollier and Sebastian Andrzej Siewior."
f7fa309e1f7178d04c7bedc03b73077639371e97,Lasse Collin,Lasse Collin,2021-01-09 19:14:36,2021-01-09 20:18:23,"liblzma: Make lzma_outq usable for threaded decompression too.

Before this commit all output queue buffers were allocated as
a single big allocation. Now each buffer is allocated separately
when needed. Used buffers are cached to avoid reallocation
overhead but the cache will keep only one buffer size at a time.
This should make things work OK in the decompression where most
of the time the buffer sizes will be the same but with some less
common files the buffer sizes may vary.

While this should work fine, it's still a bit preliminary
and may even get reverted if it turns out to be useless for
decompression."
a35a69d693ce37d4ba7c1855bda7d9cfa13d1778,Lasse Collin,Lasse Collin,2020-12-23 15:15:49,2020-12-23 15:15:49,Update THANKS.
4fd79b90c52396d70e0b1206ceb1a873a0ad2589,H.J. Lu,Lasse Collin,2020-12-23 14:49:04,2020-12-23 15:13:33,"liblzma: Enable Intel CET in x86 CRC assembly codes

When Intel CET is enabled, we need to include <cet.h> in assembly codes
to mark Intel CET support and add _CET_ENDBR to indirect jump targets.

Tested on Intel Tiger Lake under CET enabled Linux."
bb3b8c6a23e25db79f862b1de325c56052e0354b,Lasse Collin,Lasse Collin,2020-12-16 16:33:29,2020-12-16 16:33:29,Update THANKS.
21588ca34af98738954fc12ded1b89d7294ef646,Lasse Collin,Lasse Collin,2020-12-16 16:30:14,2020-12-16 16:30:14,"Build: Don't build bundles on Apple OSes.

Thanks to Daniel Packard."
d05b0c42dd8b38d8c6b8193c8af50e9bd3d16f28,Lasse Collin,Lasse Collin,2020-12-05 20:44:03,2020-12-05 20:44:03,Update THANKS.
1890351f3423627ba5c4c495402f32d7e9ed90b7,Adam Borowski,Lasse Collin,2020-09-25 01:35:18,2020-12-05 20:39:03,"Scripts: Add zstd support to xzgrep.

Thanks to Adam Borowski."
2f108abb3d82e4e2313b438dae9c0c7c7a6366f2,Lasse Collin,Lasse Collin,2020-11-17 18:51:48,2020-11-17 19:09:39,"CMake: Fix compatibility with CMake 3.13.

The syntax ""if(DEFINED CACHE{FOO})"" requires CMake 3.14.
In some other places the code treats the cache variables
like normal variables already (${FOO} or if(FOO) is used,
not ${CACHE{FOO}).

Thanks to ygrek for reporting the bug on IRC."
5af726a79273fafa5de5745b117e567f21c90e49,Lasse Collin,Lasse Collin,2020-11-01 20:56:43,2020-11-01 20:56:43,Update THANKS.
4575d9d365c756ec189899f9f743e0b3515ce72d,Lasse Collin,Lasse Collin,2020-11-01 20:34:25,2020-11-01 20:34:25,"xz: Avoid unneeded \f escapes on the man page.

I don't want to use \c in macro arguments but groff_man(7)
suggests that \f has better portability. \f would be needed
for the .TP strings for portability reasons anyway.

Thanks to Bjarni Ingi Gislason."
620b32f5339f86710cb4435e01ecdac972ccac73,Lasse Collin,Lasse Collin,2020-11-01 17:09:53,2020-11-01 17:09:53,"xz: Use non-breaking spaces when intentionally using more than one space.

This silences some style checker warnings. Seems that spaces
in the beginning of a line don't need this treatment.

Thanks to Bjarni Ingi Gislason."
cb1f34988c8a4130485091b2f8b641303d8f701b,Lasse Collin,Lasse Collin,2020-11-01 16:49:37,2020-11-01 16:53:25,"xz: Protect the ellipsis (...) on the man page with \&.

This does it only when ... appears outside macro calls.

Thanks to Bjarni Ingi Gislason."
5d224da3da87400f2fab313abbd7c710e7169ef9,Lasse Collin,Lasse Collin,2020-11-01 16:41:21,2020-11-01 16:44:51,"xz: Avoid the abbreviation ""e.g."" on the man page.

A few are simply omitted, most are converted to ""for example""
and surrounded with commas. Sounds like that this is better
style, for example, man-pages(7) recommends avoiding such
abbreviations except in parenthesis.

Thanks to Bjarni Ingi Gislason."
90457dbe3e5717660f5b81f8c604860fc5137c0c,Lasse Collin,Lasse Collin,2020-07-12 20:10:03,2020-07-12 20:10:03,"xz man page: Change \- (minus) to \(en (en-dash) for a numeric range.

Docs of ancient troff/nroff mention \(em (em-dash) but not \(en
and \- was used for both minus and en-dash. I don't know how
portable \(en is nowadays but it can be changed back if someone
complains. At least GNU groff and OpenBSD's mandoc support it.

Thanks to Bjarni Ingi Gislason for the patch."
352ba2d69af2136bc814aa1df1a132559d445616,Lasse Collin,Lasse Collin,2020-07-12 17:46:24,2020-07-12 17:46:24,"Windows: Fix building of resource files when config.h isn't used.

Now CMake + Visual Studio works for building liblzma.dll.

Thanks to Markus Rickert."
a9e2a87f1d61dcf684d809bf08c8ebea93f8a480,Lasse Collin,Lasse Collin,2020-04-06 16:31:50,2020-04-06 16:34:48,"src/scripts/xzgrep.1: Filenames to xzgrep are optional.

xzgrep --help was correct already."
a7ba275d9b855d186abb29eb7a4f4cb6d9ca6fe0,Bjarni Ingi Gislason,Lasse Collin,2020-03-26 22:17:31,2020-04-06 16:29:15,"src/script/xzgrep.1: Remove superfluous '.RB'

Output is from: test-groff -b -e -mandoc -T utf8 -rF0 -t -w w -z

  [ ""test-groff"" is a developmental version of ""groff"" ]

Input file is ./src/scripts/xzgrep.1

<src/scripts/xzgrep.1>:20 (macro RB): only 1 argument, but more are expected
<src/scripts/xzgrep.1>:23 (macro RB): only 1 argument, but more are expected
<src/scripts/xzgrep.1>:26 (macro RB): only 1 argument, but more are expected
<src/scripts/xzgrep.1>:29 (macro RB): only 1 argument, but more are expected
<src/scripts/xzgrep.1>:32 (macro RB): only 1 argument, but more are expected

 ""abc..."" does not mean the same as ""abc ..."".

  The output from nroff and troff is unchanged except for the space
between ""file"" and ""..."".

Signed-off-by: Bjarni Ingi Gislason <bjarniig@rhi.hi.is>"
133d498db0f4b14f066d192d64dbcade45deae6b,Bjarni Ingi Gislason,Lasse Collin,2020-03-30 21:56:36,2020-04-06 16:08:14,"xzgrep.1: Delete superfluous '.PP'

Summary:

mandoc -T lint xzgrep.1 :
mandoc: xzgrep.1:79:2: WARNING: skipping paragraph macro: PP empty

  There is no change in the output of ""nroff"" and ""troff"".

Signed-off-by: Bjarni Ingi Gislason <bjarniig@rhi.hi.is>"
057839ca982f886387b66746bffe749cb14fd8cd,Bjarni Ingi Gislason,Lasse Collin,2020-03-26 21:16:18,2020-04-06 16:08:04,"src/xz/xz.1: Correct misused two-fonts macros

Output is from: test-groff -b -e -mandoc -T utf8 -rF0 -t -w w -z

  [ ""test-groff"" is a developmental version of ""groff"" ]

Input file is ./src/xz/xz.1

<src/xz/xz.1>:408 (macro BR): only 1 argument, but more are expected
<src/xz/xz.1>:1009 (macro BR): only 1 argument, but more are expected
<src/xz/xz.1>:1743 (macro BR): only 1 argument, but more are expected
<src/xz/xz.1>:1920 (macro BR): only 1 argument, but more are expected
<src/xz/xz.1>:2213 (macro BR): only 1 argument, but more are expected

  Output from nroff and troff is unchanged, except for a font change of a
full stop (.).

Signed-off-by: Bjarni Ingi Gislason <bjarniig@rhi.hi.is>"
b8e12f5ab4c9fd3cb09a4330b2861f6b979ababd,Lasse Collin,Lasse Collin,2020-03-23 16:07:50,2020-03-23 16:07:50,"Typo fixes from fossies.org.

https://fossies.org/linux/misc/xz-5.2.5.tar.xz/codespell.html"
869b9d1b4edd6df07f819d360d306251f8147353,Lasse Collin,Lasse Collin,2020-03-17 14:24:28,2020-03-17 14:24:28,Update NEWS for 5.2.5.
a048e3a92d238c65f050a765174d9c75417231d4,Lasse Collin,Lasse Collin,2020-03-16 18:01:37,2020-03-16 18:01:37,README: Update outdated sections.
29aed815ad4f98f3e4d355faa76a244ecd8ce716,Lasse Collin,Lasse Collin,2020-03-16 17:39:45,2020-03-16 17:39:45,README: Mention that man pages can be translated.
7fa7653940cc9dcfcbce2fbc5166ea343ad4e3c1,Lasse Collin,Lasse Collin,2020-03-16 14:43:29,2020-03-16 14:43:29,Update INSTALL.generic from Automake 1.16.1.
9bd317ef03ab9b3e6a927c27c2e9c4ac041182f0,Lasse Collin,Lasse Collin,2020-03-15 13:27:22,2020-03-15 13:27:22,Update INSTALL for Windows and DOS and add preliminary info for z/OS.
a3148c0446dc7fa96363752df414d22539c9007b,Lasse Collin,Lasse Collin,2020-03-15 13:26:20,2020-03-15 13:26:20,Build: Update m4/ax_pthread.m4 from Autoconf Archive (again).
7812002dd3ed319e42a14662a8531802cca8ca67,Lasse Collin,Lasse Collin,2020-03-11 19:15:35,2020-03-11 19:15:35,"xz: Never use thousand separators in DJGPP builds.

DJGPP 2.05 added support for thousands separators but it's
broken at least under WinXP with Finnish locale that uses
a non-breaking space as the thousands separator. Workaround
by disabling thousands separators for DJGPP builds."
7c8f688bf7fccd65d396e0130cbf4ea5dff5c56f,Lasse Collin,Lasse Collin,2020-03-11 17:38:08,2020-03-11 17:38:08,"DOS: Update dos/Makefile for DJGPP 2.05.

It doesn't need -fgnu89-inline like 2.04beta did."
319ca928d73de87940c54e30bffe69f9fa65efdf,Lasse Collin,Lasse Collin,2020-03-11 17:36:07,2020-03-11 17:36:07,DOS: Update instructions in dos/INSTALL.txt.
cb6b227ce39932824812ccd8a0647bd968de27d2,Lasse Collin,Lasse Collin,2020-03-11 15:58:51,2020-03-11 15:58:51,"DOS: Update config.h.

The added defines assume GCC >= 4.8."
4572d53e16e87eee375bc5624de2fd59bb0ae9cd,Lasse Collin,Lasse Collin,2020-03-02 11:54:33,2020-03-02 11:54:33,"liblzma: Fix a comment and RC_SYMBOLS_MAX.

The comment didn't match the value of RC_SYMBOLS_MAX and the value
itself was slightly larger than actually needed. The only harm
about this was that memory usage was a few bytes larger."
265daa873c0d871f5f23f9b56e133a6f20045a0a,Lasse Collin,Lasse Collin,2020-02-27 18:58:52,2020-02-27 18:58:52,Build: Make CMake build fail if tuklib_cpucores or tuklib_physmem fails.
7c8b904527cdbe61248c80edcc2e20d840c4fef9,Lasse Collin,Lasse Collin,2020-02-27 18:24:27,2020-02-27 18:24:27,"Build: Add support for --no-po4a option to autogen.sh.

Normally, if po4a isn't available, autogen.sh will return
with non-zero exit status. The option --no-po4a can be useful
when one knows that po4a isn't available but wants autogen.sh
to still return with zero exit status."
292a5c0f9c9b3a66f5a5c652dc46381836d4537f,Lasse Collin,Lasse Collin,2020-02-25 19:35:14,2020-02-25 19:35:14,Update THANKS.
474320e9908786ba2021035f9013191e16cde08a,Lasse Collin,Lasse Collin,2020-02-25 18:42:31,2020-02-25 18:44:10,"Build: Fix bugs in the CMake files.

Seems that the phrase ""add more quotes"" from sh/bash scripting
applies to CMake as well. E.g. passing an unquoted list ${FOO}
to a function that expects one argument results in only the
first element of the list being passed as an argument and
the rest get ignored. Adding quotes helps (""${FOO}"").

list(INSERT ...) is weird. Inserting an empty string to an empty
variable results in empty list, but inserting it to a non-empty
variable does insert an empty element to the list.

Since INSERT requires at least one element,
""${CMAKE_THREAD_LIBS_INIT}"" needs to be quoted in CMakeLists.txt.
It might result in an empty element in the list. It seems to not
matter as empty elements consistently get ignored in that variable.
In fact, calling cmake_check_push_state() and cmake_check_pop_state()
will strip the empty elements from CMAKE_REQUIRED_LIBRARIES!

In addition to quoting fixes, this fixes checks for the cache
variables in tuklib_cpucores.cmake and tuklib_physmem.cmake.

Thanks to Martin Matuška for testing and reporting the problems.
These fixes aren't tested yet but hopefully they soon will be."
7e3493d40eac0c3fa3d5124097745a70e15c41f6,Lasse Collin,Lasse Collin,2020-02-24 21:38:16,2020-02-24 22:00:32,"Build: Add very limited experimental CMake support.

This does *NOT* replace the Autotools-based build system in
the foreseeable future. See the comment in the beginning
of CMakeLists.txt.

So far this has been tested only on GNU/Linux but I commit
it anyway to make it easier for others to test. Since I
haven't played much with CMake before, it's likely that
there are things that have been done in a silly or wrong
way and need to be fixed."
21bd4701fca3e9002ce78bc135debca369ed8545,Lasse Collin,Lasse Collin,2020-02-24 21:37:07,2020-02-24 21:37:07,Update m4/.gitignore.
e094d1d0f196a91ec703e8d0055948feef349ae8,Lasse Collin,Lasse Collin,2020-02-24 21:29:35,2020-02-24 21:34:58,"tuklib: Omit an unneeded <sys/types.h> from a tests.

tuklib_cpucores.c and tuklib_physmem.c don't include <sys/types.h>
even via other files in this package, so clearly that header isn't
needed in the tests either (no one has reported build problems due
to a missing header in a .c file)."
b3ed19a55fe99a45bd77614e149d39d18498075c,Lasse Collin,Lasse Collin,2020-02-24 21:01:00,2020-02-24 21:23:18,"liblzma: Remove unneeded <sys/types.h> from fastpos_tablegen.c.

This file only generates fastpos_table.c.
It isn't built as a part of liblzma."
7b8982b29179b3c586e0456dc9ecbd4f58dcea59,Lasse Collin,Lasse Collin,2020-02-22 12:15:07,2020-02-22 12:15:07,"Use defined(__GNUC__) before __GNUC__ in preprocessor lines.

This should silence the equivalent of -Wundef in compilers that
don't define __GNUC__."
43dfe04e6209c691cf4fbe3072d4ee91271748f1,Lasse Collin,Lasse Collin,2020-02-21 15:40:02,2020-02-21 15:40:02,"liblzma: Add more uses of lzma_memcmplen() to the normal mode of LZMA.

This gives a tiny encoder speed improvement. This could have been done
in 2014 after the commit 544aaa3d13554e8640f9caf7db717a96360ec0f6 but
it was forgotten."
59e6eb4840b9f52fa3a61544974017279b448216,Lasse Collin,Lasse Collin,2020-02-21 15:01:15,2020-02-21 15:01:15,"Build: Add visibility.m4 from gnulib.

Appears that this file used to get included as a side effect of
gettext. After the change to gettext version requirements this file
no longer got copied to the package and so the build was broken."
7fe3ef2eaa53d439cec043727ea1998f4ff0e22a,Lasse Collin,Lasse Collin,2020-02-21 14:10:44,2020-02-21 14:10:44,"xz: Silence a warning when sig_atomic_t is long int.

It can be true at least on z/OS."
b0a2a77d10940c42b449d47a005bfc2e50ab5db8,Lasse Collin,Lasse Collin,2020-02-21 13:59:26,2020-02-21 13:59:26,xz: Avoid unneeded access of a volatile variable.
524c2f12c762032b819757aeda8af7c47c4cabce,Lasse Collin,Lasse Collin,2020-02-20 23:24:18,2020-02-20 23:24:18,"tuklib_integer.m4: Optimize the check order.

The __builtin byteswapping is the preferred one so check for it first."
57360bb4fd79b358b36d2877db26ac828d1fdfcb,Lasse Collin,Lasse Collin,2020-02-20 16:54:04,2020-02-20 16:54:04,"tuklib_exit: Add missing header.

strerror() needs <string.h> which happened to be included via
tuklib_common.h -> tuklib_config.h -> sysdefs.h if HAVE_CONFIG_H
was defined. This wasn't tested without config.h before so it
had worked fine."
fddd31175e74a538997a939d930462fde17d2dd4,Lasse Collin,Lasse Collin,2020-02-18 17:12:35,2020-02-18 17:12:35,"Revert the previous commit and add a comment.

The previous commit broke crc32_tablegen.c.

If the whole package is built without config.h (with defines
set on the compiler command line) this should still work fine
as long as these headers conform to C99 well enough."
4e4e9fbb7e66d45319525ac224bff48fbdd0cf6e,Lasse Collin,Lasse Collin,2020-02-17 21:37:20,2020-02-17 21:37:20,"Do not check for HAVE_CONFIG_H in tuklib_config.h.

In XZ Utils sysdefs.h takes care of it and the required headers."
2d4cef954feba82073951358466a1d614141cf33,Lasse Collin,Lasse Collin,2020-02-16 09:18:28,2020-02-16 10:24:13,"sysdefs.h: Omit the conditionals around string.h and limits.h.

string.h is used unconditionally elsewhere in the project and
configure has always stopped if limits.h is missing, so these
headers must have been always available even on the weirdest
systems."
feb9c1969bc3eb33d4ecb72cfa897f92dae84939,Lasse Collin,Lasse Collin,2020-02-15 13:07:11,2020-02-15 13:07:11,"Build: Bump Autoconf and Libtool version requirements.

There is no specific reason for this other than blocking
the most ancient versions. These are still old:

Autoconf 2.69 (2012)
Automake 1.12 (2012)
gettext 0.19.6 (2015)
Libtool 2.4 (2010)"
3d576cf92158d62790017ad7f2dd6dc1dd6b42bb,Lasse Collin,Lasse Collin,2020-02-15 01:08:32,2020-02-15 13:05:35,"Build: Use AM_GNU_GETTEXT_REQUIRE_VERSION and require 0.19.6.

This bumps the version requirement from 0.19 (from 2014) to
0.19.6 (2015).

Using only the old AM_GNU_GETTEXT_VERSION results in old
gettext infrastructure being placed in the package. By using
both macros we get the latest gettext files while the other
programs in the Autotools family can still see the old macro."
fa792b8befaf7cb3960b655e0a9410da866d756f,Lasse Collin,Lasse Collin,2020-02-14 18:42:06,2020-02-14 19:26:05,"Translations: Add German translation of the man pages.

Thanks to Mario Blättermann."
6f7211b6bb47a895b47f533282dba9ee9a1b0c8b,Lasse Collin,Lasse Collin,2020-02-07 13:32:21,2020-02-07 13:32:21,"Build: Add support for translated man pages using po4a.

The dependency on po4a is optional. It's never required to install
the translated man pages when xz is built from a release tarball.
If po4a is missing when building from xz.git, the translated man
pages won't be generated but otherwise the build will work normally.

The translations are only updated automatically by autogen.sh and
by ""make mydist"". This makes it easy to keep po4a as an optional
dependency and ensures that I won't forget to put updated
translations to a release tarball.

The translated man pages aren't installed if --disable-nls is used.

The installation of translated man pages abuses Automake internals
by calling ""install-man"" with redefined dist_man_MANS and man_MANS.
This makes the hairy script code slightly less hairy. If it breaks
some day, this code needs to be fixed; don't blame Automake developers.

Also, this adds more quotes to the existing shell script code in
the Makefile.am ""-hook""s."
426f9e5819ff7710a5ff573a96c02940be65d52f,Lasse Collin,Lasse Collin,2020-02-06 15:31:38,2020-02-06 15:31:38,Update THANKS.
e3a4481d020e4de89efa037f335cf50f3ca55592,Lasse Collin,Lasse Collin,2020-02-05 20:35:06,2020-02-05 20:35:06,Update tests/.gitignore.
07208de92f2d5bca764f6d0ebe9d9866051dc4ef,Lasse Collin,Lasse Collin,2020-02-05 20:28:51,2020-02-05 20:28:51,Update m4/.gitignore.
c91fbf223db46c3b3cb9df769863a1a60cd9c908,Lasse Collin,Lasse Collin,2020-02-05 18:47:38,2020-02-05 18:47:38,Update THANKS.
15a133b6d1a3eab4faf6eb52a71fdc56bd65846f,Lasse Collin,Lasse Collin,2020-02-05 18:40:14,2020-02-05 18:40:14,"xz: Make it a fatal error if enabling the sandbox fails.

Perhaps it's too drastic but on the other hand it will let me
learn about possible problems if people report the errors.
This won't be backported to the v5.2 branch."
af0fb386ef55db66654ae39e2deec6e04190c4ff,Lasse Collin,Lasse Collin,2020-02-05 18:33:50,2020-02-05 18:33:50,xz: Comment out annoying sandboxing messages.
986d8c9b52b824474088e5bb3b6940651660f0e2,Lasse Collin,Lasse Collin,2020-02-05 17:33:37,2020-02-05 17:33:37,"Build: Workaround a POSIX shell detection problem on Solaris.

I don't know if the problem is in gnulib's gl_POSIX_SHELL macro
or if xzgrep does something that isn't in POSIX. The workaround
adds a special case for Solaris: if /usr/xpg4/bin/sh exists and
gl_cv_posix_shell wasn't overriden on the configure command line,
use that shell for xzgrep and other scripts. That shell is known
to work and exists on most Solaris systems."
6629ed929cc7d45a11e385f357ab58ec15e7e4ad,Lasse Collin,Lasse Collin,2020-02-03 20:03:50,2020-02-03 20:03:50,Build: Update m4/ax_pthread.m4 from Autoconf Archive.
353970510895f6a80adfe60cf71b70a95adfa8bc,Lasse Collin,Lasse Collin,2020-02-01 17:56:18,2020-02-01 17:56:18,"xz: Limit --memlimit-compress to at most 4020 MiB for 32-bit xz.

See the code comment for reasoning. It's far from perfect but
hopefully good enough for certain cases while hopefully doing
nothing bad in other situations.

At presets -5 ... -9, 4020 MiB vs. 4096 MiB makes no difference
on how xz scales down the number of threads.

The limit has to be a few MiB below 4096 MiB because otherwise
things like ""xz --lzma2=dict=500MiB"" won't scale down the dict
size enough and xz cannot allocate enough memory. With
""ulimit -v $((4096 * 1024))"" on x86-64, the limit in xz had
to be no more than 4085 MiB. Some safety margin is good though.

This is hack but it should be useful when running 32-bit xz on
a 64-bit kernel that gives full 4 GiB address space to xz.
Hopefully this is enough to solve this:

https://bugzilla.redhat.com/show_bug.cgi?id=1196786

FreeBSD has a patch that limits the result in tuklib_physmem()
to SIZE_MAX on 32-bit systems. While I think it's not the way
to do it, the results on --memlimit-compress have been good. This
commit should achieve practically identical results for compression
while leaving decompression and tuklib_physmem() and thus
lzma_physmem() unaffected."
ba76d67585f88677af9f48b48e7bdc3bb7687def,Lasse Collin,Lasse Collin,2020-01-26 18:53:25,2020-01-26 18:53:25,"xz: Set the --flush-timeout deadline when the first input byte arrives.

xz --flush-timeout=2000, old version:

  1. xz is started. The next flush will happen after two seconds.
  2. No input for one second.
  3. A burst of a few kilobytes of input.
  4. No input for one second.
  5. Two seconds have passed and flushing starts.

The first second counted towards the flush-timeout even though
there was no pending data. This can cause flushing to occur more
often than needed.

xz --flush-timeout=2000, after this commit:

  1. xz is started.
  2. No input for one second.
  3. A burst of a few kilobytes of input. The next flush will
     happen after two seconds counted from the time when the
     first bytes of the burst were read.
  4. No input for one second.
  5. No input for another second.
  6. Two seconds have passed and flushing starts."
fd47fd62bbb1bfd13ab63869137971d8b390025f,Lasse Collin,Lasse Collin,2020-01-26 18:19:19,2020-01-26 18:25:52,xz: Move flush_needed from mytime.h to file_pair struct in file_io.h.
815035681063d5774d3640fc20b8ede783dd574e,Lasse Collin,Lasse Collin,2020-01-26 12:49:22,2020-01-26 12:49:22,"xz: coder.c: Make writing output a separate function.

The same code sequence repeats so it's nicer as a separate function.
Note that in one case there was no test for opt_mode != MODE_TEST,
but that was only because that condition would always be true, so
this commit doesn't change the behavior there."
5a49e081a098455bcdbd95cefb90e9b18780fe58,Lasse Collin,Lasse Collin,2020-01-26 12:13:42,2020-01-26 12:13:42,"xz: Fix semi-busy-waiting in xz --flush-timeout.

When input blocked, xz --flush-timeout=1 would wake up every
millisecond and initiate flushing which would have nothing to
flush and thus would just waste CPU time. The fix disables the
timeout when no input has been seen since the previous flush."
dcca70fe9fa3c4bec56cf9c79e966166c9a9cf6a,Lasse Collin,Lasse Collin,2020-01-26 11:47:31,2020-01-26 11:47:31,xz: Refactor io_read() a bit.
4ae9ab70cd3214395756435d13d8d000368ca2cb,Lasse Collin,Lasse Collin,2020-01-26 11:37:08,2020-01-26 11:37:08,xz: Update a comment in file_io.h.
3333ba4a6795a55cf0375329ba08152bd7fcbd46,Lasse Collin,Lasse Collin,2020-01-26 11:27:51,2020-01-26 11:27:51,xz: Move the setting of flush_needed in file_io.c to a nicer location.
cf2df0f05ac98c1158c6e48145900b773223605d,Lasse Collin,Lasse Collin,2020-01-19 19:54:33,2020-01-19 19:54:33,"Use $(LIB_FUZZING_ENGINE) in tests/ossfuzz/Makefile.

https://github.com/google/oss-fuzz/pull/3219#issuecomment-573751048

Thanks to Bhargava Shastry for sending the patch."
7136f1735c60ac6967c4b8e277fcde53d485234f,Lasse Collin,Lasse Collin,2019-12-30 22:41:28,2019-12-30 22:47:49,"Rename unaligned_read32ne to read32ne, and similarly for the others."
5e78fcbf2eb21936022c9c5c3625d4da76f4b241,Lasse Collin,Lasse Collin,2019-12-30 22:29:48,2019-12-30 22:29:48,"Rename read32ne to aligned_read32ne, and similarly for the others.

Using the aligned methods requires more care to ensure that
the address really is aligned, so it's nicer if the aligned
methods are prefixed. The next commit will remove the unaligned_
prefix from the unaligned methods which in liblzma are used in
more places than the aligned ones."
77bc5bc6dd67056cfd5888520ac930cfc57b4516,Lasse Collin,Lasse Collin,2019-12-30 22:18:24,2019-12-30 22:18:24,"Revise tuklib_integer.h and .m4.

Add a configure option --enable-unsafe-type-punning to get the
old non-conforming memory access methods. It can be useful with
old compilers or in some other less typical situations but
shouldn't normally be used.

Omit the packed struct trick for unaligned access. While it's
best in some cases, this is simpler. If the memcpy trick doesn't
work, one can request unsafe type punning from configure.

Because CRC32/CRC64 code needs fast aligned reads, if no very
safe way to do it is found, type punning is used as a fallback.
This sucks but since it currently works in practice, it seems to
be the least bad option. It's never needed with GCC >= 4.7 or
Clang >= 3.6 since these support __builtin_assume_aligned and
thus fast aligned access can be done with the memcpy trick.

Other things:
  - Support GCC/Clang __builtin_bswapXX
  - Cleaner bswap fallback macros
  - Minor cleanups"
8b72950a6b2e2a36c2d8fdc8857564b57191b088,Lasse Collin,Lasse Collin,2019-12-29 20:51:58,2019-12-29 20:51:58,"Tests: Hopefully fix test_check.c to work on EBCDIC systems.

Thanks to Daniel Richard G."
43ce4ea7c762238d3df9717b34126d3e0d7cd51c,Lasse Collin,Lasse Collin,2019-09-24 20:02:40,2019-09-24 20:02:40,"Scripts: Put /usr/xpg4/bin to the beginning of PATH on Solaris.

This adds a configure option --enable-path-for-scripts=PREFIX
which defaults to empty except on Solaris it is /usr/xpg4/bin
to make POSIX grep and others available. The Solaris case had
been documented in INSTALL with a manual fix but it's better
to do this automatically since it is needed on most Solaris
systems anyway.

Thanks to Daniel Richard G."
6a89e656ebedd53a10cd1a063a32a9e4ade0da1f,Lasse Collin,Lasse Collin,2019-07-12 15:57:43,2019-07-12 15:57:43,Fix comment typos in tuklib_mbstr* files.
ac0b4212656a48ef0c187c0c941d40ac9489ae36,Lasse Collin,Lasse Collin,2019-07-12 15:30:46,2019-07-12 15:30:46,"Add missing include to tuklib_mbstr_width.c.

It didn't matter in XZ Utils because sysdefs.h
includes string.h anyway."
72a443281fb0b91aebf8cdff2ab1f7c07b081240,Lasse Collin,Lasse Collin,2019-07-12 15:10:57,2019-07-12 15:10:57,Update tuklib base headers to include stdbool.h.
de1f47b2b40e960b7bc3acba754f66dd19705921,Lasse Collin,Lasse Collin,2019-06-27 21:54:31,2019-06-27 21:54:31,"xz: Automatically align the strings in --info-memory.

This makes it easier to translate the strings.

Also, the string for amount of RAM was shortened."
8ce679125dbd0e2058d8f886e738d7f19a45cab5,Lasse Collin,Lasse Collin,2019-06-25 20:15:21,2019-06-25 20:15:21,liblzma: Fix a buggy comment.
fc77929e92e869f6869bf88931066103fd75f376,Lasse Collin,Lasse Collin,2019-06-24 21:16:06,2019-06-24 21:16:06,configure.ac: Fix a typo in a comment.
e873902641794210ad7db59743f98e3e1cd6139f,Lasse Collin,Lasse Collin,2019-06-24 21:08:13,2019-06-24 21:08:13,"Tests: Silence warnings from clang -Wassign-enum.

Also changed 999 to 99 so it fits even if lzma_check happened
to be 8 bits wide."
d499e467d99efeaae688564eedc4548837c1416a,Lasse Collin,Lasse Collin,2019-06-24 20:52:17,2019-06-24 20:52:17,liblzma: Add a comment.
a12b13c5f0d54c684fa8446f93fdac08ab2a716b,Lasse Collin,Lasse Collin,2019-06-24 20:45:21,2019-06-24 20:45:21,liblzma: Silence clang -Wmissing-variable-declarations.
1b4675cebf7471f7cc9b7072c950e3de97147063,Lasse Collin,Lasse Collin,2019-06-24 20:25:41,2019-06-24 20:25:41,"Add LZMA_RET_INTERNAL1..8 to lzma_ret and use one for LZMA_TIMED_OUT.

LZMA_TIMED_OUT is *internally* used as a value for lzma_ret
enumeration. Previously it was #defined to 32 and cast to lzma_ret.
That way it wasn't visible in the public API, but this was hackish.

Now the public API has eight LZMA_RET_INTERNALx members and
LZMA_TIMED_OUT is #defined to LZMA_RET_INTERNAL1. This way
the code is cleaner overall although the public API has a few
extra mysterious enum members."
159c43875eb25deea626ed651274464bae3e32ef,Lasse Collin,Lasse Collin,2019-06-24 19:57:43,2019-06-24 19:57:43,xz: Silence a warning from clang -Wsign-conversion in main.c.
466cfcd3e52f6750ce28a635997f3dd84fb18515,Lasse Collin,Lasse Collin,2019-06-24 19:52:20,2019-06-24 19:52:20,"xz: Make ""headings"" static in list.c.

Caught by clang -Wmissing-variable-declarations."
608517b9b76c41fac6613dbda1193d6f41338e19,Lasse Collin,Lasse Collin,2019-06-24 19:47:39,2019-06-24 19:50:36,"liblzma: Remove incorrect uses of lzma_attribute((__unused__)).

Caught by clang -Wused-but-marked-unused."
c2d2ab6a9d41a2b55d047c5b710aacf80d219255,Lasse Collin,Lasse Collin,2019-06-24 17:53:55,2019-06-24 17:53:55,Tests: Silence a warning from -Wsign-conversion.
2402f7873dcae719d0ebddd23bb579074519ac52,Lasse Collin,Lasse Collin,2019-06-24 17:45:49,2019-06-24 17:45:49,"xz: Fix an integer overflow with 32-bit off_t.

Or any off_t which isn't very big (like signed 64 bit integer
that most system have). A small off_t could overflow if the
file being decompressed had long enough run of zero bytes,
which would result in corrupt output."
4fd3a8dd0b60f029e1c66a0ee634f9e9fda3caa9,Lasse Collin,Lasse Collin,2019-06-23 22:24:17,2019-06-23 22:24:17,"xz: Cleanup io_seek_src() a bit.

lseek() returns -1 on error and checking for -1 is nicer."
dfda7cf6afa486e10df035327d68753896dfb48a,Lasse Collin,Lasse Collin,2019-06-23 21:57:23,2019-06-23 21:57:23,"Tests: Remove a duplicate branch from tests/tests.h.

The duplication was introduced about eleven years ago and
should have been cleaned up back then already.

This was caught by -Wduplicated-branches."
1d4a904d8fb634bd5a04f7fbdd17d3739f3d8866,Lasse Collin,Lasse Collin,2019-06-23 21:40:45,2019-06-23 21:40:45,"xz: Change io_seek_src and io_pread arguments from off_t to uint64_t.

This helps fixing warnings from -Wsign-conversion and makes the
code look better too."
50120deb0159fcb53ee1a6caffb2bb81a1ecd990,Lasse Collin,Lasse Collin,2019-06-23 21:12:38,2019-06-23 21:12:38,xz: list.c: Fix some warnings from -Wsign-conversion.
d0a78751eb54fb1572002746c533936a118e4e42,Lasse Collin,Lasse Collin,2019-06-23 20:22:45,2019-06-23 20:22:45,tuklib_mbstr_width: Fix a warning from -Wsign-conversion.
7883d73530b4b2a701ddd7d50c35676cbc158039,Lasse Collin,Lasse Collin,2019-06-23 20:19:34,2019-06-23 20:19:34,xz: Fix some of the warnings from -Wsign-conversion.
c2b994fe3d35e9e575c28869a2f7f534f2495d05,Lasse Collin,Lasse Collin,2019-06-23 19:27:45,2019-06-23 19:27:45,tuklib_cpucores: Silence warnings from -Wsign-conversion.
07c4fa9e1a195e0543f271380c8de22a3ab145ff,Lasse Collin,Lasse Collin,2019-06-23 18:40:47,2019-06-23 18:40:47,xzdec: Fix warnings from -Wsign-conversion.
dfac2c9a1d7d4a2b8a5d7c9c6d567dee48318bcf,Lasse Collin,Lasse Collin,2019-06-23 18:38:56,2019-06-23 18:38:56,"liblzma: Fix warnings from -Wsign-conversion.

Also, more parentheses were added to the literal_subcoder
macro in lzma_comon.h (better style but no functional change
in the current usage)."
41838dcc26375f6aa393a63e4d81e2f4d223de07,Lasse Collin,Lasse Collin,2019-06-23 16:33:55,2019-06-23 16:33:55,tuklib_integer: Silence warnings from -Wsign-conversion.
3ce05d235f736d392347a05086b8033416874b87,Lasse Collin,Lasse Collin,2019-06-20 16:40:30,2019-06-20 16:40:30,"tuklib_integer: Fix usage of conv macros.

Use a temporary variable instead of e.g.
conv32le(unaligned_read32ne(buf)) because the macro can
evaluate its argument multiple times."
b525b0c0ef40cd89b69294c9b8d57f4a8db58e1f,Lasse Collin,Lasse Collin,2019-06-03 17:44:19,2019-06-03 17:44:19,Update THANKS.
039a168e8cf201d5104a25ec41f0cf25eda6cc53,Lasse Collin,Lasse Collin,2019-06-03 17:41:54,2019-06-03 17:41:54,"liblzma: Fix comments.

Thanks to Bruce Stark."
c460f6defebc5a81bbca90adc2476154ca244f69,Lasse Collin,Lasse Collin,2019-06-01 21:50:59,2019-06-01 21:50:59,liblzma: Fix one more unaligned read to use unaligned_read16ne().
c81d77c537f0b8c8672868e1dc6cf7290ce4a25b,Lasse Collin,Lasse Collin,2019-06-01 18:41:55,2019-06-01 18:41:55,Update THANKS.
386394fc9fcde2615391f804eaa466749f96f4ef,Lasse Collin,Lasse Collin,2019-06-01 18:36:13,2019-06-01 18:36:13,"liblzma: memcmplen: Use ctz32() from tuklib_integer.h.

The same compiler-specific #ifdefs are already in tuklib_integer.h"
264ab971ce2994baac41b1579c9c35aba7743fc8,Lasse Collin,Lasse Collin,2019-06-01 18:30:03,2019-06-01 18:30:03,tuklib_integer: Cleanup MSVC-specific code.
33773c6f2a8711d4aa6656795db52c59a28580ec,Lasse Collin,Lasse Collin,2019-06-01 16:01:21,2019-06-01 16:01:21,"liblzma: Use unaligned_readXXne functions instead of type punning.

Now gcc -fsanitize=undefined should be clean.

Thanks to Jeffrey Walton."
e5f13a66567b1987e0aae42c6fdcd277bb5810ba,Lasse Collin,Lasse Collin,2019-06-01 15:46:54,2019-06-01 15:46:54,"tuklib_integer: Autodetect support for unaligned access on ARM.

The result is used as the default for --enable-unaligned-access.
The test should work with GCC and Clang."
3bc112c2d38d5f348bce7bc2422286b1692c7490,Lasse Collin,Lasse Collin,2019-06-01 15:41:16,2019-06-01 15:41:16,"tuklib_integer: Improve unaligned memory access.

Now memcpy() or GNU C packed structs for unaligned access instead
of type punning. See the comment in this commit for details.

Avoiding type punning with unaligned access is needed to
silence gcc -fsanitize=undefined.

New functions: unaliged_readXXne and unaligned_writeXXne where
XX is 16, 32, or 64."
2a22de439ec63da1927b640eda309296a1e8dce5,Lasse Collin,Lasse Collin,2019-05-13 17:05:17,2019-05-13 17:05:17,"liblzma: Avoid memcpy(NULL, foo, 0) because it is undefined behavior.

I should have always known this but I didn't. Here is an example
as a reminder to myself:

    int mycopy(void *dest, void *src, size_t n)
    {
        memcpy(dest, src, n);
        return dest == NULL;
    }

In the example, a compiler may assume that dest != NULL because
passing NULL to memcpy() would be undefined behavior. Testing
with GCC 8.2.1, mycopy(NULL, NULL, 0) returns 1 with -O0 and -O1.
With -O2 the return value is 0 because the compiler infers that
dest cannot be NULL because it was already used with memcpy()
and thus the test for NULL gets optimized out.

In liblzma, if a null-pointer was passed to memcpy(), there were
no checks for NULL *after* the memcpy() call, so I cautiously
suspect that it shouldn't have caused bad behavior in practice,
but it's hard to be sure, and the problematic cases had to be
fixed anyway.

Thanks to Jeffrey Walton."
d3fc850cfedc058247d9e334ce59bbc8f2286d8a,Lasse Collin,Lasse Collin,2019-05-11 17:56:08,2019-05-11 17:56:08,Update THANKS.
4adb8288ab61d5f14e212007b8742df0710baf73,Lasse Collin,Lasse Collin,2019-05-11 17:54:12,2019-05-11 17:54:12,xz: Update xz man page date.
2fb0ddaa557ce86e38fe06439930fa8665f092fd,Antoine Cœur,Lasse Collin,2019-05-08 05:30:57,2019-05-11 17:52:37,spelling
4ed339606156bd313ed99237485cb8ed0362d64f,Lasse Collin,Lasse Collin,2019-05-01 15:43:10,2019-05-01 15:43:10,"xz: In xz -lvv look at the widths of the check names too.

Now the widths of the check names is used to adjust the width
of the Check column. This way there no longer is a need to restrict
the widths of the check names to be at most ten terminal-columns."
2f4281a1001dcf7fdf1418c0c0d246c16561fb65,Lasse Collin,Lasse Collin,2019-05-01 15:33:25,2019-05-01 15:33:25,xz: Fix xz -lvv column alignment to look at the translated strings.
01d01b7c7c0b8eaf7f780a5584ec52c22d10fa4a,Lasse Collin,Lasse Collin,2019-05-01 13:52:36,2019-05-01 13:52:36,Update THANKS.
64030c6b17f7743df03a9948a0ccfcdf40c6b97c,Lasse Collin,Lasse Collin,2019-05-01 13:43:16,2019-05-01 13:43:16,Windows: Update VS version in windows/vs2019/config.h.
2dc9117f5fbfab31444a3ca1e55795ccfa8a9f51,Julien Marrec,Lasse Collin,2019-04-25 15:44:06,2019-05-01 13:41:26,Windows: Upgrade solution itself
ac31413916fa9b11bab17f0f0aa63e2869360f6f,Julien Marrec,Lasse Collin,2019-04-25 15:40:24,2019-05-01 13:41:26,Windows: Upgrade solution with VS2019
be25a0c37ba92a20c390b4d17fe502457fe96b71,Julien Marrec,Lasse Collin,2019-04-25 15:39:32,2019-05-01 13:40:52,Windows: Duplicate windows/vs2017 before upgrading
d0e58b3a51e8e616f3dc26ec7b7e4aa0fa6991ad,Lasse Collin,Lasse Collin,2019-03-04 20:49:04,2019-03-04 20:49:04,"README: Update translation instructions.

XZ Utils is now part of the Translation Project
<https://translationproject.org/>."
a750c35a7d45a16c11c1d40fecee8443c32a9996,Lasse Collin,Lasse Collin,2019-03-04 19:20:39,2019-03-04 19:20:39,xz: Automatically align column headings in xz -lvv.
6cb42e8aa1dc37bf403a9f5acbd07e86036b7e77,Lasse Collin,Lasse Collin,2019-03-03 23:07:59,2019-03-04 19:16:59,"xz: Automatically align strings ending in a colon in --list output.

This should avoid alignment errors in translations with these
strings."
1e3f29b62f2c03e50fc9ebea7b83c1497dd35484,Lasse Collin,Lasse Collin,2019-01-13 15:29:23,2019-01-13 15:29:23,"Windows/VS2017: Omit WindowsTargetPlatformVersion from project files.

I understood that if a WTPV is specified, it's often wrong
because different VS installations have different SDK version
installed. Omitting the WTPV tag makes VS2017 default to
Windows SDK 8.1 which often is also missing, so in any case
people may need to specify the WTPV before building. But some
day in the future a missing WTPV tag will start to default to
the latest installed SDK which sounds reasonable:

https://developercommunity.visualstudio.com/content/problem/140294/windowstargetplatformversion-makes-it-impossible-t.html

Thanks to ""dom""."
4d86076332aece6314063d3712a5f364172bbb0f,Lasse Collin,Lasse Collin,2018-12-20 18:42:29,2018-12-20 18:42:29,Update THANKS.
b55d79461d1f6aeaac03c7dae84481e5eb8bea4c,Lasse Collin,Lasse Collin,2018-12-14 18:34:30,2018-12-20 18:39:20,"xz: Fix a crash in progress indicator when in passthru mode.

""xz -dcfv not_an_xz_file"" crashed (all four options are
required to trigger it). It caused xz to call
lzma_get_progress(&strm, ...) when no coder was initialized
in strm. In this situation strm.internal is NULL which leads
to a crash in lzma_get_progress().

The bug was introduced when xz started using lzma_get_progress()
to get progress info for multi-threaded compression, so the
bug is present in versions 5.1.3alpha and higher.

Thanks to Filip Palian <Filip.Palian@pjwstk.edu.pl> for
the bug report."
4ae5526de013efd1021686fa80bdd10cf1cb9c56,Lasse Collin,Lasse Collin,2018-11-22 15:20:31,2018-11-22 15:20:31,xz: Update man page timestamp.
6a36d0d5f49e0080ff64dd9ef250abd489bea2ad,Pavel Raiskup,Lasse Collin,2018-11-22 14:14:34,2018-11-22 15:19:09,'have have' typos
9eca51ef805ed8002a851df1b4995d71826c8b6e,Lasse Collin,Lasse Collin,2018-11-02 18:40:48,2018-11-02 18:40:48,Update THANKS.
106d1a663d4ba42b63231caa289f531548df81c1,Lasse Collin,Lasse Collin,2018-11-02 18:18:45,2018-11-02 18:40:14,"Tests: Add a fuzz test program and a config file for OSS-Fuzz.

Thanks to Bhargava Shastry and Github user pdknsk."
a18ae42a79a19b1394b41eb3e238139fd28012ec,Lasse Collin,Lasse Collin,2018-10-26 19:49:10,2018-10-26 19:49:10,"liblzma: Don't verify header CRC32s if building for fuzz testing.

FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION is #defined when liblzma
is being built for fuzz testing.

Most fuzzed inputs would normally get rejected because of incorrect
CRC32 and the actual header decoding code wouldn't get fuzzed.
Disabling CRC32 checks avoids this problem. The fuzzer program
must still use LZMA_IGNORE_CHECK flag to disable verification of
integrity checks of uncompressed data."
f76f7516d6a1c832f61810c82e92d151cc80966c,Lasse Collin,Lasse Collin,2018-07-27 15:10:44,2018-07-27 15:10:44,"xzless: Rename unused variables to silence static analysers.

In this particular case I don't see this affecting readability
of the code.

Thanks to Pavel Raiskup."
3cbcaeb07eb7543735befd6f507fdb5fa4363cff,Lasse Collin,Lasse Collin,2018-07-27 13:02:58,2018-07-27 13:02:58,"liblzma: Remove an always-true condition from lzma_index_cat().

This should help static analysis tools to see that newg
isn't leaked.

Thanks to Pavel Raiskup."
76762ae6098ec55c326f4b4b4a42e8c1918ee81f,Lasse Collin,Lasse Collin,2018-05-19 18:23:25,2018-05-19 18:23:25,liblzma: Improve lzma_properties_decode() API documentation.
2267f5b0d20a5d24e93fcd9f72ea7eeb0d89708c,Lasse Collin,Lasse Collin,2018-04-29 15:58:19,2018-04-29 15:58:19,Bump the version number to 5.3.1alpha.
cee3021d30704858e4bdd22240e7d28e570d7451,Lasse Collin,Lasse Collin,2018-04-29 15:48:00,2018-04-29 15:48:00,extra/scanlzma: Fix compiler warnings.
c5c7ceb08a011b97d261798033e2c39613a69eb7,Lasse Collin,Lasse Collin,2018-04-29 15:44:47,2018-04-29 15:44:47,DOS: Add file_info.c to the list of files to build.
114cab97af766b21e0fc8620479202fb1e7a5e41,Lasse Collin,Lasse Collin,2018-04-29 15:33:10,2018-04-29 15:33:10,Update NEWS for 5.3.1alpha.
b8139e11c512bbf32bf58ab0689f9bb6c52819da,Lasse Collin,Lasse Collin,2018-04-29 15:15:37,2018-04-29 15:30:48,Add NEWS for 5.2.4.
47b59d47cfd904a420fbd45629d168ca1973721d,Lasse Collin,Lasse Collin,2018-02-06 17:36:30,2018-02-06 17:36:30,Update THANKS.
bc197991690ede24ab143665b5b0f0f9cb35cc46,Ben Boeckel,Lasse Collin,2018-01-29 18:58:18,2018-02-06 16:41:45,"nothrow: use noexcept for C++11 and newer

In C++11, the `throw()` specifier is deprecated and `noexcept` is
preffered instead."
fb6d4f83cb6e144734f2a4216bb117bd56dc3cb5,Lasse Collin,Lasse Collin,2018-02-06 16:02:48,2018-02-06 16:02:48,"liblzma: Remove incorrect #ifdef from range_common.h.

In most cases it was harmless but it could affect some
custom build systems.

Thanks to Pippijn van Steenhoven."
bc577d35c2d0ed17f554d2d8107b2a2a9abbac76,Lasse Collin,Lasse Collin,2018-01-10 20:10:39,2018-01-10 20:10:39,Update THANKS.
713bbc1a80f26d34c96ed3dbb9887362204de3a1,Lasse Collin,Lasse Collin,2018-01-10 19:54:27,2018-01-10 19:54:27,"tuklib_integer: New Intel C compiler needs immintrin.h.

Thanks to Melanie Blower (Intel) for the patch."
a0ee1afbd99da138b559cb27fa2022e7f1ab44f3,Lasse Collin,Lasse Collin,2017-09-24 17:04:24,2017-09-24 17:04:24,Update THANKS.
a1e2c568de29c0b57d873eab40a2879b749da429,Lasse Collin,Lasse Collin,2017-09-16 17:36:20,2017-09-16 17:36:20,"Windows: Fix paths in VS project files.

Some paths use slashes instead of backslashes as directory
separators... now it should work (I tested VS2013 version)."
cea5cf8d26c9d1dc30a808614d79c0b25640e15e,Lasse Collin,Lasse Collin,2017-09-16 09:56:20,2017-09-16 09:56:20,Windows: Update VS2017 project files to include file info decoder.
95d563db3ee497b223e522b699c4d4c29943eef0,Lasse Collin,Lasse Collin,2017-09-16 09:54:23,2017-09-16 09:56:05,"Windows: Add project files for VS2017.

These files match the v5.2 branch (no file info decoder)."
ab72416d62ea8f50ad31d5b8545fcb6a2bf96b73,Lasse Collin,Lasse Collin,2017-09-16 09:45:50,2017-09-16 09:45:50,Windows: Update VS2013 project files to include file info decoder.
82388980187b0e3794d187762054200bbdcc9a53,Lasse Collin,Lasse Collin,2017-09-16 09:39:43,2017-09-16 09:44:06,Windows: Move VS2013 files into windows/vs2013 directory.
94e3f986aa4e14b4ff01ac24857f499630d6d180,Lasse Collin,Lasse Collin,2017-08-14 17:08:33,2017-08-14 17:08:33,Fix or hide warnings from GCC 7's -Wimplicit-fallthrough.
0b0e1e6803456aac641a59332200f8e95e2b7ea8,Alexey Tourbin,Lasse Collin,2017-05-16 20:56:35,2017-05-23 15:46:49,Docs: Fix a typo in a comment in doc/examples/02_decompress.c.
a015cd1f90116e655be4eaf4aad42c4c911c2807,Lasse Collin,Lasse Collin,2017-05-23 15:34:43,2017-05-23 15:34:43,"xz: Fix ""xz --list --robot missing_or_bad_file.xz"".

It ended up printing an uninitialized char-array when trying to
print the check names (column 7) on the ""totals"" line.

This also changes the column 12 (minimum xz version) to
50000002 (xz 5.0.0) instead of 0 when there are no valid
input files.

Thanks to kidmin for the bug report."
c2e29f06a7d1e3ba242ac2fafc69f5d6e92f62cd,Lasse Collin,Lasse Collin,2017-04-24 17:20:11,2017-04-24 17:20:11,Docs: Add doc/examples/11_file_info.c.
1520f6ec808896375ac7bf778c449e0f7dea5f46,Lasse Collin,Lasse Collin,2017-04-24 16:48:47,2017-04-24 16:48:47,"Build: Omit pre-5.0.0 entries from the generated ChangeLog.

It makes ChangeLog significantly smaller."
8269782283806c90a8509c2ac2a308344f70e171,Lasse Collin,Lasse Collin,2017-04-24 16:48:23,2017-04-24 16:48:23,xz: Use lzma_file_info_decoder() for --list.
e353d0b1cc0d3997ae5048faa8e6786414953e06,Lasse Collin,Lasse Collin,2017-04-24 16:35:50,2017-04-24 16:48:04,liblzma: Add lzma_file_info_decoder().
144ef9e19e9496c995b21505dd1e111c442968d1,Lasse Collin,Lasse Collin,2017-04-24 16:30:22,2017-04-24 16:30:22,Update the Git repository URL to HTTPS in ChangeLog.
8c9842c265993d7dd4039f732d3546267fb5ecc4,Lasse Collin,Lasse Collin,2017-04-21 12:05:16,2017-04-21 12:05:16,liblzma: Rename LZMA_SEEK to LZMA_SEEK_NEEDED and seek_in to seek_pos.
662b27c417cab248cb365dd7682121bdec4d5ae7,Lasse Collin,Lasse Collin,2017-04-19 19:17:35,2017-04-19 19:17:35,Update the home page URLs to HTTPS.
c28f0b3d00af87b92dda229831548d8eb0067d1d,Lasse Collin,Lasse Collin,2017-04-05 15:47:22,2017-04-05 15:47:22,xz: Add io_seek_src().
bba477257d7319c8764890f3669175b866d24944,Lasse Collin,Lasse Collin,2017-03-30 19:01:54,2017-03-30 19:01:54,"xz: Use POSIX_FADV_RANDOM for in ""xz --list"" mode.

xz --list is random access so POSIX_FADV_SEQUENTIAL was clearly
wrong."
310d19816d1652b0c8bb1b82574d46345d924752,Lasse Collin,Lasse Collin,2017-03-30 17:03:05,2017-03-30 17:03:05,"liblzma: Make lzma_index_decoder_init() visible to other liblzma funcs.

This is to allow other functions to use it without going
via the public API (lzma_index_decoder())."
a27920002dbc469f778a134fc665b7c3ea73701b,Lasse Collin,Lasse Collin,2017-03-30 17:00:09,2017-03-30 17:00:09,"liblzma: Add generic support for input seeking (LZMA_SEEK).

Also mention LZMA_SEEK in xz/message.c to silence a warning."
a0b1dda409bc3e6e2957a2651663fc411d2caf2d,Lasse Collin,Lasse Collin,2017-03-30 16:47:45,2017-03-30 16:51:14,"liblzma: Fix lzma_memlimit_set(strm, 0).

The 0 got treated specially in a buggy way and as a result
the function did nothing. The API doc said that 0 was supposed
to return LZMA_PROG_ERROR but it didn't.

Now 0 is treated as if 1 had been specified. This is done because
0 is already used to indicate an error from lzma_memlimit_get()
and lzma_memusage().

In addition, lzma_memlimit_set() no longer checks that the new
limit is at least LZMA_MEMUSAGE_BASE. It's counter-productive
for the Index decoder and was actually needed only by the
auto decoder. Auto decoder has now been modified to check for
LZMA_MEMUSAGE_BASE."
84462afaada61379f5878e46f8f00e25a1cdcf29,Lasse Collin,Lasse Collin,2017-03-30 16:16:55,2017-03-30 16:16:55,"liblzma: Similar memlimit fix for stream_, alone_, and auto_decoder."
cbc74017939690d13441b8926bb743fb03211b83,Lasse Collin,Lasse Collin,2017-03-30 15:58:18,2017-03-30 16:10:55,"liblzma: Fix handling of memlimit == 0 in lzma_index_decoder().

It returned LZMA_PROG_ERROR, which was done to avoid zero as
the limit (because it's a special value elsewhere), but using
LZMA_PROG_ERROR is simply inconvenient and can cause bugs.

The fix/workaround is to treat 0 as if it were 1 byte. It's
effectively the same thing. The only weird consequence is
that then lzma_memlimit_get() will return 1 even when 0 was
specified as the limit.

This fixes a very rare corner case in xz --list where a specific
memory usage limit and a multi-stream file could print the
error message ""Internal error (bug)"" instead of saying that
the memory usage limit is too low."
78ae13bced912b1b92ae927992c99cbcc463cae7,Lasse Collin,Lasse Collin,2016-12-30 11:25:10,2016-12-30 11:33:16,Update NEWS for 5.2.3.
0297863fdb453aed1a25eb025f3ba7bacbbb1357,Lasse Collin,Lasse Collin,2016-12-26 18:55:52,2016-12-26 18:55:52,Document --enable-sandbox configure option in INSTALL.
d4a0462abe5478193521c14625e1c81fead87f9f,Lasse Collin,Lasse Collin,2016-11-21 18:24:50,2016-11-21 18:24:50,"liblzma: Avoid multiple definitions of lzma_coder structures.

Only one definition was visible in a translation unit.
It avoided a few casts and temp variables but seems that
this hack doesn't work with link-time optimizations in compilers
as it's not C99/C11 compliant.

Fixes:
http://www.mail-archive.com/xz-devel@tukaani.org/msg00279.html"
a01794c52add98263b49119842c3e7141d1b9ced,Lasse Collin,Lasse Collin,2016-10-24 15:53:25,2016-10-24 15:53:25,Update THANKS.
df8f446e3ad47e5148b8c8d8b6e519d3ce29cb9d,Lasse Collin,Lasse Collin,2016-10-24 15:51:36,2016-10-24 15:51:36,"tuklib_cpucores: Add support for sched_getaffinity().

It's available in glibc (GNU/Linux, GNU/kFreeBSD). It's better
than sysconf(_SC_NPROCESSORS_ONLN) because sched_getaffinity()
gives the number of cores available to the process instead of
the total number of cores online.

As a side effect, this commit fixes a bug on GNU/kFreeBSD where
configure would detect the FreeBSD-specific cpuset_getaffinity()
but it wouldn't actually work because on GNU/kFreeBSD it requires
using -lfreebsd-glue when linking. Now the glibc-specific function
will be used instead.

Thanks to Sebastian Andrzej Siewior for the original patch
and testing."
446e4318fa79788e09299d5953b5dd428953d14b,Lasse Collin,Lasse Collin,2016-06-30 17:27:36,2016-06-30 17:27:36,"xz: Fix copying of timestamps on Windows.

xz used to call utime() on Windows, but its result gets lost
on close(). Using _futime() seems to work.

Thanks to Martok for reporting the bug:
http://www.mail-archive.com/xz-devel@tukaani.org/msg00261.html"
1b0ac0c53c761263e91e34195cb21dfdcfeac0bd,Lasse Collin,Lasse Collin,2016-06-16 19:46:02,2016-06-16 19:46:02,"xz: Silence warnings from -Wlogical-op.

Thanks to Evan Nemerson."
c83b7a03342c3325ff10400b22ee21edfcd1e026,Lasse Collin,Lasse Collin,2016-04-10 17:55:49,2016-04-10 17:55:49,"Build: Fix = to += for xz_SOURCES in src/xz/Makefile.am.

Thanks to Christian Kujau."
ade31a2bfb95c94d05fbfc0ecbba5d6377f2506e,Lasse Collin,Lasse Collin,2016-04-10 17:54:17,2016-04-10 17:54:17,"Build: Bump GNU Gettext version requirement to 0.19.

It silences a few warnings and most people probably have
0.19 even on stable distributions.

Thanks to Christian Kujau."
ac398c3bafa6e4c80e20571373a96947db863b3d,Lasse Collin,Lasse Collin,2016-03-13 18:21:49,2016-03-13 18:21:49,"liblzma: Disable external SHA-256 by default.

This is the sane thing to do. The conflict with OpenSSL
on some OSes and especially that the OS-provided versions
can be significantly slower makes it clear that it was
a mistake to have the external SHA-256 support enabled by
default.

Those who want it can now pass --enable-external-sha256 to
configure. INSTALL was updated with notes about OSes where
this can be a bad idea.

The SHA-256 detection code in configure.ac had some bugs that
could lead to a build failure in some situations. These were
fixed, although it doesn't matter that much now that the
external SHA-256 is disabled by default.

MINIX >= 3.2.0 uses NetBSD's libc and thus has SHA256_Init
in libc instead of libutil. Support for the libutil version
was removed."
6fd5ecb589a9fdd7a576ea48c4850d496bab9ce5,Lasse Collin,Lasse Collin,2016-03-10 18:27:05,2016-03-10 18:27:05,Update THANKS.
473ef0dc69a30e64d5fa0d34aca02f7309faa3e9,Lasse Collin,Lasse Collin,2016-03-10 18:26:49,2016-03-10 18:26:49,"Build: Avoid SHA256_Init on FreeBSD and MINIX 3.

On FreeBSD 10 and older, SHA256_Init from libmd conflicts
with libcrypto from OpenSSL. The OpenSSL version has
different sizeof(SHA256_CTX) and it can cause weird
problems if wrong SHA256_Init gets used.

Looking at the source, MINIX 3 seems to have a similar issue but
I'm not sure. To be safe, I disabled SHA256_Init on MINIX 3 too.

NetBSD has SHA256_Init in libc and they had a similar problem,
but they already fixed it in 2009.

Thanks to Jim Wilcoxson for the bug report that helped
in finding the problem."
faf302137e54d605b44ecf0373cb51a6403a2de1,Lasse Collin,Lasse Collin,2015-11-08 18:16:10,2015-11-08 18:16:10,tuklib_physmem: Hopefully silence a warning on Windows.
e52e9151cf8613022d1de4712ff39dbcb666e991,Lasse Collin,Lasse Collin,2015-11-04 21:17:43,2015-11-04 21:17:43,Update THANKS.
14115f84a38161d55eaa2d070f08739bde37e966,Lasse Collin,Lasse Collin,2015-11-04 21:14:00,2015-11-04 21:14:00,"liblzma: Make Valgrind happier with optimized (gcc -O2) liblzma.

When optimizing, GCC can reorder code so that an uninitialized
value gets used in a comparison, which makes Valgrind unhappy.
It doesn't happen when compiled with -O0, which I tend to use
when running Valgrind.

Thanks to Rich Prohaska. I remember this being mentioned long
ago by someone else but nothing was done back then."
f4c95ba94beb71a608eb6eadbf82b44f53a0260e,Lasse Collin,Lasse Collin,2015-11-03 18:55:45,2015-11-03 18:55:45,"liblzma: Rename lzma_presets.c back to lzma_encoder_presets.c.

It would be too annoying to update other build systems
just because of this."
c7bc20a6f3e71920871d48db31a79ab58b5a0a4b,Lasse Collin,Lasse Collin,2015-11-03 18:47:07,2015-11-03 18:47:07,"Build: Disable xzdec, lzmadec, and lzmainfo when they cannot be built.

They all need decoder support and if that isn't available,
there's no point trying to build them."
5cbca1205deeb6fb7afe7a864fa68a57466d928a,Lasse Collin,Lasse Collin,2015-11-03 18:35:19,2015-11-03 18:35:19,"Build: Simplify $enable_{encoders,decoders} usage a bit."
af13781886c8e7a0aabebb5141ea282dc364f5c6,Lasse Collin,Lasse Collin,2015-11-03 18:31:31,2015-11-03 18:31:31,Windows/MSVC: Update config.h.
9fa5949330f162c5a2f6653f83025327837e8f39,Lasse Collin,Lasse Collin,2015-11-03 18:29:58,2015-11-03 18:29:58,DOS: Update config.h.
cb3111e3ed84152912b5138d690c8d9f00c6ef02,Lasse Collin,Lasse Collin,2015-11-03 18:29:33,2015-11-03 18:29:33,"xz: Make xz buildable even when encoders or decoders are disabled.

The patch is quite long but it's mostly about adding new #ifdefs
to omit code when encoders or decoders have been disabled.

This adds two new #defines to config.h: HAVE_ENCODERS and
HAVE_DECODERS."
4cc584985c0b7a13901da1b7a64ef9f7cc36e8ab,Lasse Collin,Lasse Collin,2015-11-03 16:06:40,2015-11-03 16:06:40,"Build: Build LZMA1/2 presets also when only decoder is wanted.

People shouldn't rely on the presets when decoding raw streams,
but xz uses the presets as the starting point for raw decoder
options anyway.

lzma_encocder_presets.c was renamed to lzma_presets.c to
make it clear it's not used solely by the encoder code."
23ed1d41489f632155bbc9660f323d57e09da180,Lasse Collin,Lasse Collin,2015-11-03 15:54:48,2015-11-03 15:54:48,"Build: Fix configure to handle LZMA1 dependency with LZMA2.

Now it gives an error if LZMA1 encoder/decoder is missing
when LZMA2 encoder/decoder was requested. Even better would
be LZMA2 implicitly enabling LZMA1 but it would need more code."
b0bc3e03852af13419ea2960881824258d451117,Lasse Collin,Lasse Collin,2015-11-03 15:41:54,2015-11-03 15:41:54,"Build: Don't omit lzma_cputhreads() unless using --disable-threads.

Previously it was omitted if encoders were disabled
with --disable-encoders. It didn't make sense and
it also broke the build."
c6bf438ab39e0fb4a47d3c81725c227919502726,Lasse Collin,Lasse Collin,2015-11-02 16:16:51,2015-11-02 16:16:51,"liblzma: Fix a build failure related to external SHA-256 support.

If an appropriate header and structure were found by configure,
but a library with a usable SHA-256 functions wasn't, the build
failed."
e18adc56f2262aa9394d46681e9e4b9981ed5e97,Lasse Collin,Lasse Collin,2015-11-02 13:19:10,2015-11-02 13:19:10,"xz: Always close the file before trying to delete it.

unlink() can return EBUSY in errno for open files on some
operating systems and file systems."
282e768a1484e88c8b7ec35655ee4959954ec87a,Lasse Collin,Lasse Collin,2015-10-12 18:08:42,2015-10-12 18:08:42,Update THANKS.
372e402713a1d4337ffce5f56d5c5c9ed99a66d0,Lasse Collin,Lasse Collin,2015-10-12 18:07:41,2015-10-12 18:07:41,Tests: Add tests for the two bugs fixed in index.c.
21515d79d778b8730a434f151b07202d52a04611,Lasse Collin,Lasse Collin,2015-10-12 17:45:15,2015-10-12 17:45:15,"liblzma: Fix lzma_index_dup() for empty Streams.

Stream Flags and Stream Padding weren't copied from
empty Streams."
09f395b6b360c0b13e8559eece1d179b908ebd3a,Lasse Collin,Lasse Collin,2015-10-12 17:31:44,2015-10-12 17:31:44,liblzma: Add a note to index.c for those using static analyzers.
3bf857edfef51374f6f3fffae3d817f57d3264a0,Lasse Collin,Lasse Collin,2015-10-12 17:29:09,2015-10-12 17:29:09,"liblzma: Fix a memory leak in error path of lzma_index_dup().

lzma_index_dup() calls index_dup_stream() which, in case of
an error, calls index_stream_end() to free memory allocated
by index_stream_init(). However, it illogically didn't
actually free the memory. To make it logical, the tree
handling code was modified a bit in addition to changing
index_stream_end().

Thanks to Evan Nemerson for the bug report."
7f05803979b4b79642d5be4218a79da7a0b12c47,Lasse Collin,Lasse Collin,2015-09-29 10:57:28,2015-09-29 10:57:28,Update NEWS for 5.2.2.
397fcc0946315b55c3c6d80e37e82a2a78bc15c1,Hauke Henningsen,Lasse Collin,2015-08-17 02:59:54,2015-08-27 18:28:37,"Update German translation, mostly wrt orthography

Provide an update of the German translation.
* A lot of compound words were previously written with spaces, while
  German orthography is relatively clear in that the components
  should not be separated.
* When referring to the actual process of (de)compression rather than the
  concept, replace “(De-)Kompression” with “(De-)Komprimierung”.
  Previously, both forms were used in this context and are now used in a
  manner consistent with “Komprimierung” being more likely to refer to
  a process.
* Consistently translate “standard input”/“output”
* Use “Zeichen” instead of false friend “Charakter” for “character”
* Insert commas around relative clauses (as required in German)
* Some other minor corrections
* Capitalize “ß” as “ẞ”
* Consistently start option descriptions in --help with capital letters

Acked-By: Andre Noll <maan@tuebingen.mpg.de>

* Update after msgmerge"
cbc9e39bae715accb44168930a71888480aad569,Lasse Collin,Lasse Collin,2015-08-11 10:23:04,2015-08-11 10:23:04,"Build: Minor Cygwin cleanup.

Some tests used ""cygwin*"" and some used ""cygwin"". I changed
them all to use ""cygwin"". Shouldn't affect anything in practice."
bcacd8ce7a031566858e5e03c1009064c3f1c89e,Lasse Collin,Lasse Collin,2015-08-11 10:21:52,2015-08-11 10:21:52,Build: Support building of MSYS2 binaries.
0275a5398c01d57b724dec7fea52dec3bd6edc6c,Lasse Collin,Lasse Collin,2015-08-09 18:06:26,2015-08-09 18:06:26,"Windows: Define DLL_EXPORT when building liblzma.dll with MSVC.

src/liblzma/common/common.h uses it to set __declspec(dllexport)
for the API symbols.

Thanks to Adam Walling."
a74525cf9b945fb0b370e64cf406104beb31729b,Lasse Collin,Lasse Collin,2015-08-09 18:02:20,2015-08-09 18:02:20,Windows: Omit unneeded header files from MSVC project files.
fbbb295a91caf39faf8838c8c39526e4cb4dc121,Lasse Collin,Lasse Collin,2015-07-12 17:48:19,2015-07-12 17:48:19,liblzma: A MSVC-specific hack isn't needed with MSVC 2013 and newer.
713dbe5c230fe00865a54f5c32358ea30f9a1156,Lasse Collin,Lasse Collin,2015-06-19 17:38:55,2015-06-19 17:38:55,Update THANKS.
3a5d755d055d51f99c523b4c2952727e1e69cfa1,Lasse Collin,Lasse Collin,2015-06-19 17:21:30,2015-06-19 17:21:30,Windows: Update the docs.
b0798c6aa6184efcefd0bdcca20f96121a13feda,Lasse Collin,Lasse Collin,2015-06-19 14:25:31,2015-06-19 14:25:31,"Windows: Add MSVC project files for building liblzma.

Thanks to Adam Walling for creating these files."
9b02a4ffdac1b9f066658ec4c95c0834f4cd2fb7,Andre Noll,Lasse Collin,2015-05-28 13:50:00,2015-06-10 18:01:09,"Fix typo in German translation.

As pointed out by Robert Pollak, there's a typo in the German
translation of the compression preset option (-0 ... -9) help text.
""The compressor"" translates to ""der Komprimierer"", and the genitive
form is ""des Komprimierers"". The old word makes no sense at all."
c7f4041f6b8f4729f88d3bc888b2a4080ae51f72,Lasse Collin,Lasse Collin,2015-05-13 17:57:55,2015-05-13 17:57:55,"Tests: Fix a memory leak in test_bcj_exact_size.

Thanks to Cristian Rodríguez."
17b29d4f0ae0f780fbd69e15a398dc478d8492f8,Lasse Collin,Lasse Collin,2015-05-12 15:08:24,2015-05-12 15:08:24,"Fix NEWS about threading in 5.2.0.

Thanks to Andy Hochhaus."
49c26920d6e2d85e5c6123e34958aed2e77485ad,Lasse Collin,Lasse Collin,2015-05-11 18:26:16,2015-05-11 18:26:16,xz: Document that threaded decompression hasn't been implemented yet.
5b2458cb244ed237efe4de1ebcf06e1b3a1f4256,Lasse Collin,Lasse Collin,2015-04-20 17:20:29,2015-04-20 17:20:38,Update THANKS.
6bd0349c58451b13442e8f463e35de83548bf985,Lasse Collin,Lasse Collin,2015-04-20 16:59:18,2015-04-20 17:17:48,"Revert ""xz: Use pipe2() if available.""

This reverts commit 7a11c4a8e5e15f13d5fa59233b3172e65428efdd.
It is a problem when libc has pipe2() but the kernel is too
old to have pipe2() and thus pipe2() fails. In xz it's pointless
to have a fallback for non-functioning pipe2(); it's better to
avoid pipe2() completely.

Thanks to Michael Fox for the bug report."
fc0df0f8db87dff45543708a711e17d29c37f632,Lasse Collin,Lasse Collin,2015-04-01 11:45:25,2015-04-01 11:45:25,xz: Fix the Capsicum rights on user_abort_pipe.
57393615b31b3788dd77280452d845bcc12d33af,Lasse Collin,Lasse Collin,2015-03-31 19:20:11,2015-03-31 19:20:11,Update THANKS.
1238381143a9a7ce84839c2582ccd56ff750a440,Lasse Collin,Lasse Collin,2015-03-31 19:19:34,2015-03-31 19:19:34,"xz: Add support for sandboxing with Capsicum.

The sandboxing is used conditionally as described in main.c.
This isn't optimal but it was much easier to implement than
a full sandboxing solution and it still covers the most common
use cases where xz is writing to standard output. This should
have practically no effect on performance even with small files
as fork() isn't needed.

C and locale libraries can open files as needed. This has been
fine in the past, but it's a problem with things like Capsicum.
io_sandbox_enter() tries to ensure that various locale-related
files have been loaded before cap_enter() is called, but it's
possible that there are other similar problems which haven't
been seen yet.

Currently Capsicum is available on FreeBSD 10 and later
and there is a port to Linux too.

Thanks to Loganaden Velvindron for help."
29a087fb5a0c879f0b1bc4c6b989f7b87bacdf9e,Lasse Collin,Lasse Collin,2015-03-31 18:12:30,2015-03-31 18:12:30,"Fix bugs and otherwise improve ax_check_capsicum.m4.

AU_ALIAS was removed because the new version is incompatible
with the old version.

It no longer checks for <sys/capability.h> separately.
It's enough to test for it as part of AC_CHECK_DECL.
The defines HAVE_CAPSICUM_SYS_CAPSICUM_H and
HAVE_CAPSICUM_SYS_CAPABILITY_H were removed as unneeded.
HAVE_SYS_CAPSICUM_H from AC_CHECK_HEADERS is enough.

It no longer does a useless search for the Capsicum library
if the header wasn't found.

Fixed a bug in ACTION-IF-FOUND (the first argument). Specifying
the argument omitted the default action but the given action
wasn't used instead.

AC_DEFINE([HAVE_CAPSICUM]) is now always called when Capsicum
support is found. Previously it was part of the default
ACTION-IF-FOUND which a custom action would override. Now
the default action only prepends ${CAPSICUM_LIB} to LIBS.

The documentation was updated.

Since there as no serial number, ""#serial 2"" was added."
6e845c6a3eddf2fde9db5a29950421dff60a43ac,Lasse Collin,Lasse Collin,2015-03-31 16:20:24,2015-03-31 16:20:24,"Add m4/ax_check_capsicum.m4 for detecting Capsicum support.

The file was loaded from this web page:
https://github.com/google/capsicum-test/blob/dev/autoconf/m4/ax_check_capsicum.m4

Thanks to Loganaden Velvindron for pointing it out for me."
3717885f9ef2c06f1bcbad9f4c2ed2d5695f844e,Lasse Collin,Lasse Collin,2015-03-30 19:44:02,2015-03-30 19:44:02,"Bump version to 5.3.0alpha and soname to 5.3.99.

The idea of 99 is that it looks a bit weird in this context.
For new features there's no API/ABI stability in devel versions."
eccd8155e107c5ada03d13e7730675cdf1a44ddc,Lasse Collin,Lasse Collin,2015-03-29 19:14:47,2015-03-29 19:14:47,Update THANKS.
25263fd9e7a8a913395cb93d7c104cd48c2b4a00,Lasse Collin,Lasse Collin,2015-03-29 19:13:48,2015-03-29 19:13:48,"Fix the detection of installed RAM on QNX.

The earlier version compiled but didn't actually work
since sysconf(_SC_PHYS_PAGES) always fails (or so I was told).

Thanks to Ole André Vadla Ravnås for the patch and testing."
4c544d2410903d38402221cb783ed85585b6a007,Lasse Collin,Lasse Collin,2015-03-27 20:39:07,2015-03-27 20:39:07,"Fix CPU core count detection on QNX.

It tried to use sysctl() on QNX but
  - it broke the build because sysctl() needs -lsocket on QNX;
  - sysctl() doesn't work for detecting the core count on QNX
    even if it compiled.

sysconf() works. An alternative would have been to use
QNX-specific SYSPAGE_ENTRY(num_cpu) from <sys/syspage.h>.

Thanks to Ole André Vadla Ravnås."
e0ea6737b03e83ccaff4514d00e31bb926f8f0f3,Lasse Collin,Lasse Collin,2015-03-07 20:05:57,2015-03-07 20:05:57,xz: size_t/uint32_t cleanup in options.c.
8bcca29a65335fd679c13814b70b35b68fa5daed,Lasse Collin,Lasse Collin,2015-03-07 20:04:23,2015-03-07 20:04:23,xz: Fix a comment and silence a warning in message.c.
f243f5f44c6b19a7c289a0ec73a03ee08364cb5b,Lasse Collin,Lasse Collin,2015-03-07 20:01:00,2015-03-07 20:01:00,liblzma: Silence more uint32_t vs. size_t warnings.
7f0a4c50f4a374c40acf4b86848f301ad1e82d34,Lasse Collin,Lasse Collin,2015-03-07 17:54:00,2015-03-07 17:54:00,"xz: Make arg_count an unsigned int to silence a warning.

Actually the value of arg_count cannot exceed INT_MAX
but it's nicer as an unsigned int."
f6ec46801588b1be29c07c9db98558b521304002,Lasse Collin,Lasse Collin,2015-03-07 17:33:17,2015-03-07 17:33:17,liblzma: Fix a warning in index.c.
a24518971cc621315af142dd3bb7614fab04ad27,Lasse Collin,Lasse Collin,2015-02-26 18:46:14,2015-02-26 18:46:14,Build: Fix a CR+LF problem when running autoreconf -fi on OS/2.
dec11497a71518423b5ff0e759100cf8aadf6c7b,Lasse Collin,Lasse Collin,2015-02-26 14:53:44,2015-02-26 14:53:44,Bump version and soname for 5.2.1.
29e39c79975ab89ee5dd671e97064534a9f3a649,Lasse Collin,Lasse Collin,2015-02-26 11:01:09,2015-02-26 11:01:09,Update NEWS for 5.2.1.
7a11c4a8e5e15f13d5fa59233b3172e65428efdd,Lasse Collin,Lasse Collin,2015-02-22 17:38:48,2015-02-22 17:38:48,xz: Use pipe2() if available.
117d962685c72682c63edc9bb765367189800202,Lasse Collin,Lasse Collin,2015-02-21 21:40:26,2015-02-21 21:40:26,"liblzma: Fix a compression-ratio regression in LZMA1/2 in fast mode.

The bug was added in the commit
f48fce093b07aeda95c18850f5e086d9f2383380 and thus
affected 5.1.4beta and 5.2.0. Luckily the bug cannot
cause data corruption or other nasty things."
ae984e31c167d3bc52972ec422dd1ebd5f5d5719,Lasse Collin,Lasse Collin,2015-02-21 21:00:19,2015-02-21 21:00:19,"xz: Fix the fcntl() usage when creating a pipe for the self-pipe trick.

Now it reads the old flags instead of blindly setting O_NONBLOCK.
The old code may have worked correctly, but this is better."
2205bb5853098aea36a56df6f5747037175f66b4,Lasse Collin,Lasse Collin,2015-02-10 13:29:34,2015-02-10 13:29:34,Update THANKS.
d935b0cdf3db440269b9d952b2b281b18f8c7b08,Lasse Collin,Lasse Collin,2015-02-10 13:28:30,2015-02-10 13:28:30,"tuklib_cpucores: Use cpuset_getaffinity() on FreeBSD if available.

In FreeBSD, cpuset_getaffinity() is the preferred way to get
the number of available cores.

Thanks to Rui Paulo for the patch. I edited it slightly, but
hopefully I didn't break anything."
eb61bc58c20769cac4d05f363b9c0e8c9c71a560,Lasse Collin,Lasse Collin,2015-02-09 20:08:37,2015-02-09 20:08:37,"xzdiff: Make the mktemp usage compatible with FreeBSD's mktemp.

Thanks to Rui Paulo for the fix."
b9a5b6b7a29029680af733082b6a46e0fc01623a,Lasse Collin,Lasse Collin,2015-02-03 19:45:53,2015-02-03 19:45:53,"Add a few casts to tuklib_integer.h to silence possible warnings.

I heard that Visual Studio 2013 gave warnings without the casts.

Thanks to Gabi Davar."
c45757135f40e4a0de730ba5fff0100219493982,Lasse Collin,Lasse Collin,2015-01-26 19:24:39,2015-01-26 19:24:39,liblzma: Set LZMA_MEMCMPLEN_EXTRA depending on the compare method.
3c500174ed5485f550972a2a6109c361e875f069,Lasse Collin,Lasse Collin,2015-01-26 18:40:16,2015-01-26 18:40:16,Update THANKS.
fec88d41e672d9e197c9442aecf02bd0dfa6d516,Lasse Collin,Lasse Collin,2015-01-26 18:39:28,2015-01-26 18:39:28,"liblzma: Silence harmless Valgrind errors.

Thanks to Torsten Rupp for reporting this. I had
forgotten to run Valgrind before the 5.2.0 release."
a9b45badfec0928d20a27c7176c005fa637f7d1e,Lasse Collin,Lasse Collin,2015-01-09 19:50:19,2015-01-09 19:50:19,xz: Fix comments.
541aee6dd4aa97a809aba281475a21b641bb89e2,Lasse Collin,Lasse Collin,2015-01-09 19:35:06,2015-01-09 19:35:06,Update THANKS.
4170edc914655310d2363baccf5e615e09b04911,Lasse Collin,Lasse Collin,2015-01-09 19:34:06,2015-01-09 19:34:06,"xz: Don't fail if stdout doesn't support O_NONBLOCK.

This is similar to the case with stdin.

Thanks to Brad Smith for the bug report and testing
on OpenBSD."
04bbc0c2843c50c8ad1cba42b937118e38b0508d,Lasse Collin,Lasse Collin,2015-01-07 17:18:20,2015-01-07 17:18:20,xz: Fix a memory leak in DOS-specific code.
f0f1f6c7235ffa901cf76fe18e33749e200b3eea,Lasse Collin,Lasse Collin,2015-01-07 17:08:06,2015-01-07 17:08:06,"xz: Don't fail if stdin doesn't support O_NONBLOCK.

It's a problem at least on OpenBSD which doesn't support
O_NONBLOCK on e.g. /dev/null. I'm not surprised if it's
a problem on other OSes too since this behavior is allowed
in POSIX-1.2008.

The code relying on this behavior was committed in June 2013
and included in 5.1.3alpha released on 2013-10-26. Clearly
the development releases only get limited testing."
d2d484647d9d9d679f03c75abb0404f67069271c,Lasse Collin,Lasse Collin,2015-01-06 18:30:15,2015-01-06 18:30:15,"Tests: Don't hide unexpected error messages in test_files.sh.

Hiding them makes no sense since normally there's no error
when testing the ""good"" files. With ""bad"" files errors are
expected and then it makes sense to keep the messages hidden."
aae6a6aeda51cf94a47e39ad624728f9bee75e30,Lasse Collin,Lasse Collin,2014-12-30 09:17:16,2014-12-30 09:17:16,"Update Solaris notes in INSTALL.

Mention the possible ""make check"" failure on Solaris in the
Solaris-specific section of INSTALL. It was already in
section 4.5 but it is better mention it in the OS-specific
section too."
7815112153178800a3521b9f31960e7cdc26cfba,Lasse Collin,Lasse Collin,2014-12-26 10:00:05,2014-12-26 10:00:05,Build: POSIX shell isn't required if scripts are disabled.
a0cd05ee71d330b79ead6eb9222e1b24e1559d3a,Lasse Collin,Lasse Collin,2014-12-21 18:48:37,2014-12-21 18:48:37,DOS: Update Makefile.
b85ee0905ec4ab7656d22e63519fdd3bedb21f2e,Lasse Collin,Lasse Collin,2014-12-21 17:50:38,2014-12-21 17:50:38,Windows: Fix bin_i486 to bin_i686 in build.bash.
cbafa710918195dbba3db02c3fab4f0538235206,Lasse Collin,Lasse Collin,2014-12-21 16:58:44,2014-12-21 16:58:44,Docs: Use lzma_cputhreads() in 04_compress_easy_mt.c.
8dbb57238d372c7263cfeb3e7f7fd9a73173156a,Lasse Collin,Lasse Collin,2014-12-21 16:56:44,2014-12-21 16:56:44,Docs: Update docs/examples/00_README.txt.
6060f7dc76fd6c2a8a1f8e85d0e4d86bb78273e6,Lasse Collin,Lasse Collin,2014-12-21 16:11:17,2014-12-21 16:11:17,"Bump version and soname for 5.2.0.

I know that soname != app version, but I skip AGE=1
in -version-info to make the soname match the liblzma
version anyway. It doesn't hurt anything as long as
it doesn't conflict with library versioning rules."
3e8bd1d15e417f2d588e9be50ce027ee3d48b2da,Lasse Collin,Lasse Collin,2014-12-21 16:05:03,2014-12-21 16:05:03,Avoid variable-length arrays in the debug programs.
72f7307cfdceb941aeb2bf30d424cc0d13621786,Lasse Collin,Lasse Collin,2014-12-21 16:01:45,2014-12-21 16:01:45,Build: Include 04_compress_easy_mt.c in the tarball.
2cb82ff21c62def11f3683a8bb0aaf363102aaa0,Lasse Collin,Lasse Collin,2014-12-21 16:00:38,2014-12-21 16:00:38,Fix build when --disable-threads is used.
9b9e3536e458ef958f66b0e8982efc9d36de4d17,Adrien Nader,Lasse Collin,2014-12-21 14:56:15,2014-12-21 16:00:09,po/fr: improve wording for help for --lzma1/--lzma2.
a8b6b569e7fadbf5b5b9139d53bc764015c15027,Adrien Nader,Lasse Collin,2014-12-21 14:55:48,2014-12-21 16:00:09,po/fr: missing line in translation of --extreme.
f168a6fd1a888cf4f0caaddcafcb21dadc6ab6e9,Lasse Collin,Lasse Collin,2014-12-21 12:32:33,2014-12-21 12:32:33,Update NEWS for 5.2.0.
cec2ee863b3a88f4bf039cb00f73c4a4fc93a429,Lasse Collin,Lasse Collin,2014-12-21 12:32:22,2014-12-21 12:32:22,Update NEWS for 5.0.8.
42e97a32649bf53ce43be2258b902a417c6e7fa1,Lasse Collin,Lasse Collin,2014-12-21 12:07:54,2014-12-21 12:07:54,xz: Fix a comment.
29b95d5d6665cedffa6a9d6d3d914f981e852182,Lasse Collin,Lasse Collin,2014-12-20 18:43:14,2014-12-20 18:43:14,Update INSTALL about the dependencies of the scripts.
3af91040bb42c21afbb81f5568c3313125e61192,Lasse Collin,Lasse Collin,2014-12-20 18:42:33,2014-12-20 18:42:33,Windows: Update build instructions.
0152f72bf6289d744823dc6c849538f3a139ad70,Lasse Collin,Lasse Collin,2014-12-20 18:41:48,2014-12-20 18:41:48,"Windows: Update the build script and README-Windows.txt.

The 32-bit build is now for i686 or newer because the
prebuilt MinGW-w64 toolchains include i686 code in the
executables even if one uses -march=i486.

The build script builds 32-bit SSE2 enabled version too.
Run-time detection of SSE2 support would be nice (on any OS)
but it's not implemented in XZ Utils yet."
4a1f6133ee5533cee8d91e06fcc22443e5f1881a,Lasse Collin,Lasse Collin,2014-12-19 13:51:50,2014-12-19 13:51:50,"Windows: Define TUKLIB_SYMBOL_PREFIX in config.h.

It is to keep all symbols in the lzma_ namespace."
7f7d093de79eee0c7dbfd7433647e46302f19f82,Lasse Collin,Lasse Collin,2014-12-16 19:00:09,2014-12-16 19:00:09,xz: Update the man page about --threads.
009823448b82aa5f465668878a544c5842885407,Lasse Collin,Lasse Collin,2014-12-16 18:57:43,2014-12-16 18:57:43,xz: Update the man page about --block-size.
7dddfbeb499e528940bc12047355c184644aafe9,Adrien Nader,Lasse Collin,2014-12-10 21:26:57,2014-12-12 17:16:10,po/fr: several more translation updates: reword and handle --ignore-check.
6eca5be40e04ddc4b738d493e4e56835956d8b69,Adrien Nader,Lasse Collin,2014-12-10 21:23:01,2014-12-12 17:16:10,po/fr: yet another place where my email address had to be updated.
d1003673e92ba47edd6aeeb3dbea05c18269d0e7,Adrien Nader,Lasse Collin,2014-12-10 21:22:20,2014-12-12 17:16:10,po/fr: fix several typos that have been around since the beginning.
4c5aa911a0df027e46171e368debc543d2fa72b2,Adrien Nader,Lasse Collin,2014-12-03 19:02:31,2014-12-12 17:16:10,"po/fr: last batch of new translations for now.

Four new error messages."
3e3099e36d27059499e7996fb38a62e8ab01d356,Adrien Nader,Lasse Collin,2014-12-03 19:01:32,2014-12-12 17:16:10,"po/fr: translations for --threads, --block-size and --block-list."
e7d96a5933eec4e9d4a62569ee88df0ebb0f1d53,Adrien Nader,Lasse Collin,2014-12-03 19:00:53,2014-12-12 17:16:10,"po/fr: remove fuzzy marker for error messages that will be kept in English.

The following is a copy of a comment inside fr.po:

Note from translator on ""file status flags"".
The following entry is kept un-translated on purpose. It is difficult to
translate and should only happen in exceptional circumstances which means
that translating would:
- lose some of the meaning
- make it more difficult to look up in search engines; it might happen one
in
a million times, if we dilute the error message in 20 languages, it will be
almost impossible to find an explanation and support for the error."
46cbb9033af8a21fafe543302d6919746e0d72af,Adrien Nader,Lasse Collin,2014-12-03 18:58:25,2014-12-12 17:16:10,"po/fr: several minor updates and better wording.

Meaning doesn't change at all: it's only for better wording and/or
formatting of a few strings."
7ce49d444f04e73145f79c832eb4d510594b074a,Adrien Nader,Lasse Collin,2014-12-03 18:56:12,2014-12-12 17:16:09,po/fr: update my email address and copyright years.
214c553ebc3047cd720da1ce5c80cf7c38118d3c,Adrien Nader,Lasse Collin,2014-11-26 09:08:26,2014-12-12 17:16:09,"fr.po: commit file after only ""update-po"" so actual is readable."
1190c641af09cde85f8bd0fbe5c4906f4a29431b,Lasse Collin,Lasse Collin,2014-12-02 18:04:07,2014-12-02 18:04:07,liblzma: Document how lzma_mt.block_size affects memory usage.
e4fc1d2f9571fba79ce383595be2ea2a9257def0,Lasse Collin,Lasse Collin,2014-11-28 18:07:18,2014-11-28 18:07:18,"Update INSTALL about a ""make check"" failure in test_scripts.sh."
34f9e40a0a0c3bd2c2730cdb9cd550bbb8a3f2fe,Lasse Collin,Lasse Collin,2014-11-26 18:12:27,2014-11-26 18:12:27,Remove LZMA_UNSTABLE macro.
6d9c0ce9f2677b159e32b224aba5b535b304a705,Lasse Collin,Lasse Collin,2014-11-26 18:10:33,2014-11-26 18:10:33,liblzma: Update lzma_stream_encoder_mt() API docs.
2301f3f05dd9742f42cda8f0f318864f5dc39ab3,Lasse Collin,Lasse Collin,2014-11-25 10:32:05,2014-11-25 10:32:05,"liblzma: Verify the filter chain in threaded encoder initialization.

This way an invalid filter chain is detected at the Stream
encoder initialization instead of delaying it to the first
call to lzma_code() which triggers the initialization of
the actual filter encoder(s)."
107a263d5bb63cd3593fd6a5c938706539f84523,Lasse Collin,Lasse Collin,2014-11-17 17:11:49,2014-11-17 17:11:49,Build: Update m4/ax_pthread.m4 from Autoconf Archive.
b13a781833399ff5726cfc997f3cb2f0acbdbf31,Lasse Collin,Lasse Collin,2014-11-17 16:52:21,2014-11-17 16:52:21,Build: Replace obsolete AC_HELP_STRING with AS_HELP_STRING.
542cac122ed3550148a2af0033af22b757491378,Lasse Collin,Lasse Collin,2014-11-17 16:43:19,2014-11-17 16:43:19,"Build: Fix Autoconf warnings about escaped backquotes.

Thanks to Daniel Richard G. for pointing out that it's
good to sometimes run autoreconf -fi with -Wall."
7b03a15cea8cd4f19ed680b51c4bcbae3ce4142f,Lasse Collin,Lasse Collin,2014-11-10 16:54:40,2014-11-10 16:54:40,xzdiff: Use mkdir if mktemp isn't available.
f8c13e5e3609581d5dd9f8777985ca07f2390ad7,Lasse Collin,Lasse Collin,2014-11-10 16:45:01,2014-11-10 16:45:01,"xzdiff: Create a temporary directory to hold a temporary file.

This avoids the possibility of ""File name too long"" when
creating a temp file when the input file name is very long.

This also means that other users on the system can no longer
see the input file names in /tmp (or whatever $TMPDIR is)
since the temporary directory will have a generic name. This
usually doesn't matter since on many systems one can see
the arguments given to all processes anyway.

The number X chars to mktemp where increased from 6 to 10.

Note that with some shells temp files or dirs won't be used at all."
7716dcf9df7f457500cb657314e7a9aea5fedb06,Lasse Collin,Lasse Collin,2014-11-10 13:38:47,2014-11-10 13:38:47,"liblzma: Fix lzma_mt.preset in lzma_stream_encoder_mt_memusage().

It read the filter chain from a wrong variable. This is a similar
bug that was fixed in 9494fb6d0ff41c585326f00aa8f7fe58f8106a5e."
230fa4a605542c84b4178a57381695a0af4e779b,Lasse Collin,Lasse Collin,2014-11-10 12:49:55,2014-11-10 12:49:55,Update THANKS.
4e4ae08bc7c1711e399c9f2d26eb375d39d08101,Lasse Collin,Lasse Collin,2014-10-29 19:28:25,2014-10-29 19:28:25,Update .gitignore files.
c923b140b27d1a055db6284e10fd546ad1a7fcdb,Lasse Collin,Lasse Collin,2014-10-29 19:15:35,2014-10-29 19:15:35,"Build: Prepare to support Automake's subdir-objects.

Due to a bug in Automake, subdir-objects won't be enabled
for now.

http://debbugs.gnu.org/cgi/bugreport.cgi?bug=17354

Thanks to Daniel Richard G. for the original patches."
08c2aa16bea0df82828f665d51fba2e0a5e8997f,Lasse Collin,Lasse Collin,2014-10-24 17:09:29,2014-10-24 17:09:29,"Translations: Update the Italian translation.

Thanks to Milo Casagrande."
2f9f61aa83539c54ff6c118a2693890f0519b3dd,Lasse Collin,Lasse Collin,2014-10-18 15:51:45,2014-10-18 15:51:45,"Translations: Update the Polish translation.

Thanks to Jakub Bogusz."
4f9d233f67aea25e532824d11b7642cf7dee7a76,Andre Noll,Lasse Collin,2014-10-14 15:30:30,2014-10-14 19:06:10,"l10n: de.po: Change translator email address.

Although the old address is still working, the new one should
be preferred. So this commit changes all three places in de.po
accordingly.

Signed-off-by: Andre Noll <maan@tuebingen.mpg.de>"
00502b2bedad43f0cc167ac17ae0608837ee196b,Andre Noll,Lasse Collin,2014-10-14 15:30:29,2014-10-14 19:06:10,"l10n: de.po: Update German translation

Signed-off-by: Andre Noll <maan@systemlinux.org>"
706b0496753fb609e69f1570ec603f11162189d1,Andre Noll,Lasse Collin,2014-10-14 15:30:28,2014-10-14 19:06:09,"l10n: de.po: Fix typo: Schießen -> Schließen.

That's a funny one since ""schießen"" means to shoot :)

Signed-off-by: Andre Noll <maan@systemlinux.org>"
7c32e6a935c3d7ee366abad1679bd5f322f0c7d4,Lasse Collin,Lasse Collin,2014-10-09 16:42:26,2014-10-09 16:42:26,Update THANKS.
076258cc458f1e705041ac7a729b15ffe8c5214a,Lasse Collin,Lasse Collin,2014-10-09 16:41:51,2014-10-09 16:41:51,"Add support for AmigaOS/AROS to tuklib_physmem().

Thanks to Fredrik Wikstrom."
efa7b0a210e1baa8e128fc98c5443a944c39ad24,Lasse Collin,Lasse Collin,2014-10-09 15:42:14,2014-10-09 15:42:14,"xzgrep: Avoid passing both -q and -l to grep.

The behavior of grep -ql varies:
  - GNU grep behaves like grep -q.
  - OpenBSD grep behaves like grep -l.

POSIX doesn't make it 100 % clear what behavior is expected.
Anyway, using both -q and -l at the same time makes no sense
so both options simply should never be used at the same time.

Thanks to Christian Weisgerber."
9c5f76098c9986b48d2fc574a0b764f4cde0c538,Trần Ngọc Quân,Trần Ngọc Quân,2014-09-25 02:22:45,2014-10-04 01:33:39,"l10n: vi.po: Update Vietnamese translation

Signed-off-by: Trần Ngọc Quân <vnwildman@gmail.com>"
c4911f2db36d811896c73c008b4218d8fa9a4730,Lasse Collin,Lasse Collin,2014-09-25 15:38:48,2014-09-25 15:38:48,"Build: Detect supported compiler warning flags better.

Clang and nowadays also GCC accept any -Wfoobar option
but then may give a warning that an unknown warning option
was specified. To avoid adding unsupported warning options,
the options are now tested with -Werror.

Thanks to Charles Diza."
76e75522ed6f5c228d55587dee5a997893f6e474,Lasse Collin,Lasse Collin,2014-09-20 18:01:21,2014-09-20 18:01:21,Update NEWS for 5.0.7.
d62028b4c1174fc67b6929f126f5eb24c018c700,Lasse Collin,Lasse Collin,2014-09-20 16:42:56,2014-09-20 16:42:56,"liblzma: Fix a portability problem in Makefile.am.

POSIX supports $< only in inference rules (suffix rules).
Using it elsewhere is a GNU make extension and doesn't
work e.g. with OpenBSD make.

Thanks to Christian Weisgerber for the patch."
c35de31d4283edad3e57d37ffe939406542cb7bb,Lasse Collin,Lasse Collin,2014-09-14 18:54:09,2014-09-14 18:54:09,Bump the version number to 5.1.4beta.
e9e097e22cacdaa23e5414fea7913535449cb340,Lasse Collin,Lasse Collin,2014-09-14 18:50:13,2014-09-14 18:50:13,Update NEWS for 5.0.6 and 5.1.4beta.
642f856bb8562ab66704b1e01ac7bc08b6d0a663,Lasse Collin,Lasse Collin,2014-09-14 18:02:41,2014-09-14 18:02:41,Update TODO.
6b5e3b9eff5b8cedb2aac5f524d4d60fc8a48124,Lasse Collin,Lasse Collin,2014-08-05 19:32:36,2014-08-05 19:32:36,xz: Add --ignore-check.
9adbc2ff373f979c917cdfd3679ce0ebd59f1040,Lasse Collin,Lasse Collin,2014-08-05 19:15:07,2014-08-05 19:15:07,liblzma: Add support for LZMA_IGNORE_CHECK.
0e0f34b8e4f1c60ecaec15c2105982381cc9c3e6,Lasse Collin,Lasse Collin,2014-08-05 19:03:30,2014-08-05 19:03:30,"liblzma: Add support for lzma_block.ignore_check.

Note that this slightly changes how lzma_block_header_decode()
has been documented. Earlier it said that the .version is set
to the lowest required value, but now it says that the .version
field is kept unchanged if possible. In practice this doesn't
affect any old code, because before this commit the only
possible .version was 0."
71e1437ab585b46f7a25f5a131557d3d1c0cbaa2,Lasse Collin,Lasse Collin,2014-08-04 16:25:58,2014-08-04 16:25:58,"liblzma: Use lzma_memcmplen() in the BT3 match finder.

I had missed this when writing the commit
5db75054e900fa06ef5ade5f2c21dffdd5d16141.

Thanks to Jun I Jin."
41dc9ea06e1414ebe8ef52afc8fc15b6e3282b04,Lasse Collin,Lasse Collin,2014-08-03 21:25:44,2014-08-03 21:25:44,Update THANKS.
5dcffdbcc23a68abc3ac3539b30be71bc9b5af84,Lasse Collin,Lasse Collin,2014-08-03 18:32:25,2014-08-03 18:32:25,"liblzma: SHA-256: Optimize the Maj macro slightly.

The Maj macro is used where multiple things are added
together, so making Maj a sum of two expressions allows
some extra freedom for the compiler to schedule the
instructions.

I learned this trick from
<http://www.hackersdelight.org/corres.txt>."
a9477d1e0c6fd0e47e637d051e7b9e2a5d9af517,Lasse Collin,Lasse Collin,2014-08-03 18:08:12,2014-08-03 18:08:12,"liblzma: SHA-256: Optimize the way rotations are done.

This looks weird because the rotations become sequential,
but it helps quite a bit on both 32-bit and 64-bit x86:

  - It requires fewer instructions on two-operand
    instruction sets like x86.

  - It requires one register less which matters especially
    on 32-bit x86.

I hope this doesn't hurt other archs.

I didn't invent this idea myself, but I don't remember where
I saw it first."
5a76c7c8ee9a0afbeedb1c211db9224260404347,Lasse Collin,Lasse Collin,2014-08-03 17:38:13,2014-08-03 17:38:13,"liblzma: SHA-256: Remove the GCC #pragma that became unneeded.

The unrolling in the previous commit should avoid the
situation where a compiler may think that an uninitialized
variable might be accessed."
9a096f8e57509775c331950b8351bbca77bdcfa8,Lasse Collin,Lasse Collin,2014-08-03 17:33:38,2014-08-03 17:33:38,"liblzma: SHA-256: Unroll a little more.

This way a branch isn't needed for each operation
to choose between blk0 and blk2, and still the code
doesn't grow as much as it would with full unrolling."
bc7650d87bf27f85f1a2a806dc2db1780e09e6a5,Lasse Collin,Lasse Collin,2014-08-03 16:56:43,2014-08-03 16:56:43,liblzma: SHA-256: Do the byteswapping without a temporary buffer.
544aaa3d13554e8640f9caf7db717a96360ec0f6,Lasse Collin,Lasse Collin,2014-07-25 19:38:28,2014-07-25 19:38:28,"liblzma: Use lzma_memcmplen() in normal mode of LZMA.

Two locations were not changed yet because the simplest change
assumes that the initial ""len"" may be greater than ""limit""."
f48fce093b07aeda95c18850f5e086d9f2383380,Lasse Collin,Lasse Collin,2014-07-25 19:30:38,2014-07-25 19:30:38,liblzma: Simplify LZMA fast mode code by using memcmp().
6bf5308e34e23dede5b301b1b9b4f131dacd9218,Lasse Collin,Lasse Collin,2014-07-25 19:29:49,2014-07-25 19:29:49,liblzma: Use lzma_memcmplen() in fast mode of LZMA.
353212137e51e45b105a3a3fc2e6879f1cf0d492,Lasse Collin,Lasse Collin,2014-07-25 18:16:23,2014-07-25 18:16:23,Update THANKS.
5db75054e900fa06ef5ade5f2c21dffdd5d16141,Lasse Collin,Lasse Collin,2014-07-25 18:15:07,2014-07-25 18:15:07,"liblzma: Use lzma_memcmplen() in the match finders.

This doesn't change the match finder output."
e1c8f1d01f4a4e2136173edab2dc63c71ef038f4,Lasse Collin,Lasse Collin,2014-07-25 17:57:20,2014-07-25 17:57:20,"liblzma: Add lzma_memcmplen() for fast memory comparison.

This commit just adds the function. Its uses will be in
separate commits.

This hasn't been tested much yet and it's perhaps a bit early
to commit it but if there are bugs they should get found quite
quickly.

Thanks to Jun I Jin from Intel for help and for pointing out
that string comparison needs to be optimized in liblzma."
765735cf52e5123586e74a51b9c073b5257f631f,Lasse Collin,Lasse Collin,2014-07-12 18:10:09,2014-07-12 18:10:09,Update THANKS.
59da01785ef66c7e62f36e70ca808fd2824bb995,Lasse Collin,Lasse Collin,2014-07-12 17:06:08,2014-07-12 17:06:08,"Translations: Add Vietnamese translation.

Thanks to Trần Ngọc Quân."
17215f751c354852700e7f8592ccf319570a0721,Lasse Collin,Lasse Collin,2014-06-29 17:54:14,2014-06-29 17:54:14,"xz: Update the help message of a few options.

Updated: --threads, --block-size, and --block-list
Added: --flush-timeout"
96864a6ddf91ad693d102ea165f3d7918744d582,Lasse Collin,Lasse Collin,2014-06-18 19:07:06,2014-06-18 19:07:06,xz: Use lzma_cputhreads() instead of own copy of tuklib_cpucores().
a115cc3748482e277f42a968baa3cd266f031dba,Lasse Collin,Lasse Collin,2014-06-18 19:04:24,2014-06-18 19:04:24,liblzma: Add lzma_cputhreads().
3ce3e7976904fbab4e6482bafa442856f77a51fa,Lasse Collin,Lasse Collin,2014-06-18 16:11:52,2014-06-18 16:11:52,"xz: Check for filter chain compatibility for --flush-timeout.

This avoids LZMA_PROG_ERROR from lzma_code() with filter chains
that don't support LZMA_SYNC_FLUSH."
381ac14ed79e5d38809f251705be8b3193bba417,Lasse Collin,Lasse Collin,2014-06-13 16:21:54,2014-06-13 16:21:54,xzgrep: List xzgrep_expected_output in tests/Makefile.am.
4244b65b06d5ecaf6f9dd0387ac7e3166bd2364e,Lasse Collin,Lasse Collin,2014-06-13 15:58:22,2014-06-13 15:58:22,"xzgrep: Improve the test script.

Now it should be close to the functionality of the original
version by Pavel Raiskup."
1e60f2c0a0ee6c18b02943ce56214799a70aac26,Lasse Collin,Lasse Collin,2014-06-11 18:03:25,2014-06-11 18:03:25,"xzgrep: Add a test for the previous fix.

This is a simplified version of Pavel Raiskup's
original patch."
ceca37901783988204caaf40dff4623d535cc789,Lasse Collin,Lasse Collin,2014-06-11 17:43:28,2014-06-11 17:43:28,"xzgrep: exit 0 when at least one file matches.

Mimic the original grep behavior and return exit_success when
at least one xz compressed file matches given pattern.

Original bugreport:
https://bugzilla.redhat.com/show_bug.cgi?id=1108085

Thanks to Pavel Raiskup for the patch."
8c19216baccb92d011694590df8a1262da2e980c,Lasse Collin,Lasse Collin,2014-06-09 18:21:24,2014-06-09 18:21:24,xz: Force single-threaded mode when --flush-timeout is used.
87f1a24810805187d7bbc8ac5512e7eec307ddf5,Lasse Collin,Lasse Collin,2014-05-25 19:05:39,2014-05-25 19:05:39,Update THANKS.
da1718f266fcfc091e7bf08aae1bc986d0e6cc6b,Lasse Collin,Lasse Collin,2014-05-25 18:45:56,2014-05-25 18:45:56,"liblzma: Use lzma_alloc_zero() in LZ encoder initialization.

This avoids a memzero() call for a newly-allocated memory,
which can be expensive when encoding small streams with
an over-sized dictionary.

To avoid using lzma_alloc_zero() for memory that doesn't
need to be zeroed, lzma_mf.son is now allocated separately,
which requires handling it separately in normalize() too.

Thanks to Vincenzo Innocente for reporting the problem."
28af24e9cf2eb259997c85dce13d4c97b3daa47a,Lasse Collin,Lasse Collin,2014-05-25 16:25:57,2014-05-25 16:25:57,liblzma: Add the internal function lzma_alloc_zero().
ed9ac85822c490e34b68c259afa0b385d21d1c40,Lasse Collin,Lasse Collin,2014-05-08 15:03:09,2014-05-08 15:03:09,"xz: Fix uint64_t vs. size_t which broke 32-bit build.

Thanks to Christian Hesse."
d716acdae3fa7996f9e68a7bac012e6d8d13dd02,Lasse Collin,Lasse Collin,2014-05-04 08:09:11,2014-05-04 08:09:11,Docs: Update comments to refer to lzma/lzma12.h in example programs.
4d5b7b3fda31241ca86ed35e08e73f776ee916e0,Lasse Collin,Lasse Collin,2014-05-04 08:07:17,2014-05-04 08:07:17,"liblzma: Rename the private API header lzma/lzma.h to lzma/lzma12.h.

It can be confusing that two header files have the same name.
The public API file is still lzma.h."
1555a9c5664afc7893a2b75e9970105437f01ef1,Lasse Collin,Lasse Collin,2014-04-25 14:53:42,2014-04-25 14:53:42,"Build: Fix the combination of --disable-xzdec --enable-lzmadec.

In this case ""make install"" could fail if the man page directory
didn't already exist at the destination. If it did exist, a
dangling symlink was created there. Now the link is omitted
instead. This isn't the best fix but it's better than the old
behavior."
56056571df3377eaa6ae6233b3ccc5d72e81d43d,Lasse Collin,Lasse Collin,2014-04-25 14:44:26,2014-04-25 14:44:26,Build: Add --disable-doc to configure.
6de61d8721097a6214810841aa85b08e303ac538,Lasse Collin,Lasse Collin,2014-04-24 15:06:24,2014-04-24 15:06:24,"Update INSTALL.

Add a note about failing ""make check"". The source of
the problem should be fixed in libtool (if it really is
a libtool bug and not mine) but I'm unable to spend time
on that for now. Thanks to Nelson H. F. Beebe for reporting
the issue.

Add a note about a possible need to run ""ldconfig"" after
""make install""."
54df428799a8d853639b753d0e6784694d73eb3e,Lasse Collin,Lasse Collin,2014-04-09 14:26:10,2014-04-09 14:26:10,"xz: Rename a variable to avoid a namespace collision on Solaris.

I don't know the details but I have an impression that there's
no problem in practice if using GCC since people have built xz
with GCC (without patching xz), but renaming the variable cannot
hurt either.

Thanks to Mark Ashley."
5876ca27daa1429676b1160007d9688266907f00,Lasse Collin,Lasse Collin,2014-01-29 18:19:41,2014-01-29 18:19:41,"Docs: Add example program for threaded encoding.

I didn't add -DLZMA_UNSTABLE to Makefile so one has to
specify it manually as long as LZMA_UNSTABLE is needed."
9494fb6d0ff41c585326f00aa8f7fe58f8106a5e,Lasse Collin,Lasse Collin,2014-01-29 18:13:51,2014-01-29 18:13:51,"liblzma: Fix lzma_mt.preset not working with lzma_stream_encoder_mt().

It read the filter chain from a wrong variable."
673a4cb53de3a715685cb1b836da57a3c7dcd43c,Lasse Collin,Lasse Collin,2014-01-20 09:20:40,2014-01-20 09:20:40,liblzma: Fix typo in a comment.
ad96a871a1470eb76d6233d3890ce9338047b7a3,Lasse Collin,Lasse Collin,2014-01-12 17:38:43,2014-01-12 17:38:43,"Windows: Add config.h for building liblzma with MSVC 2013.

This is for building liblzma. Building xz tool too requires
a little more work. Maybe it will be supported, but for most
MSVC users it's enough to be able to build liblzma.

C99 support in MSVC 2013 is almost usable which is a big
improvement over earlier versions. It's ""almost"" because
there's a dumb bug that breaks mixed declarations after
an ""if"" statements unless the ""if"" statement uses braces:

https://connect.microsoft.com/VisualStudio/feedback/details/808650/visual-studio-2013-c99-compiler-bug
https://connect.microsoft.com/VisualStudio/feedback/details/808472/c99-support-of-mixed-declarations-and-statements-fails-with-certain-types-and-constructs

Hopefully it will get fixed. Then liblzma should be
compilable with MSVC 2013 without patching."
3d5c090872fab4212b57c290e8ed4d02c78c1737,Lasse Collin,Lasse Collin,2014-01-12 15:41:14,2014-01-12 15:41:14,xz: Fix a comment.
69fd4e1c932c7975476a0143c86e45d81b60d3f9,Lasse Collin,Lasse Collin,2014-01-12 15:04:33,2014-01-12 15:04:33,Windows: Add MSVC defines for inline and restrict keywords.
a19d9e8575ee6647cd9154cf1f20203f1330485f,Lasse Collin,Lasse Collin,2014-01-12 14:44:52,2014-01-12 14:44:52,"liblzma: Avoid C99 compound literal arrays.

MSVC 2013 doesn't like them. Maybe they aren't so good
for readability either since many aren't used to them."
e28528f1c867b2ed4ac91195ad08efb9bb8a6263,Lasse Collin,Lasse Collin,2014-01-12 10:50:30,2014-01-12 10:50:30,"liblzma: Remove a useless C99ism from sha256.c.

Unsurprisingly it makes no difference in compiled output."
5ad1effc45adfb7dabc9a98e79736077e6b7e2d5,Lasse Collin,Lasse Collin,2014-01-12 10:17:08,2014-01-12 10:17:08,"xz: Fix use of wrong variable.

Since the only call to suffix_set() uses optarg
as the argument, fixing this bug doesn't change
the behavior of the program."
3e62c68d75b5a3fdd46dbb34bb335d73289860d5,Lasse Collin,Lasse Collin,2014-01-12 10:11:36,2014-01-12 10:11:36,Fix typos in comments.
e90ea601fb72867ec04adf456cbe4bf9520fd412,Lasse Collin,Lasse Collin,2013-11-26 16:20:16,2013-11-26 16:20:16,Update THANKS.
b22e94d8d15764416354e04729382a7371ae2c30,Lasse Collin,Lasse Collin,2013-11-26 16:20:09,2013-11-26 16:20:09,"liblzma: Document the need for block->check for lzma_block_header_decode().

Thanks to Tomer Chachamu."
d1cd8b1cb824b72421d1ee370e628024d2fcbec4,Lasse Collin,Lasse Collin,2013-11-12 14:38:57,2013-11-12 14:38:57,xz: Update the man page about --block-size and --block-list.
76be7c612e6bcc38724488ccc3b8bcb1cfec9f0a,Lasse Collin,Lasse Collin,2013-11-12 14:30:53,2013-11-12 14:30:53,Update THANKS.
dd750acbe2259d75444ef0f8da2d4bacc90d7afc,Lasse Collin,Lasse Collin,2013-11-12 14:29:48,2013-11-12 14:29:48,"xz: Make --block-list and --block-size work together in single-threaded.

Previously, --block-list and --block-size only worked together
in threaded mode. Boundaries are specified by --block-list, but
--block-size specifies the maximum size for a Block. Now this
works in single-threaded mode too.

Thanks to James M Leddy for the original patch."
ae222fe9805d0161d022d75ba8485dab8bf6d7d5,Lasse Collin,Lasse Collin,2013-10-26 10:26:14,2013-10-26 10:26:14,Bump the version number to 5.1.3alpha.
2193837a6a597cd3bf4e9ddf49421a5697d8e155,Lasse Collin,Lasse Collin,2013-10-26 10:25:02,2013-10-26 10:25:02,Update NEWS for 5.1.3alpha.
ed48e75e2763876173aef8902da407a8eb28854b,Lasse Collin,Lasse Collin,2013-10-26 09:47:04,2013-10-26 09:47:04,Update TODO.
841da0352d79a56a44796a4c39163429c9f039a3,Lasse Collin,Lasse Collin,2013-10-25 19:41:28,2013-10-25 19:41:28,"xz: Document behavior of --block-list with threads.

This needs to be updated before 5.2.0."
56feb8665b78c1032aabd53c619c62af51defe64,Lasse Collin,Lasse Collin,2013-10-22 17:03:12,2013-10-22 17:03:12,xz: Document --flush-timeout=TIMEOUT on the man page.
ba413da1d5bb3324287cf3174922acd921165971,Lasse Collin,Lasse Collin,2013-10-22 16:51:55,2013-10-22 16:51:55,"xz: Take advantage of LZMA_FULL_BARRIER with --block-list.

Now if --block-list is used in threaded mode, the encoder
won't need to flush at each Block boundary specified via
--block-list. This improves performance a lot, making
threading helpful with --block-list.

The flush timer was reset after LZMA_FULL_FLUSH but since
LZMA_FULL_BARRIER doesn't flush, resetting the timer is
no longer done."
0cd45fc2bc5537de287a0bc005e2d67467a92148,Lasse Collin,Lasse Collin,2013-10-02 17:05:23,2013-10-02 17:05:23,"liblzma: Support LZMA_FULL_FLUSH and _BARRIER in threaded encoder.

Now --block-list=SIZES works with in the threaded mode too,
although the performance is still bad due to the use of
LZMA_FULL_FLUSH instead of the new LZMA_FULL_BARRIER."
97bb38712f414fabecca908af2e38a12570293fd,Lasse Collin,Lasse Collin,2013-10-02 09:55:11,2013-10-02 09:55:11,"liblzma: Add LZMA_FULL_BARRIER support to single-threaded encoder.

In the single-threaded encoder LZMA_FULL_BARRIER is simply
an alias for LZMA_FULL_FLUSH."
fef0c6b410c08e581c9178700a4e7599f0895ff9,Lasse Collin,Lasse Collin,2013-09-17 08:57:51,2013-09-17 08:57:51,"liblzma: Add block_buffer_encoder.h into Makefile.inc.

This should have been in b465da5988dd59ad98fda10c2e4ea13d0b9c73bc."
8083e03291b6d21c0f538163e187b4e8cd5594e4,Lasse Collin,Lasse Collin,2013-09-17 08:55:38,2013-09-17 08:55:38,xz: Add a missing test for TUKLIB_DOSLIKE.
6b44b4a775fe29ecc7bcb7996e086e3bc09e5fd0,Lasse Collin,Lasse Collin,2013-09-17 08:52:28,2013-09-17 08:52:28,"Add native threading support on Windows.

Now liblzma only uses ""mythread"" functions and types
which are defined in mythread.h matching the desired
threading method.

Before Windows Vista, there is no direct equivalent to
pthread condition variables. Since this package doesn't
use pthread_cond_broadcast(), pre-Vista threading can
still be kept quite simple. The pre-Vista code doesn't
use anything that wasn't already available in Windows 95,
so the binaries should run even on Windows 95 if someone
happens to care."
ae0ab74a88d5b9b15845f1d9a24ade4349a54f9f,Lasse Collin,Lasse Collin,2013-09-11 11:40:35,2013-09-11 11:40:35,"Build: Remove a comment about Automake 1.10 from configure.ac.

The previous commit supports silent rules and that requires
Automake 1.11."
72975df6c8c59aaf849138ab3606e8fb6970596a,Lasse Collin,Lasse Collin,2013-09-09 17:37:03,2013-09-09 17:37:03,"Build: Create liblzma.pc in a src/liblzma/Makefile.am.

Previously it was done in configure, but doing that goes
against the Autoconf manual. Autoconf requires that it is
possible to override e.g. prefix after running configure
and that doesn't work correctly if liblzma.pc is created
by configure.

A potential downside of this change is that now e.g.
libdir in liblzma.pc is a standalone string instead of
being defined via ${prefix}, so if one overrides prefix
when running pkg-config the libdir won't get the new value.
I don't know if this matters in practice.

Thanks to Vincent Torri."
1c2b6e7e8382ed390f53e140f160488bb2205ecc,Lasse Collin,Lasse Collin,2013-08-04 12:24:09,2013-08-04 12:24:09,"Fix the previous commit which broke the build.

Apparently I didn't even compile-test the previous commit.

Thanks to Christian Hesse."
124eb69c7857f618b4807588c51bc9ba21bf8691,Lasse Collin,Lasse Collin,2013-08-03 10:52:58,2013-08-03 10:52:58,"Windows: Add Windows support to tuklib_cpucores().

It is used for Cygwin too. I'm not sure if that is
a good or bad idea.

Thanks to Vincent Torri."
eada8a875ce3fd521cb42e4ace2624d3d49c5f35,Anders F Bjorklund,Lasse Collin,2013-08-02 13:59:46,2013-08-03 10:15:32,macosx: separate liblzma package
be0100d01ca6a75899d051bee00acf17e6dc0c15,Anders F Bjorklund,Lasse Collin,2013-08-02 13:58:44,2013-08-03 10:15:32,macosx: set minimum to leopard
416729e2d743f4b2fe9fd438eedeb98adce033c3,Anders F Bjorklund,Lasse Collin,2011-08-07 11:13:30,2013-08-03 10:15:32,move configurables into variables
16581080e5f29f9a4e49efece21c5bf572323acc,Lasse Collin,Lasse Collin,2013-07-15 11:08:41,2013-07-15 11:08:41,Update THANKS.
3e2b198ba37b624efd9c7caee2a435dc986b46c6,Lasse Collin,Lasse Collin,2013-07-15 11:08:02,2013-07-15 11:08:02,"Build: Fix the detection of missing CRC32.

Thanks to Vincent Torri."
dee6ad3d5915422bc30a6821efeacaeb8ca8ef00,Lasse Collin,Lasse Collin,2013-07-04 11:18:46,2013-07-04 11:18:46,"xz: Add preliminary support for --flush-timeout=TIMEOUT.

When --flush-timeout=TIMEOUT is used, xz will use
LZMA_SYNC_FLUSH if read() would block and at least
TIMEOUT milliseconds has elapsed since the previous flush.

This can be useful in realtime-like use cases where the
data is simultanously decompressed by another process
(possibly on a different computer). If new uncompressed
input data is produced slowly, without this option xz could
buffer the data for a long time until it would become
decompressible from the output.

If TIMEOUT is 0, the feature is disabled. This is the default.

This commit affects the compression side. Using xz for
the decompression side for the above purpose doesn't work
yet so well because there is quite a bit of input and
output buffering when decompressing.

The --long-help or man page were not updated yet.
The details of this feature may change."
fa381acaf9a29a8114e1c0a97de99bab9adb014e,Lasse Collin,Lasse Collin,2013-07-04 10:41:03,2013-07-04 10:41:03,xz: Don't set src_eof=true after an I/O error because it's useless.
ea00545beace5b950f709ec21e46878e0f448678,Lasse Collin,Lasse Collin,2013-07-04 10:25:11,2013-07-04 10:25:11,"xz: Fix the test when to read more input.

Testing for end of file was no longer correct after full flushing
became possible with --block-size=SIZE and --block-list=SIZES.
There was no bug in practice though because xz just made a few
unneeded zero-byte reads."
736903c64bef394c06685d79908e397bcb08b88f,Lasse Collin,Lasse Collin,2013-07-04 09:51:57,2013-07-04 09:51:57,"xz: Move some of the timing code into mytime.[hc].

This switches units from microseconds to milliseconds.

New clock_gettime(CLOCK_MONOTONIC) will be used if available.
There is still a fallback to gettimeofday()."
24edf8d807e24ffaa1e793114d94cca3b970027d,Lasse Collin,Lasse Collin,2013-07-01 11:35:03,2013-07-01 11:35:03,Update THANKS.
c0627b3fceacfa1ed162f5f55235360ea26f569a,Lasse Collin,Lasse Collin,2013-07-01 11:34:11,2013-07-01 11:34:11,"xz: Silence a warning seen with _FORTIFY_SOURCE=2.

Thanks to Christian Hesse."
1936718bb38ee394bd89836fdd4eabc0beb02443,Lasse Collin,Lasse Collin,2013-06-30 16:40:11,2013-06-30 16:40:11,Update NEWS for 5.0.5.
a37ae8b5eb6093a530198f109c6f7a538c80ecf0,Lasse Collin,Lasse Collin,2013-06-30 15:02:27,2013-06-30 15:02:27,"Man pages: Use similar syntax for synopsis as in xz.

The man pages of lzmainfo, xzmore, and xzdec had similar
constructs as the man page of xz had before the commit
eb6ca9854b8eb9fbf72497c1cf608d6b19d2d494. Eric S. Raymond
didn't mention these man pages in his bug report, but
it's nice to be consistent."
cdba9ddd870ae72fd6219a125662c20ec997f86c,Lasse Collin,Lasse Collin,2013-06-29 12:59:13,2013-06-29 12:59:13,"xz: Use non-blocking I/O for the output file.

Now both reading and writing should be without
race conditions with signals.

They might still be signal handling issues left.
Signals are blocked during many operations to avoid
EINTR but it may cause problems e.g. if writing to
stderr blocks when trying to display an error message."
e61a5c95da3fe31281d959e5e842885a8ba2b5bd,Lasse Collin,Lasse Collin,2013-06-28 20:56:17,2013-06-28 20:56:17,"xz: Fix return value type in io_write_buf().

It didn't affect the behavior of the code since -1
becomes true anyway."
9dc319eabb34a826f4945f91c71620f14a60e9e2,Lasse Collin,Lasse Collin,2013-06-28 20:48:05,2013-06-28 20:48:05,"xz: Use the self-pipe trick to avoid a race condition with signals.

It is possible that a signal to set user_abort arrives right
before a blocking system call is made. In this case the call
may block until another signal arrives, while the wanted
behavior is to make xz clean up and exit as soon as possible.

After this commit, the race condition is avoided with the
input side which already uses non-blocking I/O. The output
side still uses blocking I/O and thus has the race condition."
3541bc79d0cfabc0ad155c99bfdad1289f17fec3,Lasse Collin,Lasse Collin,2013-06-28 19:51:02,2013-06-28 19:51:02,xz: Use non-blocking I/O for the input file.
78673a08bed5066c81e8a8e90d20e670c28ecfd5,Lasse Collin,Lasse Collin,2013-06-28 15:46:13,2013-06-28 15:46:13,"xz: Remove an outdated NetBSD-specific comment.

Nowadays errno == EFTYPE is documented in open(2)."
a616fdad34b48b2932ef03fb87309dcc8b829527,Lasse Collin,Lasse Collin,2013-06-28 15:09:47,2013-06-28 15:09:47,"xz: Fix error detection of fcntl(fd, F_SETFL, flags) calls.

POSIX says that fcntl(fd, F_SETFL, flags) returns -1 on
error and ""other than -1"" on success. This is how it is
documented e.g. on OpenBSD too. On Linux, success with
F_SETFL is always 0 (at least accorinding to fcntl(2)
from man-pages 3.51)."
4a08a6e4c61c65ab763ab314100a6d7a3bb89298,Lasse Collin,Lasse Collin,2013-06-28 14:36:47,2013-06-28 14:36:47,"xz: Fix use of wrong variable in a fcntl() call.

Due to a wrong variable name, when writing a sparse file
to standard output, *all* file status flags were cleared
(to the extent the operating system allowed it) instead of
only clearing the O_APPEND flag. In practice this worked
fine in the common situations on GNU/Linux, but I didn't
check how it behaved elsewhere.

The original flags were still restored correctly. I still
changed the code to use a separate boolean variable to
indicate when the flags should be restored instead of
relying on a special value in stdout_flags."
b790b435daa3351067f80a5973b647f8d55367a2,Lasse Collin,Lasse Collin,2013-06-28 11:55:37,2013-06-28 11:55:37,"xz: Fix assertion related to posix_fadvise().

Input file can be a FIFO or something else that doesn't
support posix_fadvise() so don't check the return value
even with an assertion. Nothing bad happens if the call
to posix_fadvise() fails."
84d2da6c9dc252f441deb7626c2522202b005d4d,Lasse Collin,Lasse Collin,2013-06-26 10:30:57,2013-06-26 10:30:57,"xz: Check the value of lzma_stream_flags.version in --list.

It is a no-op for now, but if an old xz version is used
together with a newer liblzma that supports something new,
then this check becomes important and will stop the old xz
from trying to parse files that it won't understand."
9376f5f8f762296f2173d61af9101112c36f38c0,Lasse Collin,Lasse Collin,2013-06-26 09:17:00,2013-06-26 09:17:00,"Build: Require Automake 1.12 and use serial-tests option.

It should actually still work with Automake 1.10 if
the serial-tests option is removed. Automake 1.13 started
using parallel tests by default and the option to get
the old behavior isn't supported before 1.12.

At least for now, parallel tests don't improve anything
in XZ Utils but they hide the progress output from
test_compress.sh."
b7e200d7bd0a3c7c171c13ad37d68296d6f73374,Lasse Collin,Lasse Collin,2013-06-23 15:59:13,2013-06-23 15:59:13,Update THANKS.
46540e4c10923e363741ff5aab99e79fc0ce6ee8,Lasse Collin,Lasse Collin,2013-06-23 15:57:23,2013-06-23 15:57:23,"liblzma: Avoid a warning about a shadowed variable.

On Mac OS X wait() is declared in <sys/wait.h> that
we include one way or other so don't use ""wait"" as
a variable name.

Thanks to Christian Kujau."
ebb501ec73cecc546c67117dd01b5e33c90bfb4a,Lasse Collin,Lasse Collin,2013-06-23 14:36:47,2013-06-23 14:36:47,"xz: Validate Uncompressed Size from Block Header in list.c.

This affects only ""xz -lvv"". Normal decompression with xz
already detected if Block Header and Index had mismatched
Uncompressed Size fields. So this just makes ""xz -lvv""
show such files as corrupt instead of showing the
Uncompressed Size from Index."
c09e91dd236d3cabee0fc48312b3dc8cceae41ab,Lasse Collin,Lasse Collin,2013-06-21 19:08:11,2013-06-21 19:08:11,Update THANKS.
eb6ca9854b8eb9fbf72497c1cf608d6b19d2d494,Lasse Collin,Lasse Collin,2013-06-21 19:04:45,2013-06-21 19:04:45,"xz: Make the man page more friendly to doclifter.

Thanks to Eric S. Raymond."
0c0a1947e6ad90a0a10b7a5c39f6ab99a0aa5c93,Lasse Collin,Lasse Collin,2013-06-21 18:54:59,2013-06-21 18:54:59,"xz: A couple of man page fixes.

Now the interaction of presets and custom filter chains
is described correctly. Earlier it contradicted itself.

Thanks to DevHC who reported these issues on IRC to me
on 2012-12-14."
2fcda89939c903106c429e109083d43d894049e0,Lasse Collin,Lasse Collin,2013-06-21 18:50:26,2013-06-21 18:50:26,"xz: Fix interaction between preset and custom filter chains.

There was somewhat illogical behavior when --extreme was
specified and mixed with custom filter chains.

Before this commit, ""xz -9 --lzma2 -e"" was equivalent
to ""xz --lzma2"". After it is equivalent to ""xz -6e""
(all earlier preset options get forgotten when a custom
filter chain is specified and the default preset is 6
to which -e is applied). I find this less illogical.

This also affects the meaning of ""xz -9e --lzma2 -7"".
Earlier it was equivalent to ""xz -7e"" (the -e specified
before a custom filter chain wasn't forgotten). Now it
is ""xz -7"". Note that ""xz -7e"" still is the same as ""xz -e7"".

Hopefully very few cared about this in the first place,
so pretty much no one should even notice this change.

Thanks to Conley Moorhous."
97379c5ea758da3f8b0bc444d5f7fa43753ce610,Lasse Collin,Lasse Collin,2013-04-27 19:07:46,2013-04-27 19:07:46,"Build: Use -Wvla with GCC if supported.

Variable-length arrays are mandatory in C99 but optional in C11.
The code doesn't currently use any VLAs and it shouldn't in the
future either to stay compatible with C11 without requiring any
optional C11 features."
8957c58609d3987c58aa72b96c436cf565cc4917,Lasse Collin,Lasse Collin,2013-04-15 16:29:09,2013-04-15 16:29:09,"xzdec: Improve the --help message.

The options are now ordered in the same order as in xz's help
message.

Descriptions were added to the options that are ignored.
I left them in parenthesis even if it looks a bit weird
because I find it easier to spot the ignored vs. non-ignored
options from the list that way."
ed886e1a92534a24401d0e99c11f1dcff3b5220a,Lasse Collin,Lasse Collin,2013-04-05 16:25:40,2013-04-05 16:25:40,Update THANKS.
5019413a055ce29e660dbbf15e02443cb5a26c59,Jeff Bastian,Lasse Collin,2013-04-03 11:59:17,2013-04-05 16:14:50,"xzgrep: make the '-h' option to be --no-filename equivalent

* src/scripts/xzgrep.in: Accept the '-h' option in argument parsing."
5ea900cb5ad862bca81316729f92357c1fc040ce,Lasse Collin,Lasse Collin,2013-03-23 20:25:15,2013-03-23 20:25:15,"liblzma: Be less picky in lzma_alone_decoder().

To avoid false positives when detecting .lzma files,
rare values in dictionary size and uncompressed size fields
were rejected. They will still be rejected if .lzma files
are decoded with lzma_auto_decoder(), but when using
lzma_alone_decoder() directly, such files will now be accepted.
Hopefully this is an OK compromise.

This doesn't affect xz because xz still has its own file
format detection code. This does affect lzmadec though.
So after this commit lzmadec will accept files that xz or
xz-emulating-lzma doesn't.

NOTE: lzma_alone_decoder() still won't decode all .lzma files
because liblzma's LZMA decoder doesn't support lc + lp > 4.

Reported here:
http://sourceforge.net/projects/lzmautils/forums/forum/708858/topic/7068827"
bb117fffa84604b6e3811b068c80db82bf7f7b05,Lasse Collin,Lasse Collin,2013-03-23 19:55:13,2013-03-23 19:55:13,"liblzma: Use lzma_block_buffer_bound64() in threaded encoder.

Now it uses lzma_block_uncomp_encode() if the data doesn't
fit into the space calculated by lzma_block_buffer_bound64()."
e572e123b55b29527e54ce5f0807f115481d78b9,Lasse Collin,Lasse Collin,2013-03-23 19:51:38,2013-03-23 19:51:38,"liblzma: Fix another deadlock in the threaded encoder.

This race condition could cause a deadlock if lzma_end() was
called before finishing the encoding. This can happen with
xz with debugging enabled (non-debugging version doesn't
call lzma_end() before exiting)."
b465da5988dd59ad98fda10c2e4ea13d0b9c73bc,Lasse Collin,Lasse Collin,2013-03-23 17:17:33,2013-03-23 17:17:33,"liblzma: Add lzma_block_uncomp_encode().

This also adds a new internal function
lzma_block_buffer_bound64() which is similar to
lzma_block_buffer_bound() but uses uint64_t instead
of size_t."
9e6dabcf22ef4679f4faaae15ebd5b137ae2fad1,Lasse Collin,Lasse Collin,2013-03-05 17:14:50,2013-03-05 17:14:50,"Avoid unneeded use of awk in xzless.

Use ""read"" instead of ""awk"" in xzless to get the version
number of ""less"". The need for awk was introduced in
the commit db5c1817fabf7cbb9e4087b1576eb26f0747338e.

Thanks to Ariel P for the patch."
e7b424d267a34803db8d92a3515528be2ed45abd,Lasse Collin,Lasse Collin,2012-12-14 18:13:32,2012-12-14 18:13:32,"Make the progress indicator smooth in threaded mode.

This adds lzma_get_progress() to liblzma and takes advantage
of it in xz.

lzma_get_progress() collects progress information from
the thread-specific structures so that fairly accurate
progress information is available to applications. Adding
a new function seemed to be a better way than making the
information directly available in lzma_stream (like total_in
and total_out are) because collecting the information requires
locking mutexes. It's waste of time to do it more often than
the up to date information is actually needed by an application."
2ebbb994e367f55f2561aa7c9e7451703c171f2f,Lasse Collin,Lasse Collin,2012-12-14 09:01:41,2012-12-14 09:01:41,liblzma: Fix mythread_sync for nested locking.
4c7e28705f6de418d19cc77324ef301f996e01ff,Lasse Collin,Lasse Collin,2012-12-13 19:05:36,2012-12-13 19:05:36,"xz: Mention --threads in --help.

Thanks to Olivier Delhomme for pointing out that this
was still missing."
db5c1817fabf7cbb9e4087b1576eb26f0747338e,Jonathan Nieder,Lasse Collin,2012-11-19 08:10:10,2012-11-21 17:19:44,"xzless: Make ""less -V"" parsing more robust

In v4.999.9beta~30 (xzless: Support compressed standard input,
2009-08-09), xzless learned to parse ‘less -V’ output to figure out
whether less is new enough to handle $LESSOPEN settings starting
with “|-”.  That worked well for a while, but the version string from
‘less’ versions 448 (June, 2012) is misparsed, producing a warning:

	$ xzless /tmp/test.xz; echo $?
	/usr/bin/xzless: line 49: test: 456 (GNU regular expressions): \
	integer expression expected
	0

More precisely, modern ‘less’ lists the regexp implementation along
with its version number, and xzless passes the entire version number
with attached parenthetical phrase as a number to ""test $a -gt $b"",
producing the above confusing message.

	$ less-444 -V | head -1
	less 444
	$ less -V | head -1
	less 456 (no regular expressions)

So relax the pattern matched --- instead of expecting ""less <number>"",
look for a line of the form ""less <number>[ (extra parenthetical)]"".
While at it, improve the behavior when no matching line is found ---
instead of producing a cryptic message, we can fall back on a LESSPIPE
setting that is supported by all versions of ‘less’.

The implementation uses ""awk"" for simplicity.  Hopefully that’s
portable enough.

Reported-by: Jörg-Volker Peetz <jvpeetz@web.de>
Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>"
65536214a31ecd33b6b03b68a351fb597d3703d6,Lasse Collin,Lasse Collin,2012-10-03 12:54:24,2012-10-03 12:54:24,xz: Fix the note about --rsyncable on the man page.
3d93b6354927247a1569caf22ad27b07e97ee904,Lasse Collin,Lasse Collin,2012-09-28 17:11:09,2012-09-28 17:11:09,"xz: Improve handling of failed realloc in xrealloc.

Thanks to Jim Meyering."
ab225620664e235637833be2329935f9d290ba80,Lasse Collin,Lasse Collin,2012-08-24 13:27:31,2012-08-24 13:27:31,"A few typo fixes to comments and the xz man page.

Thanks to Jim Meyering."
f3c1ec69d910175ffd431fd82968dd35cec806ed,Lasse Collin,Lasse Collin,2012-08-13 18:40:09,2012-08-13 18:40:09,xz: Add a warning to --help about alpha and beta versions.
d8eaf9d8278c23c2cf2b7ca5562d4de570d3b5db,Lasse Collin,Lasse Collin,2012-08-02 14:13:30,2012-08-02 14:13:30,"Build: Bump gettext version requirement to 0.18.

Otherwise too old version of m4/lib-link.m4 gets included
when autoreconf -fi is run."
96e08902b09f0f304d4ff80c6e83ef7fff883f34,Lasse Collin,Lasse Collin,2012-07-17 15:29:08,2012-07-17 15:29:08,Update THANKS.
3778db1be53e61ff285c573af5ee468803008456,Lasse Collin,Lasse Collin,2012-07-17 15:19:59,2012-07-17 15:19:59,"liblzma: Make the use of lzma_allocator const-correct.

There is a tiny risk of causing breakage: If an application
assigns lzma_stream.allocator to a non-const pointer, such
code won't compile anymore. I don't know why anyone would do
such a thing though, so in practice this shouldn't cause trouble.

Thanks to Jan Kratochvil for the patch."
d625c7cf824fd3b61c6da84f56179e94917ff603,Lasse Collin,Lasse Collin,2012-07-05 04:36:28,2012-07-05 04:36:28,Tests: Remove tests/test_block.c that had gotten committed accidentally.
0b09d266cce72bc4841933b171e79551e488927c,Lasse Collin,Lasse Collin,2012-07-05 04:33:35,2012-07-05 04:33:35,"Build: Include macosx/build.sh in the distribution.

It has been in the Git repository since 2010 but probably
few people have seen it since it hasn't been included in
the release tarballs. :-("
d6e0b23d4613b9f417893dd96cc168c8005ece3d,Lasse Collin,Lasse Collin,2012-07-05 04:28:53,2012-07-05 04:28:53,"Build: Include validate_map.sh in the distribution.

It's required by ""make mydist"".

Fix also the location of EXTRA_DIST+= so that those files
get distributed also if symbol versioning isn't enabled."
19de545d86097c3954d69ab5d12820387f6a09bc,Lasse Collin,Lasse Collin,2012-07-05 04:24:45,2012-07-05 04:24:45,Docs: Fix the name LZMA Utils -> XZ Utils in debug/README.
672eccf57c31a40dfb956b7662db06d43e18618e,Lasse Collin,Lasse Collin,2012-07-05 04:23:17,2012-07-05 04:23:17,"Include debug/translation.bash in the distribution.

Also fix the script name mentioned in README."
cafb523adac1caf305e70a04bc37f25602bf990c,Lasse Collin,Lasse Collin,2012-07-04 19:31:58,2012-07-04 19:31:58,"xz: Document --block-list better.

Thanks to Jonathan Nieder."
c7ff218528bc8f7c65e7ef73c6515777346c6794,Lasse Collin,Lasse Collin,2012-07-04 17:01:49,2012-07-04 17:01:49,Bump the version number to 5.1.2alpha.
8f3c1d886f93e6478ad509ff52102b2ce7faa999,Lasse Collin,Lasse Collin,2012-07-04 17:01:19,2012-07-04 17:01:19,Update NEWS for 5.1.2alpha.
0d5fa05466e580fbc458820f87013ae7644e20e5,Lasse Collin,Lasse Collin,2012-07-04 16:58:23,2012-07-04 16:58:23,"xz: Fix the version number printed by xz -lvv.

The decoder bug was fixed in 5.0.2 instead of 5.0.3."
df11317985a4165731dde12bb0f0028da0e7b77f,Lasse Collin,Lasse Collin,2012-07-04 14:11:31,2012-07-04 14:11:31,Build: Add a comment to configure.ac about symbol versioning.
bd9cc179e8be3ef515201d3ed9c7dd79ae88869d,Lasse Collin,Lasse Collin,2012-07-04 14:06:49,2012-07-04 14:06:49,Update TODO.
4a238dd9b22f462cac5e199828bf1beb0df05884,Lasse Collin,Lasse Collin,2012-07-04 14:05:46,2012-07-04 14:05:46,Document --enable-symbol-versions in INSTALL.
88ccf47205d7f3aa314d358c72ef214f10f68b43,Lasse Collin,Lasse Collin,2012-07-03 18:16:39,2012-07-03 18:16:39,"xz: Add incomplete support for --block-list.

It's broken with threads and when also --block-size is used."
972179cdcdf5d8949c48ee31737d87d3050b44af,Lasse Collin,Lasse Collin,2012-07-01 15:44:33,2012-07-01 15:44:33,xz: Update the man page about the new field in --robot -lvv.
1403707fc64a70976aebe66f8d9a9bd12f73a2c5,Lasse Collin,Lasse Collin,2012-06-28 07:47:49,2012-06-28 07:47:49,"liblzma: Check that the first byte of range encoded data is 0x00.

It is just to be more pedantic and thus perhaps catch broken
files slightly earlier."
eccd8017ffe2c5de473222c4963ec53c62f7fda2,Lasse Collin,Lasse Collin,2012-06-22 16:00:23,2012-06-22 16:00:23,Update NEWS from 5.0.4.
2e6754eac26a431e8d340c28906f63bcd1e177e8,Lasse Collin,Lasse Collin,2012-06-22 11:34:03,2012-06-22 11:34:03,xz: Update man page date to match the latest update.
b3235a0b1af45d5e1244cbe3191516966c076fa0,Lasse Collin,Lasse Collin,2012-06-18 18:27:47,2012-06-18 18:27:47,"Docs: Language fix to 01_compress_easy.c.

Thanks to Jonathan Nieder."
f1675f765fe228cb5a5f904f853445a03e33cfe9,Lasse Collin,Lasse Collin,2012-06-14 17:15:30,2012-06-14 17:15:30,Fix the top-level Makefile.am for the new example programs.
3a0c5378abefaf86aa39a62a7c9682bdb21568a1,Lasse Collin,Lasse Collin,2012-06-14 07:52:33,2012-06-14 07:52:33,"Docs: Add new example programs.

These have more comments than the old examples and
human-readable error messages. More tutorial-like examples
are needed but these are a start."
1bd2c2c553e30c4a73cfb82abc6908efd6be6b8d,Lasse Collin,Lasse Collin,2012-06-14 07:33:27,2012-06-14 07:33:27,"Docs: Move xz_pipe_comp.c and xz_pipe_decomp.c to doc/examples_old.

It is good to keep these around to so that if someone has
copied the decompressor bug from xz_pipe_decomp.c he has
an example how to easily fix it."
905f0ab5b5ce544d4b68a2ed6077df0f3d021292,Lasse Collin,Lasse Collin,2012-06-14 07:33:01,2012-06-14 07:33:01,Docs: Fix a bug in xz_pipe_decomp.c example program.
4bd1a3bd5fdf4870b2f96dd0b8a21657c8a58ad8,Lasse Collin,Lasse Collin,2012-05-30 20:14:33,2012-05-30 20:14:33,"Translations: Update the French translation.

Thanks to Adrien Nader."
d2e836f2f3a87df6fe6bb0589b037db51205d910,Lasse Collin,Lasse Collin,2012-05-29 20:42:37,2012-05-29 20:42:37,"Translations: Update the German translation.

The previous only included the new strings in v5.0."
c9a16151577ba459afd6e3528df23bc0ddb95171,Lasse Collin,Lasse Collin,2012-05-29 19:26:27,2012-05-29 19:26:27,Translations: Update the German translation.
1530a74fd48f8493372edad137a24541efe24713,Lasse Collin,Lasse Collin,2012-05-29 19:14:21,2012-05-29 19:14:21,Translations: Update Polish translation.
d8db706acb8316f9861abd432cfbe001dd6d0c5c,Lasse Collin,Lasse Collin,2012-05-28 17:42:11,2012-05-28 17:42:11,"liblzma: Fix possibility of incorrect LZMA_BUF_ERROR.

lzma_code() could incorrectly return LZMA_BUF_ERROR if
all of the following was true:

  - The caller knows how many bytes of output to expect
    and only provides that much output space.

  - When the last output bytes are decoded, the
    caller-provided input buffer ends right before
    the LZMA2 end of payload marker. So LZMA2 won't
    provide more output anymore, but it won't know it
    yet and thus won't return LZMA_STREAM_END yet.

  - A BCJ filter is in use and it hasn't left any
    unfiltered bytes in the temp buffer. This can happen
    with any BCJ filter, but in practice it's more likely
    with filters other than the x86 BCJ.

Another situation where the bug can be triggered happens
if the uncompressed size is zero bytes and no output space
is provided. In this case the decompression can fail even
if the whole input file is given to lzma_code().

A similar bug was fixed in XZ Embedded on 2011-09-19."
3f94b6d87f1b8f1c421ba548f8ebb83dca9c8cda,Lasse Collin,Lasse Collin,2012-05-28 12:38:32,2012-05-28 12:38:32,Update THANKS.
7769ea051d739a38a1640fd448cf5eb83cb119c6,Lasse Collin,Lasse Collin,2012-05-28 12:37:43,2012-05-28 12:37:43,xz: Don't show a huge number in -vv when memory limit is disabled.
ec921105725e4d3ef0a683dd83eee6f24ab60ccd,Lasse Collin,Lasse Collin,2012-05-27 19:30:17,2012-05-27 19:30:17,"xz: Document the ""summary"" lines of --robot -lvv.

This documents only the columns that are in v5.0.
The new columns added in the master branch aren't
necessarily stable yet."
27d24eb0a9f6eed96d6a4594c2b0bf7a91d29f9a,Lasse Collin,Lasse Collin,2012-05-27 18:53:20,2012-05-27 18:53:20,"xz: Fix output of verbose --robot --list modes.

It printed the filename in ""filename (x/y)"" format
which it obviously shouldn't do in robot mode."
ab25b82a91754d9388c89abddf806424671d9431,Lasse Collin,Lasse Collin,2012-05-24 15:33:54,2012-05-24 15:33:54,Build: Upgrade m4/acx_pthread.m4 to the latest version.
d05d6d65c41a4bc83f162fa3d67c5d84e8751634,Lasse Collin,Lasse Collin,2012-05-10 18:15:17,2012-05-10 18:15:17,Update THANKS.
e077391982f9f28dbfe542bba8800e7c5b916666,Lasse Collin,Lasse Collin,2012-05-10 18:14:16,2012-05-10 18:14:16,Docs: Cleanup line wrapping a bit.
fc39849c350225c6a1cd7f6e6adff1020521eabc,Benno Schulenberg,Lasse Collin,2012-03-13 21:04:04,2012-05-10 18:04:23,"Fix a few typos and add some missing articles in some documents.

Also hyphenate several compound adjectives.

Signed-off-by: Benno Schulenberg <bensberg@justemail.net>"
29fa0566d5df199cb9acb2d17bf7eea61acc7fa1,Lasse Collin,Lasse Collin,2012-04-29 08:51:25,2012-04-29 08:51:25,Windows: Update notes about static linking with MSVC.
aac1b31ea4e66cf5a7a8c116bdaa15aa45e6c56e,Lasse Collin,Lasse Collin,2012-04-19 12:25:26,2012-04-19 12:25:26,liblzma: Remove outdated comments.
df14a46013bea70c0bd35be7821b0b9108f97de7,Lasse Collin,Lasse Collin,2012-04-19 11:17:52,2012-04-19 11:17:52,"DOS: Link against DJGPP's libemu to support FPU emulation.

This way xz should work on 386SX and 486SX. Floating point
only is needed for verbose output in xz."
03ed742a3a4931bb5c821357832083b26f577b13,Lasse Collin,Lasse Collin,2012-04-19 11:02:25,2012-04-19 11:02:25,liblzma: Fix Libs.private in liblzma.pc to include -lrt when needed.
8c5b13ad59df70f49429bfdfd6ac120b8f892fda,Lasse Collin,Lasse Collin,2012-04-19 10:58:55,2012-04-19 10:58:55,Docs: Update MINIX 3 information in INSTALL.
c7376fc415a1566f38b2de4b516a17013d516a8b,Lasse Collin,Lasse Collin,2012-02-22 12:23:13,2012-02-22 12:23:13,Update THANKS.
cff070aba6281ba743d29a62b8c0c66e5da4b2a6,Lasse Collin,Lasse Collin,2012-02-22 12:02:34,2012-02-22 12:02:34,"Fix exit status of xzgrep when grepping binary files.

When grepping binary files, grep may exit before it has
read all the input. In this case, gzip -q returns 2 (eating
SIGPIPE), but xz and bzip2 show SIGPIPE as the exit status
(e.g. 141). This causes wrong exit status when grepping
xz- or bzip2-compressed binary files.

The fix checks for the special exit status that indicates SIGPIPE.
It uses kill -l which should be supported everywhere since it
is in both SUSv2 (1997) and POSIX.1-2008.

Thanks to James Buren for the bug report."
41cafb2bf9beea915710ee68f05fe929cd17759c,Lasse Collin,Lasse Collin,2012-02-22 10:08:43,2012-02-22 10:08:43,Update THANKS.
2dcea03712fa881930d69ec9eff70855c3d126d9,Lasse Collin,Lasse Collin,2012-02-22 10:00:16,2012-02-22 10:00:16,Fix compiling with IBM XL C on AIX.
7db6bdf4abcf524115be2cf5659ed540cef074c5,Lasse Collin,Lasse Collin,2012-01-10 15:13:03,2012-01-10 15:13:03,"Tests: Fix a compiler warning with _FORTIFY_SOURCE.

Reported here:
http://sourceforge.net/projects/lzmautils/forums/forum/708858/topic/4927385"
694952d545b6cf056547893ced69486eff9ece55,Lasse Collin,Lasse Collin,2011-12-19 19:21:29,2011-12-19 19:21:29,Docs: Explain the stable releases better in README.
418fe668b3c53a9a20020b6cc652aaf25c734b29,Lasse Collin,Lasse Collin,2011-11-07 11:07:52,2011-11-07 11:07:52,"xz: Show minimum required XZ Utils version in xz -lvv.

Man page wasn't updated yet."
7081d82c37326bac97184e338345fa1c327e3580,Lasse Collin,Lasse Collin,2011-11-04 15:57:16,2011-11-04 15:57:16,"xz: Fix a typo in a comment.

Thanks to Bela Lubkin."
232fe7cd70ad258d6a37f17e860e0f1b1891eeb5,Lasse Collin,Lasse Collin,2011-11-03 15:08:02,2011-11-03 15:08:02,Update THANKS.
74d2bae4d3449c68453b0473dd3430ce91fd90c1,Lasse Collin,Lasse Collin,2011-11-03 15:07:22,2011-11-03 15:07:22,"xz: Fix xz on EBCDIC systems.

Thanks to Chris Donawa."
4ac4923f47cc0ef97dd9ca5cfcc44fc53eeab34a,Lasse Collin,Lasse Collin,2011-10-23 14:09:10,2011-10-23 14:09:10,Update THANKS.
ab50ae3ef40c81e5bf613905ca3fd636548b75e7,Lasse Collin,Lasse Collin,2011-10-23 14:08:14,2011-10-23 14:08:14,"liblzma: Fix invalid free() in the threaded encoder.

It was triggered if initialization failed e.g. due to
running out of memory.

Thanks to Arkadiusz Miskiewicz."
6b620a0f0813d28c3c544b4ff8cb595b38a6e908,Lasse Collin,Lasse Collin,2011-10-23 14:05:55,2011-10-23 14:05:55,"liblzma: Fix a deadlock in the threaded encoder.

It was triggered when reinitializing the encoder,
e.g. when encoding two files."
bd52cf150ecd51e3ab63a9cc1a3cff6a77500178,Lasse Collin,Lasse Collin,2011-09-06 09:03:41,2011-09-06 09:03:41,"Build: Fix ""make check"" on Windows."
5c5b2256969ac473001b7d67615ed3bd0a54cc82,Lasse Collin,Lasse Collin,2011-08-09 18:19:13,2011-08-09 18:19:13,Update THANKS.
5b1e1f10741af9e4bbe4cfc3261fb7c7b04f7809,Lasse Collin,Lasse Collin,2011-08-09 18:16:44,2011-08-09 18:16:44,Workaround unusual SIZE_MAX on SCO OpenServer.
e9ed88126eee86e2511fa42681a5c7104820cf0a,Lasse Collin,Lasse Collin,2011-08-06 17:37:28,2011-08-06 17:37:28,"Run the scripts with the correct shell in test_scripts.sh.

The scripts are now made executable in the build tree.
This way the scripts can be run like programs in
test_scripts.sh. Previously test_scripts.sh always
used sh but it's not correct if @POSIX_SHELL@ is set
to something else by configure.

Thanks to Jonathan Nieder for the patch."
1c673e5681720491a74fc4b2992e075f47302c22,Lasse Collin,Lasse Collin,2011-07-31 08:01:47,2011-07-31 08:01:47,"Fix exit status of ""xzdiff foo.xz bar.xz"".

xzdiff was clobbering the exit status from diff in a case
statement used to analyze the exit statuses from ""xz"" when
its operands were two compressed files. Save and restore
diff's exit status to fix this.

The bug is inherited from zdiff in GNU gzip and was fixed
there on 2009-10-09.

Thanks to Jonathan Nieder for the patch and
to Peter Pallinger for reporting the bug."
324cde7a864f4506c32ae7846d688c359a83fe65,Lasse Collin,Lasse Collin,2011-06-16 09:15:29,2011-06-16 09:15:29,liblzma: Remove unneeded semicolon.
492c86345551a51a29bf18e55fe55a5e86f169ce,Lasse Collin,Lasse Collin,2011-05-28 16:24:56,2011-05-28 16:24:56,Build: Make configure print if symbol versioning is enabled or not.
fc4d4436969bd4d71b704d400a165875e596034a,Lasse Collin,Lasse Collin,2011-05-28 13:43:26,2011-05-28 13:43:26,"Don't call close(-1) in tuklib_open_stdxxx() on error.

Thanks to Jim Meyering."
bd35d903a04c4d388adb4065b0fa271302380895,Lasse Collin,Lasse Collin,2011-05-28 12:55:39,2011-05-28 12:55:39,"liblzma: Use symbol versioning.

Symbol versioning is enabled by default on GNU/Linux,
other GNU-based systems, and FreeBSD.

I'm not sure how stable this is, so it may need
backward-incompatible changes before the next release.

The idea is that alpha and beta symbols are considered
unstable and require recompiling the applications that
use those symbols. Once a symbol is stable, it may get
extended with new features in ways that don't break
compatibility with older ABI & API.

The mydist target runs validate_map.sh which should
catch some probable problems in liblzma.map. Otherwise
I would forget to update the map file for new releases."
afbb244362c9426a37ce4eb9d54aab768da3adad,Lasse Collin,Lasse Collin,2011-05-28 06:46:46,2011-05-28 06:46:46,"Translations: Update the Italian translation.

Thanks to Milo Casagrande."
79bef85e0543c0c3723281c3c817616c6cec343b,Lasse Collin,Lasse Collin,2011-05-28 05:46:04,2011-05-28 05:46:04,Tests: Add a test file for the bug in the previous commit.
c0297445064951807803457dca1611b3c47e7f0f,Lasse Collin,Lasse Collin,2011-05-27 19:25:44,2011-05-27 19:25:44,"xz: Fix error handling in xz -lvv.

It could do an invalid free() and read past the end
of the uninitialized filters array."
8bd91918ac50731f00b1a2a48072980572eb2ff9,Lasse Collin,Lasse Collin,2011-05-27 19:09:49,2011-05-27 19:09:49,"liblzma: Handle allocation failures correctly in lzma_index_init().

Thanks to Jim Meyering."
fe00f95828ef5627721b57e054f7eb2d42a2c961,Lasse Collin,Lasse Collin,2011-05-23 21:23:46,2011-05-23 21:23:46,Build: Fix checking for system-provided SHA-256.
21b45b9bab541f419712cbfd473ccc31802e0397,Lasse Collin,Lasse Collin,2011-05-23 15:30:30,2011-05-23 15:30:30,Build: Set GZIP_ENV=-9n in top-level Makefile.am.
48053e8a4550233af46359024538bff90c870ab1,Lasse Collin,Lasse Collin,2011-05-22 13:42:11,2011-05-22 13:42:11,Update NEWS for 5.0.3.
bba37df2c9e54ad773e15ff00a09d2d6989fb3b2,Lasse Collin,Lasse Collin,2011-05-21 13:28:44,2011-05-21 13:28:44,"Add French translation.

It is known that the BCJ filter --help text is only
partially translated."
4161d7634965a7a287bf208dcd79f6185f448fe8,Lasse Collin,Lasse Collin,2011-05-21 12:12:10,2011-05-21 12:12:10,"xz: Translate also the string used to print the program name.

French needs a space before a colon, e.g. ""xz : foo error""."
b94aa0c8380cdb18cddb33440d625474c16643cf,Lasse Collin,Lasse Collin,2011-05-21 12:08:44,2011-05-21 12:08:44,"liblzma: Try to use SHA-256 from the operating system.

If the operating system libc or other base libraries
provide SHA-256, use that instead of our own copy.
Note that this doesn't use OpenSSL or libgcrypt or
such libraries to avoid creating dependencies to
other packages.

This supports at least FreeBSD, NetBSD, OpenBSD, Solaris,
MINIX, and Darwin. They all provide similar but not
identical SHA-256 APIs; everyone is a little different.

Thanks to Wim Lewis for the original patch, improvements,
and testing."
f004128678d43ea10b4a6401aa184cf83252d6ec,Lasse Collin,Lasse Collin,2011-05-17 09:52:18,2011-05-17 09:52:18,"Don't use clockid_t in mythread.h when clock_gettime() isn't available.

Thanks to Wim Lewis for the patch."
f779516f42ebd2db47a5b7d6143459bf7737cf2f,Lasse Collin,Lasse Collin,2011-05-17 09:26:28,2011-05-17 09:26:28,Update THANKS.
830ba587775bb562f6eaf05cad61bf669d1f8892,Lasse Collin,Lasse Collin,2011-05-17 09:21:33,2011-05-17 09:21:33,Update INSTALL with a note about linker problem on OpenSolaris x86.
ec7106309c8060e9c646dba20c4f15689a0bbb04,Lasse Collin,Lasse Collin,2011-05-17 09:01:37,2011-05-17 09:01:37,"Build: Fix initialization of enable_check_* variables in configure.ac.

This doesn't matter much in practice since it is unlikely
that anyone would have such environment variable names.

Thanks to Wim Lewis."
4c6e146df99696920f12410fb17754412797ef36,Lasse Collin,Lasse Collin,2011-05-17 08:54:38,2011-05-17 08:54:38,Add underscores to attributes (__attribute((__foo__))).
7a480e485938884ef3021b48c3b0b9f9699dc9b6,Lasse Collin,Lasse Collin,2011-05-01 09:24:23,2011-05-01 09:24:23,"xz: Fix input file position when --single-stream is used.

Now the following works as you would expect:

    echo foo | xz > foo.xz
    echo bar | xz >> foo.xz
    ( xz -dc --single-stream ; xz -dc --single-stream ) < foo.xz

Note that it doesn't work if the input is not seekable
or if there is Stream Padding between the concatenated
.xz Streams."
c29e6630c1450c630c4e7b783bdd76515db9004c,Lasse Collin,Lasse Collin,2011-05-01 09:15:51,2011-05-01 09:15:51,xz: Print the maximum number of worker threads in xz -vv.
0b77c4a75158ccc416b07d6e81df8ee0abaea720,Lasse Collin,Lasse Collin,2011-04-19 07:44:48,2011-04-19 07:44:48,Build: Warn if no supported method to detect the number of CPU cores.
e4622df9ab4982f8faa53d85b17be66216175a58,Lasse Collin,Lasse Collin,2011-04-19 06:55:06,2011-04-19 06:55:06,Update THANKS.
9c1b05828a88eff54409760b92162c7cc2c7cff6,Lasse Collin,Lasse Collin,2011-04-19 06:20:44,2011-04-19 06:20:44,"Fix portability problems in mythread.h.

Use gettimeofday() if clock_gettime() isn't available
(e.g. Darwin).

The test for availability of pthread_condattr_setclock()
and CLOCK_MONOTONIC was incorrect. Instead of fixing the
#ifdefs, use an Autoconf test. That way if there exists a
system that supports them but doesn't specify the matching
POSIX #defines, the features will still get detected.

Don't try to use pthread_sigmask() on OpenVMS. It doesn't
have that function.

Guard mythread.h against being #included multiple times."
3de00cc75da7b0e7b65e84c62b5351e231f501e9,Lasse Collin,Lasse Collin,2011-04-18 16:35:49,2011-04-18 16:35:49,Update THANKS.
bd5002f5821e3d1b04f2f56989e4a19318e73633,Martin Väth,Lasse Collin,2011-04-15 08:54:49,2011-04-18 16:33:27,"xzgrep: fix typo in $0 parsing

Reported-by: Diego Elio Pettenò <flameeyes@gentoo.org>
Signed-off-by: Martin Väth <vaeth@mathematik.uni-wuerzburg.de>
Signed-off-by: Mike Frysinger <vapier@gentoo.org>"
6ef4eabc0acc49e1bb9dc68064706e19fa9fcf48,Lasse Collin,Lasse Collin,2011-04-12 09:48:31,2011-04-12 09:48:31,Bump the version number to 5.1.1alpha and liblzma soname to 5.0.99.
9a4377be0d21e597c66bad6c7452873aebfb3c1c,Lasse Collin,Lasse Collin,2011-04-12 09:42:37,2011-04-12 09:42:37,"Put the unstable APIs behind #ifdef LZMA_UNSTABLE.

This way people hopefully won't complain if these APIs
change and break code that used an older API."
3e321a3acd50002cf6fdfd259e910f56d3389bc3,Lasse Collin,Lasse Collin,2011-04-12 08:59:49,2011-04-12 08:59:49,"Remove doubled words from documentation and comments.

Spot candidates by running these commands:
  git ls-files |xargs perl -0777 -n \
    -e 'while (/\b(then?|[iao]n|i[fst]|but|f?or|at|and|[dt]o)\s+\1\b/gims)' \
    -e '{$n=($` =~ tr/\n/\n/ + 1); ($v=$&)=~s/\n/\\n/g; print ""$ARGV:$n:$v\n""}'

Thanks to Jim Meyering for the original patch."
d91a84b534b012d19474f2fda1fbcaef873e1ba4,Lasse Collin,Lasse Collin,2011-04-12 08:46:01,2011-04-12 08:46:01,Update NEWS.
14e6ad8cfe0165c1a8beeb5b2a1536558b29b0a1,Lasse Collin,Lasse Collin,2011-04-12 08:45:40,2011-04-12 08:45:40,Update TODO.
70e750f59793f9b5cd306a5adce9b8e427739e04,Lasse Collin,Lasse Collin,2011-04-12 08:08:55,2011-04-12 08:08:55,xz: Update the man page about threading.
24e0406c0fb7494d2037dec033686faf1bf67068,Lasse Collin,Lasse Collin,2011-04-11 19:06:03,2011-04-11 19:06:03,xz: Add support for threaded compression.
de678e0c924aa79a19293a8a6ed82e8cb6572a42,Lasse Collin,Lasse Collin,2011-04-11 19:03:30,2011-04-11 19:03:30,"liblzma: Add lzma_stream_encoder_mt() for threaded compression.

This is the simplest method to do threading, which splits
the uncompressed data into blocks and compresses them
independently from each other. There's room for improvement
especially to reduce the memory usage, but nevertheless,
this is a good start."
25fe729532cdf4b8fed56a4519b73cf31efaec50,Lasse Collin,Lasse Collin,2011-04-11 18:15:07,2011-04-11 18:15:07,"liblzma: Add the forgotten lzma_lzma2_block_size().

This should have been in 5eefc0086d24a65e136352f8c1d19cefb0cbac7a."
91afb785a1dee34862078d9bf844ef12b8cc3e35,Lasse Collin,Lasse Collin,2011-04-11 18:04:13,2011-04-11 18:04:13,liblzma: Document lzma_easy_(enc|dec)oder_memusage() better too.
4a9905302a9e4a1601ae09d650d3f08ce98ae9ee,Lasse Collin,Lasse Collin,2011-04-11 17:59:07,2011-04-11 17:59:07,"liblzma: Document lzma_raw_(enc|dec)oder_memusage() better.

It didn't mention the return value that is used if
an error occurs."
0badb0b1bd649163322783b0bd9e590b4bc7a93d,Lasse Collin,Lasse Collin,2011-04-11 16:28:18,2011-04-11 16:28:18,"liblzma: Use memzero() to initialize supported_actions[].

This is cleaner and makes it simpler to add new members
to lzma_action enumeration."
a7934c446a58e20268689899d2a39f50e571f251,Lasse Collin,Lasse Collin,2011-04-11 16:26:27,2011-04-11 16:26:27,liblzma: API comment about lzma_allocator with threaded coding.
5eefc0086d24a65e136352f8c1d19cefb0cbac7a,Lasse Collin,Lasse Collin,2011-04-11 16:16:30,2011-04-11 16:16:30,"liblzma: Add an internal function lzma_mt_block_size().

This is based lzma_chunk_size() that was included in some
development version of liblzma."
d1199274758049fc523d98c5b860ff814a799eec,Lasse Collin,Lasse Collin,2011-04-11 10:59:50,2011-04-11 10:59:50,"liblzma: Don't create an empty Block in lzma_stream_buffer_encode().

Empty Block was created if the input buffer was empty.
Empty Block wastes a few bytes of space, but more importantly
it triggers a bug in XZ Utils 5.0.1 and older when trying
to decompress such a file. 5.0.1 and older consider such
files to be corrupt. I thought that no encoder creates empty
Blocks when releasing 5.0.2 but I was wrong."
3b22fc2c87ec85fcdd385c163b68fc49c97aa848,Lasse Collin,Lasse Collin,2011-04-11 10:28:40,2011-04-11 10:28:40,"liblzma: Fix API docs to mention LZMA_UNSUPPORTED_CHECK.

This return value was missing from the API comments of
four functions."
71b9380145dccf001f22e66a06b9d508905c25ce,Lasse Collin,Lasse Collin,2011-04-11 10:21:28,2011-04-11 10:21:28,"liblzma: Validate encoder arguments better.

The biggest problem was that the integrity check type
wasn't validated, and e.g. lzma_easy_buffer_encode()
would create a corrupt .xz Stream if given an unsupported
Check ID. Luckily applications don't usually try to use
an unsupport Check ID, so this bug is unlikely to cause
many real-world problems."
ec7e3dbad704268825fc48f0bdd4577bc46b4f13,Lasse Collin,Lasse Collin,2011-04-11 06:57:30,2011-04-11 06:57:30,xz: Move the description of --block-size in --long-help.
cd3086ff443bb282bdf556919c28b3e3cbed8169,Lasse Collin,Lasse Collin,2011-04-11 06:55:35,2011-04-11 06:55:35,Docs: Document --single-stream and --block-size.
fb64a4924334e3c440865710990fe08090f2fed0,Lasse Collin,Lasse Collin,2011-04-11 06:27:57,2011-04-11 06:27:57,"liblzma: Make lzma_stream_encoder_init() static (second try).

It's an internal function and it's not needed by
anything outside stream_encoder.c."
a34730cf6af4d33a4057914e57227b6dfde6567e,Lasse Collin,Lasse Collin,2011-04-11 05:31:42,2011-04-11 05:31:42,"Revert ""liblzma: Make lzma_stream_encoder_init() static.""

This reverts commit 352ac82db5d3f64585c07b39e4759388dec0e4d7.
I don't know what I was thinking."
9f0a806aef7ea79718e3f1f2baf3564295229a27,Lasse Collin,Lasse Collin,2011-04-10 18:23:21,2011-04-10 18:23:21,"Revise mythread.h.

This adds:

  - mythread_sync() macro to create synchronized blocks

  - mythread_cond structure and related functions
    and macros for condition variables with timed
    waiting using a relative timeout

  - mythread_create() to create a thread with all
    signals blocked

Some of these wouldn't need to be inline functions,
but I'll keep them this way for now for simplicity.

For timed waiting on a condition variable, librt is
now required on some systems to use clock_gettime().
configure.ac was updated to handle this."
352ac82db5d3f64585c07b39e4759388dec0e4d7,Lasse Collin,Lasse Collin,2011-04-10 17:37:36,2011-04-10 17:37:36,"liblzma: Make lzma_stream_encoder_init() static.

It's an internal function and it's not needed by
anything outside stream_encoder.c."
9e807fe3fe79618ac48f58207cf7082ea20a6928,Lasse Collin,Lasse Collin,2011-04-10 11:58:10,2011-04-10 11:58:10,DOS: Update the docs and include notes about 8.3 filenames.
ebd54dbd6e481d31e80757f900ac8109ad1423c6,Lasse Collin,Lasse Collin,2011-04-10 10:09:42,2011-04-10 10:09:42,"xz/DOS: Add experimental 8.3 filename support.

This is incompatible with the 8.3 support patch made by
Juan Manuel Guerrero. I think this one is nicer, but
I need to get feedback from DOS users before saying
that this is the final version of 8.3 filename support."
cd4fe97852bcaeffe674ee51b4613709292a0972,Lasse Collin,Lasse Collin,2011-04-10 09:47:47,2011-04-10 09:47:47,"xz/DOS: Be more careful with the destination file.

Try to avoid overwriting the source file if --force is
used and the generated destination filename refers to
the source file. This can happen with 8.3 filenames where
extra characters are ignored.

If the generated output file refers to a special file
like ""con"" or ""prn"", refuse to write to it even if --force
is used."
607f9f98ae5ef6d49f4c21c806d462bf6b3d6796,Lasse Collin,Lasse Collin,2011-04-09 15:29:30,2011-04-09 15:29:30,Update THANKS.
fca396b37410d272b754843a5dc13847be443a3a,Lasse Collin,Lasse Collin,2011-04-09 15:28:58,2011-04-09 15:28:58,"liblzma: Add missing #ifdefs to filter_common.c.

Passing --disable-decoders to configure broke a few
encoders due to missing #ifdefs in filter_common.c.

Thanks to Jason Gorski for the patch."
b03f6cd3ebadd675f2cc9d518cb26fa860269447,Lasse Collin,Lasse Collin,2011-04-09 12:24:59,2011-04-09 12:24:59,xz: Avoid unneeded fstat() on DOS-like systems.
335fe260a81f61ec99ff5940df733b4c50aedb7c,Lasse Collin,Lasse Collin,2011-04-09 12:11:13,2011-04-09 12:11:13,"xz: Minor internal changes to handling of --threads.

Now it always defaults to one thread. Maybe this
will change again if a threading method is added
that doesn't affect memory usage."
9edd6ee895fbe71d245a173f48e511f154a99875,Lasse Collin,Lasse Collin,2011-04-08 14:53:05,2011-04-08 14:53:05,xz: Change size_t to uint32_t in a few places.
411013ea4506a6df24d35a060fcbd73a57b73eb3,Lasse Collin,Lasse Collin,2011-04-08 14:48:41,2011-04-08 14:48:41,xz: Fix a typo in a comment.
b34c5ce4b22e8d7b81f9895d15054af41d17f805,Lasse Collin,Lasse Collin,2011-04-05 19:41:33,2011-04-05 19:41:33,liblzma: Use TUKLIB_GNUC_REQ to check GCC version in sha256.c.
db33117cc85c17e0b897b5312bd5eb43aac41c03,Lasse Collin,Lasse Collin,2011-04-05 14:12:20,2011-04-05 14:12:20,"Build: Upgrade m4/acx_pthread.m4 to the latest version.

It was renamed to ax_pthread.m4 in Autoconf Archive."
1039bfcfc098b69d56ecb39d198a092552eacf6d,Lasse Collin,Lasse Collin,2011-04-05 12:27:26,2011-04-05 12:27:26,xz: Use posix_fadvise() if it is available.
1ef3cf44a8eb9512480af4482a5232ea08363b14,Lasse Collin,Lasse Collin,2011-04-05 12:13:29,2011-04-05 12:13:29,xz: Call lzma_end(&strm) before exiting if debugging is enabled.
bd432015d33dcade611d297bc01eb0700088ef6c,Lasse Collin,Lasse Collin,2011-04-02 11:49:56,2011-04-02 11:49:56,"liblzma: Fix a memory leak in stream_encoder.c.

It leaks old filter options structures (hundred bytes or so)
every time the lzma_stream is reinitialized. With the xz tool,
this happens when compressing multiple files."
16889013214e7620d204b6e6c1bf9f3103a13655,Lasse Collin,Lasse Collin,2011-04-01 05:47:20,2011-04-01 10:25:05,Updated NEWS for 5.0.2.
85cdf7dd4e97b078e7b929e47f55a7f1da36010f,Lasse Collin,Lasse Collin,2011-03-31 12:06:58,2011-03-31 12:06:58,Update INSTALL with another note about IRIX.
c3f4995586873d6a4fb7e451010a128571a9a370,Lasse Collin,Lasse Collin,2011-03-31 09:22:55,2011-03-31 09:22:55,Tests: Add a new file to test empty LZMA2 streams.
0d21f49a809dc2088da6cc0da7f948404df7ecfa,Lasse Collin,Lasse Collin,2011-03-31 08:54:48,2011-03-31 08:54:48,"liblzma: Fix decoding of LZMA2 streams having no uncompressed data.

The decoder considered empty LZMA2 streams to be corrupt.
This shouldn't matter much with .xz files, because no encoder
creates empty LZMA2 streams in .xz. This bug is more likely
to cause problems in applications that use raw LZMA2 streams."
40277998cb9bad564ce4827aff152e6e1c904dfa,Lasse Collin,Lasse Collin,2011-03-23 23:42:49,2011-03-23 23:42:49,"Scripts: Better fix for xzgrep.

Now it uses ""grep -q"".

Thanks to Gregory Margo."
2118733045ad0ca183a3f181a0399baf876983a6,Lasse Collin,Lasse Collin,2011-03-23 23:22:18,2011-03-23 23:22:18,Updated THANKS.
c7210d9a3fca6f31a57208bfddfc9ab20a2e097a,Lasse Collin,Lasse Collin,2011-03-23 23:21:32,2011-03-23 23:21:32,"Scripts: Fix xzgrep -l.

It didn't work at all. It tried to use the -q option
for grep, but it appended it after ""--"". This works
around it by redirecting to /dev/null. The downside
is that this can be slower with big files compared
to proper use of ""grep -q"".

Thanks to Gregory Margo."
4eb83e32046a6d670862bc91c3d82530963b455e,Lasse Collin,Lasse Collin,2011-03-19 11:08:22,2011-03-19 11:08:22,Scripts: Add lzop (.lzo) support to xzdiff and xzgrep.
923b22483bd9356f3219b2b784d96f455f4dc499,Lasse Collin,Lasse Collin,2011-03-18 17:10:30,2011-03-18 17:10:30,"xz: Add --block-size=SIZE.

This uses LZMA_FULL_FLUSH every SIZE bytes of input.

Man page wasn't updated yet."
57597d42ca1740ad506437be168d800a50f1a0ad,Lasse Collin,Lasse Collin,2011-03-18 16:19:19,2011-03-18 16:19:19,"xz: Add --single-stream.

This can be useful when there is garbage after the
compressed stream (.xz, .lzma, or raw stream).

Man page wasn't updated yet."
96f94bc925d579a700147fa5d7793b64d69cfc18,Lasse Collin,Lasse Collin,2011-02-04 20:49:31,2011-02-06 18:16:14,"xz: Clean up suffix.c.

struct suffix_pair isn't needed in compresed_name()
so get rid of it there."
8930c7ae3f82bdae15aa129f01de08be23d7e8d7,Lasse Collin,Lasse Collin,2011-02-04 09:29:47,2011-02-06 18:16:14,"xz: Check if the file already has custom suffix when compressing.

Now ""xz -S .test foo.test"" refuses to compress the
file because it already has the suffix .test. The man
page had it documented this way already."
940d5852c6cf08abccc6befd9d1b5411c9076a58,Lasse Collin,Lasse Collin,2011-02-02 21:01:51,2011-02-06 18:16:14,Updated THANKS.
4ebe65f839613f27f127bab7b8c347d982330ee3,Lasse Collin,Lasse Collin,2011-02-02 21:00:33,2011-02-06 18:16:14,"Translations: Add Polish translation.

Thanks to Jakub Bogusz."
fc1d292dca1925dfd17174f443f91a696ecd5bf8,Lasse Collin,Lasse Collin,2011-02-02 20:24:00,2011-02-06 18:16:14,Updated THANKS.
6dd061adfd2775428b079eb03d6fd47d7c0f1ffe,Lasse Collin,Lasse Collin,2011-02-06 18:13:01,2011-02-06 18:13:01,Merge commit '5fbce0b8d96dc96775aa0215e3581addc830e23d'
5fbce0b8d96dc96775aa0215e3581addc830e23d,Lasse Collin,Lasse Collin,2011-01-28 18:16:57,2011-01-28 18:16:57,Update NEWS for 5.0.1.
03ebd1bbb314f9f204940219a835c883bf442475,Lasse Collin,Lasse Collin,2011-01-26 10:19:08,2011-01-26 10:19:08,"xz: Fix --force on setuid/setgid/sticky and multi-hardlink files.

xz didn't compress setuid/setgid/sticky files and files
with multiple hard links even with --force. This bug was
introduced in 23ac2c44c3ac76994825adb7f9a8f719f78b5ee4.

Thanks to Charles Wilson."
9d542ceebcbe40b174169c132ccfcdc720ca7089,Lasse Collin,Lasse Collin,2011-01-19 09:45:35,2011-01-19 09:45:35,Merge branch 'v5.0'
7bd0a5e7ccc354f7c2e95c8bc27569c820f6a136,Lasse Collin,Lasse Collin,2011-01-18 19:25:24,2011-01-18 19:25:24,Updated THANKS.
f71c4e16e913f660977526f0ef8d2acdf458d7c9,Lasse Collin,Lasse Collin,2011-01-18 19:23:50,2011-01-18 19:23:50,"Add alloc_size and malloc attributes to a few functions.

Thanks to Cristian Rodríguez for the original patch."
316cbe24465143edde8f6ffb7532834b7b2ea93f,Lasse Collin,Lasse Collin,2010-12-13 14:36:33,2010-12-13 14:36:33,Scripts: Fix gzip and bzip2 support in xzdiff.
4f2c69a4e3e0aee2e37b0b1671d34086e20c8ac6,Lasse Collin,Lasse Collin,2010-12-12 21:13:22,2010-12-12 21:13:22,Merge branch 'v5.0'
9311774c493c19deab51ded919dcd2e9c4aa2829,Lasse Collin,Lasse Collin,2010-12-12 19:23:55,2010-12-12 19:23:55,Build: Enable ASM on DJGPP by default.
4a42aaee282fc73b482581684d65110506d5efdd,Lasse Collin,Lasse Collin,2010-12-12 14:09:42,2010-12-12 14:09:42,Updated THANKS.
ce56f63c41ee210e6308090eb6d49221fdf67d6c,Lasse Collin,Lasse Collin,2010-12-12 14:07:11,2010-12-12 14:07:11,"Add missing PRIx32 and PRIx64 compatibility definitions.

This fixes portability to systems that lack C99 inttypes.h.

Thanks to Juan Manuel Guerrero."
e6baedddcf54e7da049ebc49183565b99facd4c7,Lasse Collin,Lasse Collin,2010-12-12 12:50:04,2010-12-12 12:50:04,"DOS-like: Treat \ and : as directory separators in addition to /.

Juan Manuel Guerrero had fixed this in his XZ Utils port
to DOS/DJGPP. The bug affects also Windows and OS/2."
adb89e68d43a4cadb0c215b45ef7a75737c9c3ec,Lasse Collin,Lasse Collin,2010-12-07 16:53:04,2010-12-07 16:53:04,Merge branch 'v5.0'
b7afd3e22a8fac115b75c738d40d3eb1de7e286f,Lasse Collin,Lasse Collin,2010-12-07 16:52:04,2010-12-07 16:52:04,"Translations: Fix Czech translation of ""sparse file"".

Thanks to Petr Hubený and Marek Černocký."
7c24e0d1b8a2e86e9263b0d56d39621e01aed7af,Lasse Collin,Lasse Collin,2010-11-15 12:33:01,2010-11-15 12:33:01,Merge branch 'v5.0'
3e564704bc6f463cb2db11e3f3f0dbd71d85992e,Lasse Collin,Lasse Collin,2010-11-15 12:28:26,2010-11-15 12:28:26,liblzma: Document the return value of lzma_lzma_preset().
2964d8d691ed92abdcf214888d79ad6d79774735,Jonathan Nieder,Lasse Collin,2010-11-12 21:22:13,2010-11-13 12:36:28,"Simplify paths in generated API docs

Currently the file list generated by Doxygen has src/ at the
beginning of each path.  Paths like common/sysdefs.h and
liblzma/api/lzma.h are easier to read without such a prefix.

Builds from a separate build directory with

	mkdir build
	cd build
	../configure
	doxygen Doxyfile

include an even longer prefix /home/someone/src/xz/src; this
patch has the nice side-effect of eliminating that prefix, too.

Fixes: http://bugs.debian.org/572273"
b4d42f1a7120e2cefeb2f14425efe2ca6db85416,Anders F Bjorklund,Lasse Collin,2010-11-05 11:56:11,2010-11-08 12:22:43,add build script for macosx universal
15ee6935abe4a2fc76639ee342ca2e69af3e0ad6,Lasse Collin,Lasse Collin,2010-11-04 16:31:40,2010-11-04 16:31:40,"Update the copies of GPLv2 and LGPLv2.1 from gnu.org.

There are only a few white space changes."
8e355f7fdbeee6fe394eb02a28f267ce99a882a2,Lasse Collin,Lasse Collin,2010-10-26 12:53:06,2010-10-26 12:53:06,Merge branch 'v5.0'
37c25658efd25b034266daf87cd381d20d1df776,Lasse Collin,Lasse Collin,2010-10-26 12:48:48,2010-10-26 12:48:48,"Build: Copy the example programs to $docdir/examples.

The example programs by Daniel Mealha Cabrita were included
in the git repository, but I had forgot to add them to
Makefile.am. Thus, they didn't get included in the source
package at all by ""make dist""."
974ebe63497bdf0d262e06474f0dd5a70b1dd000,Lasse Collin,Lasse Collin,2010-10-26 07:36:41,2010-10-26 07:36:41,"liblzma: Rename a few variables and constants.

This has no semantic changes. I find the new names slightly
more logical and they match the names that are already used
in XZ Embedded.

The name fastpos wasn't changed (not worth the hassle)."
7c427ec38d016c0070a42315d752857e33792fc4,Lasse Collin,Lasse Collin,2010-10-25 09:59:25,2010-10-25 09:59:25,Bump version 5.1.0alpha.
e45929260cd902036efd40c5610a8d0a50d5712b,Lasse Collin,Lasse Collin,2010-10-23 14:25:52,2010-10-23 14:25:52,Build: Fix mydist rule when .git doesn't exist.
6e1326fcdf6b6209949be57cfe3ad4b781b65168,Lasse Collin,Lasse Collin,2010-10-23 11:15:35,2010-10-23 11:15:35,Add NEWS for 5.0.0.
b667a3ef6338a2c1db7b7706b1f6c99ea392221c,Lasse Collin,Lasse Collin,2010-10-23 11:02:53,2010-10-23 11:02:53,Bump version to 5.0.0 and liblzma version-info to 5:0:0.
8c947e9291691629714dafb4536c718b6cc24fbd,Lasse Collin,Lasse Collin,2010-10-23 09:30:54,2010-10-23 09:30:54,"liblzma: Make lzma_code() check the reserved members in lzma_stream.

If any of the reserved members in lzma_stream are non-zero
or non-NULL, LZMA_OPTIONS_ERROR is returned. It is possible
that a new feature in the future is indicated by just setting
a reserved member to some other value, so the old liblzma
version need to catch it as an unsupported feature."
e61d85e082743ebd2dd0ff28fc0a82482ede0538,Lasse Collin,Lasse Collin,2010-10-23 09:26:33,2010-10-23 09:26:33,"Windows: Use MinGW's stdio functions.

The non-standard ones from msvcrt.dll appear to work
most of the time with XZ Utils, but there are some
corner cases where things may go very wrong. So it's
good to use the better replacements provided by
MinGW(-w64) runtime."
23e23f1dc029146714c9a98313ab3ea93d71a2fc,Lasse Collin,Lasse Collin,2010-10-23 09:21:32,2010-10-23 09:21:32,"liblzma: Use 512 as INDEX_GROUP_SIZE.

This lets compiler use shifting instead of 64-bit division."
613939fc82603b75b59eee840871a05bc8dd08e0,Lasse Collin,Lasse Collin,2010-10-23 09:20:11,2010-10-23 09:20:11,liblzma: A few ABI tweaks to reserve space in structures.
68b83f252df3d27480a9f6f03445d16f6506fef1,Lasse Collin,Lasse Collin,2010-10-21 20:16:11,2010-10-21 20:16:11,xz: Make sure that message_strm() can never return NULL.
d09c5753e33ff96ee57edb6d1e98e34041203695,Lasse Collin,Lasse Collin,2010-10-21 20:06:31,2010-10-21 20:06:31,"liblzma: Update the comments in the API headers.

Adding support for LZMA_FINISH for Index encoding and
decoding needed tiny additions to the relevant .c files too."
33c1c0e102eb529588503b8beea0903a45488fad,Lasse Collin,Lasse Collin,2010-10-19 09:08:30,2010-10-19 09:08:30,Update INSTALL.generic.
0076e03641f201c4b77dddd5a6db5880be19a78c,Lasse Collin,Lasse Collin,2010-10-19 08:44:37,2010-10-19 08:44:37,"Clean up a few FIXMEs and TODOs.

lzma_chunk_size() was commented out because it is
currently useless."
ce34ec4f54ff8b753da236f371ad8dd23c8135c9,Lasse Collin,Lasse Collin,2010-10-19 07:21:08,2010-10-19 07:21:08,Update docs.
f0fa880d247e73264d2c04fe31fb3412318a0026,Lasse Collin,Lasse Collin,2010-10-12 12:13:30,2010-10-12 12:13:30,"xz: Avoid raise() also on OpenVMS.

This is similar to DOS/DJGPP that killing the program
with a signal will print a backtrace or a similar message."
ac462b1c47c451f5c62e428306314c4bdad8ae7f,Lasse Collin,Lasse Collin,2010-10-11 18:26:19,2010-10-11 18:26:19,"xz: Avoid SA_RESTART for portability reasons.

SA_RESTART is not as portable as I had hoped. It's missing
at least from OpenVMS, QNX, and DJGPP). Luckily we can do
fine without SA_RESTART."
d52b411716a614c202e89ba732492efb9916cd3f,Lasse Collin,Lasse Collin,2010-10-10 14:58:58,2010-10-10 14:58:58,"xz: Use ""%""PRIu32 instead of ""%d"" in a format string."
ae74d1bdeb075c3beefe76e1136c5741804e7e91,Lasse Collin,Lasse Collin,2010-10-10 14:43:26,2010-10-10 14:43:26,"test_files.sh: Fix the first line.

For some reason this prevented running the test only
on OS/2 and even on that it broke only recently.

Thanks to Elbert Pol."
d492b80ddd6f9a13419de6d102df7374d8f448e8,Lasse Collin,Lasse Collin,2010-10-10 13:49:01,2010-10-10 13:49:01,"lzmainfo: Use ""%""PRIu32 instead of ""%u"" for uint32_t."
825e859a9054bd91202e5723c41a17e72f63040a,Lasse Collin,Lasse Collin,2010-10-10 13:47:01,2010-10-10 13:47:01,lzmainfo: Use fileno(stdin) instead of STDIN_FILENO.
acbc4cdecbeec2a4dfaac04f185ece49b2ff17c8,Lasse Collin,Lasse Collin,2010-10-09 20:20:51,2010-10-09 20:20:51,lzmainfo: Use setmode() on DOS-like systems.
ef364d3abc5647111c5424ea0d83a567e184a23b,Lasse Collin,Lasse Collin,2010-10-09 18:51:03,2010-10-09 18:51:03,"OS/2 and DOS: Be less verbose on signals.

Calling raise() to kill xz when user has pressed C-c
is a bit verbose on OS/2 and DOS/DJGPP. Instead of
calling raise(), set only the exit status to 1."
5629c4be07b6c67e79842b2569da1cedc9c0d69a,Lasse Collin,Lasse Collin,2010-10-09 16:28:49,2010-10-09 16:28:49,"DOS: Update the Makefile, config.h and README.

This is now simpler and builds only xz.exe."
f25a77e6b9bc48a243ddfbbd755b7960eec7e0ac,Lasse Collin,Lasse Collin,2010-10-09 15:57:55,2010-10-09 15:57:55,Windows: Put some license info into README-Windows.txt.
e75100f549f85d231df25c07aa94d63e78e2d668,Lasse Collin,Lasse Collin,2010-10-09 15:57:04,2010-10-09 15:57:04,Windows: Fix a diagnostics bug in build.bash.
efeb998a2b1025df1c1d202cc7d21d866cd1c336,Lasse Collin,Lasse Collin,2010-10-09 10:02:15,2010-10-09 10:02:15,lzmainfo: Add Windows resource file.
389d418445f1623593dfdbba55d52fbb6d1205f5,Lasse Collin,Lasse Collin,2010-10-09 09:57:25,2010-10-09 09:57:25,Add missing public domain notice to lzmadec_w32res.rc.
6389c773a4912dd9f111256d74ba1605230a7957,Lasse Collin,Lasse Collin,2010-10-09 09:52:12,2010-10-09 09:52:12,Windows: Update common_w32res.rc.
71275457ca24c9b01721f5cfc3638cf094daf454,Lasse Collin,Lasse Collin,2010-10-09 09:27:08,2010-10-09 09:27:08,"Windows: Make build.bash prefer MinGW-w32 over MinGW.

This is simply for licensing reasons. The 64-bit version
will be built with MinGW-w64 anyway (at least for now),
so using it also for 32-bit build allows using the same
copyright notice about the MinGW-w64/w32 runtime.

Note that using MinGW would require a copyright notice too,
because its runtime is not in the public domain either even
though MinGW's home page claims that it is public domain.
See <http://marc.info/?l=mingw-users&m=126489506214078>."
3ac35719d8433af937af6491383d4a50e343099b,Lasse Collin,Lasse Collin,2010-10-09 08:33:21,2010-10-09 08:33:21,"Windows: Copy COPYING-Windows.txt (if it exists) to the package.

Also, put README-Windows.txt to the doc directory like
the other documentation files."
7b5db576fd7a4a67813b8437a9ccd4dbc94bbaae,Lasse Collin,Lasse Collin,2010-10-08 18:42:37,2010-10-08 18:42:37,"Windows: Fix build.bash again.

630a8beda34af0ac153c8051b1bf01230558e422 wasn't good."
d3cd7abe85ec7c2f46cf198b15c00d5d119df3dd,Lasse Collin,Lasse Collin,2010-10-08 13:53:20,2010-10-08 13:53:20,"Use LZMA_VERSION_STRING instead of PACKAGE_VERSION.

Those are the same thing, and the former makes it a bit
easier to build the code with other build systems, because
one doesn't need to update the version number into custom
config.h.

This change affects only lzmainfo. Other tools were already
using LZMA_VERSION_STRING."
084c60d318f2dbaef4078d9b100b4a373d0c3a7f,Lasse Collin,Lasse Collin,2010-10-08 12:59:25,2010-10-08 12:59:25,configure.ac: Remove two unused defines.
11f51b6714357cb67ec7e56ed9575c199b5581fe,Lasse Collin,Lasse Collin,2010-10-08 12:32:29,2010-10-08 12:32:29,Make tests accommodate missing xz or xzdec.
b1c7368f95e93ccdefdd0748e04398c26766f47f,Lasse Collin,Lasse Collin,2010-10-08 12:25:45,2010-10-08 12:25:45,Build: Add options to disable individual command line tools.
630a8beda34af0ac153c8051b1bf01230558e422,Lasse Collin,Lasse Collin,2010-10-06 21:44:53,2010-10-06 21:44:53,Windows: Make build.bash work without --enable-dynamic=no.
f9907503f882a745dce9d84c2968f6c175ba966a,Lasse Collin,Lasse Collin,2010-10-05 11:13:16,2010-10-05 11:13:16,"Build: Remove the static/dynamic tricks.

Most distros want xz linked against shared liblzma, so
it doesn't help much to require --enable-dynamic for that.
Those who want to avoid PIC on x86-32 to get better
performance, can still do it e.g. by using --disable-shared
to compile xz and then another pass to compile shared liblzma.

Part of these static/dynamic tricks were needed for Windows
in the past. Nowadays we rely on GCC and binutils to do the
right thing with auto-import. If the Autotooled build system
needs to support some other toolchain on Windows in the future,
this may need some rethinking."
fda4724d8114fccfa31c1839c15479f350c2fb4c,Lasse Collin,Lasse Collin,2010-10-05 09:18:58,2010-10-05 09:18:58,configure.ac: Silence a warning from Autoconf 2.68.
80b5675fa62c87426fe86f8fcd20feeabc4361b9,Lasse Collin,Lasse Collin,2010-10-04 16:43:01,2010-10-04 16:43:01,"A few more languages files to the xz man page.

Thanks to Jonathan Nieder."
f9722dbeca4dc4c43cfd15d122dafaac50b0a0bb,Lasse Collin,Lasse Collin,2010-10-02 09:07:33,2010-10-02 09:07:33,Update the FAQ.
61ae593661e8dc402394e84d567ca2044a51572b,Lasse Collin,Lasse Collin,2010-10-02 08:38:20,2010-10-02 08:38:20,liblzma: Small fixes to comments in the API headers.
9166682dc601fd42c1b9510572e3f917d18de504,Lasse Collin,Lasse Collin,2010-09-28 08:40:12,2010-09-28 08:40:12,Create the PDF versions of the man pages better.
17d3c61edd35de8fa884944fc70d1db86daa5dd8,Lasse Collin,Lasse Collin,2010-09-28 07:59:53,2010-09-28 07:59:53,Move version.sh to build-aux.
84af9d8770451339a692e9b70f96cf56156a6069,Lasse Collin,Lasse Collin,2010-09-28 07:53:02,2010-09-28 07:53:02,Update .gitignore.
31575a449ac64c523da3bab8d0c0b522cdc7c780,Lasse Collin,Lasse Collin,2010-09-27 22:17:14,2010-09-27 22:17:14,Fix accomodate -> accommodate on the xz man page.
cec0ddc8ec4ce81685a51998b978e22167e461f9,Lasse Collin,Lasse Collin,2010-09-27 20:29:34,2010-09-27 20:29:34,"Major man page updates.

Lots of content was updated on the xz man page.

Technical improvements:
  - Start a new sentence on a new line.
  - Use fairly short lines.
  - Use constant-width font for examples (where supported).
  - Some minor cleanups.

Thanks to Jonathan Nieder for some language fixes."
075257ab0416a0603be930082e31a5703e4ba345,Lasse Collin,Lasse Collin,2010-09-26 15:10:31,2010-09-26 15:10:31,"Fix the preset -3e.

depth=0 was missing."
2577da9ebdba13fbe99ae5ee8bde35f7ed60f6d1,Lasse Collin,Lasse Collin,2010-09-23 11:03:10,2010-09-23 11:03:10,"Add translations.bash and translation notes to README.

translations.bash prints some messages from xz, which
hopefully makes it a bit easier to test translations."
a3c5997c57e5b1a20aae6d1071b584b4f17d0b23,Lasse Collin,Lasse Collin,2010-09-17 19:14:30,2010-09-17 19:14:30,"xz: Update the Czech translation.

Thanks to Marek Černocký."
a1766af582dc23fddd9da1eeb4b9d61e3eb4c2e6,Lasse Collin,Lasse Collin,2010-09-16 20:40:41,2010-09-16 20:40:41,"xz: Add Italian translation.

Thanks to Milo Casagrande and Lorenzo De Liso."
21088018554e2b0e02914205377ceb6e34a090bd,Lasse Collin,Lasse Collin,2010-09-14 21:34:13,2010-09-14 21:34:13,xz: Edit a translators comment.
be16e28ece1b492b8f93382b7fa1cc4da23c6ff6,Lasse Collin,Lasse Collin,2010-09-14 19:47:14,2010-09-14 19:47:14,"xz: Add German translation.

Thanks to Andre Noll."
e23ea74f3240e6b69683f9e69d1716e0f9e9092b,Lasse Collin,Lasse Collin,2010-09-10 11:30:25,2010-09-10 11:30:25,Updated README.
8dad2fd69336985adb9f774fa96dc9c0efcb5a71,Lasse Collin,Lasse Collin,2010-09-10 11:30:07,2010-09-10 11:30:07,Updated INSTALL.
0b5f07fe3728c27cce416ddc40f7e4803ae96ac2,Lasse Collin,Lasse Collin,2010-09-10 11:26:20,2010-09-10 11:26:20,Updated the git repository address in ChangeLog.
a8760203f93a69bc39fd14520a6e9e7b7d70be06,Lasse Collin,Lasse Collin,2010-09-10 11:09:33,2010-09-10 11:09:33,"xz: Add a comment to translators about ""literal context bits""."
bb0b1004f83cdc4d309e1471c2ecaf9f95ce60c5,Lasse Collin,Lasse Collin,2010-09-10 07:30:33,2010-09-10 07:30:33,"xz: Multiple fixes.

The code assumed that printing numbers with thousand separators
and decimal points would always produce only US-ASCII characters.
This was used for buffer sizes (with snprintf(), no overflows)
and aligning columns of the progress indicator and --list. That
assumption was wrong (e.g. LC_ALL=fi_FI.UTF-8 with glibc), so
multibyte character support was added in this commit. The old
way is used if the operating system doesn't have enough multibyte
support (e.g. lacks wcwidth()).

The sizes of buffers were increased to accomodate multibyte
characters. I don't know how big they should be exactly, but
they aren't used for anything critical, so it's not too bad.
If they still aren't big enough, I hopefully get a bug report.
snprintf() takes care of avoiding buffer overflows.

Some static buffers were replaced with buffers allocated on
stack. double_to_str() was removed. uint64_to_str() and
uint64_to_nicestr() now share the static buffer and test
for thousand separator support.

Integrity check names ""None"" and ""Unknown-N"" (2 <= N <= 15)
were marked to be translated. I had forgot these, plus they
wouldn't have worked correctly anyway before this commit,
because printing tables with multibyte strings didn't work.

Thanks to Marek Černocký for reporting the bug about
misaligned table columns in --list output."
639f8e2af33cf8a184d59ba56b6df7c098679d61,Lasse Collin,Lasse Collin,2010-09-08 05:49:22,2010-09-08 05:49:22,"Update the Czech translation.

Thanks to Marek Černocký."
41bc9956ebfd7c86777d33676acf34c45e7ca7c7,Lasse Collin,Lasse Collin,2010-09-07 09:31:40,2010-09-07 09:31:40,xz: Add a note to translators.
77a7746616e555fc08028e883a56d06bf0088b81,Lasse Collin,Lasse Collin,2010-09-07 07:42:13,2010-09-07 07:42:13,"Fix use of N_() and ngettext().

I had somehow thought that N_() is usually used
as shorthand for ngettext().

This also fixes a missing \n from a call to ngettext()."
e6ad39335842343e622ab51207d1d3cb9caad801,Lasse Collin,Lasse Collin,2010-09-06 16:43:12,2010-09-06 16:43:12,Add missing files to POTFILES.in.
58f55131820d2e08a1a6beb9ec0ee2378044eb30,Lasse Collin,Lasse Collin,2010-09-06 07:16:24,2010-09-06 07:16:24,xz: Improve a comment.
bcb1b898341f7073f51660d7052d7ed6c5461a66,Lasse Collin,Lasse Collin,2010-09-05 18:34:29,2010-09-05 18:34:29,"xz: Update the comment about NetBSD in file_io.c.

Thanks to Joerg Sonnenberger."
da014d55972f5addbf6b4360d3d8ed2ef4282170,Lasse Collin,Lasse Collin,2010-09-05 18:11:33,2010-09-05 18:11:33,"xz: Use an array instead of pointer for stdin_filename.

Thanks Joerg Sonnenberger."
8c7d3d1a0781c296c6b6e2465becaffd2132f7ee,Lasse Collin,Lasse Collin,2010-09-05 09:16:17,2010-09-05 09:16:17,xz: Hopefully ease translating the messages in list.c.
ef840950ad99cf2955c754875af0e01acf125079,Lasse Collin,Lasse Collin,2010-09-04 20:14:44,2010-09-04 20:14:44,xz: Fix grammar.
c46afd6edc04ea140db6c59e8486f5707c810c13,Lasse Collin,Lasse Collin,2010-09-04 20:12:20,2010-09-04 20:12:20,xz: Use lzma_lzma_preset() to initialize the options structure.
8fd3ac046d0b1416a2094fecc456d9e0f4d5d065,Lasse Collin,Lasse Collin,2010-09-04 19:16:28,2010-09-04 19:16:28,"Don't set lc=4 with --extreme.

This should reduce the cases where --extreme makes
compression worse. On the other hand, some other
files may now benefit slightly less from --extreme."
474bac0c33e94aeaca8ada17ab19972b1424bc2b,Lasse Collin,Lasse Collin,2010-09-04 19:10:32,2010-09-04 19:10:32,xz: Minor improvements to --help and --long-help.
373ee26f955617295c5c537b04a153a1969140d2,Jonathan Nieder,Lasse Collin,2010-09-03 21:49:15,2010-09-03 21:56:14,"Adjust memory limits in test_compress.sh

Testing compression at level -4 now requires 48 MiB of free store at
compression time and 5 MiB at decompression time.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>"
2fce9312f36727ea82f3430cc5d3a7d243c5f087,Lasse Collin,Lasse Collin,2010-09-03 12:54:40,2010-09-03 12:54:40,xz: Make -vv show also decompressor memory usage.
b4b1cbcb53624ab832f8b3189c74450dc7ea29b6,Lasse Collin,Lasse Collin,2010-09-03 12:13:12,2010-09-03 12:13:12,"Tweak the compression presets -0 .. -5.

""Extreme"" mode might need some further tweaking still.
Docs were not updated yet."
77fe5954cd3d10fb1837372684cbc133b56b6a87,Lasse Collin,Lasse Collin,2010-09-03 09:28:41,2010-09-03 09:28:41,"liblzma: Adjust default depth calculation for HC3 and HC4.

It was 8 + nice_len / 4, now it is 4 + nice_len / 4.
This allows faster settings at lower nice_len values,
even though it seems that I won't use automatic depth
calcuation with HC3 and HC4 in the presets."
fce69059cf901ce8075a78c7607d591f144a3b5a,Lasse Collin,Lasse Collin,2010-09-03 08:11:25,2010-09-03 08:11:25,"xz: Make --help two lines shorter.

At least for now, the --help option doesn't list any
options that take arguments, so ""Mandatory arguments to...""
can be omitted."
a848e47ced6e5e2a564b5c454b2f5a19c2f40298,Lasse Collin,Lasse Collin,2010-09-02 16:22:35,2010-09-02 16:22:35,"xz: Make setting a preset override a custom filter chain.

This is more logical behavior than ignoring preset level
options once a custom filter chain has been specified."
b3ff7ba044eaeab3e424d7b51fe914daf681b1a3,Lasse Collin,Lasse Collin,2010-09-02 16:09:57,2010-09-02 16:09:57,xz: Always warn if adjusting dictionary size due to memlimit.
d5653ba8a1ea9c00de4fddc617aba3c51e18139d,Lasse Collin,Lasse Collin,2010-08-10 08:04:30,2010-08-10 08:04:30,"Fix test_compress.sh.

It broke when --memory option was removed from xzdec.

Thanks to Jonathan Nieder."
792331bdee706aa852a78b171040ebf814c6f3ae,Lasse Collin,Lasse Collin,2010-08-07 17:45:18,2010-08-07 17:45:18,"Disable the memory usage limiter by default.

For several people, the limiter causes bigger problems that
it solves, so it is better to have it disabled by default.
Those who want to have a limiter by default need to enable
it via the environment variable XZ_DEFAULTS.

Support for environment variable XZ_DEFAULTS was added. It is
parsed before XZ_OPT and technically identical with it. The
intended uses differ quite a bit though; see the man page.

The memory usage limit can now be set separately for
compression and decompression using --memlimit-compress and
--memlimit-decompress. To set both at once, -M or --memlimit
can be used. --memory was retained as a legacy alias for
--memlimit for backwards compatibility.

The semantics of --info-memory were changed in backwards
incompatible way. Compatibility wasn't meaningful due to
changes in the memory usage limiter functionality.

The memory usage limiter info is no longer shown at the
bottom of xz --long -help.

The memory usage limiter support for removed completely from xzdec.

xz's man page was updated to match the above changes. Various
unrelated fixes were also made to the man page."
4a45dd4c39f75d25c7a37b6400cb24d4010ca801,Lasse Collin,Lasse Collin,2010-08-06 17:22:16,2010-08-06 17:22:16,Add missing const to a global constant in xz.
01aa4869cb220b7fdad6d1acbabb2233045daa8f,Lasse Collin,Lasse Collin,2010-07-28 08:44:55,2010-07-28 08:44:55,"Language fixes for man pages.

Thanks to A. Costa and Jonathan Nieder."
ce1f0deafe8504e1492bf1b1efb3e3ec950b1a2b,Lasse Collin,Lasse Collin,2010-07-27 17:47:12,2010-07-27 17:47:12,Windows: Add a note about building a Git repository snapshot
507a4a4dea1e5462f12f7ed4b076c34e02054a38,Lasse Collin,Lasse Collin,2010-07-27 17:45:03,2010-07-27 17:45:03,Windows: build.sh is a bash script so name it correctly.
b1cbfd40f049a646a639eb78a3e41e9e3ef73339,Lasse Collin,Lasse Collin,2010-07-27 17:27:32,2010-07-27 17:27:32,Windows: Don't strip liblzma.a too much.
a540198ffb25fad36380c5e92ac20c2d28eec46a,Lasse Collin,Lasse Collin,2010-07-13 17:07:26,2010-07-13 17:07:26,Updated THANKS.
bab0f01ed931f606b4675aa9f9331a17cec09bad,Lasse Collin,Lasse Collin,2010-07-13 16:55:50,2010-07-13 16:55:50,"Add two simple example programs.

Hopefully these help a bit when learning the basics
of liblzma API. I plan to write detailed examples about
both basic and advanced features with lots of comments,
but these two examples are good have right now.

The examples were written by Daniel Mealha Cabrita. Thanks."
c15c42abb3c8c6e77c778ef06c97a4a10b8b5d00,Lasse Collin,Lasse Collin,2010-06-15 11:06:29,2010-06-15 11:06:29,Add --no-adjust.
2130926dd1c839280358172dfadd8d3054bde2b4,Lasse Collin,Lasse Collin,2010-06-11 18:51:32,2010-06-11 18:51:32,Updated THANKS.
bc612d0e0c9e4504c59d49168e87a7ae3e458443,Lasse Collin,Lasse Collin,2010-06-11 18:48:32,2010-06-11 18:48:32,"Clarify the description of the default memlimit in the man page.

Thanks to Denis Excoffier."
e1b6935d60a00405e6b5b455a3426d2248cc926c,Lasse Collin,Lasse Collin,2010-06-11 18:43:28,2010-06-11 18:43:28,"Fix string to uint64_t conversion.

Thanks to Denis Excoffier for the bug report."
3e49c8acb0f5312948eddb2342dbb5802d4571d0,Lasse Collin,Lasse Collin,2010-06-11 07:40:28,2010-06-11 07:40:28,Put the git commit to the filename in mydist rule.
d8b41eedce486d400f701b757b7b5e4e32276618,Lasse Collin,Lasse Collin,2010-06-02 20:13:55,2010-06-02 20:13:55,Fix compiling with -Werror.
b5fbab6123a39c9a55cd5d7af410e9aae067d5f8,Lasse Collin,Lasse Collin,2010-06-02 20:09:22,2010-06-02 20:09:22,"Silence a bogus Valgrind warning.

When using -O2 with GCC, it liked to swap two comparisons
in one ""if"" statement. It's otherwise fine except that
the latter part, which is seemingly never executed, got
executed (nothing wrong with that) and then triggered
warning in Valgrind about conditional jump depending on
uninitialized variable. A few people find this annoying
so do things a bit differently to avoid the warning."
29a7b250e685852f2f97615493ec49acaf528623,Lasse Collin,Lasse Collin,2010-06-02 18:32:12,2010-06-02 18:32:12,Fix a Windows-specific FIXME in signal handling code.
e89d987056cee7d4e279be3ef3a6cc690bfc0e6d,Lasse Collin,Lasse Collin,2010-06-02 14:46:58,2010-06-02 14:46:58,"Adjust SA_RESTART workaround.

I want to get a bug report if something else than
DJGPP lacks SA_RESTART."
e243145c84ab5c3be8259fd486ead0de5235b3f0,Lasse Collin,Lasse Collin,2010-06-01 13:02:30,2010-06-01 13:02:30,"xz man page updates.

- Concatenating .xz files and padding
- List mode
- Robot mode
- A few examples (but many more are needed)"
ce6dc3c0a891f23a862f80ec08d3b6f0beb2a562,Lasse Collin,Lasse Collin,2010-06-01 12:51:44,2010-06-01 12:51:44,Major update to xz --list.
905e54804a899e4ad526d38fdba7e803ab9b71bd,Lasse Collin,Lasse Collin,2010-06-01 11:13:03,2010-06-01 11:13:03,Rename message_filters_get() to message_filters_to_str().
4b346ae8af20045027ae5efb068c6d69da3324d2,Lasse Collin,Lasse Collin,2010-06-01 11:09:12,2010-06-01 11:09:12,Fix a comment.
07dc34f6da45c9ab757dad7fd5eef522ad27d296,Lasse Collin,Lasse Collin,2010-05-27 13:17:42,2010-05-27 13:17:42,Fix lzma_block_compressed_size().
44d70cb154225e47eebf15a3cfbdf3794cbb4593,Lasse Collin,Lasse Collin,2010-05-27 11:32:51,2010-05-27 11:32:51,"Take Cygwin into account in some #if lines.

This change is no-op, but good to have just in case
for the future."
a334348dc02803241cf4e0a539eecdc0e7ad2cc7,Lasse Collin,Lasse Collin,2010-05-27 10:42:44,2010-05-27 10:42:44,"Remove references to the Subblock filter in xz and tests.

Thanks to Jonathan Nieder."
70e5e2f6a7084e6af909deee88ceac2f6efa7893,Lasse Collin,Lasse Collin,2010-05-27 10:35:36,2010-05-27 10:35:36,"Remove unused chunk_size.c.

Thanks to Jonathan Nieder for the reminder."
01a414eaf4be6352c06b48001b041b47e8202faa,Jonathan Nieder,Lasse Collin,2010-05-27 07:31:33,2010-05-27 10:30:48,"Use my_min() instead of MIN() in src/xz/list.c

This should have been done in
920a69a8d8e4203c5edddd829d932130eac188ea."
920a69a8d8e4203c5edddd829d932130eac188ea,Lasse Collin,Lasse Collin,2010-05-26 07:36:46,2010-05-26 07:36:46,"Rename MIN() and MAX() to my_min() and my_max().

This should avoid some minor portability issues."
019ae27c24d0c694545a6a46f8b9fb552198b015,Lasse Collin,Lasse Collin,2010-05-26 07:30:20,2010-05-26 07:30:20,Fix compilation of debug/known_sizes.c.
98a4856a6ea84f79c790057a6eb89a25bc45b074,Lasse Collin,Lasse Collin,2010-05-26 07:28:54,2010-05-26 07:28:54,Remove references to Subblock filter in debug/sync_flush.c.
703d2c33c095c41ae0693ee8c27c45e3847e4535,Lasse Collin,Lasse Collin,2010-05-26 07:16:57,2010-05-26 07:16:57,Better #error message.
d8a55c48b39703dd83f11089ad01e1ff2ac102e0,Lasse Collin,Lasse Collin,2010-05-26 06:55:47,2010-05-26 06:55:47,"Remove the Subblock filter code for now.

The spec isn't finished and the code didn't compile anymore.
It won't be included in XZ Utils 5.0.0. It's easy to get it
back once the spec is done."
b6377fc990f9b8651149cae0fecb8b9c5904e26d,Lasse Collin,Lasse Collin,2010-05-16 15:42:22,2010-05-16 15:42:22,"Split message_filters().

message_filters_to_str() converts the filter chain to
a string. message_filters_show() replaces the original
message_filters().

uint32_to_optstr() was also added to show the dictionary
size in nicer format when possible."
d9986db782d6cf0f314342127280519339378fa0,Lasse Collin,Lasse Collin,2010-05-14 20:17:20,2010-05-14 20:17:20,"Omit lzma_restrict from the API headers.

It isn't really useful so omitting it makes things
shorter and slightly more readable."
0d3489efca0a723dca0394809fa3e6170843af4b,Lasse Collin,Lasse Collin,2010-05-10 16:57:24,2010-05-10 16:57:24,Updated INSTALL.
3fb3d594a2b53886adee161b6261e92277f05f7c,Lasse Collin,Lasse Collin,2010-05-10 16:54:52,2010-05-10 16:54:52,Updated THANKS.
6548e304657e77d3a972053db3c41c5daf591113,Lasse Collin,Lasse Collin,2010-05-10 16:54:15,2010-05-10 16:54:15,"Updates to tuklib_physmem and tuklib_cpucores.

Don't use #error to generate compile error, because some
compilers actually don't take it as an error. This fixes
tuklib_physmem on IRIX.

Fix incorrect error check for sysconf() return values.

Add AIX, HP-UX, and Tru64 specific code to detect the
amount RAM.

Add HP-UX specific code to detect the number of CPU cores.

Thanks a lot to Peter O'Gorman for initial patches,
testing, and debugging these fixes."
a290cfee3e23f046889c022aa96b4eca2016fdda,Lasse Collin,Lasse Collin,2010-04-12 18:55:56,2010-04-12 18:55:56,"Show both elapsed time and estimated remaining time in xz -v.

The extra space for showing both has been taken from the
sizes field. If the sizes grow big, bigger units than MiB
will be used. It makes it slightly difficult to see that
progress is still happening with huge files, but it should
be OK in practice.

Thanks to Trent W. Buck for <http://bugs.debian.org/574583>
and Jonathan Nieder for suggestions how to fix it."
a1f7a986b8d708f9290da9799ca1b8d7082fad3e,Lasse Collin,Lasse Collin,2010-03-31 13:47:25,2010-03-31 13:47:25,"Add a simple tip to faq.txt about tar and xz.

Thanks to Gilles Espinasse."
c737eec91d200d730aa82662affd6b06ebb0bff0,Lasse Collin,Lasse Collin,2010-03-22 19:03:03,2010-03-22 19:03:03,Updated THANKS.
f4b2b52624b802c786e4e2a8eb6895794dd93b24,Lasse Collin,Lasse Collin,2010-03-07 17:52:25,2010-03-07 17:52:25,"Fix xzgrep to not break if filenames have spaces or quotes.

Thanks to someone who reported the bug on IRC."
cf38da00a140bd3bd65b192390ae5553380fd774,Lasse Collin,Lasse Collin,2010-03-07 11:59:32,2010-03-07 11:59:32,"Treat all integer multiplier suffixes as base-2.

Originally both base-2 and base-10 were supported, but since
there seems to be little need for base-10 in XZ Utils, treat
everything as base-2 and also be more relaxed about the case
of the first letter of the suffix. Now xz will accept e.g.
KiB, Ki, k, K, kB, and KB, and interpret them all as 1024. The
recommended spelling of the suffixes are still KiB, MiB, and GiB."
00fc1211ae7b687ac912098f4479112059deccbd,Lasse Collin,Lasse Collin,2010-03-07 11:50:23,2010-03-07 11:50:23,"Consistently round up the memory usage limit in messages.

It still feels a bit wrong to round 1 byte to 1 MiB but
at least it is now done consistently so that the same
byte value is always rounded the same way to MiB."
9886d436ff5615fc70eef32ff757b1e934069621,Lasse Collin,Lasse Collin,2010-03-07 11:34:34,2010-03-07 11:34:34,"Change the default of --enable-assume-ram from 32 to 128 MiB.

This is to allow files created with ""xz -9"" to be decompressed
if the amount of RAM cannot be determined."
2672bcc9f85ba28ff648e092e9eb4cd9e69ce418,Lasse Collin,Lasse Collin,2010-03-07 11:29:28,2010-03-07 11:29:28,"Increase the default memory usage limit on ""low-memory"" systems.

Previously the default limit was always 40 % of RAM. The
new limit is a little bit more complex:

  - If 40 % of RAM is at least 80 MiB, 40 % of RAM is used
    as the limit.

  - If 80 % of RAM is over 80 MiB, 80 MiB is used as the limit.

  - Otherwise 80 % of RAM is used as the limit.

This should make it possible to decompress files created with
""xz -9"" on more systems. Swapping is generally more expected
on systems with less RAM, so higher default limit on them
shouldn't cause too bad surprises in terms of heavy swapping.
Instead, the higher default limit should reduce the number of
bad surprises when it used to prevent decompression of files
created with ""xz -9"". The DoS prevention system shouldn't be
a DoS itself.

Note that even with the new default limit, a system with 64 MiB
RAM cannot decompress files created with ""xz -9"" without user
overriding the limit. This should be OK, because if xz is going
to need more memory than the system has RAM, it will run very
very slowly and thus it's good that user has to override the limit
in that case."
5527b7269a997e7f335d60f237a64bbf225d9dc7,Lasse Collin,Lasse Collin,2010-03-06 19:36:19,2010-03-06 19:36:19,Updated THANKS.
d0d1c51aea4351288a7e533cce28cb7f852f6b05,Lasse Collin,Lasse Collin,2010-03-06 19:17:20,2010-03-06 19:17:20,"Fix missing initialization in lzma_strm_init().

With bad luck, lzma_code() could return LZMA_BUF_ERROR
when it shouldn't.

This has been here since the early days of liblzma.
It got triggered by the modifications made to the xz
tool in commit 18c10c30d2833f394cd7bce0e6a821044b15832f
but only when decompressing .lzma files. Somehow I managed
to miss testing that with Valgrind earlier.

This fixes <http://bugs.gentoo.org/show_bug.cgi?id=305591>.
Thanks to Rafał Mużyło for helping to debug it on IRC."
eb7d51a3faf9298c0c7aa9aaeae1023dcf9e37ea,Lasse Collin,Lasse Collin,2010-02-12 11:16:15,2010-02-12 11:16:15,"Collection of language fixes to comments and docs.

Thanks to Jonathan Nieder."
4785f2021aa6a23f1caf724fcc823e562584f225,Lasse Collin,Lasse Collin,2010-02-12 10:41:20,2010-02-12 10:41:20,Fix jl -> jb in ASM files.
6b50c9429bf85521d355adc61745d06ee017f8c8,Lasse Collin,Lasse Collin,2010-02-12 10:31:22,2010-02-12 10:31:22,"Use __APPLE__ instead of __MACH__ in ASM files.

This allows the files to work on HURD.

Thanks to Jonathan Nieder."
6503fde658a5cdbdd907a788865470dd64771601,Lasse Collin,Lasse Collin,2010-02-07 17:48:06,2010-02-07 17:48:06,"Subtle change to liblzma Block handling API.

lzma_block.version has to be initialized even for
lzma_block_header_decode(). This way a future version
of liblzma won't allocate memory in a way that an old
application doesn't know how to free it.

The subtlety of this change is that all current apps
using lzma_block_header_decode() will keep working for
now, because the only possible version value is zero,
and lzma_block_header_decode() unconditionally sets the
version to zero even now. Unless fixed, these apps will
break in the future if a new version of the Block options
is ever needed."
dd7c3841ff78cb94ce02b0220c6e4748460970f7,Lasse Collin,Lasse Collin,2010-02-02 09:50:11,2010-02-02 09:50:11,"Fix wrong assertion.

This was added in 455e68c030fde8a8c2f5e254c3b3ab9489bf3735."
9d67588c1597849504a3e5ac8bf6f06e7d2ee8be,Lasse Collin,Lasse Collin,2010-02-01 20:48:42,2010-02-01 20:48:42,Updated TODO.
fef6333f52c8801308c3b78acb7942988541d137,Lasse Collin,Lasse Collin,2010-02-01 20:47:54,2010-02-01 20:47:54,Fix typos in comments.
455e68c030fde8a8c2f5e254c3b3ab9489bf3735,Lasse Collin,Lasse Collin,2010-02-01 20:46:56,2010-02-01 20:46:56,Fix signal handling for --list.
82220a149015616f75641ee8bbea415137535b9b,Lasse Collin,Lasse Collin,2010-02-01 09:44:45,2010-02-01 09:44:45,"Fix compression of symlinks with --force.

xz --force accepted symlinks, but didn't remove
them after successful compression. Instead, an error
message was displayed."
d4da177d5ba3d2ef7323a6f1e06ca16e0478810e,Lasse Collin,Lasse Collin,2010-02-01 08:20:57,2010-02-01 08:20:57,Fix a comment.
f9dd797a423a148903cf345b4146cb1fe1eab11d,Lasse Collin,Lasse Collin,2010-01-31 21:43:54,2010-01-31 21:43:54,Updated THANKS.
ee5ddb8b28419fe4923ded5c18a50570a762dcab,Lasse Collin,Lasse Collin,2010-01-31 21:41:29,2010-01-31 21:41:29,Updated TODO.
11936ad3f5a2e97bda3463c7a56a2f4bb9265ea6,Lasse Collin,Lasse Collin,2010-01-31 21:35:04,2010-01-31 21:35:04,Mention TODO in README.
2901a8e7e82af05675b8cd8758a8ceddb111359f,Lasse Collin,Lasse Collin,2010-01-31 21:31:14,2010-01-31 21:31:14,Updated INSTALL.
8884e16864ba53fb4b58623d7537d7ef30c28e11,Lasse Collin,Lasse Collin,2010-01-31 21:28:51,2010-01-31 21:28:51,"Revise the Windows build files.

The old Makefile + config.h was deleted, because it
becomes outdated too easily and building with the
Autotools based build system works fine even on Windows.

windows/build.sh hasn't got much testing, but it should
work to build 32-bit x86 and x86-64 versions of XZ Utils
using MSYS, MinGW or MinGW-w32, and MinGW-w64.

windows/INSTALL-Windows.txt describes what packages are
needed and how to install them.

windows/README-Windows.txt is a readme file for the binary
package that build.sh hopefully builds.

There are no instructions about using Autotools for now,
so those using a git snapshot may want to run
""autoreconf -fi && ./configure && make mydist"" on a UN*X
box and then copy the resulting .tar.gz to a Windows."
34eb5e201d62f7f46bbe6fe97cfe08cb31b3b88c,Lasse Collin,Lasse Collin,2010-01-31 17:52:38,2010-01-31 17:52:38,"Select the default integrity check type at runtime.

Previously it was set statically to CRC64 or CRC32
depending on options passed to the configure script."
96a4f840e3b9ca5c81e5711ff9c267b194f93ef1,Lasse Collin,Lasse Collin,2010-01-31 16:17:50,2010-01-31 16:17:50,Improve displaying of the memory usage limit.
b3cc4d8edd68a0250cc69680c99b9f7343f99cf2,Lasse Collin,Lasse Collin,2010-01-31 10:53:56,2010-01-31 10:53:56,"Don't use uninitialized sigset_t.

If signal handlers haven't been established, then it's
useless to try to block them, especially since the sigset_t
used for blocking hasn't been initialized yet."
231c3c7098f1099a56abb8afece76fc9b8699f05,Lasse Collin,Lasse Collin,2010-01-31 10:01:54,2010-01-31 10:01:54,"Delay opening the destionation file and other fixes.

The opening of the destination file is now delayed a little.
The coder is initialized, and if decompressing, the memory
usage of the first Block compared against the memory
usage limit before the destination file is opened. This
means that if --force was used, the old ""target"" file won't
be deleted so easily when something goes wrong very early.
Thanks to Mark K for the bug report.

The above fix required some changes to progress message
handling. Now there is a separate function for setting and
printing the filename. It is used also in list.c.

list_file() now handles stdin correctly (gives an error).

A useless check for user_abort was removed from file_io.c."
0dbd0641db99d5e73d51d04ce7a71e52dc6b4105,Lasse Collin,Lasse Collin,2010-01-29 20:48:04,2010-01-29 20:48:04,"Add list.h to src/xz/Makefile.am.

This should have been already in
0bc9eab243dee3be764b3530433a7fcdc3f7c6a1."
b4b1a56e0cbd597157858264f5c7189201ac9018,Lasse Collin,Lasse Collin,2010-01-29 11:24:27,2010-01-29 11:24:27,Add lzmainfo.1 to manfiles list to convert to .txt and .pdf.
5574d64e03ad3a3d6e00e4b0d3e81c7b5529ec95,Lasse Collin,Lasse Collin,2010-01-27 14:42:11,2010-01-27 14:42:11,Silence two compiler warnings on DOS-like systems.
b063cc34a30a4edf109343ff373b2b62b8ca72d3,Lasse Collin,Lasse Collin,2010-01-27 11:31:03,2010-01-27 11:31:03,Use PACKAGE_URL instead of custom PACKAGE_HOMEPAGE.
38b8035b5cb5f56457c5fa5a891d6900fcf5984f,Lasse Collin,Lasse Collin,2010-01-26 21:37:46,2010-01-26 21:37:46,"Add a missing space to an error message.

Thanks to Robert Readman."
e5496f9628ff5979392a80421d0b63a4de8015b4,Lasse Collin,Lasse Collin,2010-01-26 20:53:37,2010-01-26 20:53:37,"Use past tense in error message in io_unlink().

Added a note to translators too.

Thanks to Robert Readman."
d9a9800597ea540090e434132c3b511217df0a2b,Lasse Collin,Lasse Collin,2010-01-26 13:42:24,2010-01-26 13:42:24,"Fix too small static buffer in util.c.

This was introduced in
0dd6d007669b946543ca939a44243833c79e08f4 two days ago."
d0b4bbf5da068503c099cd456e294d7673548cc0,Lasse Collin,Lasse Collin,2010-01-26 12:46:43,2010-01-26 12:46:43,Minor comment fix.
0bc9eab243dee3be764b3530433a7fcdc3f7c6a1,Lasse Collin,Lasse Collin,2010-01-24 21:50:54,2010-01-24 21:50:54,"Add initial version of xz --list.

This is a bit rough but should be useful for basic things.
Ideas (with detailed examples) about the output format are
welcome.

The output of --robot --list is not necessarily stable yet,
although I don't currently have any plans about changing it.

The man page hasn't been updated yet."
df254ce03be016e217b511e7acd5d493f9929ca5,Lasse Collin,Lasse Collin,2010-01-24 20:46:11,2010-01-24 20:46:11,"Add io_pread().

It will be used by --list."
ef68dd4a92976276304de2aedfbe34ae91a86abb,Lasse Collin,Lasse Collin,2010-01-24 20:45:14,2010-01-24 20:45:14,"Set LC_NUMERIC=C when --robot is used.

It is to ensure that floating point numbers
will always have a dot as the decimal separator."
0dd6d007669b946543ca939a44243833c79e08f4,Lasse Collin,Lasse Collin,2010-01-24 14:57:40,2010-01-24 14:57:40,Some improvements to printing sizes in xz.
2a98fdffd68c66371279c211c29153c808ad5c1d,Lasse Collin,Lasse Collin,2010-01-20 20:02:35,2010-01-20 20:02:35,"Fix a typo in README.

Thanks to R. Bijker."
07a11dad44e041b01dcfc73e8d4e00731158c06d,Lasse Collin,Lasse Collin,2010-01-17 09:59:54,2010-01-17 09:59:54,"Updated windows/Makefile.

Thanks to Dan Shechter for the patch.

It is likely that windows/Makefile will be removed
completely, because Autotols based build nowadays
works well with both 32-bit and 64-bit MinGW (I
just need to update the docs)."
37f31ead9d2b4e467df11450cf29ed7d7e3e25f3,Lasse Collin,Lasse Collin,2010-01-15 09:05:11,2010-01-15 09:05:11,Update the xz man page to match the previous two commits.
3ffd5d81a43210c8da56da5c5b3637d3f8bc63c7,Lasse Collin,Lasse Collin,2010-01-13 17:10:25,2010-01-13 17:10:25,"Don't read compressed data from a terminal or write it
to a terminal even if --force is specified.

It just seems more reasonable this way.

The new behavior matches bzip2. The old one matched gzip."
23ac2c44c3ac76994825adb7f9a8f719f78b5ee4,Lasse Collin,Lasse Collin,2010-01-13 16:12:40,2010-01-13 16:12:40,"Don't compress or decompress special files unless writing
to stdout even if --force is used.

--force will still enable compression of symlinks, but only
in case they point to a regular file.

The new way simply seems more reasonable. It matches gzip's
behavior while the old one matched bzip2's behavior."
cee12aa852ec0902983dc1f153346ef750157fb9,Lasse Collin,Lasse Collin,2010-01-12 14:30:33,2010-01-12 14:30:33,Updated THANKS.
153c7740c54b3c90129dbd3d6153ac1303c4d605,Lasse Collin,Lasse Collin,2010-01-12 14:18:14,2010-01-12 14:18:14,"Add IRIX-specific code to tuklib_physmem and tuklib_cpucores.

This is untested but it will get tested soon and, if needed,
fixed before 5.0.0.

Thanks to Stuart Shelton."
8ea8dc754a7a5bc2d60db1eac201839cabdab6a1,Lasse Collin,Lasse Collin,2009-12-31 22:29:10,2009-12-31 22:29:10,"Fix _memconfig() functions.

This affects lzma_memusage() and lzma_memlimit_get()."
1a7ec87c8ee61dfc2e496d2e1fb7ab0939804691,Lasse Collin,Lasse Collin,2009-12-31 20:45:53,2009-12-31 20:45:53,"Revised the Index handling code.

This breaks API and ABI but most apps are not affected
since most apps don't use this part of the API. You will
get a compile error if you are using anything that got
broken.

Summary of changes:

  - Ability to store Stream Flags, which are needed
    for random-access reading in multi-Stream files.

  - Separate function to set size of Stream Padding.

  - Iterator structure makes it possible to read the same
    lzma_index from multiple threads at the same time.

  - A lot faster code to locate Blocks.

  - Removed lzma_index_equal() without adding anything
    to replace it. I don't know what it should do exactly
    with the new features and what actually needs this
    function in the first place other than test_index.c,
    which now has its own code to compare lzma_indexes."
f29997a846e673cb3b8cbd57de47ed313b3978bb,Lasse Collin,Lasse Collin,2009-12-31 19:13:25,2009-12-31 19:13:25,"Remove c-format tag in cs.po.

It was fixed in the C code earlier."
097bad000363e0bf29f8274ad2d7ab59f7dbf644,Lasse Collin,Lasse Collin,2009-12-31 19:11:05,2009-12-31 19:11:05,Add missing lzma_nothrow in filter.h.
b56cb1fc31fa2381f92eefc040df85667048d626,Lasse Collin,Lasse Collin,2009-12-09 16:13:44,2009-12-09 16:13:44,Remove redefinition of _(msgid) macro from lzmainfo.c.
171b03febfe09d9fae6ac8be6aa4518bcaf427d2,Jonathan Nieder,Lasse Collin,2009-12-09 01:41:57,2009-12-09 08:56:43,"update po/.gitignore

Since the *.gmo files are deleted by the maintainer-clean target,
I assume they are not meant to be tracked.

Also add the other files listed in the Makefile’s clean targets
(stamp-poT, xz.po, xz.[12].po, *.new.po, xz.mo) to make sure they
are not accidentally tracked.  Most of these are intermediate
files that would not appear unless a build is interrupted or
fails.

Split the list of untracked files by origin to make it easier to
tell if files are missing in the future.

Signed-off-by: Jonathan Nieder <jrnieder@gmail.com>"
f7e44c6c11f630519072971b8b07a5729c096c36,Lasse Collin,Lasse Collin,2009-12-08 22:38:55,2009-12-08 22:38:55,"Always rely on GCC's auto-import on Windows.

I understood that this is nicer, because then people
don't need to worry about the LZMA_API_STATIC macro.

Thanks to Charles Wilson and Keith Marshall."
7b76a3e2336f25088957cba92b0dbd854d9caa3c,Lasse Collin,Lasse Collin,2009-12-07 19:46:53,2009-12-07 19:46:53,"Fix file_io.c on DOS-like systems.

The problem was introduced when adding sparse file
support in 465d1b0d6518c5d980f2db4c2d769f9905bdd902.

Thanks to Charles Wilson."
0696f5d268362221380e039bad48a86e29067c6a,Lasse Collin,Lasse Collin,2009-12-07 18:54:21,2009-12-07 18:54:21,"Add Czech translation.

Thanks to Marek Černocký.

Other people planning to translate xz: Note that the
messages are a little bit in flux still. Translations
are still welcome, just be prepared to some extra work
in case there are changes."
5e817a50d276f0a3607638c1c1d449d50b9aa4e5,Lasse Collin,Lasse Collin,2009-12-07 18:32:08,2009-12-07 18:32:08,"Add a note for translators to add a bug reporting address
for translation bugs."
6db1c35be9e1e364cdacff6878910e1b7aac2a37,Lasse Collin,Lasse Collin,2009-12-07 18:07:02,2009-12-07 18:07:02,"Prevent xgettext from taking one regular string as a C format string.

Thanks to Marek Černocký."
e0c2776b6ffbd2b1900fde353aceac734edc93d7,Lasse Collin,Lasse Collin,2009-11-28 15:45:22,2009-11-28 15:45:22,"Remove duplicate code in io_open_dest().

Fix a missing _() in the error message too."
f057a33c6f7c5992389479f2d4feabf2900ba7ee,Lasse Collin,Lasse Collin,2009-11-26 08:11:23,2009-11-26 08:11:23,"Typo fix to sysdefs.h.

Thanks to Jonathan Nieder."
8767b41534eafdf5e742e12190646bf5740b0cdb,Lasse Collin,Lasse Collin,2009-11-26 08:10:36,2009-11-26 08:10:36,"Fix a memory leak in test_index.c.

This was introduced in
bd13b04e202b6f495a68eb0766f97085b7c50a06.

Thanks to Jim Meyering for noticing it."
919fbaff860acdaa4bcd216500a0b1c960a6db92,Lasse Collin,Lasse Collin,2009-11-25 12:22:19,2009-11-25 12:22:19,"Add missing error check to coder.c.

With bad luck this could cause a segfault due to
reading (but not writing) past the end of the buffer."
bd13b04e202b6f495a68eb0766f97085b7c50a06,Lasse Collin,Lasse Collin,2009-11-25 11:04:10,2009-11-25 11:04:10,"Fix bugs in lzma_index_read() and lzma_index_cat().

lzma_index_read() didn't skip over Stream Padding
if it was the first record in the Index.

lzma_index_cat() didn't combine small Indexes correctly.

The test suite was updated to check for these bugs.

These bugs didn't affect the xz command line tool or
most users of liblzma in any way."
1f196909143b888e062bd9a0c4ba8c34d3019bfa,Lasse Collin,Lasse Collin,2009-11-25 10:52:56,2009-11-25 10:52:56,"Index decoder fixes.

The Index decoder code didn't perfectly match the API docs,
which said that *i will be set to point to the decoded Index
only after decoding has succeeded. The docs were a bit unclear
too.

Now the decoder will initially set *i to NULL. *i will be set
to point to the decoded Index once decoding has succeeded.
This simplifies applications too, since it avoids dangling
pointers."
465d1b0d6518c5d980f2db4c2d769f9905bdd902,Lasse Collin,Lasse Collin,2009-11-25 09:19:20,2009-11-25 09:19:20,"Create sparse files by default when decompressing into
a regular file.

Sparse file creation can be disabled with --no-sparse.
I don't promise yet that the name of this option won't
change before 5.0.0. It's possible that the code, that
checks when it is safe to use sparse output on stdout,
is not good enough, and a more flexible command line
option is needed to configure sparse file handling."
37de544414fc2dc5039471d1002ebd015eb3e627,Lasse Collin,Lasse Collin,2009-11-22 10:43:06,2009-11-22 10:43:06,Updated THANKS.
f1a28b96c900c658fe016852ff62f6c24d1f50fa,Lasse Collin,Lasse Collin,2009-11-22 10:05:33,2009-11-22 10:05:33,Add missing consts to pointer casts.
b9b5c54cd438b3ae47b44cc211b71f3bc53e35ef,Lasse Collin,Lasse Collin,2009-11-22 10:00:30,2009-11-22 10:00:30,"Enable assembler code only if it is known to work
on that operating system.

I'm too lazy to think how to make a good Autoconf test
for this and it's not that important anyway.

No longer define HAVE_ASM_X86 or HAVE_ASM_X86_64.
Inline assembler (if any) is used if a macro like
__i386__ or __x86_64__ is defined."
0733f4c9994db696420a405810d5f02c79ebc404,Lasse Collin,Lasse Collin,2009-11-22 09:55:03,2009-11-22 09:55:03,"Make fastpos.h use tuklib_integer.h instead of bsr.h
when --enable-small has been specified."
7ac3985d891dcc5773543f84cc5bce6c14841b12,Lasse Collin,Lasse Collin,2009-11-22 09:52:30,2009-11-22 09:52:30,"Update tuklib_integer.h with bit scan functions.

Thanks to Joachim Henke for the original patch."
c74c132f7f79a842c073c66575a4fdb985e4c2e3,Lasse Collin,Lasse Collin,2009-11-20 10:51:19,2009-11-20 10:51:19,"Update tuklib_cpucores.m4 and tuklib_physmem.m4 from tuklib,
which now use AC_CACHE_CHECK. Using the cache variable,
configure now warns if there is no method to detect the amount
of RAM and recommends using --enable-assume-ram."
d315ca4930ff96e1428c6021c96f209e1abdd83e,Lasse Collin,Lasse Collin,2009-11-16 16:16:45,2009-11-16 16:16:45,"Add support for --info-memory and --robot to xz.

Currently --robot works only with --info-memory and
--version. --help and --long-help work too, but --robot
has no effect on them.

Thanks to Jonathan Nieder for the original patches."
e330fb7e6b8162894280c8a3dc22fdc05cd2d85e,Lasse Collin,Lasse Collin,2009-11-15 10:54:45,2009-11-15 10:54:45,"Fix wrong indentation caused by incorrect settings
in the text editor."
93e418562cf127a9171e87bcd4e9af8e1bfcdae4,Lasse Collin,Lasse Collin,2009-11-15 10:40:17,2009-11-15 10:40:17,"Add lzma_physmem().

I had hoped to keep liblzma as purely a compression
library as possible (e.g. file I/O will go into
a different library), but it seems that applications
linking agaisnt liblzma need some way to determine
the memory usage limit, and knowing the amount of RAM
is one reasonable way to help making such decisions.

Thanks to Jonathan Nieder for the original patch."
cf39faca59083d38422058c6c97aa757ea7797d0,Lasse Collin,Lasse Collin,2009-11-14 18:21:19,2009-11-14 18:21:19,Updated THANKS.
2ddcae247c284cc2f396b6cfdab57790c7588b5f,Lasse Collin,Lasse Collin,2009-11-14 18:20:03,2009-11-14 18:20:03,Some updates to xz man page.
19b2674f07f8b588dfaf6638396b4b42866d7e23,Lasse Collin,Lasse Collin,2009-11-14 17:51:03,2009-11-14 17:51:03,Fix description of --memory in --long-help.
2291346f0cccf88e605d84b75c9c5aaaaddb5df8,Lasse Collin,Lasse Collin,2009-11-14 17:45:39,2009-11-14 17:45:39,Update the debug programs so that they compile again.
418d64a32e8144210f98a810738fed5a897e8367,Lasse Collin,Lasse Collin,2009-11-14 16:59:19,2009-11-14 16:59:19,"Fix a design error in liblzma API.

Originally the idea was that using LZMA_FULL_FLUSH
with Stream encoder would read the filter chain
from the same array that was used to intialize the
Stream encoder. Since most apps wouldn't use
LZMA_FULL_FLUSH, most apps wouldn't need to keep
the filter chain available after initializing the
Stream encoder. However, due to my mistake, it
actually required keeping the array always available.

Since setting the new filter chain via the array
used at initialization time is not a nice way to do
it for a couple of reasons, this commit ditches it
and introduces lzma_filters_update(). This new function
replaces also the ""persistent"" flag used by LZMA2
(and to-be-designed Subblock filter), which was also
an ugly thing to do.

Thanks to Alexey Tourbin for reminding me about the problem
that Stream encoder used to require keeping the filter
chain allocated."
f0bf7634b77263a4dd02b20c71861ab67995da68,Lasse Collin,Lasse Collin,2009-10-17 08:11:58,2009-10-17 08:11:58,"Fix wrong function name in the previous commit.

It was meant to be lzma_filters_copy(), not lzma_filters_dup()."
6d118a0b9def82e96afba7386ec8d7da0b59649f,Lasse Collin,Lasse Collin,2009-10-16 22:47:07,2009-10-16 22:47:07,"Add lzma_filters_copy().

This will be needed internally by liblzma once I fix
a design mistake in the encoder API. This function may
be useful to applications too so it's good to export it."
78e92c18470483e161388e679c1ee556adb3a691,Jonathan Nieder,Lasse Collin,2009-10-16 01:44:13,2009-10-16 17:39:24,"Escape dashes in xzmore.1

A minus sign is larger, easier to see in a printout, and more
likely to use the same glyph as ASCII hyphen-minus in a terminal
than a hyphen.  Since broken manual pagers do not find hyphens
when the user searches for a hyphen-minus, minus signs are also
easier to search for.  So use minus signs instead of hyphens to
render sample terminal output."
7b7fe902d98da28e5769e2aa1e0c08c92384f7ee,Lasse Collin,Lasse Collin,2009-10-16 17:35:39,2009-10-16 17:35:39,"Mention --check=none in --long-help. It was already in
the man page though.

Thanks to Jim Meyering for noticing this."
ebfb2c5e1f344e5c6e549b9dedaa49b0749a4a24,Lasse Collin,Lasse Collin,2009-10-04 19:57:12,2009-10-04 19:57:12,"Use a tuklib module for integer handling.

This replaces bswap.h and integer.h.

The tuklib module uses <byteswap.h> on GNU,
<sys/endian.h> on *BSDs and <sys/byteorder.h>
on Solaris, which may contain optimized code
like inline assembly."
29fd321033276261b87da7be5223db33d879a4c7,Lasse Collin,Lasse Collin,2009-10-02 11:35:56,2009-10-02 11:35:56,Add support for --enable-assume-ram=SIZE.
3782b3fee4812b0dd4ffdfa6563ed49f73060f25,Lasse Collin,Lasse Collin,2009-10-02 08:28:17,2009-10-02 08:28:17,"Use unaligned access (if possible) on both endiannesses
in lz_encoder_hash.h."
c5f68b5cc79085a87f950fea53843e27f328068e,Lasse Collin,Lasse Collin,2009-10-02 08:03:26,2009-10-02 08:03:26,"Make liblzma produce the same output on both endiannesses.

Seems that it is a problem in some cases if the same
version of XZ Utils produces different output on different
endiannesses, so this commit fixes that problem. The output
will still vary between different XZ Utils versions, but I
cannot avoid that for now.

This commit bloatens the code on big endian systems by 1 KiB,
which should be OK since liblzma is bloated already. ;-)"
4a84d1adfda35e4fb4d41ecf0feb8223b100517a,Mike Frysinger,Lasse Collin,2009-09-26 16:51:50,2009-09-27 08:53:48,"add lzmainfo to gitignore

Signed-off-by: Mike Frysinger <vapier@gentoo.org>"
188a1dcd0cc7867810ed3a55c598d0680922c63b,Lasse Collin,Lasse Collin,2009-09-27 08:53:36,2009-09-27 08:53:36,Updated THANKS.
db9119b9181b307e7ac5d2bae82444d04b902b59,Lasse Collin,Lasse Collin,2009-09-27 08:48:54,2009-09-27 08:48:54,"Work around a bug in Interix header files.

Thanks to Markus Duft for the patch."
b3d105e69786a45963176fd2193abe75e05ba738,Lasse Collin,Lasse Collin,2009-09-24 14:50:17,2009-09-24 14:50:17,"Fix an error in OpenVMS-specific code.

Thanks to Jouk Jansen."
5e000ff00d4d01e559397b49eb648ad3f159d496,Lasse Collin,Lasse Collin,2009-09-22 15:59:56,2009-09-22 15:59:56,Added OpenVMS-specific information to INSTALL.
932b2e204463d70f3eee5b8a1ea5a23bf9d001a4,Lasse Collin,Lasse Collin,2009-09-22 11:03:02,2009-09-22 11:03:02,"Better fixes for OpenVMS support.

Thanks to Jouk Jansen."
4c3630ec4179fe9265407a35c4db1374ffc82372,Lasse Collin,Lasse Collin,2009-09-22 10:40:19,2009-09-22 10:40:19,"Avoid non-standard preprocessor construct.

Thanks to Jouk Jansen."
0deb1bb60addd1306b525e0ac0ad2a84eb0390d9,Lasse Collin,Lasse Collin,2009-09-21 16:50:09,2009-09-21 16:50:09,"Make sure that TUKLIB_DOSLIKE doesn't get defined on Cygwin.

Thanks to Charles Wilson."
e599bba4216c0edb8cc8f40adad3a6dba88685f4,Lasse Collin,Lasse Collin,2009-09-19 06:47:30,2009-09-19 06:47:30,"Various changes.

Separate a few reusable components from XZ Utils specific
code. The reusable code is now in ""tuklib"" modules. A few
more could be separated still, e.g. bswap.h.

Fix some bugs in lzmainfo.

Fix physmem and cpucores code on OS/2. Thanks to Elbert Pol
for help.

Add OpenVMS support into physmem. Add a few #ifdefs to ease
building XZ Utils on OpenVMS. Thanks to Jouk Jansen for the
original patch."
49cfc8d392cf535f8dd10233225b1fc726fec9ef,Lasse Collin,Lasse Collin,2009-09-15 18:07:23,2009-09-15 18:07:23,"Fix incorrect use of ""restrict""."
15ffd675ab7af84592eb1c23b0e9f4699aa0fd8c,Lasse Collin,Lasse Collin,2009-09-12 11:09:17,2009-09-12 11:09:17,Fix GCC version check for nothrow attribute.
6bfdd3a88a819f04c8f202e7d3c6f88a01c7d224,Lasse Collin,Lasse Collin,2009-09-12 11:08:15,2009-09-12 11:08:15,Updated THANKS.
4ab7b16b9573bdfa32279e4adadff684d5cd58ac,Lasse Collin,Lasse Collin,2009-09-12 11:07:36,2009-09-12 11:07:36,"A few grammar fixes.

Thanks to Christian Weisgerber for pointing out some of these."
8905a33daadcd2d6557c83c81c490b827d566c94,Lasse Collin,Lasse Collin,2009-09-11 14:08:15,2009-09-11 14:08:15,Updated THANKS.
68059334ff435300ab1ce2c616b0eee1b0d88dd9,Lasse Collin,Lasse Collin,2009-09-11 14:06:32,2009-09-11 14:06:32,"Add PACKAGE_HOMEPAGE to {windows,dos}/config.h to fix build errors."
221be761f467da76875247bc02d7a1716682075d,Lasse Collin,Lasse Collin,2009-09-11 07:24:09,2009-09-11 07:24:09,"Use $(LN_EXEEXT) in symlinks to executables.

This fixes ""make install"" on operating systems using
a suffix for executables.

Cygwin is treated specially. The symlink names won't have
.exe suffix even though the executables themselves have.
Thanks to Charles Wilson."
18a4233a53d9b82abac7db7d7804684c5fea9c2c,Lasse Collin,Lasse Collin,2009-09-11 06:25:09,2009-09-11 06:25:09,Fix a couple of warnings.
429910b2ba67611d8df60d1a9da9641bdb5f82b4,Lasse Collin,Lasse Collin,2009-09-05 15:39:21,2009-09-05 15:39:21,"Add OS/2-specific code to physmem.h.

Also move DJGPP-specific code near the code meant
for other DOS-like systems."
7aca7b3174bcbba4a4915682ff0cd405d63f5740,Lasse Collin,Lasse Collin,2009-09-04 22:21:15,2009-09-04 22:21:15,Updated THANKS.
60ccb80c9c4a0d771acc5b7d9d6f32b17fed1071,Lasse Collin,Lasse Collin,2009-09-04 22:20:29,2009-09-04 22:20:29,"Use sysctl() != -1 instead of !sysctl() to check if
the function call succeeded.

NetBSD 4.0 returns positive values on success, but
NetBSD Current and FreeBSD return zero. OpenBSD's
man page doesn't tell what sysctl() returns on
success. All these BSDs return -1 on error.

Thanks to Robert Elz and Thomas Klausner."
173368911cf09ab0b03fc4db8f3d4b81d86dce32,Lasse Collin,Lasse Collin,2009-09-02 06:43:51,2009-09-02 06:43:51,Mention in INSTALL that --enable-small doesn't modify CFLAGS.
319a0fd7d7e9ebbb71ca6930abfc20777cb4aacc,Lasse Collin,Lasse Collin,2009-09-01 17:40:01,2009-09-01 17:40:01,Refactored option parsing.
25adaaa56e2e51a47a910a8d73452414619a2e53,Lasse Collin,Lasse Collin,2009-09-01 17:23:30,2009-09-01 17:23:30,"Fix options parsing bug in xz.

xz used to reject ""xz --lzma2=pb=2,"" while
""xz --lzma2=pb=2,,"" worked. Now both work."
5f6dddc6c911df02ba660564e78e6de80947c947,Lasse Collin,Lasse Collin,2009-09-01 17:20:19,2009-09-01 17:20:19,Updated TODO.
655457b9ada5ec7db398c5392e41290f3f332ea8,Lasse Collin,Lasse Collin,2009-08-31 18:59:25,2009-08-31 18:59:25,"Revert 43f44160b1ddcbf7e5205c37db09b3bebe7226f9
and use a fix that works on all systems using
GNU assembler.

Maybe the assembler code is used e.g. on Solaris x86
but let's worry about it if this doesn't work on it."
162189c3477953805a28f96d3a75cb9ab9417928,Lasse Collin,Lasse Collin,2009-08-30 14:29:19,2009-08-30 14:29:19,Updated THANKS.
2331f5f97af3e5897e23da45d9df3d664099c7f8,Lasse Collin,Lasse Collin,2009-08-30 14:28:52,2009-08-30 14:28:52,Add more OS/2 specific info to INSTALL.
94c66b3297b3ad307eee93cf6b160e3c43997f11,Lasse Collin,Lasse Collin,2009-08-29 11:43:52,2009-08-29 11:43:52,"Use even more hackish way to support thousand separators.

Seems that in addition on Windows and DOS, also OpenBSD
lacks support for %'d style printf() format strings.
So far that is the only modern POSIX-like system I know
with this problem, but after this hack, the thousand
separator shouldn't be a problem on any system.

Maybe testing if a format string like %'d produces
reasonable output is invoking undefined behavior on some
systems, but so far all the problematic systems I've tried
just print the raw format string (e.g. %'d prints 'd).

Maybe Autoconf test would have been better, but this
hack works also for cross-compilation, and avoids
recompilation in case the system libc starts to support
the thousand separator."
3432e9c6aab851da1227b63dce645d7f190c04d8,Lasse Collin,Lasse Collin,2009-08-29 10:42:56,2009-08-29 10:42:56,Updated THANKS.
27414daadf5727e8ab942374b5ec1c8990122878,Lasse Collin,Lasse Collin,2009-08-29 10:39:21,2009-08-29 10:39:21,"Fix sysctl() usage.

This fixes build on *BSDs and Darwin.

Thanks to Jukka Salmi for the patches.
Richard Koch reported the problem too."
43f44160b1ddcbf7e5205c37db09b3bebe7226f9,Lasse Collin,Lasse Collin,2009-08-29 10:35:23,2009-08-29 10:35:23,"Fix x86 assembler on GCC 3.

Thanks to Karl Berry."
682efdc1f9492fdd76c9ce82e7c00ca0768067e8,Lasse Collin,Lasse Collin,2009-08-27 15:36:59,2009-08-27 15:36:59,"""make dist"" fixes"
c8c184db1c95bf70f78256ec6237845a57f342af,Lasse Collin,Lasse Collin,2009-08-27 14:08:33,2009-08-27 14:08:33,Update xz man page date.
9756fce565e98b8fa5fe6ead296d84e7601ec254,Lasse Collin,Lasse Collin,2009-08-27 14:00:22,2009-08-27 14:00:22,"Fix the debug directory.

6a2eb54092fc625d59921a607ff68cd1a90aa898 and
71f18e8a066a01dda0c8e5508b135ef104e43e4c required
some changes that weren't applied in debug."
77007a7fb20187fcf3d1dd9839c79ace2d63f2ea,Lasse Collin,Lasse Collin,2009-08-27 13:36:40,2009-08-27 13:36:40,Add missing files to EXTRA_DIST.
04dcbfdeb921e5f361a4487134e91e23fffbe09d,Lasse Collin,Lasse Collin,2009-08-27 13:21:22,2009-08-27 13:21:22,Bumped version to 4.999.9beta.
fd7618611a22f42a6913bc8d518c9bbc9252d6b4,Lasse Collin,Lasse Collin,2009-08-27 13:17:47,2009-08-27 13:17:47,Updated THANKS.
c29e76c0f910fca0a90a50b78d337f6c32623e9d,Lasse Collin,Lasse Collin,2009-08-27 13:12:52,2009-08-27 13:12:52,".xz file format specification 1.0.4 (probably).

Thanks to Christian von Roques, Peter Lawler,
and Jim Meyering for the fixes."
696d7ee3953beaf4f0ed18e78917ccf300431966,Lasse Collin,Lasse Collin,2009-08-27 12:43:54,2009-08-27 12:43:54,Require GNU libtool 2.2.
4c3558aa8305a8f8b6c43b8569eb539717ca9e8d,Lasse Collin,Lasse Collin,2009-08-27 12:34:45,2009-08-27 12:34:45,"Add ""dos"" to EXTRA_DIST."
35b29e4424ced5a3ababf132283e519080c7b298,Lasse Collin,Lasse Collin,2009-08-27 12:23:27,2009-08-27 12:23:27,Updated TODO.
23414377192c21f3f34c84cdfe0ef0fbd06a1dea,Lasse Collin,Lasse Collin,2009-08-27 12:17:00,2009-08-27 12:17:00,Some xz man page improvements.
371b04e19fc9051dbaeec51ec0badec6a1f0699d,Lasse Collin,Lasse Collin,2009-08-27 07:41:01,2009-08-27 07:41:01,Removed doc/bugs.txt.
d88c4072b36d3a76f839185799fb1d91037a1b81,Lasse Collin,Lasse Collin,2009-08-27 07:40:25,2009-08-27 07:40:25,"Updated README.

It now includes bug reporting instructions/tips."
92e536d8b8d33a6b12d0802bcd7be4437046f13e,Lasse Collin,Lasse Collin,2009-08-27 07:21:18,2009-08-27 07:21:18,"Fix a typo in FAQ.

Thanks to Jim Meyering.

(From now on, I try to always remember to put
the relevant thanks to commit messages.)"
3e2ba8b58585743e59251e69ad2783eb08357079,Lasse Collin,Lasse Collin,2009-08-27 07:13:46,2009-08-27 07:13:46,"Updates to liblzma API headers.

Added lzma_nothrow for every function. It adds
throw() when the header is used in C++ code.

Some lzma_attrs were added or removed.

Lots of comments were improved."
8e8ebc17c535a1f8846718059b48417409c37050,Lasse Collin,Lasse Collin,2009-08-17 21:30:09,2009-08-17 21:30:09,Install faq.txt.
b198e770a146e4a41f91a93f0b233713f2515848,Lasse Collin,Lasse Collin,2009-08-17 21:26:48,2009-08-17 21:26:48,"Updated faq.txt.

Some questions worth answering were removed, because I
currently don't have good up to date answers to them."
fe111a25cd788d31b581996e4533910388a7f0a9,Lasse Collin,Lasse Collin,2009-08-17 19:45:50,2009-08-17 19:45:50,Some xz man changes.
10242a21e9abda0c5c6a03501703cc40b8a699a5,Lasse Collin,Lasse Collin,2009-08-16 19:15:42,2009-08-16 19:15:42,Updated THANKS.
3ce1916c83041113b9cad9ead5c97a527cf8aa1d,Lasse Collin,Lasse Collin,2009-08-16 19:15:13,2009-08-16 19:15:13,"Fix data corruption in LZ/LZMA2 encoder.

Thanks to Jonathan Stott for the bug report."
66da129c8ec33dd66acc92f113f7c1ca740ca81a,Lasse Collin,Lasse Collin,2009-08-13 12:15:37,2009-08-13 12:15:37,"Updated INSTALL and PACKAGERS to match the changes
made in --enable-dynamic."
8238c4b2402f952c4e492e5b778aa272e57b6705,Lasse Collin,Lasse Collin,2009-08-13 12:03:46,2009-08-13 12:03:46,Link lzmainfo against shared liblzma by default.
71f18e8a066a01dda0c8e5508b135ef104e43e4c,Lasse Collin,Lasse Collin,2009-08-13 12:00:21,2009-08-13 12:00:21,"Make --enable-dynamic a tristate option.

Some programs will by default be linked against static
liblzma and some against shared liblzma. --enable-dynamic
now allows overriding the default to both directions
(all dynamic or all static) even when building both
shared and static liblzma.

This is quite messy compared to how simple thing it is supposed
to be. The complexity is mostly due to Windows support."
5aa4678b2342dcfc1d2b31aa9fa4f39c539e4b61,Lasse Collin,Lasse Collin,2009-08-13 09:56:47,2009-08-13 09:56:47,"Fix xz Makefile.am for the man page.

install-exec-hook -> install-data-hook"
e51b4e49e800bd84e6d589dca2964d3985e88139,Lasse Collin,Lasse Collin,2009-08-13 09:55:45,2009-08-13 09:55:45,"Add lzmainfo for backward compatibility with LZMA Utils.

lzmainfo now links against static liblzma. In contrast
to other command line tools in XZ Utils, linking lzmainfo
against static liblzma by default is dumb. This will be
fixed once I have fixed some related issues in configure.ac."
a4165d0584376d948c213ec93c6065d24ff6a5e7,Lasse Collin,Lasse Collin,2009-08-13 09:42:36,2009-08-13 09:42:36,"Sync some error messages from xz to xzdec.

Make xz error message translation usable outside
xz (at least in upcoming lzmainfo)."
df636eb4e066b4e154ce8e66e82c87ba1db652a6,Lasse Collin,Lasse Collin,2009-08-13 06:37:21,2009-08-13 06:37:21,Add xz man page to manfiles in toplevel Makefile.am.
180bdf58ea5bb07941e0a99b304d9aa832198748,Lasse Collin,Lasse Collin,2009-08-13 06:37:01,2009-08-13 06:37:01,Fix first line of xz man page.
e1ce2291e759b50ebfcf7cbbcc04cd098f1705a4,Lasse Collin,Lasse Collin,2009-08-10 08:22:31,2009-08-10 08:22:31,Added a rough version of the xz man page.
e71903fc6101f1c039d702e335b08aad1e1b4100,Jonathan Nieder,Lasse Collin,2009-08-09 18:41:20,2009-08-09 19:55:19,"“xzdiff a.xz b.xz” always fails

Attempts to compare two compressed files result in no output and
exit status 2.

Instead of going to standard output, ‘diff’ output is being
captured in the xz_status variable along with the exit status from
the decompression commands.  Later, when this variable is examined
for nonzero status codes, numerals from dates in the ‘diff’ output
make it appear as though decompression failed.

So let the ‘diff’ output leak to standard output with another file
descriptor.  (This trick is used in all similar contexts elsewhere
in xzdiff and in the analogous context in gzip’s zdiff script.)"
1d314b81aa5b0c4530638ffabd4e0edb52e5362c,Jonathan Nieder,Lasse Collin,2009-08-09 18:22:12,2009-08-09 19:27:22,"xzless: Support compressed standard input

It can be somewhat confusing that

	less < some_file.txt

works fine, whereas

	xzless < some_file.txt.xz

does not.  Since version 429, ‘less’ allows a filter specified in
the LESSOPEN environment variable to preprocess its input even if
it comes from standard input, if $LESSOPEN begins with ‘|-’.  So
set $LESSOPEN to take advantage of this feature.

Check less’s version at runtime so xzless can continue to work
with older versions."
a7f5d2fe4826ac68839d00059f05004fb81d5c69,Lasse Collin,Lasse Collin,2009-08-09 17:57:46,2009-08-09 17:57:46,GPLv2+ not GPLv2 for Doxyfile.in is probably OK.
b735cde20cc14857136ae65a0e5d336ed7ddc862,Lasse Collin,Lasse Collin,2009-08-01 21:27:29,2009-08-01 21:27:29,"Added a copyright notice to Doxyfile.in since it contains
lots of comments from Doxygen.

It seems that the Doxygen authors' intent is to not apply
their copyright on generated files, but since it doesn't
matter for XZ Utils at all, better safe than sorry."
0fd157cc008446adfc8f91394f5503868025a642,Lasse Collin,Lasse Collin,2009-08-01 21:11:37,2009-08-01 21:11:37,Updated THANKS.
b198da96ff9ac8c89b466b4d196c5f3fe1c7904f,Lasse Collin,Lasse Collin,2009-08-01 21:10:22,2009-08-01 21:10:22,Updated TODO.
669413bb2db954bbfde3c4542fddbbab53891eb4,Lasse Collin,Lasse Collin,2009-07-30 09:25:55,2009-07-30 09:25:55,Updated THANKS.
dbbd8fb870ae789d96497911006c869d37148c15,Jonathan Nieder,Lasse Collin,2009-07-28 22:37:24,2009-07-30 09:23:45,xzdiff: add missing ;; to case statement
adbad2d16cb5909f85d4a429011005613ea62ffe,Lasse Collin,Lasse Collin,2009-07-24 10:15:06,2009-07-24 10:15:06,Added history.txt to doc_DATA.
e0236f12569eb36f9b81ce7a1e52e0f73698ac27,Lasse Collin,Lasse Collin,2009-07-24 09:00:40,2009-07-24 09:00:40,Updated .gitignore files.
2f34fb269265e3aba43a2a9c734020a45268826d,Lasse Collin,Lasse Collin,2009-07-24 08:34:02,2009-07-24 08:34:02,Minor improvements to COPYING.
0db1befcfbc120377df4b89923762f16d25f548a,Lasse Collin,Lasse Collin,2009-07-23 16:10:55,2009-07-23 16:10:55,"Fix incorrect usage of getopt_long(), which caused
invalid memory access if XZ_OPT was defined."
8f8ec942d6d21ada2096eaf063411bc8bc7e2d48,Lasse Collin,Lasse Collin,2009-07-20 12:43:32,2009-07-20 12:43:32,Avoid internal error with --format=xz --lzma1.
99f9e879a6a8bb54a65da99c12e0f390216c152a,Lasse Collin,Lasse Collin,2009-07-19 10:14:20,2009-07-19 10:14:20,"Major documentation update.

Installation and packaging instructions were added.
README and other generic docs were revised.

Some of the documentation files are now installed to $docdir."
ef4cf1851de89022cba5674784f1a8f6343c15b0,Lasse Collin,Lasse Collin,2009-07-19 08:09:31,2009-07-19 08:09:31,Added missing author notice to xzless.in.
4c9c989d45b188667799a7a1d6c728ed43f7bf77,Lasse Collin,Lasse Collin,2009-07-18 15:54:55,2009-07-18 15:54:55,"Use AC_CONFIG_AUX_DIR to clean up the toplevel directory
a little.

Fixed a related bug in the toplevel Makefile.am.

Added the build-aux directory to .gitignore."
366e436090a7a87215e9bf0e3ddcd55f05b50587,Lasse Collin,Lasse Collin,2009-07-18 11:34:08,2009-07-18 11:34:08,Updated the totally outdated TODO file.
64e498c89d8b9966e8663f43bf64d47c26c55c62,Lasse Collin,Lasse Collin,2009-07-18 08:26:39,2009-07-18 08:26:39,Added public domain notice into a few files.
a35755c5de808df027675688855d1b621a4fb428,Lasse Collin,Lasse Collin,2009-07-14 18:10:36,2009-07-14 18:10:36,"Allow extra commas in filter-specific options on xz command line.

This may slightly ease writing scripts that construct
filter-specific option strings dynamically."
98f3cac1ad31191c5160a7e48398bf85141e941c,Lasse Collin,Lasse Collin,2009-07-14 15:04:31,2009-07-14 15:04:31,"Accept --lzma2=preset=6e where ""e"" is equivalent to --extreme
when no custom chain is in use."
d873a09e956363e54bf58c577c8f7e487b6fb464,Lasse Collin,Lasse Collin,2009-07-12 16:08:30,2009-07-12 16:08:30,"Add dist-hook to create ChangeLog from the commit log,
and to conver the man pages to PDF and plain text, which
may be convenient to those who cannot render man pages."
cd69a5a6c16c289f6f8e2823b03c72289472270f,Lasse Collin,Lasse Collin,2009-07-10 08:39:38,2009-07-10 08:39:38,"BCJ filters: Reject invalid start offsets with LZMA_OPTIONS_ERROR.

This is a quick and slightly dirty fix to make the code
conform to the latest file format specification. Without
this patch, it's possible to make corrupt files by
specifying start offset that is not a multiple of the
filter's alignment. Custom start offset is almost never
used, so this was only a minor bug.

The xz command line tool doesn't validate the start offset,
so one will get a bit unclear error message if trying to use
an invalid start offset."
eed9953732b801f6c97317fb3160445a8754180b,Lasse Collin,Lasse Collin,2009-07-10 08:33:21,2009-07-10 08:33:21,"Look for full command names instead of substrings
like ""un"", ""cat"", and ""lz"" when determining if
xz is run as unxz, xzcat, lzma, unlzma, or lzcat.

This is to ensure that if xz is renamed (e.g. via
--program-transform-name), it doesn't so easily
work in wrong mode."
6f62fa88f4ff7ba78565c314c0e6e71c498fa658,Lasse Collin,Lasse Collin,2009-07-08 20:06:46,2009-07-08 20:06:46,Updated THANKS.
1754b7e03e2aa7e2e0196807fe8b0f3f5a637b0e,Lasse Collin,Lasse Collin,2009-07-08 20:05:29,2009-07-08 20:05:29,Portability improvement to version.sh.
3bdb53792c0e3e3febe9370e56eda5b08f89410f,Lasse Collin,Lasse Collin,2009-07-08 19:50:16,2009-07-08 19:50:16,"Remove --force from xzdec.

It was ignored for compatibility with xz, but now that
--decompress --stdout --force copies unrecognized files
as is to stdout, simply ignoring --force in xzdec would
be wrong. xzdec will not support copying unrecognized
data as is to stdout, so it cannot support --force."
5f16ef4abf220028a9ddbcb138217597a9455f62,Lasse Collin,Lasse Collin,2009-07-06 07:36:04,2009-07-06 07:36:04,"Use sed instead of $(SED) so that we don't need to
use AC_PROG_SED. We don't do anything fancy with sed,
so this should work OK. libtool 2.2 sets SED but 1.5
doesn't, so $(SED) happened to work when using libtool 2.2."
96e4b257e101d72072d43e144897d92920270669,Lasse Collin,Lasse Collin,2009-07-05 19:25:17,2009-07-05 19:25:17,"Major update to the xzgrep and other scripts based on
the latest versions found from gzip CVS repository.

configure will try to find a POSIX shell to be used by
the scripts. This should ease portability on systems
which have pre-POSIX /bin/sh.

xzgrep and xzdiff support .xz, .lzma, .gz, and .bz2 files.
xzmore and xzless support only .xz and .lzma files.

The name of the xz executable used in these scripts is
now correct even if --program-transform-name has been used."
25cc7a6e8c2506a0d80084a4c1c67d33e7439100,Lasse Collin,Lasse Collin,2009-07-05 16:26:53,2009-07-05 16:26:53,Use @PACKAGE_HOMEPAGE@ in liblzma.pc.in.
18c10c30d2833f394cd7bce0e6a821044b15832f,Lasse Collin,Lasse Collin,2009-07-03 21:40:44,2009-07-03 21:40:44,"Make ""xz --decompress --stdout --force"" copy unrecognized
files as is to standard output.

This feature is needed to be more compatible with gzip's
behavior. This was more complicated to implement than it
sounds, because the way liblzma is able to return errors with
files of only a few bytes in size. xz now has its own file
type detection code and no longer uses lzma_auto_decoder()."
0a289c01ac821ea9c4250aa906b0ae3cfa953633,Lasse Collin,Lasse Collin,2009-07-02 11:30:38,2009-07-02 11:30:38,"Define PACKAGE_HOMEPAGE in configure.ac and use it in
xz and xzdec.

Use also PACKAGE_NAME instead of hardcoding ""XZ Utils""."
5cc99db5bae8633f85559e5cdaef4cd905a4ee9c,Lasse Collin,Lasse Collin,2009-07-01 09:21:24,2009-07-01 09:21:24,Avoid visibility related compiler warnings on Windows.
7653d1cf48080e63b189ed9d58dea0e82b6b1c5e,Lasse Collin,Lasse Collin,2009-06-30 14:14:39,2009-06-30 14:14:39,Use static liblzma by default also for tests.
f42ee981668b545ab6d06c6072e262c29605273c,Lasse Collin,Lasse Collin,2009-06-30 14:09:57,2009-06-30 14:09:57,"Build system fixes

Don't use libtool convenience libraries to avoid recently
discovered long-standing subtle but somewhat severe bugs
in libtool (at least 1.5.22 and 2.2.6 are affected). It
was found when porting XZ Utils to Windows
<http://lists.gnu.org/archive/html/libtool/2009-06/msg00070.html>
but the problem is significant also e.g. on GNU/Linux.

Unless --disable-shared is passed to configure, static
library built from a set of convenience libraries will
contain PIC objects. That is, while libtool builds non-PIC
objects too, only PIC objects will be used from the
convenience libraries. On 32-bit x86 (tested on mobile XP2400+),
using PIC instead of non-PIC makes the decompressor 10 % slower
with the default CFLAGS.

So while xz was linked against static liblzma by default,
it got the slower PIC objects unless --disable-shared was
used. I tend develop and benchmark with --disable-shared
due to faster build time, so I hadn't noticed the problem
in benchmarks earlier.

This commit also adds support for building Windows resources
into liblzma and executables."
89dac1db6f168d7469cfbc4432651d4724c5c0de,Lasse Collin,Lasse Collin,2009-06-29 19:19:51,2009-06-29 19:19:51,"Added a comment about ""autoconf -fi"" to autogen.sh."
6e685aae4594bc0af1b5032e01bb37d0edaa3ebd,Lasse Collin,Lasse Collin,2009-06-28 07:04:24,2009-06-28 07:04:24,Add -no-undefined to get shared liblzma on Windows.
73f560ee5fa064992b76688d9472baf139432540,Lasse Collin,Lasse Collin,2009-06-27 19:57:15,2009-06-27 19:57:15,Make physmem() work on Cygwin 1.5 and older.
7ff0004fbce24ae72eddfe392828ffd7d4639ed1,Lasse Collin,Lasse Collin,2009-06-27 14:28:01,2009-06-27 14:28:01,"Moved the Windows resource files outside the windows directory
to prepare for building them with Autotools."
449c634674f35336a4815d398172e447659a135e,Lasse Collin,Lasse Collin,2009-06-27 10:05:03,2009-06-27 10:05:03,Added missing $(EXEEXT).
792db79f27ad9ab1fb977e23be65c7761f545752,Lasse Collin,Lasse Collin,2009-06-27 09:32:40,2009-06-27 09:32:40,"Create correct symlinks even when
--program-{prefix,suffix,transform} is passed to configure."
0adc72feb84f5b903f6ad9d3f759b1c326fafc6b,Lasse Collin,Lasse Collin,2009-06-27 07:02:24,2009-06-27 07:02:24,Silence a compiler warning on DOS-like systems.
ad12edc95254ede3f0cb8dec8645e8789e984c4f,Lasse Collin,Lasse Collin,2009-06-27 06:35:15,2009-06-27 06:35:15,Updated the filenames in POTFILES.in too.
b2b1f867532732fe9969131f8713bdd6b0731763,Lasse Collin,Lasse Collin,2009-06-26 21:43:06,2009-06-26 21:43:06,"Hopefully improved portability of the assembler code in
Autotools based builds on Windows."
c393055947247627a09b6a6b8f20aa0c32f9be16,Lasse Collin,Lasse Collin,2009-06-26 18:17:29,2009-06-26 18:17:29,"Updated THANKS (most of today's commits are based on
Charles Wilson's patches)."
da0af22e4b4139b8a10710945f8b245b3a77c97d,Lasse Collin,Lasse Collin,2009-06-26 18:00:35,2009-06-26 18:00:35,Updated comments to match renamed files.
65014fd211dfbd4be48685998cb5a12aaa29c8d2,Lasse Collin,Lasse Collin,2009-06-26 17:49:54,2009-06-26 17:49:54,"Rename process.[hc] to coder.[hc] and io.[hc] to file_io.[hc]
to avoid problems on systems with system headers with those
names."
5e1257466dcb66f1d7a3f71814a5ad885cba43e8,Lasse Collin,Lasse Collin,2009-06-26 17:43:36,2009-06-26 17:43:36,Rename process_file() to coder_run().
cad62551c5fa9865dbe0841a0b3bc729c4fbe8fc,Lasse Collin,Lasse Collin,2009-06-26 17:36:45,2009-06-26 17:36:45,"Ugly hack to make it possible to use the thousand separator
format character with snprintf() on POSIX systems but not
on non-POSIX systems and still keep xgettext working."
fe378d47074b16c52b00fe184d119287c68ce2e7,Lasse Collin,Lasse Collin,2009-06-26 12:40:40,2009-06-26 12:40:40,Added missing source files to windows/Makefile.
390a6408563067613b29de895cb40e4d0386d62c,Lasse Collin,Lasse Collin,2009-06-26 12:37:53,2009-06-26 12:37:53,"Basic support for building with Cygwin and MinGW using
the Autotools based build system. It's not good yet, more
fixes will follow."
1c9360b7d1197457aaad2f8888b99f1149861579,Lasse Collin,Lasse Collin,2009-06-26 11:47:31,2009-06-26 11:47:31,"Fix @variables@ to $(variables) in Makefile.am files.
Fix the ordering of libgnu.a and LTLIBINTL on the linker
command line and added missing LTLIBINTL to tests/Makefile.am."
d45615c555e250209ebb55aa3649abe790f1eeac,Lasse Collin,Lasse Collin,2009-06-26 11:20:02,2009-06-26 11:20:02,Allow to explicitly specify autotool versions in autogen.sh.
eaf8367368a329afa48785380f9dca6b681f3397,Lasse Collin,Lasse Collin,2009-06-26 11:18:32,2009-06-26 11:18:32,Add version.sh to EXTRA_DIST.
b317b218e2d383dd27a700094c0de4510540ea18,Lasse Collin,Lasse Collin,2009-06-24 17:14:10,2009-06-24 17:14:10,Support HW_PHYSMEM64
ae82dde5d9cc60c80cc89601b6c51cc1611d48e7,Lasse Collin,Lasse Collin,2009-06-24 10:01:59,2009-06-24 10:01:59,Cast a char argument to isspace() to unsigned char.
1735d31ea347210e914df038eeea4b2626e76e42,Lasse Collin,Lasse Collin,2009-06-05 10:46:26,2009-06-05 10:46:26,A few more spelling fixes. Released the .xz spec 1.0.3.
8ed156ce894966103e895aa08f2a9fb912f6fad5,Lasse Collin,Lasse Collin,2009-06-04 20:42:12,2009-06-04 20:42:12,Added xzdec man page.
f6df39afaa84f71439507178a49b2a5dda6e824c,Lasse Collin,Lasse Collin,2009-06-04 20:26:47,2009-06-04 20:26:47,"Harmonized xzdec --memory with xz --memory and made
minor cleanups."
1774f27c61ce294a56712ca2f4785f90a62441bc,Lasse Collin,Lasse Collin,2009-06-04 19:59:55,2009-06-04 19:59:55,"Fix purporse -> purpose. Thanks to Andrew Dudman.
Released .xz spec 1.0.2 due to this fix too."
cb613455642f48fb51059e22018615f64c59b70f,Lasse Collin,Lasse Collin,2009-06-01 11:53:57,2009-06-01 11:53:57,The .xz file format version 1.0.1
083c23c680ff844846d177cfc58bb7a874e7e6b9,Lasse Collin,Lasse Collin,2009-05-26 11:48:48,2009-05-26 11:48:48,"Make the raw value of the Check field available to applications
via lzma_block structure.

This changes ABI but not doesn't break API."
b4f5c814090dc07d4350453576305e41eb9c998d,Lasse Collin,Lasse Collin,2009-05-23 13:57:21,2009-05-23 13:57:21,"Remove undocumented alternative option names --bcj, --ppc,
and --itanium."
b1edee2cdc7ef4411b1a21c07094ec763f071281,Lasse Collin,Lasse Collin,2009-05-23 12:12:23,2009-05-23 12:12:23,"Add support for specifying the BCJ filter start offset
in the xz command line tool."
72aa0e9c5f4289f10ef5bf240a9448d3017f1ceb,Lasse Collin,Lasse Collin,2009-05-23 11:51:09,2009-05-23 11:51:09,Updated THANKS.
dcedb6998cefeca6597dd1219328a3abf5acf66d,Lasse Collin,Lasse Collin,2009-05-22 13:40:50,2009-05-22 13:40:50,"Added support for --quiet and --no-warn to xzdec.
Cleaned up the --help message a little."
5f735dae80aa629853f4831d7b84ec1c614979eb,Lasse Collin,Lasse Collin,2009-05-22 12:11:52,2009-05-22 12:11:52,"Use the 40 % of RAM memory usage limit in xzdec too.

Update the memory usage info text in --help to match
the text in xz --long-help."
b60376249e0c586910c4121fab4f791820cc1289,Lasse Collin,Lasse Collin,2009-05-22 11:43:00,2009-05-22 11:43:00,Add --no-warn.
b4f92f522d4b854c0adb7c38be7531e1a6a7b008,Lasse Collin,Lasse Collin,2009-05-22 11:27:40,2009-05-22 11:27:40,Fix a comment.
4dd21d23f22569285ae706b58b0e5904b8db1839,Lasse Collin,Lasse Collin,2009-05-22 11:21:20,2009-05-22 11:21:20,"Remove the --info option, which was an alias for --list."
8836139b63ce774bdd62abf17ab69b290e08229e,Lasse Collin,Lasse Collin,2009-05-22 09:27:43,2009-05-22 09:27:43,"If xz is run as lzma, unlzma, or lzcat, simply imply
--format=lzma. This means that xz emulating lzma
doesn't decompress .xz files, while before this
commit it did. The new way is slightly simpler in
code and especially in upcoming documentation."
b0063023f8adb06ea735ec4af5c6f5b7bdb8e84d,Lasse Collin,Lasse Collin,2009-05-22 08:29:50,2009-05-22 08:29:50,"Make the default memory usage limit 40 % of RAM for both
compressing and decompressing. This should be OK now that
xz automatically scales down the compression settings if
they would exceed the memory usage limit (earlier, the limit
for compression was increased to 90 % because low limit broke
scripts that used ""xz -9"" on systems with low RAM).

Support spcifying the memory usage limit as a percentage
of RAM (e.g. --memory=50%).

Support --threads=0 to reset the thread limit to the default
value (number of available CPU cores). Use UINT32_MAX instead
of SIZE_MAX as the maximum in args.c. hardware.c was already
expecting uint32_t value.

Cleaned up the output of --help and --long-help."
071b825b23911a69dd1cd2f8cda004ef8a781fae,Lasse Collin,Lasse Collin,2009-05-21 14:22:01,2009-05-21 14:22:01,"Support special value ""max"" where xz and xzdec accept an integer.
Don't round the memory usage limit in xzdec --help to avoid
an integer overflow and to not give wrong impression that
the limit is high enough when it may not actually be."
03ca67fd37dd43fa7f590de340899cd497c10802,ABCD,Lasse Collin,2009-05-20 21:31:18,2009-05-21 13:25:36,"Install lzdiff, lzgrep, and lzmore as symlinks

This adds lzdiff, lzgrep, and lzmore to the list of symlinks to install.
It also installs symlinks for the manual pages and removes the new
symlinks on uninstall."
a6f43e64128a6da5cd641de1e1e527433b3e5638,Lasse Collin,Lasse Collin,2009-05-02 13:10:14,2009-05-02 13:16:28,"Use a GCC-specific #pragma instead of GCC-specific
-Wno-uninitialized to silence a bogus warning."
f6ce63ebdb45a857c8949960c83c9580ae888951,Lasse Collin,Lasse Collin,2009-05-02 11:46:50,2009-05-02 11:46:50,"Removed --disable-encoder and --disable-decoder. Use the values
given to --enable-encoders and --enable-decoders to determine
if any encoder or decoder support is wanted."
be06858d5cf8ba46557395035d821dc332f3f830,Lasse Collin,Lasse Collin,2009-05-01 08:28:52,2009-05-01 08:28:52,"Remove docs that are too outdated to be updated
(rewrite will be better)."
0255401e57c96af87c6b159eca28974e79430a82,Lasse Collin,Lasse Collin,2009-05-01 08:21:46,2009-05-01 08:21:46,Added documentation about the legacy .lzma file format.
1496ff437c46f38303e0e94c511ca604b3a11f85,Lasse Collin,Lasse Collin,2009-05-01 08:20:23,2009-05-01 08:20:23,"Renamed the file format specification to xz-file-format.txt
which is the filename used on the WWW."
21c6b94373d239d7e86bd480fcd558e30391712f,Lasse Collin,Lasse Collin,2009-04-28 20:08:32,2009-04-28 20:08:32,"Fixed a crash in liblzma.

liblzma tries to avoid useless free()/malloc() pairs in
initialization when multiple files are handled using the
same lzma_stream. This didn't work with filter chains
due to comparison of wrong pointers in lzma_next_coder_init(),
making liblzma think that no memory reallocation is needed
even when it actually is.

Easy way to trigger this bug is to decompress two files with
a single xz command. The first file should have e.g. x86+LZMA2
as the filter chain, and the second file just LZMA2."
e518d167aa5958e469982f4fb3a24b9b6a2b5d1c,Lasse Collin,Lasse Collin,2009-04-15 11:13:38,2009-04-15 11:13:38,"Fix uint32_t -> size_t in ARM and ARM-Thumb filters.

On 64-bit system it would have gone into infinite
loop if a single input buffer was over 4 GiB (unlikely)."
31decdce041581e57c0d8a407d4795b114ef27ca,Lasse Collin,Lasse Collin,2009-04-14 08:48:46,2009-04-14 08:48:46,Minor fixes to test files' README.
4787d654434891c7df5b43959b0d2873718f06e0,Lasse Collin,Lasse Collin,2009-04-13 13:36:41,2009-04-13 13:36:41,Updated history.txt.
2f0bc9cd40f709152a0177c8e585c0757e9af9c9,Lasse Collin,Lasse Collin,2009-04-13 11:49:48,2009-04-13 11:49:48,Quick & dirty update to support xz in diff/grep/more scripts.
02ddf09bc3079b3e17297729b9e43f14d407b8fc,Lasse Collin,Lasse Collin,2009-04-13 08:27:40,2009-04-13 08:27:40,"Put the interesting parts of XZ Utils into the public domain.
Some minor documentation cleanups were made at the same time."
e79c42d854657ae7f75613bd80c1a35ff7c525cb,Lasse Collin,Lasse Collin,2009-04-10 08:17:02,2009-04-10 08:17:02,"Fix off-by-one in LZ decoder.

Fortunately, this bug had no security risk other than accepting
some corrupt files as valid."
94eb9ad46f1fded6d8369cf3d38bb9754c1375af,Pavel Roskin,Lasse Collin,2009-03-31 16:15:01,2009-03-31 18:54:06,Fix minor typos in README
9bab5336ebd765ec4e12252f416eefdf04eba750,Lasse Collin,Lasse Collin,2009-03-31 18:52:51,2009-03-31 18:52:51,"Add a note and work-around instructions to README about
problems detecting a C99 compiler when some standard
headers are missing."
a0497ff7a06f9350349264fe9b52dfefc6d53ead,Lasse Collin,Lasse Collin,2009-03-18 14:54:38,2009-03-18 14:54:38,Updated THANKS.
390e69887fc5e0a108eb41203bed9acd100a3d76,Lasse Collin,Lasse Collin,2009-03-18 14:51:41,2009-03-18 14:51:41,"Fix wrong macro names in lc_cpucores.m4 and cpucores.h.
Thanks to Bert Wesarg."
0df9299e2478c2a0c62c05b1ae14a85a353e20d6,Lasse Collin,Lasse Collin,2009-03-01 07:03:08,2009-03-01 07:03:08,"Test for Linux-specific sysinfo() only on Linux systems.
Some other systems have sysinfo() with different semantics."
cf751edfde3ad6e088dc18e0522d31ae38405933,Lasse Collin,Lasse Collin,2009-03-01 07:00:06,2009-03-01 07:00:06,Added AC_CONFIG_MACRO_DIR to configure.ac.
63df14c57dee7c461717784287056688482a7eb9,Lasse Collin,Lasse Collin,2009-03-01 06:58:41,2009-03-01 06:58:41,"Fix the Autoconf test for getopt_long replacement.
It was broken by e114502b2bc371e4a45449832cb69be036360722."
fd6a380f4eda4f00be5f2aa8d222992cd74a714f,Lasse Collin,Lasse Collin,2009-02-22 17:07:54,2009-02-22 17:07:54,Add a rough explanation of --extreme to output of --help.
68bf7ac2984d3627369a240ef0491934d53f7899,Lasse Collin,Lasse Collin,2009-02-22 16:52:49,2009-02-22 16:52:49,"Fixes to progress message handling in xz:

  - Don't use Windows-specific code on Windows. The old code
    required at least Windows 2000. Now it should work on
    Windows 98 and later, and maybe on Windows 95 too.

  - Use less precision when showing estimated remaining time.

  - Fix some small design issues."
47c2e21f82242f50f18713a27d644c2c94ab3fea,Lasse Collin,Lasse Collin,2009-02-18 11:00:10,2009-02-18 11:00:10,Added files missing from the previous commit.
489a3dbaa0465f04400804e956a1cfbbee3654a2,Lasse Collin,Lasse Collin,2009-02-17 08:43:00,2009-02-17 08:43:00,"Added lzma_easy_buffer_encode(). Splitted easy.c into small
pieces to avoid unneeded dependencies making statically
linked applications bigger than needed."
7494816ab08d82f4d6409788825930c4e43cfd0d,Lasse Collin,Lasse Collin,2009-02-15 13:48:45,2009-02-15 13:48:45,"Make physmem.h work on old Windows versions.
Thanks to Hongbo Ni for the original patch."
11ae4ae35fd70182c713f2d914b7cb1143bc76f0,Lasse Collin,Lasse Collin,2009-02-14 18:44:52,2009-02-14 18:44:52,Fix microsecond vs. nanosecond confusion in my_time().
3084d662d2646ab7eb58daf0dc32cf3f9a74eec7,Lasse Collin,Lasse Collin,2009-02-13 22:45:29,2009-02-13 22:45:29,"Cleanups to the code that detects the amount of RAM and
the number of CPU cores. Added support for using sysinfo()
on Linux systems whose libc lacks appropriate sysconf()
support (at least dietlibc). The Autoconf macros were
split into separate files, and CPU core count detection
was moved from hardware.c to cpucores.h. The core count
isn't used for anything real for now, so a problematic
part in process.c was commented out."
9c62371eab2706c46b1072f5935e28cb4cd9dca8,Lasse Collin,Lasse Collin,2009-02-13 16:23:50,2009-02-13 16:23:50,Initial port to DOS using DJGPP.
0dae8b7751d09e9c5a482d5519daaee4800ce203,Lasse Collin,Lasse Collin,2009-02-13 16:02:05,2009-02-13 16:02:05,"Windows port: Take advantage of the version number macros.
Now the version number is not duplicated in the
Windows-specific files anymore."
fdbc0cfa71f7d660855098a609175ba384259529,Lasse Collin,Lasse Collin,2009-02-13 16:00:03,2009-02-13 16:00:03,"Changed how the version number is specified in various places.
Now configure.ac will get the version number directly from
src/liblzma/api/lzma/version.h. The intent is to reduce the
number of places where the version number is duplicated. In
future, support for displaying Git commit ID may be added too."
1d924e584b146136989f48c13fff2632896efb3d,Lasse Collin,Lasse Collin,2009-02-13 15:30:30,2009-02-13 15:30:30,Fix handling of integrity check type in the xz command line tool.
96c46df7deb231ea68a03d8d1da9de4c774e36d8,Lasse Collin,Lasse Collin,2009-02-13 15:29:02,2009-02-13 15:29:02,"Improve support for DOS-like systems.
Here DOS-like means DOS, Windows, and OS/2."
b6a30ee8c2de60ecd722cd05223e4ba72f822e33,Lasse Collin,Lasse Collin,2009-02-11 18:02:32,2009-02-11 18:02:32,Remove dead directories from .gitignore.
1ec5b0027911d94cb6f98892cbc690f818d8a861,Jim Meyering,Lasse Collin,2009-02-11 13:45:14,2009-02-11 18:01:10,".gitignore vs. Makefiles

How about this for those of us who do srcdir builds?"
154f5aec2de201c674841de4fcc9804c2a87af07,Lasse Collin,Lasse Collin,2009-02-10 19:48:35,2009-02-10 19:48:35,"Removed Makefile from .gitignore since not all Makefiles
in the repository are generated by Autotools. People
should do test builds in a separate build directory anyway."
e605c2663691b0a4c307786aa368d124ea081daa,Lasse Collin,Lasse Collin,2009-02-10 19:48:05,2009-02-10 19:48:05,Added resource files for the Windows build.
a3bbbe05d32b1f7ea9eb98805df4dda2e811b476,Lasse Collin,Lasse Collin,2009-02-09 12:54:31,2009-02-09 12:54:31,"Let the user specify custom CFLAGS on the make command
line. Previously custom CFLAGS worked only when they were
passed to configure."
53f7598998b1860a69c51243b5d2e34623c6bf60,Lasse Collin,Lasse Collin,2009-02-08 19:35:11,2009-02-08 19:35:11,Fix aliasing issue in physmem.h.
0e27028d74c5c7a8e036ae2a9b8cecb0ac79d3a6,Lasse Collin,Lasse Collin,2009-02-08 16:24:50,2009-02-08 16:24:50,"Add a separate internal function to initialize the CRC32
table, which is used also by LZ encoder. This was needed
because calling lzma_crc32() and ignoring the result is
a no-op due to lzma_attr_pure."
ae1ad9af54210c9a2be336b1316532da5071516c,Lasse Collin,Lasse Collin,2009-02-08 16:17:05,2009-02-08 16:17:05,"Make ""xz --force"" to write to terminal as the error
message suggests."
79e25eded48d2fe33f31441ab7a034f902e335f8,Lasse Collin,Lasse Collin,2009-02-08 08:37:50,2009-02-08 08:37:50,"Support both slash and backslash as path component
separator on Windows when parsing argv[0]."
bc7c7109cc4410055a888c1c70cbd1c9445c4361,Lasse Collin,Lasse Collin,2009-02-07 21:18:13,2009-02-07 21:18:13,"Omit the wrong and (even if corrected) nowadays useless rm
from autogen.sh."
edfc2031e56f8a2ccda063f02936b3a848d88723,Lasse Collin,Lasse Collin,2009-02-07 19:41:52,2009-02-07 19:41:52,Updated THANKS.
880c3309386aac58fc4f3d7ca99bd31bcb1526a3,Lasse Collin,Lasse Collin,2009-02-07 19:17:07,2009-02-07 19:17:07,"Make it easy to choose if command line tools should be
linked statically or dynamically against liblzma. The
default is still to use static liblzma, but it can now
be changed by passing --enable-dynamic to configure.
Thanks to Mike Frysinger for the original patch.

Fixed a few minor bugs in configure.ac."
3f86532407e4ace3debb62be16035e009b56ca36,Mike Frysinger,Lasse Collin,2009-02-07 04:38:39,2009-02-07 18:26:09,"add gitignore files

Signed-off-by: Mike Frysinger <vapier@gentoo.org>"
bd7ca1dad5c146b6217799ffaa230c32d207a3e5,Lasse Collin,Lasse Collin,2009-02-07 15:07:52,2009-02-07 15:07:52,"Assume 32 MiB of RAM on unsupported operating systems like
the comment in hardware.c already said."
d0ab8c1c73ae712adb0d26fbb9da762d99a63618,Lasse Collin,Lasse Collin,2009-02-07 14:26:58,2009-02-07 14:26:58,"MinGW support: Don't build fastpos_tablegen.c as part of
liblzma. Build both static and dynamic liblzma, and also
static and dynamic versions of the command line tools."
bfd91198e44a52bd9bfe3cd6dcae5edab7c6eb45,Lasse Collin,Lasse Collin,2009-02-07 13:55:47,2009-02-07 13:55:47,"Support LZMA_API_STATIC in assembler files to
avoid __declspec(dllexport) equivalent."
3306cf3883492720b3c34baa02f4eb4227d91c73,Lasse Collin,Lasse Collin,2009-02-07 09:11:50,2009-02-07 09:11:50,"Introduced LZMA_API_STATIC macro, which the applications
need to #define when linking against static liblzma on
platforms like Windows. Most developers don't need to
care about LZMA_API_STATIC at all."
b719e63c5f4c91d2d5e2ea585d4c055ec3767d0b,Lasse Collin,Lasse Collin,2009-02-06 14:55:45,2009-02-06 14:55:45,Another grammar fix
fe5434f940f75fec3611cf9d9edf78c4da8ac760,Lasse Collin,Lasse Collin,2009-02-06 10:30:23,2009-02-06 10:30:23,Grammar fix in README.
3dfa58a9eedf5a0e566452b078801c9cbcf7a245,Lasse Collin,Lasse Collin,2009-02-06 08:06:32,2009-02-06 08:06:32,"Some MSYS installations (e.g. MsysGit) don't include
install.exe, so don't rely on it."
975d8fd72a5148d46b2e1745f7a211cf1dfd9d31,Lasse Collin,Lasse Collin,2009-02-06 07:13:15,2009-02-06 07:13:15,"Recreated the BCJ test files for x86 and SPARC. The old files
were linked with crt*.o, which are copyrighted, and thus the
old test files were not in the public domain as a whole. They
are freely distributable though, but it is better to be careful
and avoid including any copyrighted pieces in the test files.
The new files are just compiled and assembled object files,
and thus don't contain any copyrighted code."
094b1b09a531f0d201ec81f2b07346a995fd80b9,Lasse Collin,Lasse Collin,2009-02-05 19:21:27,2009-02-05 19:21:27,"Add the ""windows"" directory to EXTRA_DIST."
e1c3412eec7acec7ca3b32c9c828f3147dc65b49,Lasse Collin,Lasse Collin,2009-02-05 07:17:51,2009-02-05 07:17:51,Added initial experimental makefile for use with MinGW.
75905a9afc0ee89954ede7d08af70d1148bf0fd9,Lasse Collin,Lasse Collin,2009-02-05 07:12:57,2009-02-05 07:12:57,"Various code cleanups the the xz command line tool.
It now builds with MinGW."
d0c0b9e94e0af59d1d8f7f4829695d6efe19ccfe,Lasse Collin,Lasse Collin,2009-02-03 10:15:17,2009-02-03 10:15:17,Another utime() fix.
ccf92a29e8c7234284f1568c1ec0fd7cb98356ca,Lasse Collin,Lasse Collin,2009-02-03 08:41:11,2009-02-03 08:41:11,"Fix wrong filename argument for utime() and utimes().
This doesn't affect most systems, since most systems
have better functions available."
99c1c2abfae2e87f3c17e929783e6d1bb7a3f302,Lasse Collin,Lasse Collin,2009-02-02 19:19:01,2009-02-02 19:19:01,"Updated the x86 assembler code:
  - Use call/ret pair to get instruction pointer for PIC.
  - Use PIC only if PIC or __PIC__ is #defined.
  - The code should work on MinGW and Darwin in addition
    to GNU/Linux and Solaris."
22a0c6dd940b78cdac2f4a4b4b0e7cc0ac15021f,Lasse Collin,Lasse Collin,2009-02-02 18:14:03,2009-02-02 18:14:03,"Modify LZMA_API macro so that it works on Windows with
other compilers than MinGW. This may hurt readability
of the API headers slightly, but I don't know any
better way to do this."
8dd7b6052e18621e2e6c62f40f762ee88bd3eb65,Lasse Collin,Lasse Collin,2009-02-01 20:40:35,2009-02-01 20:40:35,"Fix a bug in lzma_block_buffer_decode(), although this
function should be rewritten anyway."
55fd41431e61fb8178858283d636b6781e33e847,Lasse Collin,Lasse Collin,2009-02-01 20:39:07,2009-02-01 20:39:07,"Added initial version of raw buffer-to-buffer coding
functions, and cleaned up filter.h API header a little.
May be very buggy, not tested yet."
3e54ecee5cad30a5ca361a88a99230407abc0699,Lasse Collin,Lasse Collin,2009-01-31 22:11:20,2009-01-31 22:11:20,Fix missing newlines in xzdec.c.
d64ca34f1b6f34e86adefc7f735b4eff8e6d4a35,Lasse Collin,Lasse Collin,2009-01-31 22:10:07,2009-01-31 22:10:07,"Use __cdecl also for function pointers in liblzma API when
on Windows."
6a2eb54092fc625d59921a607ff68cd1a90aa898,Lasse Collin,Lasse Collin,2009-01-31 09:01:48,2009-01-31 09:01:48,"Add LZMA_API to liblzma API headers. It's useful at least
on Windows. sysdefs.h no longer #includes lzma.h, so lzma.h
has to be #included separately where needed."
d9993fcb4dfc1f93abaf31ae23b3ef1f3123892b,Lasse Collin,Lasse Collin,2009-01-31 08:13:09,2009-01-31 08:13:09,Use _WIN32 instead of WIN32 in xzdec.c to test if compiling on Windows.
2dbdc5befb33c3703e4609809101047c67caf343,Lasse Collin,Lasse Collin,2009-01-31 08:02:52,2009-01-31 08:02:52,"Fix two lines in lzma.h on which the # wasn't at the
beginning of the line."
4ab760109106dc04f39dd81c97d50f528d1b51c1,Lasse Collin,Lasse Collin,2009-01-31 07:55:05,2009-01-31 07:55:05,"Add support for using liblzma headers in MSVC, which has no
stdint.h or inttypes.h."
b2172cf823d3be34cb0246cb4cb32d105e2a34c9,Lasse Collin,Lasse Collin,2009-01-31 06:49:54,2009-01-31 06:49:54,Fix # -> ## in a macro in lzma.h.
1aae8698746d3c87a93f8398cdde2de9ba1f7208,Lasse Collin,Lasse Collin,2009-01-30 16:50:16,2009-01-30 16:50:16,Updated README.
f54bcf6f80d585236bc03ce49f7c73e1abaa17eb,Lasse Collin,Lasse Collin,2009-01-29 22:29:58,2009-01-29 22:29:58,Remove dangling crc64_init.c.
982da7ed314398420c38bf154a8f759d5f18b480,Lasse Collin,Lasse Collin,2009-01-28 15:16:38,2009-01-28 15:16:38,"The .xz file format specification version 1.0.0 is now
officially released. The format has been technically the same
since 2008-11-19, but now that it is frozen, people can start
using it without a fear that the format will break."
c4683a660b4372156bdaf92f0cdc54a58f95ee6f,Lasse Collin,Lasse Collin,2009-01-28 06:45:59,2009-01-28 06:45:59,Updated THANKS.
3241317093595db9f79104faafe93cb989c9f858,Lasse Collin,Lasse Collin,2009-01-28 06:43:26,2009-01-28 06:43:26,"Fix uninitialized variables in alone_decoder.c. This bug was
triggered by the previous commit, since these variables were
not used by anything before support for a preset dictionary."
f76e39cf930f888d460b443d18f977ebedea8b2a,Lasse Collin,Lasse Collin,2009-01-27 16:36:05,2009-01-27 16:36:05,"Added initial support for preset dictionary for raw LZMA1
and LZMA2. It is not supported by the .xz format or the xz
command line tool yet."
449b8c832b26c3633f3bec60095e57d2d3ada1f3,Lasse Collin,Lasse Collin,2009-01-26 18:09:17,2009-01-26 18:09:17,Regenerate the CRC tables without trailing blanks.
850f7400428dc9c5fd08a2f35a5bd2c9e45aede2,Jim Meyering,Lasse Collin,2009-01-19 20:37:16,2009-01-26 18:01:51,remove trailing blanks from all but .xz files
667481f1aad34e1ed15738e7913a9c7e256b4cf5,Lasse Collin,Lasse Collin,2009-01-26 12:34:10,2009-01-26 12:34:10,Add lzma_block_buffer_decode().
5fb34d8324d3e7e0061df25d0086b64c8726b19d,Lasse Collin,Lasse Collin,2009-01-26 12:33:28,2009-01-26 12:33:28,Add more sanity checks to lzma_stream_buffer_decode().
c129748675a5daa8838df92bde32cc04f6ce61ba,Lasse Collin,Lasse Collin,2009-01-26 12:33:13,2009-01-26 12:33:13,Avoid hardcoded constant in easy.c.
1859d22d75e072463db74c25bc3f5a7992e5fdf6,Lasse Collin,Lasse Collin,2009-01-26 11:06:49,2009-01-26 11:06:49,Tiny bit better sanity check in block_util.c
2c5fe958e4bbe9b147b10c255955dfe2827fb8e7,Lasse Collin,Lasse Collin,2009-01-24 23:35:56,2009-01-24 23:35:56,"Fix a dumb bug in Block decoder, which made it return
LZMA_DATA_ERROR with valid data. The bug was added in
e114502b2bc371e4a45449832cb69be036360722."
c81f13ff29271de7293f8af3d81848b1dcae3d19,Lasse Collin,Lasse Collin,2009-01-23 20:27:50,2009-01-23 20:27:50,Added lzma_stream_buffer_decode() and made minor cleanups.
0b3318661ce749550b8531dfd469639a08930391,Lasse Collin,Lasse Collin,2009-01-22 10:53:33,2009-01-22 10:53:33,Fix a comment.
9ec80355a7212a0a2f8c89d98e51b1d8b4e34eec,Lasse Collin,Lasse Collin,2009-01-20 14:37:27,2009-01-20 14:37:27,Add some single-call buffer-to-buffer coding functions.
d8b58d099340f8f4007b24b211ee41a7210c061c,Lasse Collin,Lasse Collin,2009-01-20 11:45:41,2009-01-20 11:45:41,Block encoder cleanups
0c09810cb3635cb575cb54e694d41523e7d0a335,Lasse Collin,Lasse Collin,2009-01-20 08:35:15,2009-01-20 08:35:15,Use LZMA_PROG_ERROR in lzma_code() as documented in base.h.
2f1a8e8eb898f6c036cde55d153ad348bfab3c00,Lasse Collin,Lasse Collin,2009-01-19 20:53:18,2009-01-19 20:53:18,Fix handling of non-fatal errors in lzma_code().
4810b6bc25087be872960b9dd1d11ff07735dc88,Lasse Collin,Lasse Collin,2009-01-19 12:00:33,2009-01-19 12:00:33,"Move some LZMA2 constants to lzma2_encoder.h so that they
can be used outside lzma2_encoder.c."
00be5d2e09f9c7a6a8563465ad8b8042866817a4,Lasse Collin,Lasse Collin,2009-01-19 11:52:36,2009-01-19 11:52:36,Remove dead code.
128586213f77c9bd82b7e9a62927f6d0c3769d85,Lasse Collin,Lasse Collin,2009-01-17 12:24:25,2009-01-17 12:24:25,"Beta was supposed to be API stable but I had forgot to rename
lzma_memlimit_encoder and lzma_memlimit_decoder to
lzma_raw_encoder_memlimit and lzma_raw_decoder_memlimit. :-(
Now it is fixed. Hopefully it doesn't cause too much trouble
to those who already thought API is stable."
b056379490be5c584c264a967f0540041a163a1e,Lasse Collin,Lasse Collin,2009-01-15 12:29:22,2009-01-15 12:29:22,Updated THANKS.
dc8f3be06d54ef6e6cfb5134dd3d25edd08cef89,Lasse Collin,Lasse Collin,2009-01-15 12:27:32,2009-01-15 12:27:32,"Fixed a bug in 7z2lzma.bash to make it work with .7z files
that use something else than 2^n as the dictionary size.
Thanks to Dan Shechter for the bug report."
8286a60b8f4bd5accfbc9d229d2204bac31994f2,Lasse Collin,Lasse Collin,2009-01-07 16:41:15,2009-01-07 16:41:15,"Use pthread_sigmask() instead of sigprocmask() when pthreads
are enabled."
4fd43cb3a906f6da2943f69239ee984c4787c9a9,Lasse Collin,Lasse Collin,2008-12-31 18:01:00,2008-12-31 18:01:00,"Bumped version to 4.999.8beta right after the release
of 4.999.7beta."
061748f5932719643cda73383db715167d543c22,Lasse Collin,Lasse Collin,2008-12-31 16:59:02,2008-12-31 16:59:02,"Disable Subblock filter from test_compress.sh since it is
disabled by default in configure.ac."
9c45658ddc8bd4a7819ef8547d3e7ccf73203e78,Lasse Collin,Lasse Collin,2008-12-31 15:44:20,2008-12-31 15:44:20,"Disable both Subblock encoder and decoder my default,
since they are not finished and may have security issues too."
b59f1e98f50694cf6a8f1b342fd878feebdb2f88,Lasse Collin,Lasse Collin,2008-12-31 15:42:50,2008-12-31 15:42:50,Update some files in debug directory.
d1d17a40d33a9682424ca37282813492f2cba6d0,Lasse Collin,Lasse Collin,2008-12-31 15:41:46,2008-12-31 15:41:46,Prepare for 4.999.7beta release.
88d3e6b0b18e24142b6d3b41dc1b84b00c49fef3,Lasse Collin,Lasse Collin,2008-12-31 15:15:03,2008-12-31 15:15:03,Cleaned up some comments in the API headers.
322ecf93c961e45a1da8c4a794a7fdacefcd7f40,Lasse Collin,Lasse Collin,2008-12-31 14:29:39,2008-12-31 14:29:39,"Renamed lzma_options_simple to lzma_options_bcj in the API.
The internal implementation is still using the name ""simple"".
It may need some cleanups, so I look at it later."
7eea8bec3abfed883efba66264a1452a1c04f6b0,Lasse Collin,Lasse Collin,2008-12-30 22:57:27,2008-12-30 22:57:27,Fixed missing quoting in configure.ac.
28e75f7086dbe9501d926c370375c69dfb1236ce,Lasse Collin,Lasse Collin,2008-12-30 22:48:23,2008-12-30 22:48:23,"Updated src/liblzma/Makefile.am to use liblzma.pc.in, which
should have been in the previous commit."
7ed9d943b31d3ee9c5fb2387e84a241ba33afe90,Lasse Collin,Lasse Collin,2008-12-30 22:30:49,2008-12-30 22:30:49,"Remove lzma_init() and other init functions from liblzma API.
Half of developers were already forgetting to use these
functions, which could have caused total breakage in some future
liblzma version or even now if --enable-small was used. Now
liblzma uses pthread_once() to do the initializations unless
it has been built with --disable-threads which make these
initializations thread-unsafe.

When --enable-small isn't used, liblzma currently gets needlessly
linked against libpthread (on systems that have it). While it is
stupid for now, liblzma will need threads in future anyway, so
this stupidity will be temporary only.

When --enable-small is used, different code CRC32 and CRC64 is
now used than without --enable-small. This made the resulting
binary slightly smaller, but the main reason was to clean it up
and to handle the lack of lzma_init_check().

The pkg-config file lzma.pc was renamed to liblzma.pc. I'm not
sure if it works correctly and portably for static linking
(Libs.private includes -pthread or other operating system
specific flags). Hopefully someone complains if it is bad.

lzma_rc_prices[] is now included as a precomputed array even
with --enable-small. It's just 128 bytes now that it uses uint8_t
instead of uint32_t. Smaller array seemed to be at least as fast
as the more bloated uint32_t array on x86; hopefully it's not bad
on other architectures."
5cda29b5665004fc0f21d0c41d78022a6a559ab2,Lasse Collin,Lasse Collin,2008-12-27 17:40:31,2008-12-27 17:40:31,Use 28 MiB as memory usage limit for encoding in test_compress.sh.
050eb14d29e2537c014662e83599fd8a77f13c45,Lasse Collin,Lasse Collin,2008-12-27 17:32:20,2008-12-27 17:32:20,"Revert a change made in 3b34851de1eaf358cf9268922fa0eeed8278d680
that was related to LZMA_MODE_FAST. The original code is slightly
faster although it compresses slightly worse. But since it is fast
mode, it is better to select the faster version."
4820f10d0f173864f6a2ea7479663b509ac53358,Lasse Collin,Lasse Collin,2008-12-27 17:30:19,2008-12-27 17:30:19,Some xz command line tool improvements.
e33194e79d8f5ce07cb4aca909b324ae75098f7e,Lasse Collin,Lasse Collin,2008-12-27 17:27:49,2008-12-27 17:27:49,"Bunch of liblzma tweaks, including some API changes.
The API and ABI should now be very close to stable,
although the code behind it isn't yet."
4d00652e75dd2736aedc3a3a8baff3dd0ea38074,Lasse Collin,Lasse Collin,2008-12-18 11:42:52,2008-12-18 11:42:52,Updated Makefile.am that was missing from the previous commit.
634636fa56ccee6e744f78b0abed76c8940f2f8f,Lasse Collin,Lasse Collin,2008-12-17 19:49:53,2008-12-17 19:49:53,"Remove the alignment functions for now. Maybe they will
be added back in some form later, but the current version
wasn't modular, so it would need fixing anyway."
4fed98417d1687f5eccccb42a133fde3ec81216a,Lasse Collin,Lasse Collin,2008-12-17 18:11:23,2008-12-17 18:11:23,xz message handling improvements
653e457e3756ef35e5d1b2be3523b3e4b1e9ee4d,Lasse Collin,Lasse Collin,2008-12-15 21:26:43,2008-12-15 21:26:43,"Fix a dumb bug in .lzma decoder which was introduced in
the previous commit. (Probably the previous commit has
other bugs too, it wasn't tested.)"
671a5adf1e844bfdd6fd327016c3c28694493158,Lasse Collin,Lasse Collin,2008-12-15 17:39:13,2008-12-15 17:39:13,Bunch of liblzma API cleanups and fixes.
17781c2c20fd77029cb32e77792889f2f211d69d,Lasse Collin,Lasse Collin,2008-12-15 12:26:52,2008-12-15 12:26:52,"The LZMA2 decoder fix introduced a bug to LZ decoder,
which made LZ decoder return too early after dictionary
reset. This fixes it."
f9f2d1e74398500724041f7fb3c38db35ad8c8d8,Lasse Collin,Lasse Collin,2008-12-15 09:20:22,2008-12-15 09:20:22,Added two new test files.
ff7fb2c605bccc411069e07b9f11fb957aea2ddf,Lasse Collin,Lasse Collin,2008-12-15 08:01:59,2008-12-15 08:01:59,Fix data corruption in LZMA2 decoder.
1ceebcf7e1bd30b95125f0ad67a09fdb6215d613,Lasse Collin,Lasse Collin,2008-12-12 22:54:11,2008-12-12 22:54:11,"Name the package ""xz"" in configure.ac."
a94bf00d0af9b423851905b031be5a645a657820,Lasse Collin,Lasse Collin,2008-12-12 20:43:21,2008-12-12 20:43:21,"Some adjustments to GCC warning flags. The important change
is the removal of -pedantic. It messes up -Werror (which I
really want to keep so that I don't miss any warnings) with
printf format strings that are in POSIX but not in C99."
8582d392baacd2cdac07ca60041f8c661323676d,Lasse Collin,Lasse Collin,2008-12-09 23:31:00,2008-12-09 23:31:00,Remove obsolete comment.
b1ae6dd731ea3636c3c2bfc7aefa71457d3328f1,Lasse Collin,Lasse Collin,2008-12-09 23:27:15,2008-12-09 23:27:15,"Use ""decompression"" consistently in --long-help."
1ea9e7f15afd5d3981e2432710e932320597bca9,Lasse Collin,Lasse Collin,2008-12-09 23:23:58,2008-12-09 23:23:58,"Added preset=NUM to --lzma1 and --lzma2. This makes it easy
to take a preset as a template and modify it a little."
bceb3918dbb21f34976bfdd4c171a81319de71f7,Lasse Collin,Lasse Collin,2008-12-09 15:43:31,2008-12-09 15:43:31,"Put the file format specification into the public domain.
Same will be done to the actual code later."
6efa2d80d46a38861016f41f0eb6fa2ec9260fe6,Lasse Collin,Lasse Collin,2008-12-09 15:41:49,2008-12-09 15:41:49,"Make the memusage functions of LZMA1 and LZMA2 encoders
to validate the filter options. Add missing validation
to LZMA2 encoder when options are changed in the middle
of encoding."
f20a03206b71ff01b827bb7a932411d6a6a4e06a,Lasse Collin,Lasse Collin,2008-12-09 08:36:24,2008-12-09 08:36:24,Updated THANKS.
ef7890d56453dca1aeb2e12db29b7e418d93dde4,Lasse Collin,Lasse Collin,2008-12-01 21:04:12,2008-12-01 21:04:12,"In command line tool, take advantage of memusage calculation's
ability to also validate the filter chain and options (not
implemented yet for all filters)."
ccd57afa09e332d664d6d6a7498702791ea5f659,Lasse Collin,Lasse Collin,2008-12-01 20:59:28,2008-12-01 20:59:28,"Validate the filter chain before checking filter-specific
memory usage."
c596fda40b62fe1683d0ac34d0c673dcaae2aa15,Lasse Collin,Lasse Collin,2008-12-01 20:58:22,2008-12-01 20:58:22,"Make the memusage functions of LZMA1 and LZMA2 decoders
to validate the filter options."
c58f469be5bb9b0bdab825c6687445fd553f4f3a,Lasse Collin,Lasse Collin,2008-12-01 20:55:18,2008-12-01 20:55:18,"Added the changes for Delta filter that should have been
part of 656ec87882ee74b192c4ea4a233a235eca7b04d4."
cd708015202dbf7585b84a8781462a20c42a324b,Lasse Collin,Lasse Collin,2008-12-01 20:50:28,2008-12-01 20:50:28,"LZMA2 decoder cleanups. Make it require new LZMA properties
also in the first LZMA chunk after a dictionary reset in
uncompressed chunk."
656ec87882ee74b192c4ea4a233a235eca7b04d4,Lasse Collin,Lasse Collin,2008-12-01 14:30:11,2008-12-01 14:30:11,"Added lzma_delta_coder_memusage() which also validates
the options."
691a9155b7a28882baf37e9d1e969e32e91dbc7a,Lasse Collin,Lasse Collin,2008-11-29 08:03:49,2008-11-29 08:03:49,"Automake includes the m4 directory, so don't add it in
Makefile.am separately.

Updated THANKS."
c7007ddf06ac2b0e018d71d281c21b99f16e7ae0,Lasse Collin,Lasse Collin,2008-11-28 10:00:48,2008-11-28 10:00:48,"Tested using COLUMNS environment variable to avoid broken
progress indicator but since COLUMNS isn't usually available,
the code was left commented out."
ae65dcfde27014e4d811e1a1308aa5d0fe8debbd,Lasse Collin,Lasse Collin,2008-11-27 17:28:59,2008-11-27 17:28:59,Cleanups to message.c.
a8368b75cdcd5427299001cc42839287f27b244d,Lasse Collin,Lasse Collin,2008-11-25 00:37:47,2008-11-25 00:37:47,Remove the nowadays unneeded memory limitting malloc() wrapper.
69472ee5f055a2bb6f28106f0923e1461fd1d080,Lasse Collin,Lasse Collin,2008-11-23 13:09:03,2008-11-23 13:09:03,"VLI encoder and decoder cleanups. Made encoder return
LZMA_PROG_ERROR in single-call mode if there's no output
space."
4249c8c15a08f55b51b7012e6aaafce3aa9eb650,Lasse Collin,Lasse Collin,2008-11-22 15:44:33,2008-11-22 15:44:33,Typo fix
6d1d6f4598d121253dbe1084c6866b66e95c361b,Lasse Collin,Lasse Collin,2008-11-20 20:59:10,2008-11-20 20:59:10,Support NetBSD's errno for O_NOFOLLOW.
f901a290eef67b8ea4720ccdf5f46edf775ed9d7,Lasse Collin,Lasse Collin,2008-11-20 16:05:52,2008-11-20 16:05:52,"Build xzdec and lzmadec from xzdec.c. xzdec supports only .xz
files and lzmadec only .lzma files."
86a0ed8f01c8ed44721223f885e679c71b7bb94c,Lasse Collin,Lasse Collin,2008-11-20 09:01:29,2008-11-20 09:01:29,Minor cleanups to xzdec.
54f716ba8905d09752dcd1519455a40bd21d5317,Lasse Collin,Lasse Collin,2008-11-19 21:55:22,2008-11-19 21:55:22,Added missing check for uint16_t.
1880a3927b23f265f63b2adb86fbdb81ea09eb06,Lasse Collin,Lasse Collin,2008-11-19 21:52:24,2008-11-19 21:52:24,"Renamed lzma to xz and lzmadec to xzdec. We create symlinks
lzma, unlzma, and lzcat in ""make install"" for backwards
compatibility with LZMA Utils 4.32.x; I'm not sure if this
should be the default though."
e114502b2bc371e4a45449832cb69be036360722,Lasse Collin,Lasse Collin,2008-11-19 18:46:52,2008-11-19 18:46:52,"Oh well, big messy commit again. Some highlights:
  - Updated to the latest, probably final file format version.
  - Command line tool reworked to not use threads anymore.
    Threading will probably go into liblzma anyway.
  - Memory usage limit is now about 30 % for uncompression
    and about 90 % for compression.
  - Progress indicator with --verbose
  - Simplified --help and full --long-help
  - Upgraded to the last LGPLv2.1+ getopt_long from gnulib.
  - Some bug fixes"
3c3905b53462ae235c9438d86a4dc51086410932,Lasse Collin,Lasse Collin,2008-10-09 08:12:29,2008-10-09 08:12:29,"Fixed the test that should have been fixed as part
of 1e8e4fd1f3e50129b4541406ad765d2aa1233943."
0f295bf7a3ece01f667caae318cc3e3424085886,Lasse Collin,Lasse Collin,2008-10-07 13:42:18,2008-10-07 13:42:18,Fixed some help messages.
1e8e4fd1f3e50129b4541406ad765d2aa1233943,Lasse Collin,Lasse Collin,2008-10-07 06:40:31,2008-10-07 06:40:31,Made the preset numbering more logical in liblzma API.
5e4df4c3c09c82bbbb1a916784e3dc717ca4ff81,Lasse Collin,Lasse Collin,2008-10-03 16:36:09,2008-10-03 16:36:09,Removed fi from po/LINGUAS.
fcfb86c7770328cfffa2e83b176af9a1ba2d9128,Lasse Collin,Lasse Collin,2008-10-03 04:06:48,2008-10-03 04:06:48,Fixed suffix handling with --format=raw.
bd137524f2f50e30ba054f42f1f6536cd3cee920,Lasse Collin,Lasse Collin,2008-10-02 19:51:46,2008-10-02 19:51:46,"Initial changes to change the suffix of the new format to .xz.
This also fixes a bug related to --suffix option. Some issues
with suffixes with --format=raw were not fixed."
4c321a41c482821aa3c4d64cdf886a6ed904d844,Lasse Collin,Lasse Collin,2008-09-30 14:43:55,2008-09-30 14:43:55,Renamed the test files from .lzma suffix to .xz suffix.
8e60c889a2816a63013a35c99ce26bf28f5b78eb,Lasse Collin,Lasse Collin,2008-09-30 10:57:44,2008-09-30 10:57:44,Fixed Stream decoder to actually use the first_stream variable.
3bdbc12c054d1961133ee19802af7dd3c3494543,Lasse Collin,Lasse Collin,2008-09-30 10:56:57,2008-09-30 10:56:57,Added one more test file.
a6639022fdc536e5659b070a465221b4cf7c51fa,Lasse Collin,Lasse Collin,2008-09-30 10:34:07,2008-09-30 10:34:07,Fixed uninitialized variable in Stream decoder.
ed3709000a3f17ecefab29b2235d7e2221b00003,Lasse Collin,Lasse Collin,2008-09-30 10:27:28,2008-09-30 10:27:28,Added two test files.
ea560b0ea80525752bdcd0074d24f8dc170bbe29,Lasse Collin,Lasse Collin,2008-09-27 20:49:24,2008-09-27 20:49:24,Fix conflicting Subblock helper filter's ID.
ad97483b6e55142fd8d5c041db057017a891cd95,Lasse Collin,Lasse Collin,2008-09-27 20:37:13,2008-09-27 20:37:13,"Changed magic bytes to match the updated spec. Filename
suffix wasn't changed yet."
7a57069167e9e63394e2b095ee3a63253fcb51c7,Lasse Collin,Lasse Collin,2008-09-27 20:16:09,2008-09-27 20:16:09,Remove po/fi.po since I'm not keeping it updated for now.
018ae09df8f2fee5a7374f307df4cb42fad0b81e,Lasse Collin,Lasse Collin,2008-09-27 20:13:54,2008-09-27 20:13:54,Fix also test_compress.sh.
3a62a5fb85d2eebd8666e64ed5d364d095062858,Lasse Collin,Lasse Collin,2008-09-27 20:01:15,2008-09-27 20:01:15,"Fixed compilation of test_filter_flags.c, which was broken by
1dcecfb09b55157b8653d747963069c8bed74f04."
c6ca26eef7cd07eba449035514e2b8f9ac3111c0,Lasse Collin,Lasse Collin,2008-09-27 16:11:02,2008-09-27 16:11:02,"Updated file format specification. It changes the suffix
of the new format to .xz and removes the recently added
LZMA filter."
1dcecfb09b55157b8653d747963069c8bed74f04,Lasse Collin,Lasse Collin,2008-09-27 16:09:21,2008-09-27 16:09:21,"Some API changes, bug fixes, cleanups etc."
5cc5064cae603b649c64c40125c7dd365de54c9d,Lasse Collin,Lasse Collin,2008-09-27 08:28:49,2008-09-27 08:28:49,Added 7z2lzma.bash.
f147666a5cd15542d4e427da58629f4a71cc38e1,Lasse Collin,Lasse Collin,2008-09-17 19:11:39,2008-09-17 19:11:39,Miscellaneous LZ and LZMA encoder cleanups
13d68b069849e19c33822cd8996cd6447890abb1,Lasse Collin,Lasse Collin,2008-09-13 10:54:00,2008-09-13 10:54:00,LZ decoder cleanup
13a74b78e37f16c9096ba5fe1859cc04eaa2f9f7,Lasse Collin,Lasse Collin,2008-09-13 09:10:43,2008-09-13 09:10:43,"Renamed constants:
  - LZMA_VLI_VALUE_MAX -> LZMA_VLI_MAX
  - LZMA_VLI_VALUE_UNKNOWN -> LZMA_VLI_UNKNOWN
  - LZMA_HEADER_ERRRO -> LZMA_OPTIONS_ERROR"
320601b2c7b08fc7da9da18d5bf7c3c1a189b080,Lasse Collin,Lasse Collin,2008-09-12 19:41:40,2008-09-12 19:41:40,Improved the Stream Flags handling API.
ec490da5228263b25bf786bb23d1008468f55b30,Lasse Collin,Lasse Collin,2008-09-11 20:10:44,2008-09-11 20:10:44,"Simplified debug/known_sizes.c to match the relaxed
requirements of Block encoder."
16e8b98f2659347edfa74afdbbb9e73311153cb9,Lasse Collin,Lasse Collin,2008-09-11 20:09:24,2008-09-11 20:09:24,"Remove a check from Block encoder that should have already
been removed in 2ba01bfa755e47ff6af84a978e3c8d63d7d2775e."
5a710c3805bdf6d7e3c92e954e4e4565b27bcb13,Lasse Collin,Lasse Collin,2008-09-11 17:02:38,2008-09-11 17:02:38,Remove bogus #includes.
01892b2ca5f69bed0ea746e04b604030d57806bb,Lasse Collin,Lasse Collin,2008-09-11 07:49:14,2008-09-11 07:49:14,Updated THANKS.
962f2231d49409fe6852e44ffe8c5dbabb04bc7d,Lasse Collin,Lasse Collin,2008-09-11 07:48:12,2008-09-11 07:48:12,"Fix a compiler error on big endian systems that don't
support unaligned memory access."
fa3ab0df8ae7a8a1ad55b52266dc0fd387458671,Lasse Collin,Lasse Collin,2008-09-11 07:46:14,2008-09-11 07:46:14,Silence a compiler warning.
9373e81e18822db4972819442ea4c2cb9955470b,Lasse Collin,Lasse Collin,2008-09-10 16:16:32,2008-09-10 16:16:32,Bumped version to 4.999.6alpha.
cb072b7c8442ba68bb0c62c0abbbe939794887a3,Lasse Collin,Lasse Collin,2008-09-10 14:02:00,2008-09-10 14:02:00,"Check for LZMA_FILTER_RESERVED_START in filter_flags_encoder.c.
Use LZMA_PROG_ERROR instead of LZMA_HEADER_ERROR if the Filter ID
is in the reserved range. This allows Block Header encoder to
detect unallowed Filter IDs, which is good for Stream encoder."
123ab0acec435c9e9866a99e30482116cfbd9ba5,Lasse Collin,Lasse Collin,2008-09-10 13:44:32,2008-09-10 13:44:32,Filter handling cleanups
9cfcd0c4f2f865d8fbbb46ea28344a9be0dd8ad1,Lasse Collin,Lasse Collin,2008-09-09 21:33:00,2008-09-09 21:33:00,Comments
2ba01bfa755e47ff6af84a978e3c8d63d7d2775e,Lasse Collin,Lasse Collin,2008-09-09 21:27:02,2008-09-09 21:27:02,"Cleaned up Block encoder and moved the no longer shared
code from block_private.h to block_decoder.c. Now the Block
encoder doesn't need compressed_size and uncompressed_size
from lzma_block structure to be initialized."
07efcb5a6bc5d7018798ebd728586f84183e7d64,Lasse Collin,Lasse Collin,2008-09-07 07:23:13,2008-09-07 07:23:13,Changed Filter ID of LZMA to 0x20.
32fe5fa541e82c08e054086279079ae5016bd8d8,Lasse Collin,Lasse Collin,2008-09-06 20:42:50,2008-09-06 20:42:50,Comments
0a31ed9d5e3cde4feb094b66f3a8b2c074605d84,Lasse Collin,Lasse Collin,2008-09-06 12:14:30,2008-09-06 12:14:30,Some API cleanups
da98df54400998be2a6c3876f9655a3c51b93c10,Lasse Collin,Lasse Collin,2008-09-04 08:53:06,2008-09-04 08:53:06,"Added support for raw encoding and decoding to the command
line tool, and made various cleanups. --lzma was renamed to
--lzma1 to prevent people from accidentally using LZMA when
they want LZMA2."
2496aee8a7741a8a0d42987db41ff2cf1a4bdabd,Lasse Collin,Lasse Collin,2008-09-04 07:39:15,2008-09-04 07:39:15,"Don't allow LZMA_SYNC_FLUSH with decoders anymore. There's
simply nothing that would use it. Allow LZMA_FINISH to the
decoders, which will usually ignore it (auto decoder and
Stream decoder being exceptions)."
bea301c26d5d52675e11e0236faec0492af98f60,Lasse Collin,Lasse Collin,2008-09-03 14:06:25,2008-09-03 14:06:25,Minor updates to the file format specification.
9c75b089b4a9e0edcf4cf7970a4383768707d6c8,Lasse Collin,Lasse Collin,2008-09-02 16:33:32,2008-09-02 16:33:32,Command line tool fixes
bab0590504b5aeff460ab4ca8c964dd7c1bad9e4,Lasse Collin,Lasse Collin,2008-09-02 16:31:42,2008-09-02 16:31:42,Auto decoder cleanup
689602336d126a46b60d791a67decab65e1e81f5,Lasse Collin,Lasse Collin,2008-09-02 16:12:12,2008-09-02 16:12:12,"Updated auto decoder to handle LZMA_CONCATENATED when decoding
LZMA_Alone files. Decoding of concatenated LZMA_Alone files is
intentionally not supported, so it is better to put this in
auto decoder than LZMA_Alone decoder."
80c4158f19904026433eb6f5d5ca98a0ecd4f66c,Lasse Collin,Lasse Collin,2008-09-02 11:56:52,2008-09-02 11:56:52,Stream decoder cleanups
fc681657450ce57be1fe08f7a15d31dcc705e514,Lasse Collin,Lasse Collin,2008-09-02 08:45:39,2008-09-02 08:45:39,Some fixes to LZ encoder.
ede675f9ac1ca82a7d7c290324adba672118bc8d,Lasse Collin,Lasse Collin,2008-08-31 08:47:01,2008-08-31 08:47:01,Fix wrong pointer calculation in LZMA encoder.
3b34851de1eaf358cf9268922fa0eeed8278d680,Lasse Collin,Lasse Collin,2008-08-28 19:53:15,2008-08-28 19:53:15,"Sort of garbage collection commit. :-| Many things are still
broken. API has changed a lot and it will still change a
little more here and there. The command line tool doesn't
have all the required changes to reflect the API changes, so
it's easy to get ""internal error"" or trigger assertions."
57b9a145a527f0716822615e5ed536d33aebd3fc,Lasse Collin,Lasse Collin,2008-06-20 14:16:32,2008-06-20 14:16:32,Fix test_filter_flags to match the new restriction of lc+lp.
eaafc4367c77ec1d910e16d11b4da293969d97a3,Lasse Collin,Lasse Collin,2008-06-20 13:19:54,2008-06-20 13:19:54,Remove some redundant code from LZMA encoder.
0809c46534fa5664fe35d9e98d95e87312ed130e,Lasse Collin,Lasse Collin,2008-06-19 13:35:08,2008-06-19 13:35:08,"Add limit of lc + lp <= 4. Now we can allocate the
literal coder as part of the main LZMA encoder or
decoder structure.

Make the LZMA decoder to rely on the current internal API
to free the allocated memory in case an error occurs."
d25ab1b96178f06a0e724f58e3cd68300b2b1275,Lasse Collin,Lasse Collin,2008-06-18 18:45:19,2008-06-18 18:45:19,Comments
6368a2fa5901c75864be5171dd57a50af7adbb41,Lasse Collin,Lasse Collin,2008-06-18 16:19:02,2008-06-18 16:19:02,"Delete old code that was supposed to be already deleted
from test_block_header.c."
7d17818cec8597f847b0a2537fde991bbc3d9e96,Lasse Collin,Lasse Collin,2008-06-18 15:02:10,2008-06-18 15:02:10,"Update the code to mostly match the new simpler file format
specification. Simplify things by removing most of the
support for known uncompressed size in most places.
There are some miscellaneous changes here and there too.

The API of liblzma has got many changes and still some
more will be done soon. While most of the code has been
updated, some things are not fixed (the command line tool
will choke with invalid filter chain, if nothing else).

Subblock filter is somewhat broken for now. It will be
updated once the encoded format of the Subblock filter
has been decided."
bf6348d1a3ff09fdc06940468f318f75ffa6af11,Lasse Collin,Lasse Collin,2008-06-17 12:03:46,2008-06-17 12:03:46,"Update the file format specification draft. The new one is
a lot simpler than the previous versions, but it also means
that the existing code will change a lot."
803194ddd26f01ff60ba4e9924c6087a56b29827,Lasse Collin,Lasse Collin,2008-06-11 18:42:47,2008-06-11 18:42:47,"Fix uninitialized variable in LZMA encoder. This was
introduced in 369f72fd656f537a9a8e06f13e6d0d4c242be22f."
0ea98e52ba87453497b1355c51f13bad55c8924a,Lasse Collin,Lasse Collin,2008-06-11 12:08:44,2008-06-11 12:08:44,"Improve command line integer parsing a little in lzma and
lzmadec to make them accept also KiB in addition Ki etc.
Fix also memory usage information in lzmadec --help."
436fa5fae96d4e35759aed33066060f09ee8c6ef,Lasse Collin,Lasse Collin,2008-06-10 17:36:12,2008-06-10 17:36:12,"s/decompressed/compressed/ in the command line tool's
error message."
369f72fd656f537a9a8e06f13e6d0d4c242be22f,Lasse Collin,Lasse Collin,2008-06-01 09:48:17,2008-06-01 09:48:17,"Fix a buffer overflow in the LZMA encoder. It was due to my
misunderstanding of the code. There's no tiny fix for this
problem, so I also cleaned up the code in general.

This reduces the speed of the encoder 2-5 % in the fastest
compression mode (""lzma -1""). High compression modes should
have no noticeable performance difference.

This commit breaks things (especially LZMA_SYNC_FLUSH) but I
will fix them once the new format and LZMA2 has been roughly
implemented. Plain LZMA won't support LZMA_SYNC_FLUSH at all
and won't be supported in the new .lzma format. This may
change still but this is what it looks like now.

Support for known uncompressed size (that is, LZMA or LZMA2
without EOPM) is likely to go away. This means there will
be API changes."
e55e0e873ce2511325749d415ae547d62ab5f00d,Lasse Collin,Lasse Collin,2008-05-30 08:53:41,2008-05-30 08:53:41,Typo fixes from meyering.
ed6664146fcbe9cc4a3b23b31632182ed812ea93,Lasse Collin,Lasse Collin,2008-05-11 11:24:42,2008-05-11 11:24:42,"Remove support for pre-C89 libc versions that lack memcpy,
memmove, and memset."
b09464bf9ae694afc2d1dc26188ac4e2e8af0a63,Lasse Collin,Lasse Collin,2008-05-11 11:17:21,2008-05-11 11:17:21,"Improved C99 compiler detection in configure.ac. It will
pass -std=gnu99 instead of -std=c99 to GCC now, but -pedantic
should still give warnings about GNU extensions like before
except with some special keywords like asm()."
11de5d5267f7a0a7f0a4d34eec147e65eaf9f9cf,Lasse Collin,Lasse Collin,2008-05-06 12:15:07,2008-05-06 12:15:07,Bunch of grammar fixes from meyering.
dc192b6343ae36276c85fcf7ef6006147816eadc,Lasse Collin,Lasse Collin,2008-05-06 10:41:05,2008-05-06 10:41:05,Typo fix
944b62b93239b27b338d117f2668c0e95849659b,Lasse Collin,Lasse Collin,2008-05-04 19:29:27,2008-05-04 19:29:27,"Don't print an error message on broken pipe unless --verbose
is used."
8e074349e47ea6832b8fdf9244e581d453733433,Lasse Collin,Lasse Collin,2008-04-30 19:16:17,2008-04-30 19:16:17,"Fix a crash with --format=alone if other filters than LZMA
are specified on the command line."
2f361ac19b7fd3abcd362de4d470e6a9eb495b73,Lasse Collin,Lasse Collin,2008-04-28 14:08:27,2008-04-28 14:08:27,Updated THANKS.
3be21fb12f4cec2cf07799e8960382f4cb375369,Lasse Collin,Lasse Collin,2008-04-28 14:06:34,2008-04-28 14:06:34,"Fixed wrong spelling ""limitter"" to ""limiter"". This affects
liblzma's API."
beeb81060821dfec4e7898e0d44b7900dcb2215e,Lasse Collin,Lasse Collin,2008-04-25 12:39:50,2008-04-25 12:39:50,"Prevent LZ encoder from hanging with known uncompressed
size. The ""fix"" breaks LZMA_SYNC_FLUSH at end of stream
with known uncompressed size, but since it currently seems
likely that support for encoding with known uncompressed
size will go away anyway, I'm not fixing this problem now."
c324325f9f13cdeb92153c5d00962341ba070ca2,Lasse Collin,Lasse Collin,2008-04-25 10:58:56,2008-04-25 10:58:56,"Removed src/liblzma/common/sysdefs.h symlink, which was
annoying, because ""make dist"" put two copies of sysdefs.h
into the tarball instead of the symlink."
d3ba30243c75c13d094de1793f9c58acdbacc692,Lasse Collin,Lasse Collin,2008-04-25 10:41:29,2008-04-25 10:41:29,Added memusage.c to debug directory.
8f804c29aa8471ccd6438ddca254092b8869ca52,Lasse Collin,Lasse Collin,2008-04-25 10:32:35,2008-04-25 10:32:35,"Bumped version number to 4.999.3alpha. It will become 5.0.0
once we have a stable release (won't be very soon). The
version number is no longer related to version of LZMA SDK.

Made some small Automake-related changes to toplevel
Makefile.am and configure.ac."
c99037ea10f121cbacf60c37a36c29768ae53447,Lasse Collin,Lasse Collin,2008-04-24 17:25:39,2008-04-24 17:25:39,"Fix a memory leak by calling free(extra->data) in
lzma_extra_free()."
22ba3b0b5043fa481903482ce85015fe775939e5,Lasse Collin,Lasse Collin,2008-04-24 17:23:05,2008-04-24 17:23:05,Make unlzma and lzcat symlinks.
17c36422d4cbc2c70d5c83ec389406f92cd9e85e,Lasse Collin,Lasse Collin,2008-04-24 17:20:27,2008-04-24 17:20:27,Fixed a bug in command line option parsing.
283f939974c32c47f05d495e8dea455ec646ed64,Lasse Collin,Lasse Collin,2008-04-24 17:19:20,2008-04-24 17:19:20,Added two assert()s.
eb348a60b6e19a7c093f892434f23c4756973ffd,Lasse Collin,Lasse Collin,2008-04-24 16:22:53,2008-04-24 16:22:53,Switch to uint16_t as the type of range coder probabilities.
6c5306e312bcfd254cf654f88c04e34ba786df3d,Lasse Collin,Lasse Collin,2008-04-24 15:39:57,2008-04-24 15:39:57,Fix wrong return type (uint32_t -> bool).
712cfe3ebfd24df24d8896b1315c53c3bc4369c8,Lasse Collin,Lasse Collin,2008-04-24 15:38:00,2008-04-24 15:38:00,Fix data corruption in LZ encoder with LZMA_SYNC_FLUSH.
bc04486e368d20b3027cde625267762aae063965,Lasse Collin,Lasse Collin,2008-04-24 14:33:01,2008-04-24 14:33:01,Fix fastpos problem in Makefile.am when built with --enable-small.
7ab493924e0ed590a5121a15ee54038d238880d3,Lasse Collin,Lasse Collin,2008-04-24 14:30:51,2008-04-24 14:30:51,"Use 64-bit integer as range encoder's cache size. This fixes a
theoretical data corruption, which should be very hard to trigger
even intentionally."
641998c3e1ecc8b598fe0eb051fab8b9535c291b,Lasse Collin,Lasse Collin,2008-03-24 14:38:40,2008-03-24 14:38:40,"Replaced the range decoder optimization that used arithmetic
right shift with as fast version that doesn't need
arithmetic right shift. Removed the related check from
configure.ac."
ad999efd279d95f1e7ac555b14170e8e9020488c,Lasse Collin,Lasse Collin,2008-03-22 12:39:34,2008-03-22 12:39:34,Take advantage of arithmetic right shift in range decoder.
03e0e8a0d7228b6ff1f0af39e2c040a4e425973d,Lasse Collin,Lasse Collin,2008-03-22 12:18:29,2008-03-22 12:18:29,"Added autoconf check to detect if we can use arithmetic
right shift for optimizations."
7521bbdc83acab834594a22bec50c8e1bd836298,Lasse Collin,Lasse Collin,2008-03-21 23:26:36,2008-03-21 23:26:36,"Update a comment to use the variable name rep_len_decoder.

(And BTW, the previous commit actually did change the
program logic slightly.)"
63b74d000eedaebb8485f623e56864ff5ab71064,Lasse Collin,Lasse Collin,2008-03-21 22:57:33,2008-03-21 22:57:33,"Demystified the ""state"" variable in LZMA code. Use the
word literal instead of char for better consistency.
There are still some names with _char instead of _literal
in lzma_optimum, these may be changed later.

Renamed length coder variables.

This commit doesn't change the program logic."
e6eb0a26757e851cef62b9440319a8e73b015cb9,Lasse Collin,Lasse Collin,2008-03-14 21:16:11,2008-03-14 21:16:11,"Fix data corruption in LZMA encoder. Note that this bug was
specific to liblzma and was *not* present in LZMA SDK."
7d516f5129e4373a6d57249d7f608c634c66bf12,Lasse Collin,Lasse Collin,2008-03-14 19:32:37,2008-03-14 19:32:37,Fix a comment API header.
748d6e4274921a350bd0a317380309717441ef9c,Lasse Collin,Lasse Collin,2008-03-12 21:14:50,2008-03-12 21:14:50,Make lzma_stream.next_in const. Let's see if anyone complains.
bfde3b24a5ae25ce53c854762b6148952386b025,Lasse Collin,Lasse Collin,2008-03-11 13:35:34,2008-03-11 13:35:34,Apply a minor speed optimization to LZMA decoder.
f310c50286d9e4e9c6170bb65348c9bb430a65b4,Lasse Collin,Lasse Collin,2008-03-11 13:17:16,2008-03-11 13:17:16,"Initialize the last byte of the dictionary to zero so that
lz_get_byte(lz, 0) returns zero. This was broken by
1a3b21859818e4d8e89a1da99699233c1bfd197d."
5ead36cf7f823093672a4e43c3180b38c9abbaff,Lasse Collin,Lasse Collin,2008-03-10 13:57:55,2008-03-10 13:57:55,Really fix the price count initialization.
d4d7feb83d1a1ded8f662a82e21e053841ca726c,Lasse Collin,Lasse Collin,2008-03-10 11:47:17,2008-03-10 11:47:17,Updated THANKS.
0541c5ea63ef3c0ff85eeddb0a420e56b0c65258,Lasse Collin,Lasse Collin,2008-03-10 11:46:48,2008-03-10 11:46:48,"Initialize align_price_count and match_price_count in
lzma_encoder_init.c. While we don't call
fill_distances_prices() and fill_align_prices() in
lzma_lzma_encoder_init(), we still need to initialize
these two variables so that the fill functions get
called in lzma_encoder_getoptimum.c in the beginning
of a stream."
596fa1fac72823e4ef5bc26bb53f9090445bf748,Lasse Collin,Lasse Collin,2008-03-10 11:44:29,2008-03-10 11:44:29,"Always initialize lz->temp_size in lz_decoder.c. temp_size did
get initialized as a side-effect after allocating a new decoder,
but not when the decoder was reused."
45e43e169527e7a98a8c8a821d37bf25822b764d,Lasse Collin,Lasse Collin,2008-03-10 11:41:25,2008-03-10 11:41:25,"Don't fill allocated memory with 0xFD when debugging is
enabled. It hides errors from Valgrind."
c0e19e0662205f81a86da8903cdc325d50635870,Lasse Collin,Lasse Collin,2008-02-28 08:24:31,2008-02-28 08:24:31,"Remove two redundant validity checks from the LZMA decoder.
These are already checked elsewhere, so omitting these
gives (very) tiny speed up."
de7485806284d1614095ae8cb2ebbb5d74c9ac45,Lasse Collin,Lasse Collin,2008-02-06 11:25:32,2008-02-06 11:25:32,Tiny clean up to file-format.txt.
1a3b21859818e4d8e89a1da99699233c1bfd197d,Lasse Collin,Lasse Collin,2008-02-02 12:51:06,2008-02-02 12:51:06,"Don't memzero() the history buffer when initializing LZ
decoder. There's no danger of information leak here, so
it isn't required. Doing memzero() takes a lot of time
with large dictionaries, which could make it easier to
construct DoS attack to consume too much CPU time."
7e796e312bf644ea95aea0ff85480f47cfa30fc0,Lasse Collin,Lasse Collin,2008-02-01 06:39:26,2008-02-01 06:39:26,"Do uncompressed size validation in raw encoder. This way
it gets done for not only raw encoder, but also Block
and LZMA_Alone encoders."
7dd48578a3853e0cfab9f1830bc30927173ec4bc,Lasse Collin,Lasse Collin,2008-02-01 06:32:05,2008-02-01 06:32:05,Avoid unneeded function call in raw_common.c.
b596fac963c3ff96f615d4d9b427a213ec341211,Lasse Collin,Lasse Collin,2008-01-26 19:42:38,2008-01-26 19:42:38,Updated THANKS.
e9f6e9c075ad93141a568d94f7d4eb0f2edbd6c2,Lasse Collin,Lasse Collin,2008-01-26 19:40:23,2008-01-26 19:40:23,"Added note.GNU-stack to x86 assembler files. It is needed
when using non-executable stack."
4c7ad179c78f97f68ad548cb40a9dfa6871655ae,Lasse Collin,Lasse Collin,2008-01-26 17:12:50,2008-01-26 17:12:50,"Added api/lzma/easy.h. I had forgot to add this to the
git repo. Thanks to Stephan Kulow."
288b232f54c3692cd36f471d4042f51daf3ea79f,Lasse Collin,Lasse Collin,2008-01-26 09:09:17,2008-01-26 09:09:17,Added more test files.
c467b0defccf233d0c79234407bc38d7d09574d3,Lasse Collin,Lasse Collin,2008-01-26 08:47:55,2008-01-26 08:47:55,Added more test files.
f9842f712732c482f2def9f24437851e57dd83f8,Lasse Collin,Lasse Collin,2008-01-25 22:25:34,2008-01-25 22:25:34,"Return LZMA_HEADER_ERROR if LZMA_SYNC_FLUSH is used with any
of the so called simple filters. If there is demand, limited
support for LZMA_SYNC_FLUSH may be added in future.

After this commit, using LZMA_SYNC_FLUSH shouldn't cause
undefined behavior in any situation."
e988ea1d1a286dd0f27af0657f9665d5cd8573aa,Lasse Collin,Lasse Collin,2008-01-25 21:50:35,2008-01-25 21:50:35,"Added more Multi-Block test files. Improved some
descriptions in the test files' README."
4441e004185cd4c61bda184010eca5924c9dec87,Lasse Collin,Lasse Collin,2008-01-25 21:12:36,2008-01-25 21:12:36,"Combine lzma_options_block validation needed by both Block
encoder and decoder, and put the shared things to
block_private.h. Improved the checks a little so that
they may detect too big Compressed Size at initialization
time if lzma_options_block.total_size or .total_limit is
known.

Allow encoding and decoding Blocks with combinations of
fields that are not allowed by the file format specification.
Doing this requires that the application passes such a
combination in lzma_options_lzma; liblzma doesn't do that,
but it's not impossible that someone could find them useful
in some custom file format."
bf4200c818fcf9102e56328d39cde91bfa13cfb6,Lasse Collin,Lasse Collin,2008-01-25 17:21:22,2008-01-25 17:21:22,Added test_memlimit.c.
7b8fc7e6b501a32a36636dac79ecb57099269005,Lasse Collin,Lasse Collin,2008-01-25 17:20:28,2008-01-25 17:20:28,"Improved the memory limitter:
  - Added lzma_memlimit_max() and lzma_memlimit_reached()
    API functions.
  - Added simple estimation of malloc()'s memory usage
    overhead.
  - Fixed integer overflow detection in lzma_memlimit_alloc().
  - Made some white space cleanups and added more comments.

The description of lzma_memlimit_max() in memlimit.h is bad
and should be improved."
e0c3d0043da2f670cfdb1abbb3223d5a594ad8db,Lasse Collin,Lasse Collin,2008-01-25 11:55:52,2008-01-25 11:55:52,Use more parenthesis in succeed() macro in tests/tests.h.
1fd76d488179580d37f31ee11948f4932aed31fd,Lasse Collin,Lasse Collin,2008-01-24 12:49:34,2008-01-24 12:49:34,Added more Multi-Block Stream test files.
6e27b1098a28f4ce09bfa6df68ad94182dfc2936,Lasse Collin,Lasse Collin,2008-01-23 22:46:05,2008-01-23 22:46:05,Added bunch of test files containing Multi-Block Streams.
db9df0a9609c01a00a227329fb96e983971040f5,Lasse Collin,Lasse Collin,2008-01-23 21:43:00,2008-01-23 21:43:00,"Fix decoding of empty Metadata Blocks, that don't have
even the Metadata Flags field. Earlier the code allowed
such files; now they are prohibited as the file format
specification requires."
765f0b05f6e95ed9194fb90819cee189ebbac36b,Lasse Collin,Lasse Collin,2008-01-23 21:38:18,2008-01-23 21:38:18,"Fix a bug related to 99e12af4e2b866c011fe0106cd1e0bfdcc8fe9c6.
lzma_metadata.header_metadata_size was not properly set to
zero if the Metadata had only the Metadata Flags field."
3a7cc5c3dec7b078941f961b0393b86c418883b6,Lasse Collin,Lasse Collin,2008-01-23 21:35:49,2008-01-23 21:35:49,Fix decoding of Extra Records that have empty Data.
e5fdec93e273855c1bcc2579b83cfb481a9a1492,Lasse Collin,Lasse Collin,2008-01-23 20:02:38,2008-01-23 20:02:38,"Add the trailing '\0' to lzma_extra.data as the API header
already documents."
ed40dc5a2c28a8dfccab8c165b3780738eeef93e,Lasse Collin,Lasse Collin,2008-01-23 19:21:21,2008-01-23 19:21:21,Added debug/full_flush.c.
ae0cd09a666a1682da8fc09487322227679e218d,Lasse Collin,Lasse Collin,2008-01-23 19:05:33,2008-01-23 19:05:33,"Return LZMA_STREAM_END instead of LZMA_OK if
LZMA_SYNC_FLUSH or LZMA_FULL_FLUSH is used when
there's no unfinished Block open."
0e80ded13dfceb98f9494cbb5381a95eb44d03db,Lasse Collin,Lasse Collin,2008-01-23 18:05:01,2008-01-23 18:05:01,"Added bad-single-none-footer_filter_flags.lzma and
bad-single-none-too_long_vli.lzma."
8c8eb14055d8dd536b1b1c58fb284d34bb8ed1dd,Lasse Collin,Lasse Collin,2008-01-23 11:42:35,2008-01-23 11:42:35,Fixed a typo.
980f65a9a10160c4d105767871e3002b9aaba3e0,Lasse Collin,Lasse Collin,2008-01-23 11:40:45,2008-01-23 11:40:45,Fix a memory leak in the Subblock encoder.
99e12af4e2b866c011fe0106cd1e0bfdcc8fe9c6,Lasse Collin,Lasse Collin,2008-01-23 11:36:07,2008-01-23 11:36:07,"Fix Size of Header Metadata Block handling. Now
lzma_metadata.header_metadata_size == LZMA_VLI_VALUE_UNKNOWN
is not allowed at all. To indicate missing Header Metadata
Block, header_metadata_size must be set to zero. This is
what Metadata decoder does after this patch too.

Note that other missing fields in lzma_metadata are still
indicated with LZMA_VLI_VALUE_UNKNOWN. This isn't as
illogical as it sounds at first, because missing Size of
Header Metadata Block means that Header Metadata Block is
not present in the Stream. With other Metadata fields,
a missing field means only that the value is unknown."
58b78ab20c1bcced45cf71ae6684868fc90b4b81,Lasse Collin,Lasse Collin,2008-01-23 11:15:55,2008-01-23 11:15:55,Fix a memory leak in metadata_decoder.c.
4d8cdbdab44400fd98f0f18a0f701e27cd1acdae,Lasse Collin,Lasse Collin,2008-01-23 11:13:58,2008-01-23 11:13:58,"Fix the fix 863028cb7ad6d8d0455fa69348f56b376d7b908f which
just moved to problem. Now it's really fixed."
67321de963ccf69410b3868b8e31534fe18a90de,Lasse Collin,Lasse Collin,2008-01-22 22:21:04,2008-01-22 22:21:04,"Take advantage of return_if_error() macro in
lzma_info_metadata_set() in info.c."
863028cb7ad6d8d0455fa69348f56b376d7b908f,Lasse Collin,Lasse Collin,2008-01-22 22:18:32,2008-01-22 22:18:32,Fixed a dangling pointer that caused invalid free().
cf49f42a6bd40143f54a6b10d6e605599e958c0b,Lasse Collin,Lasse Collin,2008-01-22 20:49:24,2008-01-22 20:49:24,"Added lzma_easy_* functions. These should make using
liblzma as easy as using zlib, because the easy API
don't require developers to know any fancy LZMA options.

Note that Multi-Block Stream encoding is currently broken.
The easy API should be OK, the bug(s) are elsewhere."
1747b85a43abc1c3f152dbd349be2ef4089ecf6a,Lasse Collin,Lasse Collin,2008-01-22 19:16:22,2008-01-22 19:16:22,Fix Multi-Block Stream encoder's EOPM usage.
0ed6f1adcea540fb9593ca115d36de537f7f0dc6,Lasse Collin,Lasse Collin,2008-01-21 22:15:11,2008-01-21 22:15:11,Made lzma_extra pointers const in lzma_options_stream.
305afa38f64c75af8e81c4167e2d8fa8d85b53a4,Lasse Collin,Lasse Collin,2008-01-20 18:15:21,2008-01-20 18:15:21,Updated debug/sync_flush.c.
d53e9b77054cfade6a643e77d085273a348b189c,Lasse Collin,Lasse Collin,2008-01-20 18:14:26,2008-01-20 18:14:26,Added debug/repeat.c.
107259e306bcfc2336a0fb870fb58034c28faa52,Lasse Collin,Lasse Collin,2008-01-20 18:12:58,2008-01-20 18:12:58,"Fix alignment handling bugs in Subblock encoder.

This leaves one known alignment bug unfixed: If repeat count
doesn't fit into 28-bit integer, the encoder has to split
this to multiple Subblocks with Subblock Type `Repeating Data'.
The extra Subblocks may have wrong alignment. Correct alignment
is restored after the split Repeating Data has been completely
written out.

Since the encoder doesn't even try to fix the alignment unless
the size of Data is at least 4 bytes, to trigger this bug you
need at least 4 GiB of repeating data with sequence length of
4 or more bytes. Since the worst thing done by this bug is
misaligned data (no data corruption), this bug simply isn't
worth fixing, because a proper fix isn't simple."
e141fe18950400faaa3503ff88ac20eacd73e88c,Lasse Collin,Lasse Collin,2008-01-19 19:16:33,2008-01-19 19:16:33,"Implemented LZMA_SYNC_FLUSH support to the Subblock encoder.
The API for handing Subfilters was changed to make it
consistent with LZMA_SYNC_FLUSH.

A few sanity checks were added for Subfilter handling. Some
small bugs were fixed. More comments were added."
23c227a864a3b69f38c6a74306161d4e6918d1cc,Lasse Collin,Lasse Collin,2008-01-19 13:19:21,2008-01-19 13:19:21,"Revised the Delta filter implementation. The initialization
function is still shared between encoder and decoder, but the
actual coding is in separate files for encoder and decoder.

There are now separate functions for the actual delta
calculation depending on if Delta is the last filter in the
chain or not. If it is the last, the new code copies the
data from input to output buffer and does the delta
calculation at the same time. The old code first copied the
data, then did the delta in the target buffer, which required
reading through the data twice.

Support for LZMA_SYNC_FLUSH was added to the Delta encoder.
This doesn't change anything in the file format."
61dc82f3e306b25ce3cd3d529df9ec7a0ec04b73,Lasse Collin,Lasse Collin,2008-01-18 18:18:08,2008-01-18 18:18:08,"Added the debug directory and the first debug tool
(sync_flush). These tools are not built unless the
user runs ""make"" in the debug directory."
0ae3208db94585eb8294b97ded387de0a3a07646,Lasse Collin,Lasse Collin,2008-01-18 18:13:00,2008-01-18 18:13:00,Added test files to test usage of flush marker in LZMA.
ab5feaf1fcc146ef9fd39360c53c290bec39524e,Lasse Collin,Lasse Collin,2008-01-18 18:02:52,2008-01-18 18:02:52,"Fix LZMA_SYNC_FLUSH handling in LZ and LZMA encoders.
That code is now almost completely in LZ coder, where
it can be shared with other LZ77-based algorithms in
future."
079c4f7fc26b3d0b33d9ae7536697b45f3b73585,Lasse Collin,Lasse Collin,2008-01-18 15:21:24,2008-01-18 15:21:24,"Don't add -g to CFLAGS when --enable-debug is specified.
It's the job of the user to put that in CFLAGS."
61d1784d8f1761d979a6da6e223e279ca33815e6,Lasse Collin,Lasse Collin,2008-01-18 12:17:37,2008-01-18 12:17:37,"Set stdin and stdout to binary mode on Windows. This patch is
a forward port of b7b22fcb979a16d3a47c8001f058c9f7d4416068
from lzma-utils-legacy.git. I don't know if the new code base
builds on Windows, but this is a start."
c9cba976913e55ff9aac8a8133cc94416c7c1c9c,Lasse Collin,Lasse Collin,2008-01-17 22:50:29,2008-01-17 22:50:29,"Added test_compress.sh and bunch of files needed by it.
This new set of tests compress and decompress several
test files with many different compression options.
This set of tests will be extended later."
33be3c0e24d8f43376ccf71cc77d53671e792f07,Lasse Collin,Lasse Collin,2008-01-17 16:56:53,2008-01-17 16:56:53,"Subblock decoder: Don't exit the main loop in decode_buffer()
too early if we hit End of Input while decoding a Subblock of
type Repeating Data. To keep the loop termination condition
elegant, the order of enumerations in coder->sequence were
changed.

To keep the case-labels in roughly the same order as the
enumerations in coder->sequence, large chunks of code was
moved around. This made the diff big and ugly compared to
the amount of the actual changes made."
b254bd97b1cdb68d127523d91ca9e054ed89c4fd,Lasse Collin,Lasse Collin,2008-01-17 15:39:42,2008-01-17 15:39:42,"Fix wrong too small size of argument unfiltered_max
in ia64_coder_init(). It triggered assert() in
simple_coder.c, and could have caused a buffer overflow.

This error was probably a copypaste mistake, since most
of the simple filters use unfiltered_max = 4."
8f5794c8f1a30e8e3b524b415bbe81af2e04c64a,Lasse Collin,Lasse Collin,2008-01-17 15:27:45,2008-01-17 15:27:45,"Added --delta to the output of ""lzma --help""."
f88590e0014b38d40465937c19f25f05f16c79ae,Lasse Collin,Lasse Collin,2008-01-17 11:14:20,2008-01-17 11:14:20,"Fix Subblock docoder: If Subblock filter was used with known
Uncompressed Size, and the last output byte was from RLE,
the code didn't stop decoding as it should have done."
bc0b945ca376e333077644d2f7fd54c2848aab8a,Lasse Collin,Lasse Collin,2008-01-16 14:33:37,2008-01-16 14:33:37,Tiny non-technical edits to file-format.txt.
7599bb7064ccf007f054595dedda7927af868252,Lasse Collin,Lasse Collin,2008-01-16 12:48:04,2008-01-16 12:48:04,Plugged a memory leak in stream_decoder.c.
0b581539311f3712946e81e747839f8fb5f441a7,Lasse Collin,Lasse Collin,2008-01-16 12:47:27,2008-01-16 12:47:27,Added memory leak detection to lzmadec.c.
5b5b13c7bb8fde6331064d21f3ebde41072480c4,Lasse Collin,Lasse Collin,2008-01-16 12:46:50,2008-01-16 12:46:50,Added lzma_memlimit_count().
19389f2b82ec54fd4c847a18f16482e7be4c9887,Lasse Collin,Lasse Collin,2008-01-16 12:31:44,2008-01-16 12:31:44,Added ARRAY_SIZE(array) macro.
9bc33a54cbf83952130adbcb1be32c6882485416,Lasse Collin,Lasse Collin,2008-01-16 11:27:03,2008-01-16 11:27:03,"Make Uncompresed Size validation more strict
in alone_decoder.c."
01d71d60b79027e1ce3eb9c79ae5191e1407c883,Lasse Collin,Lasse Collin,2008-01-15 15:46:59,2008-01-15 15:46:59,"Free the allocated memory in lzmadec if debugging is
enabled. This should make it possible to detect possible
memory leaks with Valgrind."
8235e6e5b2878f76633afcda9a334640db503ef5,Lasse Collin,Lasse Collin,2008-01-15 14:25:38,2008-01-15 14:25:38,Fix memory leaks from test_block_header.c.
f10fc6a69d40b6d5c9cfbf8d3746f49869c2e2f6,Lasse Collin,Lasse Collin,2008-01-15 12:23:35,2008-01-15 12:23:35,"Use fastpos.h when encoding LZMA dictionary size in
Filter Flags encoder."
e5728142a2048979f5c0c2149ce71ae952a092e1,Lasse Collin,Lasse Collin,2008-01-15 12:02:22,2008-01-15 12:02:22,"Revised the fastpos code. It now uses the slightly faster
table-based version from LZMA SDK 4.57. This should be
fast on most systems.

A simpler and smaller alternative version is also provided.
On some CPUs this can be even a little faster than the
default table-based version (see comments in fastpos.h),
but on most systems the table-based code is faster."
10437b5b567f6a025ff16c45a572e417a0a9cc26,Lasse Collin,Lasse Collin,2008-01-15 11:32:13,2008-01-15 11:32:13,Added bsr.h.
f3c88e8b8d8dd57f4bba5f0921eebf276437c244,Lasse Collin,Lasse Collin,2008-01-15 11:29:14,2008-01-15 11:29:14,"Fixed assembler detection in configure.ac, and added
detection for x86_64."
54ec204f58287f50d3976288295da4188a19192b,Lasse Collin,Lasse Collin,2008-01-15 10:20:41,2008-01-15 10:20:41,"Omit invalid space from printf() format string
in price_table_gen.c."
01b4b19f49f00e17a0f9cb8754c672ac0847b6e1,Lasse Collin,Lasse Collin,2008-01-15 07:54:34,2008-01-15 07:54:34,Removed a few unused macros from lzma_common.h.
19bd7f3cf25e4ff8487ef7098ca4a7b58681961d,Lasse Collin,Lasse Collin,2008-01-15 06:37:42,2008-01-15 06:37:42,Fix a typo in lzma_encoder.c.
9f9b1983013048f2142e8bc7e240149d2687bedc,Lasse Collin,Lasse Collin,2008-01-15 06:36:25,2008-01-15 06:36:25,"Convert bittree_get_price() and bittree_reverse_get_price()
from macros to inline functions."
78e85cb1a7667c54853670d2eb09d754bcbda87d,Lasse Collin,Lasse Collin,2008-01-15 05:44:59,2008-01-15 05:44:59,Fix CRC code in case --enable-small is used.
949d4346e2d75bcd9dcb66c394d8d851d8db3aa0,Lasse Collin,Lasse Collin,2008-01-15 05:41:39,2008-01-15 05:41:39,Fix typo in test_index.c.
d13d693155c176fc9e9ad5c50d48ccba27c2d9c6,Lasse Collin,Lasse Collin,2008-01-15 05:40:21,2008-01-15 05:40:21,Added precomputed range coder probability price table.
362dc3843b373c1007a50a4719f378981f18ae03,Lasse Collin,Lasse Collin,2008-01-14 11:42:43,2008-01-14 11:42:43,"Remove RC_BUFFER_SIZE from lzma_encoder_private.h
and replace it with a sanity check."
e22b37968d153683fec61ad37b6b160cb7ca4ddc,Lasse Collin,Lasse Collin,2008-01-14 11:39:54,2008-01-14 11:39:54,"Major changes to LZ encoder, LZMA encoder, and range encoder.
These changes implement support for LZMA_SYNC_FLUSH in LZMA
encoder, and move the temporary buffer needed by range encoder
from lzma_range_encoder structure to lzma_lz_encoder."
b59ef3973781f892c0a72b5e5934194567100be5,Lasse Collin,Lasse Collin,2008-01-14 11:34:29,2008-01-14 11:34:29,Added one assert() to process.c of the command line tool.
9547e734a00ddb64c851fa3f116e4f9e7d763ea7,Lasse Collin,Lasse Collin,2008-01-14 10:09:52,2008-01-14 10:09:52,"Don't use coder->lz.stream_end_was_reached in assertions
in match_c.h."
3e09e1c05871f3757f759b801890ccccc9286608,Lasse Collin,Lasse Collin,2008-01-14 10:08:02,2008-01-14 10:08:02,"In lzma_read_match_distances(), don't use
coder->lz.stream_end_was_reached. That variable
will be removed, and the check isn't required anyway.
Rearrange the check so that it doesn't make one to
think that there could be an integer overflow."
a670fec8021e5962429689c194148a04c3418872,Lasse Collin,Lasse Collin,2008-01-14 09:56:41,2008-01-14 09:56:41,Small LZMA_SYNC_FLUSH fixes to Block and Single-Stream encoders.
3599dba9570a6972a16b6398d6c838e9b420e985,Lasse Collin,Lasse Collin,2008-01-14 09:54:56,2008-01-14 09:54:56,More fixes to LZMA decoder's flush marker handling.
f73c2ab6079ed5675a42b39d584a567befbd4624,Lasse Collin,Lasse Collin,2008-01-10 15:13:42,2008-01-10 15:13:42,"Eliminate lzma_lz_encoder.must_move_pos. It's needed
only in one place which isn't performance criticial."
382808514a42b2f4b4a64515e2dfb3fc1bc48ecd,Lasse Collin,Lasse Collin,2008-01-09 18:05:57,2008-01-09 18:05:57,"Define HAVE_ASM_X86 when x86 assembler optimizations are
used. This #define will be useful for inline assembly."
0e70fbe4032351aab13a1cd8e5deced105c0b276,Lasse Collin,Lasse Collin,2008-01-09 10:06:46,2008-01-09 10:06:46,"Added good-single-none-empty_3.lzma and
bad-single-none-empty.lzma."
379fbbe84d922c7cc00afa65c6f0c095da596b19,Lasse Collin,Lasse Collin,2008-01-08 21:11:59,2008-01-08 21:11:59,Take advantage of return_if_error() in block_decoder.c.
97d5fa82077e57815dfad995dc393c2809a78539,Lasse Collin,Lasse Collin,2008-01-08 21:10:57,2008-01-08 21:10:57,Updated tests/files/README.
3bb9bb310936cba6a743b4f06739a397dec7c28f,Lasse Collin,Lasse Collin,2008-01-08 21:05:40,2008-01-08 21:05:40,Added test files with empty Compressed Data.
7054c5f5888ac6a7178cd43dc9583ce6c7e78c9f,Lasse Collin,Lasse Collin,2008-01-08 20:58:42,2008-01-08 20:58:42,Fix decoding of Blocks that have only Block Header.
753e4d95cd1cf29c632dfe1a670af7c67aeffbf4,Lasse Collin,Lasse Collin,2008-01-08 20:27:46,2008-01-08 20:27:46,Added good-single-subblock_implicit.lzma.
faeac7b7aca75f86afed1e7cc06279d9d497c627,Lasse Collin,Lasse Collin,2008-01-08 16:50:30,2008-01-08 16:50:30,"Disable CRC32 from Block Headers when --check=none
has been specified."
a751126dbb656767ed4666cf0e5d3e17349d93d1,Lasse Collin,Lasse Collin,2008-01-08 11:36:29,2008-01-08 11:36:29,"Fixed encoding of empty files. Arguments to is_size_valid()
were in wrong order in block_encoder.c."
9080267603b1006c4867c823307dca9df8be0d20,Lasse Collin,Lasse Collin,2008-01-08 11:35:36,2008-01-08 11:35:36,Added a few test files.
b4943ccf73b64fc93a90a23474509c316f55eb2b,Lasse Collin,Lasse Collin,2008-01-08 10:29:58,2008-01-08 10:29:58,"Avoid using ! in test_files.sh, because that doesn't work
with some ancient /bin/sh versions."
e2417b2b9134f3f65e14b61e23cd3644d8954353,Lasse Collin,Lasse Collin,2008-01-07 22:48:30,2008-01-07 22:48:30,"More pre-C99 inttypes.h compatibility fixes. Now the code
should work even if the system has no inttypes.h."
5d227e51c23639423f4ade06aabb54e131f8505e,Lasse Collin,Lasse Collin,2008-01-07 21:25:32,2008-01-07 21:25:32,Updated fi.po although it's currently pretty much crap.
c7189d981a1b27c63da0c1ee80d9b5cd8ce1733d,Lasse Collin,Lasse Collin,2008-01-07 21:14:25,2008-01-07 21:14:25,"Test for $GCC = yes instead of if it is non-empty. This
way it is possible to use ac_cv_c_compiler_gnu=no to
force configure to think it is using non-GNU C compiler."
3dbbea82b74bb841c995ad332a3aeca613015e10,Lasse Collin,Lasse Collin,2008-01-07 19:49:41,2008-01-07 19:49:41,"Added test_files.sh to tests/Makefile.am so it gets
included in the tarball with ""make dist""."
2fd2d181543feab1b4003f3ac6e85625fbee04f0,Lasse Collin,Lasse Collin,2008-01-07 16:22:24,2008-01-07 16:22:24,Cosmetic edit to test_files.sh.
9a71d573100a990ceb30ce0bec6a9a15d795605f,Lasse Collin,Lasse Collin,2008-01-07 16:09:44,2008-01-07 16:09:44,Added tests/files/README.
47f48fe9936ed72617a60fbd015df7e0e47a1e43,Lasse Collin,Lasse Collin,2008-01-07 12:20:57,2008-01-07 12:20:57,"Tell in COPYING that everything in tests/files is
public domain."
3502b3e1d00251d3c8dda96079440705c28d8225,Lasse Collin,Lasse Collin,2008-01-07 12:19:05,2008-01-07 12:19:05,Cleaned up the tests/files directory.
908b2ac604b9940369d7fe8a45e9eb6da5d2a24c,Lasse Collin,Lasse Collin,2008-01-07 11:49:19,2008-01-07 11:49:19,"Added test_files.sh to test decoding of the files in
the tests/files directory. It doesn't test the malicious
files yet."
ecb2a6548f5978022a8fa931719dc575f5fd3bf6,Lasse Collin,Lasse Collin,2008-01-07 09:23:13,2008-01-07 09:23:13,Updated README regarding the assembler optimizations.
eacb8050438d3e6146c86eb9732d3fb1ef1825cb,Lasse Collin,Lasse Collin,2008-01-07 08:58:00,2008-01-07 08:58:00,Updated THANKS.
1239649f96132b18e3b7e2dd152ecf53a195caa8,Lasse Collin,Lasse Collin,2008-01-06 19:47:17,2008-01-06 19:47:17,Cosmetic changes to configure.ac.
88ee301ec2e4506a30ec7ac9aaa2288e2dcadd0e,Lasse Collin,Lasse Collin,2008-01-06 17:46:38,2008-01-06 17:46:38,"Automatically disable assembler code on Darwin x86.
Darwin has different ABI than GNU+Linux and Solaris,
thus the assembler code doesn't assemble on Darwin."
c15a7abf66e3a70792f7444115e484c7981c8284,Lasse Collin,Lasse Collin,2008-01-06 17:45:27,2008-01-06 17:45:27,"With printf(), use PRIu64 with a cast to uint64_t instead
of %zu, because some pre-C99 libc versions don't support %zu."
4e7e54c4c522ab2f6a7abb92cefc4f707e9568fb,Lasse Collin,Lasse Collin,2008-01-06 14:27:41,2008-01-06 14:27:41,"Introduced compatibility with systems that have pre-C99
or no inttypes.h. This is useful when the compiler has
good enough support for C99, but libc headers don't.

Changed liblzma API so that sys/types.h and inttypes.h
have to be #included before #including lzma.h. On systems
that don't have C99 inttypes.h, it's the problem of the
applications to provide the required types and macros
before #including lzma.h.

If lzma.h defined the missing types and macros, it could
conflict with third-party applications whose configure
has detected that the types are missing and defined them
in config.h already. An alternative would have been
introducing lzma_uint32 and similar types, but that would
just be an extra pain on modern systems."
a71864f77dfb76b5d78a270641539947c312583a,Lasse Collin,Lasse Collin,2008-01-05 17:57:00,2008-01-05 17:57:00,Fix typo in comment (INT64_MAX -> UINT64_MAX).
072927905a3b66281c6311b4b351caa501d8b73a,Lasse Collin,Lasse Collin,2008-01-05 17:42:04,2008-01-05 17:42:04,Rearranged testing of GCC-specific flags.
d160ee32598c6d1cd9054ef019e8c9331208b188,Lasse Collin,Lasse Collin,2008-01-04 23:20:24,2008-01-04 23:20:24,Another bug fix for flush marker detection.
fc67f79f607cbfa78c6f47a69dec098d8659b162,Lasse Collin,Lasse Collin,2008-01-04 19:37:01,2008-01-04 19:37:01,Fix stupid bugs in flush marker detection.
0029cbbabe87d491fc046a55a629a6d556010baa,Lasse Collin,Lasse Collin,2008-01-04 19:30:33,2008-01-04 19:30:33,"Added support for flush marker, which will be in files
that use LZMA_SYNC_FLUSH with encoder (not implemented
yet). This is a new feature in the raw LZMA format,
which isn't supported by old decoders. This shouldn't
be a problem in practice, since lzma_alone_encoder()
will not allow LZMA_SYNC_FLUSH, and thus not allow
creating files on decodable with old decoders.

Made lzma_decoder.c to require tab width of 4 characters
if one wants to fit the code in 80 columns. This makes
the code easier to read."
bbfd1f6ab058a7e661545205befcb7f70c5685ab,Lasse Collin,Lasse Collin,2008-01-04 18:45:05,2008-01-04 18:45:05,"Moved range decoder initialization (reading the first
five input bytes) from LZMA decoder to range decoder
header. Did the same for decoding of direct bits."
5db745cd2a74f6ed2e52f5c716c08ed0daf17ebc,Lasse Collin,Lasse Collin,2007-12-14 09:15:21,2007-12-14 09:15:21,"Added a note to README that --disable-assembler
must be used on Darwin."
44b333d4615b5aabc557a0e1b6bb0096da3fae24,Lasse Collin,Lasse Collin,2007-12-14 08:07:10,2007-12-14 08:07:10,"Use the filename suffix .S instead of .s for assembler files
so that the preprocessor removes the /* */ style comments,
which are not supported by some non-GNU assemblers (Solaris)
that otherwise work with this code."
ec1c82b2e82f395f6e8e19ac212a639644330cd7,Lasse Collin,Lasse Collin,2007-12-14 07:59:05,2007-12-14 07:59:05,Fixed wrong symbol name in crc64_x86.s.
2881570df6803eed2fe550af34574e8e61794804,Lasse Collin,Lasse Collin,2007-12-14 07:53:24,2007-12-14 07:53:24,"Use .globl instead of .global in x86 assembler code for
better portability. Still needs fixing the commenting."
698470b8f33fc0e5f27dafa93b39b6dd5dde5a66,Lasse Collin,Lasse Collin,2007-12-13 18:14:37,2007-12-13 18:14:37,"Fixed a few short options that take an argument.
short_opts[] was missing colons to indicate
required argument. Thanks to Fabio Pedretti for
the bug report."
918bcb0e0728d2d976621e9f35b56f224f11d989,Lasse Collin,Lasse Collin,2007-12-11 15:08:04,2007-12-11 15:08:04,Removed uncompressed size tracking from Delta encoder too.
3e16d51dd645667b05ff826665b1fc353aa41cd9,Lasse Collin,Lasse Collin,2007-12-11 14:49:19,2007-12-11 14:49:19,"Remove uncompressed size tracking from the filter encoders.
It's not strictly needed there, and just complicates the
code. LZ encoder never even had this feature.

The primary reason to have uncompressed size tracking in
filter encoders was validating that the application
doesn't give different amount of input that it had
promised. A side effect was to validate internal workings
of liblzma.

Uncompressed size tracking is still present in the Block
encoder. Maybe it should be added to LZMA_Alone and raw
encoders too. It's simpler to have one coder just to
validate the uncompressed size instead of having it
in every filter."
5286723e0d1ac386d5b07f08d78e61becf895a5a,Lasse Collin,Lasse Collin,2007-12-11 12:10:53,2007-12-11 12:10:53,"Get rid of no-NLS gnulib. I don't know how to get it
working with Automake. People who want smaller lzmadec
should use --disable-nls on non-GNU systems."
ce8b036a6c7a43b290356b673d953f6d76b2be64,Lasse Collin,Lasse Collin,2007-12-11 12:09:35,2007-12-11 12:09:35,"Fixed a typo in tests/Makefile.am which prevented
building the tests if gnulib was needed."
7c1ad41eb611ed89e5bb8792a3beb533b7aa59f4,Lasse Collin,Lasse Collin,2007-12-11 09:18:58,2007-12-11 09:18:58,Fixed wrong type of flags_size in Subblock encoder.
ce64df716243fdc40359090d1f6541f3a4f5f21a,Lasse Collin,Lasse Collin,2007-12-10 18:44:16,2007-12-10 18:44:16,Bumped version number to 4.42.3alpha.
b499a0403ea5c41d6a25b40275eb6c57643052ce,Lasse Collin,Lasse Collin,2007-12-10 13:02:50,2007-12-10 13:02:50,"Disabled some unneeded warnings and made ""make dist"" work."
2ab8adb5165a0b77114a7eb21f9ff1e6a266f172,Lasse Collin,Lasse Collin,2007-12-09 19:43:15,2007-12-09 19:43:15,Added LZMA_SYNC_FLUSH support to the Copy filter.
329c272d501e88793dda5540358d55c12428d194,Lasse Collin,Lasse Collin,2007-12-09 15:14:07,2007-12-09 15:14:07,"Added missing LZMA_API to the C versions of the CRC functions.
The x86 assembler versions were already OK."
c90daf86ce683fa8cf80491d624ffb158dfbd9d7,Jim Meyering,Lasse Collin,2007-12-09 14:34:25,2007-12-09 15:07:01,* tests/test_block_header.c (test3): Remove duplicate initializer.
07ac881779a8477f2c1ab112b91a129e24aa743c,Lasse Collin,Lasse Collin,2007-12-09 15:06:45,2007-12-09 15:06:45,"Take advantage of return_if_error() macro in more places.
Cleaned Subblock filter's initialization code too."
41338717964f510ee61d70b25bd4c502ec9f77cf,Lasse Collin,Lasse Collin,2007-12-09 10:13:01,2007-12-09 10:13:01,Added a bunch of .lzma test files.
ff946ceb7975d4f11950afd33f6315b4d20d1a03,Lasse Collin,Lasse Collin,2007-12-09 09:24:48,2007-12-09 09:24:48,"Re-enabled the security checks in Subblock decoder
that were disabled for debugging reasons."
2bf36d22d2c24ac3f488e63b35564fa2f6dab8d1,Lasse Collin,Lasse Collin,2007-12-09 09:03:28,2007-12-09 09:03:28,Fixed the tests to build with -Werror.
5d018dc03549c1ee4958364712fb0c94e1bf2741,Lasse Collin,Lasse Collin,2007-12-08 22:42:33,2007-12-08 22:42:33,Imported to git.
