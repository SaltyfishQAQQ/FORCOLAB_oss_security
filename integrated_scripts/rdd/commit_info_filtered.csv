sha,author_name,committer_name,author_date,committer_date,commit_message
af071ef7702debef4f1d324616a0137a5001c14c,Jia Tan,Jia Tan,2024-03-25 17:50:02,2024-03-25 19:38:12,Docs: Simplify SECURITY.md.
0b99783d63f27606936bb79a16c52d0d70c0b56f,Lasse Collin,Lasse Collin,2024-03-22 15:46:30,2024-03-22 15:46:30,liblzma: memcmplen.h: Add a comment why subtraction is used.
8a25ba024d55610c448c6e4f1400a00bae51b493,Lasse Collin,Lasse Collin,2024-03-15 15:43:39,2024-03-15 16:04:10,INSTALL: Document arguments of --enable-symbol-versions.
49324b711f9d42b3543bf2f3ae598eaa03360bd5,Lasse Collin,Lasse Collin,2024-03-15 15:15:50,2024-03-15 16:04:10,"Build: Use only the generic symbol versioning with NVIDIA HPC Compiler.

This does the previous commit with CMake.

AC_EGREP_CPP uses AC_REQUIRE so the outermost if-commands must
be changed to AS_IF to ensure that things wont break some day.
See 5a5bd7f871818029d5ccbe189f087f591258c294."
c273123ed0ebaebf49994057a7fe98aae7f42c40,Lasse Collin,Lasse Collin,2024-03-15 14:36:35,2024-03-15 16:04:10,"CMake: Use only the generic symbol versioning with NVIDIA HPC Compiler.

It doesn't support the __symver__ attribute or __asm__("".symver ..."").
The generic symbol versioning can still be used since it only needs
linker support."
df7f487648d18a3992386a59b8a061edca862d17,Lasse Collin,Lasse Collin,2024-03-13 19:38:24,2024-03-15 16:04:10,Update THANKS.
3217b82b3ec023bf8338249134a076bea0ea30ec,Lasse Collin,Lasse Collin,2024-03-13 19:30:18,2024-03-15 16:03:47,liblzma: Minor comment edits.
096bc0e3f8fb4bfc4d2f3f64a7f219401ffb4c31,Sergey Kosukhin,Lasse Collin,2024-03-13 12:07:13,2024-03-15 15:30:50,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).

NVHPC compiler has several issues that make it impossible to
build liblzma:
  - the compiler cannot handle unions that contain pointers that
    are not the first members;
  - the compiler cannot handle the assembler code in range_decoder.h
    (LZMA_RANGE_DECODER_CONFIG has to be set to zero);
  - the compiler fails to produce valid code for delta_decode if the
    vectorization is enabled, which results in failed tests.

This introduces NVHPC-specific workarounds that address the issues."
2ad7fad67080e88fa7fc191f9d613d8b7add9c62,Lasse Collin,Lasse Collin,2024-03-13 19:17:10,2024-03-15 15:30:50,"CMake: Disable symbol versioning on non-glibc Linux.

This better matches what configure.ac does. For example, musl has
only basic symbol versioning support:

https://wiki.musl-libc.org/functional-differences-from-glibc.html#Symbol_versioning

configure.ac tries to enable symbol versioning only with glibc
so now CMake does the same."
82f0c0d39eb2c026b1d96ee706f70ace868d4ed4,Lasse Collin,Lasse Collin,2024-03-13 18:32:46,2024-03-15 15:30:50,CMake: Make symbol versioning configurable.
45d33bfc45e4295b8ad743bc2ae61cc724f98076,Lasse Collin,Lasse Collin,2024-03-13 17:47:36,2024-03-13 20:00:23,"Build: Style tweaks to configure.ac.

The AC_MSG_ERROR line is overlong anyway as are a few other
AC_MSG_ERROR lines already."
f56ed6fac6619b56b005878d3b5210e2f0d721c0,Sergey Kosukhin,Lasse Collin,2024-03-12 19:03:49,2024-03-13 19:59:55,"Build: Let the users override the symbol versioning variant.

There are cases when the users want to decide themselves whether
they want to have the generic (even on GNU/Linux) or the linux
(even if we do not recommend that) symbol versioning variant.
The former might be needed to circumvent compiler issues (i.e.
the compiler does not support all features that are required
for the linux versioning), the latter might help in overriding
the assumptions made in the configure script."
a4f2e20d8466369b1bb277c66f75c9e4ba9cc378,Jia Tan,Jia Tan,2024-03-09 03:27:27,2024-03-09 03:27:27,Add NEWS for 5.6.1
f01be8ad754a905d8c418601767480ec11621b02,Jia Tan,Jia Tan,2024-03-09 02:43:20,2024-03-09 02:43:20,Translations: Add missing --riscv option to man page translations.
6e636819e8f070330d835fce46289a3ff72a7b89,Jia Tan,Jia Tan,2024-03-09 02:18:29,2024-03-09 02:18:29,"Tests: Update two test files.

The original files were generated with random local to my machine.
To better reproduce these files in the future, a constant seed was used
to recreate these files."
a3a29bbd5d86183fc7eae8f0182dace374e778d8,Jia Tan,Jia Tan,2024-03-09 02:08:32,2024-03-09 02:08:32,"Tests: Test --single-stream can decompress bad-3-corrupt_lzma2.xz.

The first stream in this file is valid, so this tests that xz properly
stops after decompressing it."
0b4ccc91454dbcf0bf521b9bd51aa270581ee23c,Jia Tan,Jia Tan,2024-03-09 02:05:32,2024-03-09 02:05:32,"Tests: Update RISC-V test files.

This increases code coverage and tests for possible shifting bugs."
8c9b8b2063daa78ead9f648c2ec3c91e8615dffb,Jia Tan,Jia Tan,2024-03-09 01:52:32,2024-03-09 01:52:32,liblzma: Fix typos in crc32_fast.c and crc64_fast.c.
b93a8d7631d9517da63f03e0185455024a4609e8,Jia Tan,Jia Tan,2024-03-09 01:49:55,2024-03-09 01:49:55,"Tests: Replace HAVE_MICROLZMA usage in CMake and Autotools builds.

This reverts commit adaacafde6661496ca2814b1e94a3ba5186428cb."
82ecc538193b380a21622aea02b0ba078e7ade92,Jia Tan,Jia Tan,2024-03-09 01:20:57,2024-03-09 01:20:57,"liblzma: Fix false Valgrind error report with GCC.

With GCC and a certain combination of flags, Valgrind will falsely
trigger an invalid write. This appears to be due to the omission of
instructions to properly save, set up, and restore the frame pointer.

The IFUNC resolver is a leaf function since it only calls a function
that is inlined. So sometimes GCC omits the frame pointer instructions
in the resolver unless this optimization is explictly disabled.

This fixes https://bugzilla.redhat.com/show_bug.cgi?id=2267598."
3007e74ef250f0ce95d97ffbdf2282284f93764d,Lasse Collin,Lasse Collin,2024-03-05 21:21:26,2024-03-05 21:23:16,liblzma: Fix a typo in a comment in the RISC-V filter.
72d2933bfae514e0dbb123488e9f1eb7cf64175f,Jia Tan,Jia Tan,2024-03-04 16:34:46,2024-03-04 17:54:30,"liblzma: Use attribute no_profile_instrument_function with ifunc.

Thanks to Sam James for determining this was the attribute needed to
workaround the GCC bug and for his version of the patch in Gentoo."
e5faaebbcf02ea880cfc56edc702d4f7298788ad,Jia Tan,Jia Tan,2024-03-04 16:27:31,2024-03-04 17:54:30,"Build: Require attribute no_profile_instrument_function for ifunc usage.

Using __attribute__((__no_profile_instrument_function__)) on the ifunc
resolver works around a bug in GCC -fprofile-generate:
it adds profiling code even to ifunc resolvers which can make
the ifunc resolver crash at program startup. This attribute
was not introduced until GCC 7 and Clang 13, so ifunc won't
be used with prior versions of these compilers.

This bug was brought to our attention by:

    https://bugs.gentoo.org/925415

And was reported to upstream GCC by:

    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=11411"
7eeadd279a24c26ca7ff1292b7df802b89409eb7,Lasse Collin,Lasse Collin,2024-03-04 17:23:18,2024-03-04 17:23:18,liblzma: Fix a comment in the RISC-V filter.
5f3d0595296cc3035eae9e7bb6c3ffb1e1267333,Lasse Collin,Lasse Collin,2024-02-29 14:35:52,2024-02-29 14:37:19,CMake: Warn if translated man pages are missing.
4cd1042ee752d61370c685d0d8b20c1e935672f7,Lasse Collin,Lasse Collin,2024-02-29 14:35:52,2024-02-29 14:37:19,"CMake: Warn if gettext tools and pre-created .gmo files are missing.

It's only done with CMake >= 3.20 and if library support
for translation was already found.

Sort of fixes: https://github.com/tukaani-project/xz/issues/82"
a94b42362c8e807f92236d6d63373f04991e3a50,Lasse Collin,Lasse Collin,2024-02-28 16:26:25,2024-02-28 16:26:25,xz: Add comments.
bbf112e32307a75a54a9e170bc392811443d5c87,Jia Tan,Jia Tan,2024-02-27 15:42:41,2024-02-28 16:05:50,"xz: Change logging level for thread reduction to highest verbosity only.

Now that multi threaded encoding is the default, users do not need to
see a warning message everytime the number of threads is reduced. On
some machines, this could happen very often. It is not unreasonable for
users to need to set double verbose mode to see this kind of
information.

To see these warning messages -vv or --verbose --verbose must be passed
to set xz into the highest possible verbosity mode.

These warnings had caused automated testing frameworks to fail when they
expected no output to stderr.

Thanks to Sebastian Andrzej Siewior for reporting this and for the
initial version of the patch."
649f6447441510d593a88475ad6df4bcdf74ce48,Lasse Collin,Lasse Collin,2024-02-26 21:06:13,2024-02-26 21:06:13,Fix sorting in THANKS.
1255b7d849bf53f196a842ef2a508ed0ff577eaa,Jia Tan,Jia Tan,2024-02-26 15:39:29,2024-02-26 15:40:50,Update THANKS.
eee579fff50099ba163c12305e81a4bd42b7dd53,Chien Wong,Jia Tan,2024-02-25 13:38:13,2024-02-26 15:36:04,"xz: Add missing RISC-V on the filter list in the man page

Signed-off-by: Chien Wong <m@xv97.com>"
328c52da8a2bbb81307644efdb58db2c422d9ba7,Jia Tan,Jia Tan,2024-02-26 15:02:06,2024-02-26 15:27:44,"Build: Fix Linux Landlock feature test in Autotools and CMake builds.

The previous Linux Landlock feature test assumed that having the
linux/landlock.h header file was enough. The new feature tests also
requires that prctl() and the required Landlock system calls are
supported."
eb8ad59e9bab32a8d655796afd39597ea6dcc64d,Jia Tan,Jia Tan,2024-02-26 12:06:10,2024-02-26 12:06:10,Tests: Add test_microlzma to .gitignore and CMakeLists.txt.
9eed1b9a3ae140e93a82febc05a0181e9a4f5093,Jia Tan,Jia Tan,2024-02-26 11:56:25,2024-02-26 11:56:25,Tests: Correct license header in test_microlzma.c.
8bf9f72ee1c05b9e205a72807e8a9e304785673d,Jia Tan,Jia Tan,2024-02-25 13:41:55,2024-02-25 13:41:55,Fix typos in NEWS and CMakeLists.
5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7,Jia Tan,Jia Tan,2024-02-24 08:30:06,2024-02-24 08:30:06,"Bump version and soname for 5.7.0alpha.

Like 5.5.0alpha, 5.7.0alpha won't be released, it's just to mark that
the branch is not stable.

Once again there is no API/ABI stability for new features in devel
versions. The major soname won't be bumped even if API/ABI of new
features breaks between devel releases."
a18fb1edef0d0aac12a09eed05e9c448c777af7b,Jia Tan,Jia Tan,2024-02-24 07:50:36,2024-02-24 07:50:36,Add NEWS for 5.6.0.
24355c5280bc95e3d594432d60bb8432aa6af173,Jia Tan,Jia Tan,2024-02-22 14:27:01,2024-02-22 14:27:01,"Translations: Remove obsolete and fuzzy matches from some translations.

The French and Brazilian Portuguese man page translations have not been
updated since the switch from public domain to 0BSD. The old GPLv2
strings have now been removed from these files."
02ca4a7d7b703e2ec63e00b70feec825e919dbc1,Jia Tan,Jia Tan,2024-02-20 16:31:54,2024-02-20 16:31:54,"Translations: Patch man pages to avoid fuzzy matches.

This will be fixed in the next round of translations, but this avoids
having a fuzzy match or not fixing the English version."
898aad9fc711e03452d24d9e2c5b7f77a6f9ce64,Jia Tan,Jia Tan,2024-02-20 16:30:43,2024-02-20 16:30:43,"xzmore: Fix typo in xzmore.1.

Thanks to Yuri Chornoivan."
5631aa206c8d16b4eeab85a46b8b698f4fc4cdba,Jia Tan,Jia Tan,2024-02-24 04:12:16,2024-02-24 04:12:16,Translations: Update the Vietnamese translation.
a65fd7ce9d6228e87faf61dc56a35984d0088248,Jia Tan,Jia Tan,2024-02-24 04:06:40,2024-02-24 04:06:40,Translations: Update the Esperanto translation.
cf44e4b7f5dfdbf8c78aef377c10f71e274f63c0,Jia Tan,Jia Tan,2024-02-23 15:09:59,2024-02-23 15:09:59,Tests: Add a few test files.
39f4a1a86ad80b2d064b812cee42668e6c8b8c73,Jia Tan,Jia Tan,2024-02-23 12:58:36,2024-02-23 12:58:36,Tests: Add MicroLZMA test.
adaacafde6661496ca2814b1e94a3ba5186428cb,Jia Tan,Jia Tan,2024-02-23 12:57:59,2024-02-23 12:57:59,Build: Define HAVE_MICROLZMA when it is configured.
eea78216d27182ca917bf00e02feaab058a4d21e,Jia Tan,Jia Tan,2024-02-23 12:27:15,2024-02-23 12:27:15,"xz: Fix Capsicum sandbox compile error.

user_abort_pipe[] was still being used instead of the parameters."
32b0a3ce19224f9074d01a4ffbc1655b05fcb82d,Jia Tan,Jia Tan,2024-02-23 08:12:32,2024-02-23 08:12:32,"Build: Fix ARM64 CRC32 instruction feature test.

Old versions of Clang reported the unsupported function attribute and
__crc32d() function as warnings instead of errors, so the feature test
passed when it shouldn't have, causing a compile error at build time.
-Werror was added to this feature test to fix this. The change is not
needed for CMake because check_c_source_compiles() also performs
linking and the error is caught then.

Thanks to Sebastian Andrzej Siewior for reporting this."
4c81c9611f8b2e1ad65eb7fa166afc570c58607e,Lasse Collin,Lasse Collin,2024-02-22 17:16:35,2024-02-22 17:16:35,"CMake: Add LOCALEDIR to the windres workaround.

LOCALEDIR may contain spaces like in ""C:\Program Files""."
de4337fd89ca7db5feb97b5c40143404f6e22986,Lasse Collin,Lasse Collin,2024-02-22 13:18:25,2024-02-22 13:18:25,"xz: Landlock: Fix error message if input file is a directory.

If xz is given a directory, it should look like this:

    $ xz /usr/bin
    xz: /usr/bin: Is a directory, skipping

The Landlock rules didn't allow opening directories for reading:

    $ xz /usr/bin
    xz: /usr/bin: Permission denied

The simplest fix was to allow opening directories for reading.
While it's a bit silly to allow it solely for the error message,
it shouldn't make the sandbox significantly weaker.

The single-file use case (like when called from GNU tar) is
still as strict as possible: all Landlock restrictions are
enabled before (de)compression starts."
120da10ae139ea52ca4275452adf8eda02d07cc8,Lasse Collin,Lasse Collin,2024-02-22 12:41:29,2024-02-22 12:41:29,"liblzma: Disable branchless C version in range decoder.

Thanks to Sebastian Andrzej Siewior and Sam James for
benchmarking on various systems."
00440f52be9ac2c7438c7b0cb1082f12399632c6,Lasse Collin,Lasse Collin,2024-02-21 15:41:32,2024-02-21 15:41:32,INSTALL: Clarify that --disable-assembler affects only 32-bit x86.
11405be84ea294497e12d03d7219f607063f4a00,Lasse Collin,Lasse Collin,2024-02-19 16:41:37,2024-02-21 14:57:20,Windows: build.bash: Include COPYING.0BSD in the package.
c27cf64e3e27f4968431d65be7098a12a3a80d30,Lasse Collin,Lasse Collin,2024-02-18 15:59:46,2024-02-21 14:57:20,Windows: build.bash: include liblzma-crt-mixing.txt in the package.
8d38941baed05de4ff7cc775de14833108f62184,Lasse Collin,Lasse Collin,2024-02-18 15:17:43,2024-02-21 14:57:20,Windows: Major update to Windows build instructions.
4b5b0d352348ff510ffb50a3b5b71788857d37a1,Lasse Collin,Lasse Collin,2024-02-18 13:15:04,2024-02-21 14:57:20,"Windows: Update windows/README-Windows.txt.

It's for binary packages built with windows/build.bash."
1ee716f74085223c8fbcae1d5a384e6bf53c0f6a,Lasse Collin,Lasse Collin,2024-02-18 13:15:04,2024-02-20 19:04:29,"Windows: Update windows/build.bash.

Support for the old MinGW was dropped. Only MinGW-w64 with GCC
is supported now.

The script now supports also cross-compilation from GNU/Linux
(tests are not run). MSYS2 and also the old MSYS 1.0.11 work
for building on Windows. The i686 and x86_64 toolchains must
be in PATH to build both 32-bit and 64-bit versions.

Parallel builds are done if ""nproc"" from GNU coreutils is available.

MinGW-w64 runtime copyright information file was renamed from
COPYING-Windows.txt to COPYING.MinGW-w64-runtime.txt which
is the filename used by MinGW-w64 itself. Its existence
is now mandatory, it's checked at the beginning of the script.

The file TODO is no longer copied to the package."
60462e42609a1d961868a1d1ebecc713c6d27e2e,Jia Tan,Jia Tan,2024-02-20 15:32:22,2024-02-20 15:32:22,Translations: Update the Romanian man page translations.
10d733e5b8929c642e00891cfa9ead9c2cdd2e05,Jia Tan,Jia Tan,2024-02-20 15:30:25,2024-02-20 15:30:25,Translations: Update the Korean man page translations.
797a34b72ac6baff237d7a546fa941d8f78f2f62,Jia Tan,Jia Tan,2024-02-20 13:03:53,2024-02-20 13:03:53,Translations: Update the Spanish translation.
5c3751d019f023e091df9a653e2bb1f6ea8b0d49,Jia Tan,Jia Tan,2024-02-20 12:18:07,2024-02-20 12:18:07,Translations: Update the Romanian translation.
e2d31154ecc750935436e8b62c6b073b2cfa84e3,Jia Tan,Jia Tan,2024-02-20 12:15:50,2024-02-20 12:15:50,Translations: Update the Croatian translation.
704500f994d5ac271bfcfd592275c5a7da4dc8d2,Jia Tan,Jia Tan,2024-02-20 12:05:44,2024-02-20 12:05:44,Translations: Update the German man page translations.
1cfd3dca3fef321b06db73c3c9e13f347c2e2f5f,Jia Tan,Jia Tan,2024-02-20 11:58:25,2024-02-20 11:58:25,Translations: Update the German translation.
28b9b3f16cc7c6e5b42e691994569c17f4561c9a,Jia Tan,Jia Tan,2024-02-20 11:56:52,2024-02-20 11:56:52,Translations: Update the Hungarian translation.
00b06cd0af6ad2ee93d3006bf80417db060c2b04,Lasse Collin,Lasse Collin,2024-02-19 14:48:05,2024-02-19 14:48:18,CMake: Fix building of lzmainfo when translations are enabled.
b0d1422b6037bfea6f6723683bd82a8e6d77026c,Lasse Collin,Lasse Collin,2024-02-19 11:38:42,2024-02-19 14:28:49,"CMake: Don't assume that -fvisibility=hidden is supported outside Windows.

The original code was good enough for supporting GNU/Linux
and a few others but it wasn't very portable.

CMake doesn't support Solaris Studio's -xldscope=hidden.
If it ever does, things should still work with this commit
as Solaris Studio supports not only its own __global but also
the GNU C __attribute__((visibility(""default""))). Support for the
attribute was added in 2007 to Sun Studio 12 compiler version 5.9."
2ced9d34bef4dce52ecbbf84d0903ab0aae1442c,Lasse Collin,Lasse Collin,2024-02-19 10:20:59,2024-02-19 14:28:49,CMake: Revise the component splitting.
426bdc709c169d39b31dec410016779de117ef69,Lasse Collin,Lasse Collin,2024-02-17 19:45:07,2024-02-19 14:28:49,CMake: Update the main comment and document CMAKE_BUILD_TYPE=Release.
4430e075f7ccfc47972d6ca0aa1c3779fc265e10,Lasse Collin,Lasse Collin,2024-02-17 19:27:48,2024-02-19 14:28:49,"CMake: Use -O2 instead of -O3 in CMAKE_BUILD_TYPE=Release.

-O3 doesn't seem useful for speed but it makes the code bigger.
CMake makes is difficult for users to simply override the
optimization level: CFLAGS / CMAKE_C_FLAGS aren't helpful because
they go before CMAKE_C_FLAGS_RELEASE. Of course, users can override
CMAKE_C_FLAGS_RELEASE directly but then they have to remember to
add also -DNDEBUG to disable assertions.

This commit changes -O3 to -O2 in CMAKE_C_FLAGS_RELEASE if and only if
CMAKE_C_FLAGS_RELEASE cache variable doesn't already exist. So if
a custom value is passed on the command line (or reconfiguring an
already-configured build), the cache variable won't be modified."
025eb6d7879e4c4e8cb29716b371e0f4c1aea660,Lasse Collin,Lasse Collin,2024-02-18 12:59:52,2024-02-19 14:28:49,"CMake: Handle symbol versioning on MicroBlaze specially.

This is to match configure.ac."
2edd1a35b2507d1ce68b52dbaebe23c4850a74ce,Lasse Collin,Lasse Collin,2024-02-17 20:18:12,2024-02-19 10:21:37,CMake: Keep build working even if lib/*.[ch] are removed.
d753e2ce4715552884afadc4ed6fbf8ccca6efac,Lasse Collin,Lasse Collin,2024-02-17 16:10:40,2024-02-19 10:21:37,CMake: Install documentation.
7a0405bea9cb0df9318b70f779f82b2c473e98ac,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Bump maximum policy version to 3.28.

CMP0154 doesn't affect us since we don't use FILE_SET."
c2264ffbe3892d28930b89b0123efc369cabc143,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,CMake: Build lzmainfo.
998d0b29536094a89cf385a3b894e157db1ccefe,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,CMake: Build lzmadec.
74e8bc7417a0f37ca7ed5ee0127d33c69b3100b9,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Add test_scripts.sh to the tests.

In contrast to Automake, skipping of this test when decoders
are disabled is handled at CMake side instead of test_scripts.sh
because CMake-build doesn't create config.h."
4808f238a731befcd46c2117c62a1caaf4403989,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Install scripts.

Compared to the Autotools-based build, this has simpler handling
for the shell (@POSIX_SHELL@) and extra PATH entry for the scripts
(configure has --enable-path-for-scripts=PREFIX). The simpler
metho should be enough for non-ancient systems and Solaris."
3462362ebd94d835c664e94ad8f414cfe7590ca7,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"Scripts: Use @PACKAGE_VERSION@ instead of @VERSION@.

PACKAGE_VERSION was already used in liblzma.pc.in.
This way only one version @foo@ is used."
67610c245ba6c68cf65991693bab9312b7dc987b,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Simplify symlink creation and install translated man pages.

It helps that cmake_install.cmake doesn't parallelize installation
so symlinks can be created so that the target is always known to
exist (a requirement on Windows in some cases).

This bumps the minimum CMake version from 3.13 to 3.14 to use
file(CREATE_LINK ...). It could be made to work on 3.13 by
calling ""cmake -E create_symlink"" but it's uglier code and
slower in ""make install"". 3.14 should be a reasonable version
to require nowadays, especially since the Autotools build
is still the primary build system for most OSes."
50cc1d8a5a8154428bf240c7e4972e32b17d99bf,Lasse Collin,Lasse Collin,2024-02-17 13:35:35,2024-02-19 10:21:37,"CMake: Add support for building and installing xz with translations.

If gettext tools are available, the .po files listed in po/LINGUAS
are converted using msgfmt. This allows building with translations
directly from xz.git without Autotools.

If gettext tools aren't available, the Autotools-created .gmo files
in the ""po"" directory will be used. This allows CMake-based build
to use translations from Autotools-generated tarball.

If translation support is found (Intl_FOUND) but both the
gettext tools and the pre-generated .gmo files are missing,
then ""make"" will fail."
746c471643009947f94a3494a1148f74c7381b56,Lasse Collin,Lasse Collin,2024-02-19 09:58:33,2024-02-19 09:58:33,liblzma: Remove commented-out code.
4ce300ce0884c6e552de2af9ae8050b47b01f0e7,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,xz: Delete old commented-out code.
cae9a5e0bf422e6c5e64180805904f7ed02dc3aa,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Use stricter pledge(2) and Landlock sandbox.

This makes these sandboxing methods stricter when no files are
created or deleted. That is, it's a middle ground between the
initial sandbox and the strictest single-file-to-stdout sandbox:
this allows opening files for reading but output has to go to stdout."
02e3505991233901575b7eabc06b2c6c62a96899,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Support Landlock ABI version 4.

Linux 6.7 added support for ABI version 4 which restricts
TCP connections which xz won't need and thus those can be
forbidden now. Since the ABI version is handled at runtime,
supporting version 4 won't cause any compatibility issues.

Note that new enough kernel headers are required to get
version 4 support enabled at build time."
374868d81d473ab56556a1cfd6b1b36a1fab348b,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Move sandboxing code to sandbox.c and improve Landlock sandbox.

Landlock is now always used just like pledge(2) is: first in more
permissive mode and later (under certain common conditions) in
a strict mode that doesn't allow opening more files.

I put pledge(2) first in sandbox.c because it's the simplest API
to use and still somewhat fine-grained for basic applications.
So it's the simplest thing to understand for anyone reading sandbox.c."
7312dfbb02197c7f990c7a3cefd027a9387d1473,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,xz: Tweak comments.
c701a5909ad9882469fbab4fab5d2d5556d3ba78,Lasse Collin,Lasse Collin,2024-02-17 21:07:35,2024-02-17 21:07:35,"xz: Fix message_init() description.

Also explicitly initialize progress_automatic to make it clear
that it can be read before message_init() sets it. Static variable
was initialized to false by default already so this is only for
clarity."
9466306719f3b76e92fac4e55fbfd89ec92295fa,Lasse Collin,Lasse Collin,2024-02-17 17:35:47,2024-02-17 17:42:30,"Build: Makefile.am: Sort EXTRA_DIST.

Dirs first, then files in case-sensitive ASCII order."
f3440e78c9517db75bfa52e1a378fad60b073bbe,Lasse Collin,Lasse Collin,2024-02-17 17:25:05,2024-02-17 17:42:30,Build: Don't install TODO.
a7a3b62e2ab03c82b2bd5c78da1d1fb8b8490381,Jia Tan,Jia Tan,2024-02-17 17:09:11,2024-02-17 17:09:11,Translations: Update the Korean man page translations.
9b315db2d5e74700f3dc0755eb86c27947c0b393,Jia Tan,Jia Tan,2024-02-17 17:08:32,2024-02-17 17:08:32,Translations: Update the Korean translation.
56246607dff177b0410d140fcca4a42c865723dc,Lasse Collin,Lasse Collin,2024-02-17 14:23:14,2024-02-17 14:23:14,"Build: Install translated lzmainfo man pages.

All other translated man pages were being installed but
lzmainfo had been forgotten."
f1d6b88aefcced538403c5c2606ba57065b16e70,Lasse Collin,Lasse Collin,2024-02-17 14:01:32,2024-02-17 14:01:32,"liblzma: Avoid implementation-defined behavior in the RISC-V filter.

GCC docs promise that it works and a few other compilers do
too. Clang/LLVM is documented source code only but unsurprisingly
it behaves the same as others on x86-64 at least. But the
certainly-portable way is good enough here so use that."
843ddc5f617b91ae132d6bab0f2f2d9c9fcd214a,Lasse Collin,Lasse Collin,2024-02-17 13:48:28,2024-02-17 13:50:21,liblzma: Wrap a line exceeding 80 chars.
e9053c907250c70d98b319d95fa54cb94fc76869,Sebastian Andrzej Siewior,Lasse Collin,2024-02-16 20:50:15,2024-02-17 13:50:21,"liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.

The x32 port has a x86-64 ABI in term of all registers but uses only
32bit pointer like x86-32. The assembly optimisation fails to compile on
x32. Given the state of x32 I suggest to exclude it from the
optimisation rather than trying to fix it.

Signed-off-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>"
3d198fb13b87f8803442e5799d465f7434a70555,Jia Tan,Jia Tan,2024-02-17 13:05:07,2024-02-17 13:05:07,Translations: Update the Spanish translation.
cf278bfe60a25b54b3786f06503bc61272970820,Jia Tan,Jia Tan,2024-02-17 12:43:29,2024-02-17 12:43:29,Translations: Update the Swedish translation.
b0f1a41be50560cc6cb528e8e96b02b2067c52c2,Jia Tan,Jia Tan,2024-02-17 12:41:38,2024-02-17 12:41:38,Translations: Update the Polish translation.
d74ed48b30c631b6a4c7e7858b06828293bf8520,Jia Tan,Jia Tan,2024-02-17 12:41:02,2024-02-17 12:41:02,Translations: Update the Ukrainian translation.
711e22d5c5f3bac39ac904efb3ede874a66e2045,Lasse Collin,Lasse Collin,2024-02-16 15:53:34,2024-02-16 15:53:34,Translations: Use the same sentence in xz.pot-header that the TP uses.
fb5f6aaf18584672d0fee5dbe41fd30fc6bf5422,Jia Tan,Jia Tan,2024-02-16 14:53:46,2024-02-16 14:54:59,Fix typos discovered by codespell.
c64723bbb094e29b4edd98f6fcce866e1b569b42,Jia Tan,Jia Tan,2024-02-16 14:52:41,2024-02-16 14:54:59,Translations: Update the Ukrainian man page translations.
2895195ed0f68b245c7bd568c126ba6e685fa1d6,Jia Tan,Jia Tan,2024-02-16 14:51:04,2024-02-16 14:54:59,Translations: Update the Ukrainian translation.
4c20781f4c8f04879b64d631a4f44b4909147bde,Lasse Collin,Lasse Collin,2024-02-15 20:32:52,2024-02-15 20:33:49,Translations: Omit the generic copyright line from man page headers.
4323bc3e0c1e1d2037d5e670a3bf6633e8a3031e,Jia Tan,Jia Tan,2024-02-15 14:26:43,2024-02-15 14:26:43,Update m4/.gitignore.
5394a1665b7a108a54cb8b4ef3ebe59d3dbcca3a,Lasse Collin,Lasse Collin,2024-02-14 19:11:49,2024-02-14 19:12:58,"Tests: tuktest.h: Treat Clang separately from GCC.

Don't assume that Clang defines __GNUC__ as the extensions
are available in clang-cl as well (and possibly in some other
Clang variants?)."
cce7330b9f23485a0879422e0c3395a7065439ac,Lasse Collin,Lasse Collin,2024-02-14 19:11:03,2024-02-14 19:11:03,Tests: tuktest.h: Add a missing word to a comment.
5dd8fc9452a3373cedc27379067ce638f992c741,Lasse Collin,Lasse Collin,2024-02-14 19:10:10,2024-02-14 19:10:10,Tests: tuktest.h: Fix the comment about STest.
6f1790254a03c5edf0f2976f773220f070450acd,Jia Tan,Jia Tan,2024-02-14 17:53:40,2024-02-14 17:53:40,Bump version for 5.5.2beta.
924fdeedf48113fb1e0646d86bd89a356d21a055,Lasse Collin,Lasse Collin,2024-02-14 17:46:11,2024-02-14 17:46:11,"liblzma: Fix validate_map.sh.

Adding the SPDX license identifier changed the line numbers."
22140a2df6161b0110e6b4afa5ea0a07c5b60b01,Lasse Collin,Lasse Collin,2024-02-14 17:38:34,2024-02-14 17:38:34,Build: Start the generated ChangeLog from around 5.4.0 instead of 5.2.0.
0b8cefa136c21d403a01b78517f4decb50172bdb,Lasse Collin,Lasse Collin,2024-02-14 17:27:46,2024-02-14 17:27:46,Fixed NEWS for 5.5.2beta.
a4557bad96361d93ea171ed859ac5a696fca824f,Lasse Collin,Lasse Collin,2024-02-14 17:21:45,2024-02-14 17:21:45,liblzma: Silence warnings in --enable-small build.
38edf473236d00b3e100dc4c4f0bf43a4993fed2,Lasse Collin,Lasse Collin,2024-02-14 17:15:58,2024-02-14 17:15:58,Build: Install COPYING.0BSD as part of docs.
b74e10bd839bcdc239afb5300ffaee195f34c217,Lasse Collin,Lasse Collin,2024-02-14 17:14:05,2024-02-14 17:15:34,Docs: List COPYING.0BSD in README.
dfdb60ffe933a1f1497d300dbb4513ed17ec6f0e,Lasse Collin,Lasse Collin,2024-02-14 17:11:48,2024-02-14 17:11:48,"Docs: Include doc/examples/11_file_info.c in tarballs.

It was added in 2017 in c2e29f06a7d1e3ba242ac2fafc69f5d6e92f62cd
but it never got into any release tarballs because it was
forgotten to be added to Makefile.am."
160b6862646d95dfdbd73ab7f1031ede0f54992d,Lasse Collin,Lasse Collin,2024-02-14 17:05:58,2024-02-14 17:05:58,liblzma: Silence a warning.
eeedd4d0925ea417add04ceb42a6c0829244b50c,Lasse Collin,Lasse Collin,2024-02-14 16:32:27,2024-02-14 16:32:27,Add NEWS for 5.5.2beta.
8af7db854f903068d72a9a0d21103cb0c5027fa8,Lasse Collin,Lasse Collin,2024-02-13 12:32:47,2024-02-14 16:31:16,"xz: Mention lzmainfo if trying to use 'lzma --list'.

This kind of fixes the problem reported here:
https://bugs.launchpad.net/ubuntu/+source/xz-utils/+bug/1291020"
0668907ff736e4cd16738c10d39a2bc9e851aefb,Lasse Collin,Lasse Collin,2024-02-14 12:58:36,2024-02-14 16:31:16,liblzma: Add comments.
109f1913d4824c8214d5bbd38ebebf62c37572da,Lasse Collin,Lasse Collin,2024-02-13 15:00:17,2024-02-14 16:31:16,Scripts: Add lz4 support to xzgrep and xzdiff.
de55485cb23af56c5adbe3239b935c957ff8ac4f,Lasse Collin,Lasse Collin,2024-02-13 12:05:13,2024-02-14 16:31:16,liblzma: Choose the range decoder variants using a bitmask macro.
0709c2b2d7c1d8f437b003f691880fd7810e5be5,Lasse Collin,Lasse Collin,2024-02-13 09:38:10,2024-02-14 16:31:16,xz: Fix outdated threading related info on the man page.
3182a330c1512cc1f5c87b5c5a272578e60a5158,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Range decoder: Add x86-64 inline assembly.

It's compatible with GCC and Clang."
cba2edc991dffba7cd4891dbc1bd26cb950cf053,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Range decoder: Add branchless C code.

It's used only for basic bittrees and fixed-size reverse bittree
because those showed a clear benefit on x86-64 with GCC and Clang.
The other methods were more mixed and thus are commented out but
they should be tested on other archs."
e290a72d6dee71faf3a90c9678b2f730083666a7,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: Clarify a comment.
5e04706b91ca90d6befd4da24a588a55e631d4a9,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: LZMA decoder: Optimize loop comparison.

But now it needs one more local variable."
88276f9f2cb4871c7eb86952d93d07c1cf6caa66,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: Optimize literal_subcoder() macro slightly.
5938f6de4d8ec9656776cd69e78ddfd6c3ad84e5,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: LZ decoder: Add unlikely().
9c252e3ed086c6b72590b2531586c42596d4a9d9,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,liblzma: LZ decoder: Remove a useless unlikely().
f3872a59475456c5d365cad9f1c5be514cfa54b5,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Optimize LZ decoder slightly.

Now extra buffer space is reserved so that repeating bytes for
any single match will never need to copy from two places (both
the beginning and the end of the buffer). This simplifies
dict_repeat() and helps a little with speed.

This seems to reduce .lzma decompression time about 2 %, so
with .xz and CRC it could be slightly less. The small things
add up still."
eb518446e578acf079abae5f1ce28db7b6e59bc1,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: LZMA decoder: Get rid of next_state[].

It's not completely obvious if this is better in the decoder.
It should be good if compiler can avoid creating a branch
(like using CMOV on x86).

This also makes lzma_encoder.c use the new macros."
e0c0ee475c0800c08291ae45e0d66aa00d5ce604,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: LZMA decoder improvements.

This adds macros for bittree decoding which prepares the code
for alternative C versions and inline assembly."
de5c5e417645ad8906ef914bc059d08c1462fc29,Jia Tan,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Creates Non-resumable and Resumable modes for lzma_decoder.

The new decoder resumes the first decoder loop in the Resumable mode.
Then, the code executes in Non-resumable mode until it detects that it
cannot guarantee to have enough input/output to decode another symbol.

The Resumable mode is how the decoder has always worked. Before decoding
every input bit, it checks if there is enough space and will save its
location to be resumed later. When the decoder has more input/output,
it jumps back to the correct sequence in the Resumable mode code.

When the input/output buffers are large, the Resumable mode is much
slower than the Non-resumable because it has more branches and is harder
for the compiler to optimize since it is in a large switch block.

Early benchmarking shows significant time improvement (8-10% on gcc and
clang x86) by using the Non-resumable code as much as possible."
e446ab7a18abfde18f8d1cf02a914df72b1370e3,Jia Tan,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Creates separate ""safe"" range decoder mode.

The new ""safe"" range decoder mode is the same as old range decoder, but
now the default behavior of the range decoder will not check if there is
enough input or output to complete the operation. When the buffers are
close to fully consumed, the ""safe"" operations must be used instead. This
will improve speed because it will reduce the number of branches needed
for most of the range decoder operations."
7f6d9ca329ff3e01d4b0be7366eb4f5c93da41b9,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"doxygen/footer.html: Add missing closing tags and don't open a new tab.

The footer template from Doxygen has the closing </body> </html>
as Doxygen doesn't add them otherwise.

target=""_blank"" was omitted as it's not useful here but
it can be slightly annoying as one cannot just go back
in the browser history.

Since the footer links to the license file in the same
directory and not to CC website, the rel attributes
can be omitted."
26d1527d34d52b0f5d632d4fb636fb33d0867e92,Lasse Collin,Lasse Collin,2024-02-13 11:19:10,2024-02-14 16:31:16,Tweak the expressions in AUTHORS.
d231d56580175fa040fdd3c6207a58243ce6217b,Lasse Collin,Lasse Collin,2024-02-13 11:07:33,2024-02-14 16:31:16,"Translations: Add the man page translators into man page header comment.

It looked odd to only have the original English authors listed
in the header comments of the translated files."
6d35fcb936474fca1acaebfd9502c097b6fde88e,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: Translate also messages of lzmainfo.

lzmainfo has had translation support since 2009 at least but
it was never added to po/POTFILES.in so the messages weren't
translated. It's a very rarely needed tool so it's not too bad.

This also adds src/xz/mytime.c to po/POTFILES.in although there
are no translatable strings. It's simpler this way so that it
won't be forgotten if strings were ever added to that file."
a9f369dd54b05f9ac4e00ead9d765d04fc259868,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: Add custom .pot header with SPDX license identifier.

The same is used for both po/xz.pot and po4a/xz-man.pot."
469cd6653bb96e83c5cf1031c204d34566b15f44,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: po4a/update-po: Add copyright notice to xz-man.pot.

All man pages are under 0BSD now so this is simple now."
28ce45e38fbed4b5f54f2013e38dab47d22bf699,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,Update COPYING about the man pages of the scripts.
e48287bf51afd5184ea74de1dcade9e153f873f7,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"xzdiff, xzgrep, and xzmore: Rewrite the man pages.

The main reason is a kind of silly one:

xz-man.pot contains strings from all man pages in XZ Utils.
The man pages of xzdiff, xzgrep, and xzmore were under GPLv2
and the rest under 0BSD. Thus xz-man.pot contained strings
under two licences. po4a creates the translated man pages
from the combined 0BSD+GPLv2 xz-man.pot.

I haven't liked this mixing in xz-man.pot but the
Translation Project requires that all man pages must be
in the same .pot file. So a separate xz-man-gpl.pot
wasn't an option.

Since these man pages are short, rewriting them was quick enough.
Now xz-man.pot is entirely under 0BSD and marking the per-file
licenses is simpler.

As a bonus, some wording hopefully is now slightly better
although it's perhaps a matter of taste.

NOTE: In xzgrep.1, the EXIT STATUS section was written by me
in the commit d796b6d7fdb8b7238b277056cf9146cce25db604 so that's
why that section could be taken as is from the old xzgrep.1."
3e551b111b8ae8150f1a1040364dbafc034f22be,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"xzless: Update man page slightly.

The xz tool can decompress three file formats and xzless
has always supported uncompressed files too."
40f36da2262d13d6e1ba8449caa855512ae626d7,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,Translations: Change po/Makevars to add a copyright notice to po/xz.pot.
24192854e2ea5c06997431a98bda3c36c5da1497,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Translations: Update po/Makevars to use the template from gettext 0.22.4.

Also add SPDX license identifier now that there is a known license."
b94154957370116480b43bcabca25fc52deb9853,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Include the SPDX license identifier 0BSD to generated files.

Perhaps the generated files aren't even copyrightable but
using the same license for them as for the rest of the liblzma
keeps things more consistent for tools that look for license info."
8e4ec794836bc1701d8c9bd5e347b8ce8cc5bbb4,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"liblzma: Fix compilation of price_tablegen.c.

It is built and run only manually so this didn't matter
unless one wanted to regenerate the price_table.c."
e99bff3ffbcdf2634fd5bd13887627ec7dbfecaf,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,"Add SPDX license identifiers to GPL, LGPL, and FSFULLR files."
22af94128b89a131f5e58ae69bee5e50227c15da,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:16,Add SPDX license identifier into 0BSD source code files.
23de53421ea258cde6a3c33a038b1e9d08f771d1,Lasse Collin,Lasse Collin,2024-02-12 21:25:54,2024-02-14 16:31:16,liblzma: Sync the AUTHORS fix about SHA-256 to lzma.h.
689e0228baeb95232430e90d628379db89583d71,Lasse Collin,Lasse Collin,2024-02-12 15:09:10,2024-02-14 16:31:12,"Change most public domain parts to 0BSD.

Translations and doc/xz-file-format.txt and doc/lzma-file-format.txt
were not touched.

COPYING.0BSD was added."
76946dc4336c831fe2cc26696a035d807dd3cf13,Lasse Collin,Lasse Collin,2024-02-09 15:20:31,2024-02-14 13:23:00,"Fix SHA-256 authors.

The initial commit 5d018dc03549c1ee4958364712fb0c94e1bf2741
in 2007 had a comment in sha256.c that the code is based on
Crypto++ Library 5.5.1. In 2009 the Authors list in sha256.c
and the AUTHORS file was updated with information that the
code had come from Crypto++ but via 7-Zip. I know I had viewed
7-Zip's SHA-256 code but back then the C code has been identical
enough with Crypto++, so I don't why I thought the author info
would need that extra step via 7-Zip for this single file.

Another error is that I had mixed sha.* and shacal2.* files
when checking for author info in Crypto++. The shacal2.* files
aren't related to liblzma's sha256.c and thus Kevin Springle's
code in Crypto++ isn't either."
21d9cbae9eecca28ce373d3d9464defd2cf5d851,Lasse Collin,Lasse Collin,2024-02-09 15:20:31,2024-02-14 13:23:00,"Remove macosx/build.sh.

It was last updated in 2013."
eac2c3c67f9113a225fb6667df862edd30366931,Lasse Collin,Lasse Collin,2024-02-09 15:20:31,2024-02-14 13:23:00,"Doc: Remove doc/examples_old.

It was good to keep these around in parallel with the newer examples
but I think it's OK to remove the old ones at this point."
89ea1a22f4ed3685b053b7260bc5acf6c75d1664,Jia Tan,Jia Tan,2024-02-13 14:38:58,2024-02-13 15:33:27,Tests: Add RISC-V filter support in a few places.
45663443eb2b377e6171529380fee312f1adcdf4,Jia Tan,Jia Tan,2024-02-13 14:37:07,2024-02-13 15:33:21,"liblzma: Fix build error if only RISC-V BCJ filter is enabled.

If any other BCJ filter was enabled for encoding or decoding, then this
was not a problem."
2f15597d677bc35743c777d4cf3bfa698b478681,Jia Tan,Jia Tan,2024-02-13 14:56:24,2024-02-13 15:26:55,Translations: Update the Korean translation.
df873143ad1615c6d6aaa1bf8808b1676091dfe3,Jia Tan,Jia Tan,2024-02-12 17:55:53,2024-02-12 17:55:53,Translations: Update the Korean man page translations.
b3f415eddb150341865a1af47959c3baba076b33,Jia Tan,Jia Tan,2024-02-12 17:53:33,2024-02-12 17:53:33,Translations: Update the Chinese (simplified) translation.
9860d418d296eb3c721e5384fb367c0499b579c8,Lasse Collin,Lasse Collin,2024-02-09 21:21:01,2024-02-09 21:21:01,"xzless: Use ||- in LESSOPEN with with ""less"" 451 and newer."
fd0692b0525e6c26b496492be9e2c865cab734f8,Lasse Collin,Lasse Collin,2024-02-09 21:00:05,2024-02-09 21:00:05,"xzless: Use --show-preproc-errors with ""less"" 632 and newer.

This makes ""less"" show a warning if a decompression error occurred."
adb073da76a920b5a81e6b32254f4ddb054dc57a,Jia Tan,Jia Tan,2024-02-09 15:59:54,2024-02-09 15:59:54,liblzma: Fix typo discovered by codespell.
55d9fc883d221cbace951a370f1fb144698f8c2e,Jia Tan,Jia Tan,2024-02-09 12:01:06,2024-02-09 12:01:06,Translations: Update the Swedish translation.
55ba4a1ea321499c805eedfa811ffde690bae311,Jia Tan,Jia Tan,2024-02-08 12:09:04,2024-02-08 12:09:04,Translations: Update the Spanish translation.
7f2293cd804a89d3c3b2d3ed573560ca9e1520ae,Jia Tan,Jia Tan,2024-02-07 13:34:35,2024-02-07 13:34:35,Translations: Update the Spanish translation.
f4af2036bc625739d6d33d9e1fede583a25c3828,Jia Tan,Jia Tan,2024-02-07 13:28:32,2024-02-07 13:28:32,Translations: Update the Polish translation.
e5e93bb816043c559cddf03a3b7ba13bec353ee4,Jia Tan,Jia Tan,2024-02-07 11:40:12,2024-02-07 11:40:12,Translations: Update the German translation.
28f18ff8e26902762fb007c13be235b4ac1ac071,Jia Tan,Jia Tan,2024-02-07 11:27:25,2024-02-07 11:27:25,Translations: Update the German man page translations.
cabfbc7947da05aa5dfe39bec9759e076f940e3c,Jia Tan,Jia Tan,2024-02-06 15:44:06,2024-02-06 15:44:06,Translations: Update the Romanian translation.
bf20c94f5d748cea2147779f4fa7e2fd2eb8555e,Jia Tan,Jia Tan,2024-02-06 15:45:02,2024-02-06 15:45:02,Translations: Update the Romanian man page translations.
7c25ec9feb0241e4affb7432681cc4f5696f3a96,Jia Tan,Jia Tan,2024-02-07 12:56:57,2024-02-07 12:56:57,Translations: Update the Ukrainian translation.
b3523250e9eef10b017473754c1e1c9e31f10374,Jia Tan,Jia Tan,2024-02-06 15:30:03,2024-02-06 15:30:03,Translations: Update the Ukrainian man page translations.
a5c177f514f4c90e0d2f6045636fca6c2e80a20d,Jia Tan,Jia Tan,2024-02-01 17:39:28,2024-02-01 17:39:28,Update AUTHORS.
7f68a68c19d0ae57bd0e802be0ea8f974e41299f,Jia Tan,Jia Tan,2024-02-01 17:38:51,2024-02-01 17:38:51,liblzma: Update Authors list in crc32_arm64.h.
97f9ba50b84e67b3dcb5b17dd5d3e1d14f9ad1d0,Jia Tan,Jia Tan,2024-02-01 08:07:03,2024-02-01 12:09:11,"liblzma: Check HAVE_USABLE_CLMUL before omitting CRC32 table.

This was split from the prior commit so it could be easily applied to
the 5.4 branch.

Closes: https://github.com/tukaani-project/xz/pull/77"
ca9015f4dead2c97b48f5a6933631b0a448b65b9,Jia Tan,Jia Tan,2024-02-01 08:06:29,2024-02-01 12:09:11,"liblzma: Check HAVE_USABLE_CLMUL before omitting CRC64 table.

If liblzma is configured with --disable-clmul-crc
CFLAGS=""-msse4.1 -mpclmul"", then it will fail to compile because the
generic version must be used but the CRC tables were not included."
2f1552a91c825e87013925e1a67a0930e7aef592,Jia Tan,Jia Tan,2024-01-23 10:02:13,2024-02-01 12:09:11,"liblzma: Only use ifunc in crcXX_fast.c if its needed.

The code was using HAVE_FUNC_ATTRIBUTE_IFUNC instead of CRC_USE_IFUNC.
With ARM64, ifunc is incompatible because it requires non-inline
function calls for runtime detection."
30a25f3742287697bc57a1bef86c19ecf5129322,Jia Tan,Jia Tan,2024-01-22 14:08:45,2024-02-01 12:09:11,Docs: Add --disable-arm64-crc32 description to INSTALL.
1940f0ec28f08c0ac72c1413d9706fb82eabe6ad,Jia Tan,Jia Tan,2024-01-22 13:36:09,2024-02-01 12:09:11,"liblzma: Omit CRC tables when not needed with ARM64 optimizations.

This is similar to the existing x86-64 CLMUL conditions to omit the
tables. They were slightly refactored to improve readability."
761f5b69a4c778c8bcb09279b845b07c28790575,Jia Tan,Jia Tan,2024-01-22 12:54:56,2024-02-01 12:09:11,"liblzma: Rename crc32_aarch64.h to crc32_arm64.h.

Even though the proper name for the architecture is aarch64, this
project uses ARM64 throughout. So the rename is for consistency.

Additionally, crc32_arm64.h was slightly refactored for the following
changes:

   * Added MSVC, FreeBSD, and macOS support in
     is_arch_extension_supported().

   * crc32_arch_optimized() now checks the size when aligning the
     buffer.

   * crc32_arch_optimized() loop conditions were slightly modified to
     avoid both decrementing the size and incrementing the buffer
     pointer.

   * Use the intrinsic wrappers defined in <arm_acle.h> because GCC and
     Clang name them differently.

   * Minor spacing and comment changes."
455a08609caa3223066a717fb01bfa42c5dba47d,Jia Tan,Jia Tan,2024-01-22 12:49:30,2024-02-01 12:09:11,"liblzma: Refactor crc_common.h.

The CRC_GENERIC is now split into CRC32_GENERIC and CRC64_GENERIC, since
the ARM64 optimizations will be different between CRC32 and CRC64.

For the same reason, CRC_ARCH_OPTIMIZED is split into
CRC32_ARCH_OPTIMIZED and CRC64_ARCH_OPTIMIZED.

ifunc will only be used with x86-64 CLMUL because the runtime detection
methods needed with ARM64 are not compatible with ifunc."
61908e816049af7a9f43ea804a57ee8570e2e644,Jia Tan,Jia Tan,2024-01-21 16:42:28,2024-02-01 12:09:11,CMake: Add support for ARM64 CRC32 instruction detection.
c5f6d79cc9515a7f22d7ea4860c6cc394b295732,Jia Tan,Jia Tan,2024-01-21 16:36:47,2024-02-01 12:09:09,"Build: Add support for ARM64 CRC32 instruction detection.

This adds --enable-arm64-crc32/--disable-arm64-crc32 (enabled by
default) for using the ARM64 CRC32 instruction. This can be disabled if
one knows the binary will never need to run on an ARM64 machine
with this instruction extension."
849d0f282a6a890c5cf5a0e0f02980b12d9ebb0f,Chenxi Mao,Jia Tan,2024-01-09 09:23:11,2024-01-27 13:49:26,"Speed up CRC32 calculation on ARM64

The CRC32 instructions in ARM64 can calculate the CRC32 result
for 8 bytes in a single operation, making the use of ARM64
instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if ARM64 has CRC extension
running on Linux.

Signed-off-by: Chenxi Mao <chenxi.mao2013@gmail.com>"
b43c3e48bf6097095eef36d44cdbec811074940a,Jia Tan,Jia Tan,2024-01-26 11:05:51,2024-01-26 11:05:51,Bump version number for 5.5.1alpha.
c7a7ae1500ea90bd3c2d54533e4f433933eb598f,Jia Tan,Jia Tan,2024-01-26 11:00:52,2024-01-26 11:00:52,Add NEWS for 5.5.1alpha
0ef8192e8d5af4e6200d5d4aee22d1f177f7a2df,Jia Tan,Jia Tan,2024-01-26 10:54:24,2024-01-26 10:54:24,Add NEWS for 5.4.6.
93de7e751d17731315a899264f2a7239d7d2d316,Lasse Collin,Lasse Collin,2024-01-24 18:00:57,2024-01-24 18:00:57,"Move doc/logo/xz-logo.png to ""doc"" and Doxygen footer to ""doxygen"".

The footer isn't a complete HTML file so having it in the doxygen
directory is a tiny bit clearer."
00fa01698df51c58ae2acf8c7fa4e1fb159f75a9,Jia Tan,Jia Tan,2024-01-09 09:05:01,2024-01-24 17:39:35,"README: Add COPYING.CC-BY-SA-4.0 entry to section 1.1.

The Overall documentation section (1.1) table spacing had to be adjusted
since the filename was very long."
e280470040b27c5e58d78b25b9e2bb71fc6c3882,Jia Tan,Jia Tan,2024-01-09 08:56:16,2024-01-24 17:39:35,Build: Add the logo and license to the release.
b1ee6cf259bb49ce91abe9f622294524e37edf4c,Jia Tan,Jia Tan,2024-01-09 08:44:42,2024-01-24 17:39:29,COPYING: Add the license for the XZ logo.
31293ae7074802cc7286089a89c7b552d930c97f,Jia Tan,Jia Tan,2024-01-09 08:40:56,2024-01-24 17:06:01,"Doxygen: Added the XZ logo and copyright information.

The PROJECT_LOGO field is now used to include the XZ logo. The footer
of each page now lists the copyright information instead of the default
footer. The license is also copied to statisfy the copyright and so the
link in the documentation can be local."
6daa4d0ea46a8441f21f609149f3633158bf4704,Lasse Collin,Lasse Collin,2024-01-23 16:29:28,2024-01-23 16:29:28,"xz: Use threaded mode by defaut (as if --threads=0 was used).

This hopefully does more good than bad:

  + It's faster by default.

  + Only the threaded compressor creates files that
    can be decompressed in threaded mode.

  - Compression ratio is worse, usually not too much though.
    When it matters, -T1 must be used.

  - Memory usage increases.

  - Scripts that assume single-threaded mode but don't use -T1 will
    possibly use too much resources, for example, if they run
    multiple xz processes in parallel to compress multiple files.

  - Output from single-threaded and multi-threaded compressors
    differ but such changes could happen for other reasons too
    (they just haven't happened since 5.0.0)."
a2dd2dc8e5307a7280bb99868bc478560facba2c,Jia Tan,Jia Tan,2024-01-23 15:52:49,2024-01-23 15:55:44,CI: Use RISC-V filter when building with BCJ support.
3060e1070b2421b26c0e17794c1307ec5622f11d,Jia Tan,Jia Tan,2024-01-23 15:52:14,2024-01-23 15:55:44,Tests: Use smaller dictionary size in RISC-V test files.
44ff2fa5c94dc345c4dd69195a19fc5238df60b3,Jia Tan,Jia Tan,2024-01-23 15:50:57,2024-01-23 15:55:39,Tests: Skip RISC-V test files if decoder was not built.
6133a3f30049d3beaf7d22535b1e5d38e109be4e,Lasse Collin,Jia Tan,2024-01-23 14:11:54,2024-01-23 15:05:47,xz: Man page: Add more examples of LZMA2 options with BCJ filters.
50255feeaabcc7e7db22b858a6bd64a9b5b4f16d,Lasse Collin,Jia Tan,2024-01-22 22:09:48,2024-01-23 15:05:47,"liblzma: RISC-V filter: Use byte-by-byte access.

Not all RISC-V processors support fast unaligned access so
it's better to read only one byte in the main loop. This can
be faster even on x86-64 when compared to reading 32 bits at
a time as half the time the address is only 16-bit aligned.

The downside is larger code size on archs that do support
fast unaligned access."
db5eb5f563e8baa8d912ecf576f53391ff861596,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,"xz: Update xz -lvv for RISC-V filter.

Version 5.6.0 will be shown, even though upcoming alphas and betas
will be able to support this filter. 5.6.0 looks nicer in the output and
people shouldn't be encouraged to use an unstable version in production
in any way."
e2870db5be1503e6a489fc3d47daf950d6f62723,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,"Tests: Add two RISC-V Filter test files.

These test files achieve 100% code coverage in
src/liblzma/simple/riscv.c. They contain all of the instructions that
should be filtered and a few cases that should not."
b26a89869315ece2f6d9d10d32d45f672550f245,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,xz: Update message in --long-help for RISC-V Filter.
283f778908873eca61388029fc418fa800c9d7d7,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,"xz: Update the man page for the RISC-V Filter.

A special note was added to suggest using four-byte alignment when the
compressed instruction extension is not present in a RISC-V binary."
ac3691ccca051d67f60b4a3b05b88e511d0b1b28,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,Tests: Add RISC-V Filter test in test_compress.sh.
2959dbc7358efcf421ce51bc9cd7eae8fdd8fec4,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,liblzma: Update string_conversion.c to support RISC-V Filter.
34372a5adbe5a7f6bf29498410ba3a463a720966,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:47,CMake: Support RISC-V BCJ Filter for encoding and decoding.
440a2eccb082dc13400c09e22308a58fef85146c,Jia Tan,Jia Tan,2024-01-22 15:33:39,2024-01-23 15:05:41,"liblzma: Add RISC-V BCJ filter.

The new Filter ID is 0x0B.

Thanks to Chien Wong <m@xv97.com> for the initial version of the Filter,
the xz CLI updates, and the Autotools build system modifications.

Thanks to Igor Pavlov for his many contributions to the design of
the filter."
5540f4329bbdb4deb4850d4af48b18ad074bba19,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,"Docs: Update .xz file format specification to 1.2.0.

The new RISC-V filter was added to the specification, in addition to
updating the specification URL."
22d86192f8cf00902a1f90ee2a83ca600794459b,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,xz: Update website URLs in the man pages.
6b63c4c6139fa1bb21b570521d3d2b4a608bc34d,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,liblzma: Update website URL.
fce4758018f3a3589236f3fe7999fd9dd08c77e9,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,Docs: Update website URLs.
c26812c5b2c8a2a47f43214afe6b0b840c73e4f5,Jia Tan,Jia Tan,2024-01-19 15:08:14,2024-01-19 15:08:14,Build: Update website URL.
fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b,Lasse Collin,Lasse Collin,2024-01-11 13:01:50,2024-01-11 13:25:00,liblzma: CRC: Add a comment to crc_x86_clmul.h about BUILDING_ macros.
4f518c1b6b7b7ce5dcefea81acd44d7a086a8882,Lasse Collin,Lasse Collin,2024-01-11 13:22:36,2024-01-11 13:24:35,"liblzma: CRC: Remove crc_always_inline, use lzma_always_inline instead.

Now crc_simd_body() in crc_x86_clmul.h is only called once
in a translation unit, we no longer need to be so cautious
about ensuring the always-inline behavior."
35c03ec6bf66f1b159964c9721a2dce0e2859b20,Lasse Collin,Lasse Collin,2024-01-11 12:39:46,2024-01-11 12:39:46,liblzma: CRC: Update CLMUL comments to more generic wording.
66f080e8016129576536482ac377e2ecac7a2b90,Lasse Collin,Lasse Collin,2024-01-10 16:23:31,2024-01-11 12:29:42,"liblzma: Rename arch-specific CRC functions and macros.

CRC_CLMUL was split to CRC_ARCH_OPTIMIZED and CRC_X86_CLMUL.
CRC_ARCH_OPTIMIZED is defined when an arch-optimized version is used.
Currently the x86 CLMUL implementations are the only arch-optimized
versions, and these also use the CRC_x86_CLMUL macro to tell when
crc_x86_clmul.h needs to be included.

is_clmul_supported() was renamed to is_arch_extension_supported().
crc32_clmul() and crc64_clmul() were renamed to
crc32_arch_optimized() and crc64_arch_optimized().
This way the names make sense with arch-specific non-CLMUL
implementations as well."
3dbed75b0b9c7087c76fe687acb5cf582cd57b99,Lasse Collin,Lasse Collin,2024-01-10 16:19:21,2024-01-11 12:29:42,liblzma: Fix a comment in crc_common.h.
419f55f9dfc2df8792902b8953d50690121afeea,Lasse Collin,Lasse Collin,2023-10-20 20:35:10,2024-01-11 12:29:42,"liblzma: Avoid extern lzma_crc32_clmul() and lzma_crc64_clmul().

A CLMUL-only build will have the crcxx_clmul() inlined into
lzma_crcxx(). Previously a jump to the extern lzma_crcxx_clmul()
was needed. Notes about shared liblzma on ELF platforms:

  - On platforms that support ifunc and -fvisibility=hidden, this
    was silly because CLMUL-only build would have that single extra
    jump instruction of extra overhead.

  - On platforms that support neither -fvisibility=hidden nor linker
    version script (liblzma*.map), jumping to lzma_crcxx_clmul()
    would go via PLT so a few more instructions of overhead (still
    not a big issue but silly nevertheless).

There was a downside with static liblzma too: if an application only
needs lzma_crc64(), static linking would make the linker include the
CLMUL code for both CRC32 and CRC64 from crc_x86_clmul.o even though
the CRC32 code wouldn't be needed, thus increasing code size of the
executable (assuming that -ffunction-sections isn't used).

Also, now compilers are likely to inline crc_simd_body()
even if they don't support the always_inline attribute
(or MSVC's __forceinline). Quite possibly all compilers
that build the code do support such an attribute. But now
it likely isn't a problem even if the attribute wasn't supported.

Now all x86-specific stuff is in crc_x86_clmul.h. If other archs
The other archs can then have their own headers with their own
is_clmul_supported() and crcxx_clmul().

Another bonus is that the build system doesn't need to care if
crc_clmul.c is needed.

is_clmul_supported() stays as inline function as it's not needed
when doing a CLMUL-only build (avoids a warning about unused function)."
e3833e297dfb5021a197bda34ba2a795e30aaf8a,Lasse Collin,Lasse Collin,2023-10-20 21:06:52,2024-01-11 12:29:42,"liblzma: crc_clmul.c: Add crc_attr_target macro.

This reduces the number of the complex #if directives."
d164ac0e62904126f7920c25f9a2875c8cd28b97,Lasse Collin,Lasse Collin,2023-10-20 19:49:48,2024-01-11 12:29:42,liblzma: Simplify existing cases with lzma_attr_no_sanitize_address.
9523c1300d22fa715765c181cf991d14d6112fb1,Lasse Collin,Lasse Collin,2023-10-20 18:53:35,2024-01-11 12:29:38,liblzma: #define crc_attr_no_sanitize_address in crc_common.h.
93d144f0930821590524247bd174afd38003d7f0,Lasse Collin,Lasse Collin,2023-10-20 20:25:14,2024-01-10 15:19:03,"liblzma: CRC: Add empty lines.

And remove one too."
0c7e854ffd27f1cec2e9b0e61601d6f90bfa10ae,Lasse Collin,Lasse Collin,2023-10-20 20:19:33,2024-01-10 15:19:03,"liblzma: crc_clmul.c: Tidy up the location of MSVC pragma.

It makes no difference in practice."
15cf3f04f270d707a5c91cc0208b23b6db42b774,Lasse Collin,Lasse Collin,2023-12-20 19:16:24,2023-12-28 15:17:39,Update THANKS.
cd64dd70d5665b6048829c45772d08606f44672e,Lasse Collin,Lasse Collin,2023-12-20 19:15:16,2023-12-28 15:17:39,"liblzma: Use 8-byte method in memcmplen.h on ARM64.

It requires fast unaligned access to 64-bit integers
and a fast instruction to count leading zeros in
a 64-bit integer (__builtin_ctzll()). This perhaps
should be enabled on some other archs too.

Thanks to Chenxi Mao for the original patch:
https://github.com/tukaani-project/xz/pull/75 (the first commit)
According to the numbers there, this may improve encoding
speed by about 3-5 %.

This enables the 8-byte method on MSVC ARM64 too which
should work but wasn't tested."
12c90c00f05e19da3c0c91d8cd8e0d0d45965606,Lasse Collin,Lasse Collin,2023-12-20 19:01:06,2023-12-28 15:17:39,"liblzma: Check also for __clang__ in memcmplen.h.

This change hopefully makes no practical difference as Clang
likely was detected via __GNUC__ or _MSC_VER already."
133c5851eb917c6d99d0b623c1689c8518e65f38,Jia Tan,Jia Tan,2023-12-21 13:39:08,2023-12-21 13:39:08,Translations: Update the French translation.
710cbc186cad0ac601c38bd6bf31167648a5581e,Jia Tan,Jia Tan,2023-12-21 08:39:53,2023-12-21 12:53:27,"xz: Add a comment to Capsicum sandbox setup.

This comment is repeated in xzdec.c to help remind us why all the
capabilities are removed from stdin in certain situations."
4e1c695676bafbaecc9fb307f6ee94138ae72c12,Jia Tan,Jia Tan,2023-12-20 14:19:19,2023-12-21 12:53:27,"Docs: Update --enable-sandbox option in INSTALL.

xzdec now also uses the sandbox when its configured."
ebddf20214143a8e002ab897e95e880bb4c5ac44,Jia Tan,Jia Tan,2023-12-20 14:39:13,2023-12-21 12:53:23,"CMake: Move sandbox detection outside of xz section.

The sandbox is now enabled for xzdec as well, so it no longer belongs
in just the xz section. xz and xzdec are always built, except for older
MSVC versions, so there isn't a need to conditionally show the sandbox
configuration. CMake will do a little unecessary work on older MSVC
versions that can't build xz or xzdec, but this is a very small
downside."
5feb09266fd2928ec0a4dcb98c1dc7f053111316,Jia Tan,Jia Tan,2023-12-20 14:43:44,2023-12-20 14:43:44,"Build: Allow sandbox to be configured for just xzdec.

If xz is disabled, then xzdec can still use the sandbox."
d74fb5f060b76db709b50f5fd37490394e52f975,Jia Tan,Jia Tan,2023-12-19 13:18:28,2023-12-19 13:18:28,"xzdec: Add sandbox support for Pledge, Capsicum, and Landlock.

A very strict sandbox is used when the last file is decompressed. The
likely most common use case of xzdec is to decompress a single file.
The Pledge sandbox is applied to the entire process with slightly more
relaxed promises, until the last file is processed.

Thanks to Christian Weisgerber for the initial patch adding Pledge
sandboxing."
b34b6a9912d6165e34ba0db151b7f9941d2e06d5,Jia Tan,Jia Tan,2023-12-20 13:31:34,2023-12-20 13:38:39,"liblzma: Initialize lzma_lz_encoder pointers with NULL.

This fixes the recent change to lzma_lz_encoder that used memzero
instead of the NULL constant. On some compilers the NULL constant
(always 0) may not equal the NULL pointer (this only needs to guarentee
to not point to valid memory address).

Later code compares the pointers to the NULL pointer so we must
initialize them with the NULL pointer instead of 0 to guarentee
code correctness."
183a62f0b540ff4d23cc19b2b6bc2525f0bd64df,Jia Tan,Jia Tan,2023-12-16 12:51:38,2023-12-16 12:51:38,"liblzma: Set all values in lzma_lz_encoder to NULL after allocation.

The first member of lzma_lz_encoder doesn't necessarily need to be set
to NULL since it will always be set before anything tries to use it.
However the function pointer members must be set to NULL since other
functions rely on this NULL value to determine if this behavior is
supported or not.

This fixes a somewhat serious bug, where the options_update() and
set_out_limit() function pointers are not set to NULL. This seems to
have been forgotten since these function pointers were added many years
after the original two (code() and end()).

The problem is that by not setting this to NULL we are relying on the
memory allocation to zero things out if lzma_filters_update() is called
on a LZMA1 encoder. The function pointer for set_out_limit() is less
serious because there is not an API function that could call this in an
incorrect way. set_out_limit() is only called by the MicroLZMA encoder,
which must use LZMA1 where set_out_limit() is always set. Its currently
not possible to call set_out_limit() on an LZMA2 encoder at this time.

So calling lzma_filters_update() on an LZMA1 encoder had undefined
behavior since its possible that memory could be manipulated so the
options_update member pointed to a different instruction sequence.

This is unlikely to be a bug in an existing application since it relies
on calling lzma_filters_update() on an LZMA1 encoder in the first place.
For instance, it does not affect xz because lzma_filters_update() can
only be used when encoding to the .xz format.

This is fixed by using memzero() to set all members of lzma_lz_encoder
to NULL after it is allocated. This ensures this mistake will not occur
here in the future if any additional function pointers are added."
1a1bb381db7a20cf86cb45a350e5cca35224d017,Jia Tan,Jia Tan,2023-12-16 12:30:55,2023-12-16 12:30:55,liblzma: Tweak a comment.
55810780e04f759747b02683fb8020b8cd022a85,Jia Tan,Jia Tan,2023-12-16 12:28:21,2023-12-16 12:28:21,"liblzma: Make parameter names in function definition match declaration.

lzma_raw_encoder() and lzma_raw_encoder_init() used ""options"" as the
parameter name instead of ""filters"" (used by the declaration). ""filters""
is more clear since the parameter represents the list of filters passed
to the raw encoder, each of which contains filter options."
5dad6f628af742bab826819760deb677597445f7,Jia Tan,Jia Tan,2023-12-16 12:18:47,2023-12-16 12:18:47,"liblzma: Improve lzma encoder init function consistency.

lzma_encoder_init() did not check for NULL options, but
lzma2_encoder_init() did. This is more of a code style improvement than
anything else to help make lzma_encoder_init() and lzma2_encoder_init()
more similar."
e1b1a9d6370b788bd6078952c6c201e12bc27cbf,Jia Tan,Jia Tan,2023-12-16 03:20:20,2023-12-16 03:20:20,Docs: Update repository URL in Changelog.
f9b82bc64a9405e486575c65c1729229eb0a8198,Jia Tan,Jia Tan,2023-12-15 08:56:31,2023-12-15 08:56:31,CI: Update Upload Artifact Action.
d0b24efe6cdc47db5b0fdf6306f70a2e0e63e49e,Jia Tan,Jia Tan,2023-12-07 13:48:07,2023-12-07 13:48:07,"Tests: Silence -Wsign-conversion warning on GCC version < 10.

Since GCC version 10, GCC no longer complains about simple implicit
integer conversions with Arithmetic operators.

For instance:

    uint8_t a = 5;
    uint32_t b = a + 5;

Give a warning on GCC 9 and earlier but this:

    uint8_t a = 5;
    uint32_t b = (a + 5) * 2;

Gives a warning with GCC 10+."
4a972a8ee3ed88ac14067c1d2f15b78988e5dae8,Jia Tan,Jia Tan,2023-12-06 10:39:03,2023-12-07 12:06:57,Update THANKS.
ee2f48350099201694a7586e41d7aa2f09fc74da,Jia Tan,Jia Tan,2023-12-06 10:30:25,2023-12-07 12:06:57,"Tests: Minor cleanups to OSS-Fuzz files.

Most of these fixes are small typos and tweaks. A few were caused by bad
advice from me. Here is the summary of what is changed:

- Author line edits

- Small comment changes/additions

- Using the return value in the error messages in the fuzz targets'
  coder initialization code

- Removed fuzz_encode_stream.options. This set a max length, which may
  prevent some worthwhile code paths from being properly exercised.

- Removed the max_len option from fuzz_decode_stream.options for the
  same reason as fuzz_encode_stream. The alone decoder fuzz target still
  has this restriction.

- Altered the dictionary contents for fuzz_lzma.dict. Instead of keeping
  the properties static and varying the dictionary size, the properties
  are varied and the dictionary size is kept small. The dictionary size
  doesn't have much impact on the code paths but the properties do.

Closes: https://github.com/tukaani-project/xz/pull/73"
483bb90eec7c83e1c2bcd06287714afd62d8c17d,Maksym Vatsyk,Jia Tan,2023-12-05 15:31:09,2023-12-07 12:06:57,"Tests: Add fuzz_encode_stream ossfuzz target.

This fuzz target handles .xz stream encoding. The first byte of input
is used to dynamically set the preset level in order to increase the
fuzz coverage of complex critical code paths."
7ca8c9869df82756c3128c4fcf1058da4d18aa48,Maksym Vatsyk,Jia Tan,2023-12-04 16:23:24,2023-12-07 12:06:57,"Tests: Add fuzz_decode_alone OSS-Fuzz target

This fuzz target that handles LZMA alone decoding. A new fuzz
dictionary .dict was also created with common LZMA header values to
help speed up the discovery of valid headers."
37581a77ad5a49615325b1d1925fdc402b1e1d5a,Maksym Vatsyk,Jia Tan,2023-12-04 16:21:29,2023-12-07 12:06:54,"Tests: Update OSS-Fuzz Makefile.

All .c files can be built as separate fuzz targets. This simplifies
the Makefile by allowing us to use wildcards instead of having a
Makefile target for each fuzz target."
28ce6a1c2a74866c51f7996a6869679c236d3c94,Maksym Vatsyk,Jia Tan,2023-12-04 16:20:08,2023-12-07 12:06:54,Tests: Move common OSS-Fuzz target code to .h file.
bf0521ea1591c25b9d510c1b8be86073e9d847c6,Maksym Vatsyk,Jia Tan,2023-12-04 16:18:20,2023-12-07 12:06:51,Tests: Rename OSS-Fuzz files.
685094b8e1c1aa1bf934de0366ca42ef599d25f7,Jia Tan,Jia Tan,2023-11-30 15:10:43,2023-11-30 15:10:43,Update THANKS.
3b3023e00b0071e10f589bbc3674e0ec432b8add,Kian-Meng Ang,Jia Tan,2023-11-30 15:01:19,2023-11-30 15:08:05,Tests: Fix typos
424d46ead8cbc0da57f406b76926ec4ed47437f5,Kian-Meng Ang,Jia Tan,2023-11-30 14:59:47,2023-11-30 15:08:05,xz: Fix typo
35558adf9c45e5597f2c8dbd969885dd484038d2,Jia Tan,Jia Tan,2023-11-30 12:41:00,2023-11-30 12:41:00,Update THANKS.
fd170e8557727bed6bec0518c16415064d972e4e,Jia Tan,Jia Tan,2023-11-22 13:20:12,2023-11-30 12:09:46,CI: Test musl libc builds on Ubuntu runner.
db2b4aa068a492c0013279a4ed43803e8ff9bb3e,Jia Tan,Jia Tan,2023-11-22 13:12:15,2023-11-30 12:09:46,CI: Allow ci_build.sh to set a different C compiler.
ff7badef53c2cd698d4b72b945f34dfd0835e13c,Jia Tan,Jia Tan,2023-11-24 13:19:12,2023-11-30 12:09:46,CMake: Use consistent indentation with check_c_source_compiles().
d4af167570f2c14b002ee18a39d5b1e7e5a892b1,Jia Tan,Jia Tan,2023-11-22 12:33:36,2023-11-30 12:07:34,"CMake: Change __attribute__((__ifunc__())) detection.

This renames ALLOW_ATTR_IFUNC to USE_ATTR_IFUNC and applies the ifunc
detection changes that were made to the Autotools build.

Fixes: https://github.com/tukaani-project/xz/issues/70"
20ecee40a0053fd16371ef0628046bf45e548d72,Jia Tan,Jia Tan,2023-11-24 12:19:11,2023-11-30 12:05:09,Docs: Update INSTALL for --enable_ifunc change.
ffb456593d695d70052a2f71c7a2e6269217d194,Jia Tan,Jia Tan,2023-11-21 12:56:55,2023-11-30 12:04:42,"Build: Change --enable-ifunc handling.

Some compilers support __attribute__((__ifunc__())) even though the
dynamic linker does not. The compiler is able to create the binary
but it will fail on startup. So it is not enough to just test if
the attribute is supported.

The default value for enable_ifunc is now auto, which will attempt
to compile a program using __attribute__((__ifunc__())). There are
additional checks in this program if glibc is being used or if it
is running on FreeBSD.

Setting --enable-ifunc will skip this test and always enable
__attribute__((__ifunc__())), even if is not supported."
12b89bcc9915090eb42ae638e565af44b6832a23,Lasse Collin,Lasse Collin,2023-11-23 15:39:10,2023-11-23 15:39:10,xz: Tweak a comment.
2ab2e4b5a542eab93902985ce4e642719a8b7a4e,Jia Tan,Jia Tan,2023-11-23 14:13:39,2023-11-23 14:40:27,xz: Use is_tty() in message.c.
584e3a258f32d579b1d07f99b4dc6e856c10ac7e,Jia Tan,Jia Tan,2023-11-23 14:04:35,2023-11-23 14:40:20,"xz: Create separate is_tty() function.

The new is_tty() will report if a file descriptor is a terminal or not.
On POSIX systems, it is a wrapper around isatty(). However, the native
Windows implementation of isatty() will return true for all character
devices, not just terminals. So is_tty() has a special case for Windows
so it can use alternative Windows API functions to determine if a file
descriptor is a terminal.

This fixes a bug with MSVC and MinGW-w64 builds that refused to read from
or write to non-terminal character devices because xz thought it was a
terminal. For instance:

    xz foo -c > /dev/null

would fail because /dev/null was assumed to be a terminal."
6b05f827f50e686537e9a23c49c5aa4c0aa6b23d,Jia Tan,Jia Tan,2023-11-22 12:39:41,2023-11-22 12:39:41,"tuklib_integer: Fix typo discovered by codespell.

Based on internet dictionary searches, 'choise' is an outdated spelling
of 'choice'."
659aca0d695807c0762d4101765189e4e33d1e2c,Lasse Collin,Jia Tan,2023-11-17 17:35:19,2023-11-17 17:56:09,"xz: Move the check for --suffix with --format=raw a few lines earlier.

Now it reads from argv[] instead of args->arg_names."
ca278eb2b7f5a4940f5ab18955297b398d423824,Jia Tan,Jia Tan,2023-11-17 12:35:11,2023-11-17 17:56:05,"Tests: Create test_suffix.sh.

This tests some complicated interactions with the --suffix= option.
The suffix option must be used with --format=raw, but can optionally
be used to override the default .xz suffix.

This test also verifies some recent bugs have been correctly solved
and to hopefully avoid further regressions in the future."
2a732aba22da1b0d4a1241cb32280ed010ba03ce,Jia Tan,Jia Tan,2023-11-17 12:19:26,2023-11-17 15:16:55,"xz: Fix a bug with --files and --files0 in raw mode without a suffix.

The following command caused a segmentation fault:

    xz -Fraw --lzma1 --files=foo

when foo was a valid file. The usage of --files or --files0 was not
being checked when compressing or decompressing in raw mode without a
suffix. The suffix checking code was meant to validate that all files
to be processed are ""-"" (if not writing to standard out), meaning the
data is only coming from standard in. In this case, there were no file
names to check since --files and --files0 store their file name in a
different place.

Later code assumed the suffix was set and caused a segmentation fault.
Now, the above command results in an error."
299920bab9ae258a247366339264e8aefca9e3ce,Jia Tan,Jia Tan,2023-11-17 12:04:58,2023-11-17 12:04:58,Tests: Fix typo in a comment.
f481523baac946fa3bc13d79186ffaf0c0b818a7,Jia Tan,Jia Tan,2023-11-15 15:40:13,2023-11-15 15:40:13,"xz: Refactor suffix test with raw format.

The previous version set opt_stdout, but this caused an issue with
copying an input file to standard out when decompressing an unknown file
type. The following needs to result in an error:

    echo foo | xz -df

since -c, --stdout is not used. This fixes the previous error by not
setting opt_stdout."
837ea40b1c9d4998cac4500b55171bf33e0c31a6,Jia Tan,Jia Tan,2023-11-14 12:27:46,2023-11-14 12:27:46,"xz: Move suffix check after stdout mode is detected.

This fixes a bug introduced in cc5aa9ab138beeecaee5a1e81197591893ee9ca0
when the suffix check was initially moved. This caused a situation that
previously worked:

    echo foo | xz -Fraw --lzma1 | wc -c

to fail because the old code knew that this would write to standard out
so a suffix was not needed."
d4f4a4d040ef47a5e82dffd0f067e92716606ddf,Jia Tan,Jia Tan,2023-11-14 12:27:04,2023-11-14 12:27:04,"xz: Detect when all data will be written to standard out earlier.

If the -c, --stdout argument is not used, then we can still detect when
the data will be written to standard out if all of the provided
filenames are ""-"" (denoting standard in) or if no filenames are
provided."
2ade7246e7ba729a91460d2fab0f4c7b89d3998b,Jia Tan,Jia Tan,2023-11-08 17:21:53,2023-11-08 17:21:53,liblzma: Add missing comments to lz_encoder.h.
5fe1450603dc625340b8b7866fb4a83ff748ad06,Jia Tan,Jia Tan,2023-11-01 12:18:30,2023-11-01 12:58:58,Add NEWS for 5.4.5.
46007049cd42e606543dbe650feb17bdf4469c29,Lasse Collin,Lasse Collin,2023-10-31 19:41:09,2023-10-31 19:41:09,"liblzma: Fix compilation of fastpos_tablegen.c.

The macro lzma_attr_visibility_hidden has to be defined to make
fastpos.h usable. The visibility attribute is irrelevant to
fastpos_tablegen.c so simply #define the macro to an empty value.

fastpos_tablegen.c is never built by the included build systems
and so the problem wasn't noticed earlier. It's just a standalone
program for generating fastpos_table.c.

Fixes: https://github.com/tukaani-project/xz/pull/69
Thanks to GitHub user Jamaika1."
148e20607e95781558bdfc823ecba07b7af4b590,Jia Tan,Jia Tan,2023-10-31 13:51:40,2023-10-31 13:54:11,Build: Fix text wrapping in an output message.
8c36ab79cbf23104ce7a3d533d5ac98cd492e57c,Lasse Collin,Lasse Collin,2023-10-30 16:09:53,2023-10-30 16:44:32,"liblzma: Add a note why crc_always_inline exists for now.

Solaris Studio is a possible example (not tested) which
supports the always_inline attribute but might not get
detected by the common.h #ifdefs."
e7a86b94cd247435ac96bc79ba528b690b9ca388,Lasse Collin,Lasse Collin,2023-10-22 14:59:11,2023-10-30 16:44:32,liblzma: Use lzma_always_inline in memcmplen.h.
dcfe5632992fb7f06f921da13fcdd84f83d0d285,Lasse Collin,Lasse Collin,2023-10-30 15:43:03,2023-10-30 16:44:32,liblzma: #define lzma_always_inline in common.h.
41113fe30a47f6fd3e30cb4494dd538e86212edf,Lasse Collin,Lasse Collin,2023-10-22 14:15:32,2023-10-30 16:06:25,"liblzma: Use lzma_attr_visibility_hidden on private extern declarations.

These variables are internal to liblzma and not exposed in the API."
a2f5ca706acc6f7715b8d260a8c6ed50d7717478,Lasse Collin,Lasse Collin,2023-10-22 14:08:39,2023-10-30 16:03:39,"liblzma: #define lzma_attr_visibility_hidden in common.h.

In ELF shared libs:

-fvisibility=hidden affects definitions of symbols but not
declarations.[*] This doesn't affect direct calls to functions
inside liblzma as a linker can replace a call to lzma_foo@plt
with a call directly to lzma_foo when -fvisibility=hidden is used.

[*] It has to be like this because otherwise every installed
    header file would need to explictly set the symbol visibility
    to default.

When accessing extern variables that aren't defined in the
same translation unit, compiler assumes that the variable has
the default visibility and thus indirection is needed. Unlike
function calls, linker cannot optimize this.

Using __attribute__((__visibility__(""hidden""))) with the extern
variable declarations tells the compiler that indirection isn't
needed because the definition is in the same shared library.

About 15+ years ago, someone told me that it would be good if
the CRC tables would be defined in the same translation unit
as the C code of the CRC functions. While I understood that it
could help a tiny amount, I didn't want to change the code because
a separate translation unit for the CRC tables was needed for the
x86 assembly code anyway. But when visibility attributes are
supported, simply marking the extern declaration with the
hidden attribute will get identical result. When there are only
a few affected variables, this is trivial to do. I wish I had
understood this back then already."
2c7ee92e44e1e66f0a427555233eb22c78f6c4f8,Lasse Collin,Lasse Collin,2023-09-30 19:54:28,2023-10-26 18:46:06,"liblzma: Refer to MinGW-w64 instead of MinGW in the API headers.

MinGW (formely a MinGW.org Project, later the MinGW.OSDN Project
at <https://osdn.net/projects/mingw/>) has GCC 9.2.0 as the
most recent GCC package (released 2021-02-02). The project might
still be alive but majority of people have switched to MinGW-w64.
Thus it seems clearer to refer to MinGW-w64 in our API headers too.
Building with MinGW is likely to still work but I haven't tested it
in the recent years."
597f49b61475438a43a417236989b2acc968a686,Lasse Collin,Lasse Collin,2023-09-26 21:58:17,2023-10-26 18:46:06,"CMake: Use -D_FILE_OFFSET_BITS=64 if (and only if) needed.

A CMake option LARGE_FILE_SUPPORT is created if and only if
-D_FILE_OFFSET_BITS=64 affects sizeof(off_t).

This is needed on many 32-bit platforms and even with 64-bit builds
with MinGW-w64 to get support for files larger than 2 GiB."
1bc548b8210366e44ba35b0b11577a8e328c1228,Lasse Collin,Lasse Collin,2023-09-29 23:14:25,2023-10-26 18:46:06,"CMake: Generate and install liblzma.pc if not using MSVC.

Autotools based build uses -pthread and thus adds it to Libs.private
in liblzma.pc. CMake doesn't use -pthread at all if pthread functions
are available in libc so Libs.private doesn't get -pthread either."
2add71966f891d315105d6245f724ed4f43a4eff,Lasse Collin,Lasse Collin,2023-09-29 22:13:13,2023-10-26 18:46:06,"CMake: Rearrange the PACKAGE_ variables.

The windres workaround now replaces spaces with \x20 so
the package name isn't repeated.

These changes will help with creation of liblzma.pc."
a7d1b2825c49dc83f1910eeb8ba0f1dfbd886d91,Lasse Collin,Lasse Collin,2023-09-29 17:46:11,2023-10-26 18:46:06,"liblzma: Add Cflags.private to liblzma.pc.in for MSYS2.

It properly adds -DLZMA_API_STATIC when compiling code that
will be linked against static liblzma. Having it there on
systems other than Windows does no harm.

See: https://www.msys2.org/docs/pkgconfig/"
80e0750e3996c1c659e972ce9cf789ca2e99f702,Lasse Collin,Lasse Collin,2023-09-27 19:46:20,2023-10-26 18:46:06,CMake: Create liblzma.def when building liblzma.dll with MinGW-w64.
08d12595f486890cf601b87f36ee0ddbce57728e,Lasse Collin,Lasse Collin,2023-10-26 18:44:42,2023-10-26 18:46:06,"CMake: Change one CMAKE_CURRENT_SOURCE_DIR to CMAKE_CURRENT_LIST_DIR.

In this case they have identical values."
e67aaf698de75c73443a5ec786781cbf2034461d,Lasse Collin,Lasse Collin,2023-10-01 16:10:57,2023-10-26 15:58:21,"CMake/Windows: Fix the import library filename.

Both PREFIX and IMPORT_PERFIX have to be set to """" to get
liblzma.dll and liblzma.dll.a."
88588b1246d8c26ffbc138b3e5c413c5f14c3179,Lasse Collin,Lasse Collin,2023-10-25 16:13:25,2023-10-25 17:18:04,"Build: Detect -fsanitize= in CFLAGS and incompatible build options.

Now configure will fail if -fsanitize= is found in CFLAGS
and sanitizer-incompatible ifunc or Landlock sandboxing
would be used. These are incompatible with one or more sanitizers.
It's simpler to reject all -fsanitize= uses instead of trying to
pass those that might not cause problems.

CMake-based build was updated similarly. It lets the configuration
finish (SEND_ERROR instead of FATAL_ERROR) so that both error
messages can be seen at once."
5e3d890f8862a7d4fbef5e38e11b6c9fbd98f468,Jia Tan,Jia Tan,2023-10-23 16:50:08,2023-10-23 16:50:08,"CI: Disable sandboxing in fsanitize=address,undefined job.

The sandboxing on Linux now supports Landlock, which restricts all
supported filesystem actions after xz opens the files it needs. The
sandbox is only enabled when one file is input and we are writing to
standard out. With fsanitize=address,undefined, the instrumentation
needs to read additional files after the sandbox is in place. This
forces all xz based test to fail, so the sandbox must instead be
disabled."
b1408987ea832e2760e478ae960a636df17a1363,Jia Tan,Jia Tan,2023-10-23 16:15:39,2023-10-23 16:15:39,CI: Allow disabling the sandbox in ci_build.sh.
91c435cf1c7a1e893706d4d716dfd361621ed824,Lasse Collin,Lasse Collin,2023-10-11 16:47:44,2023-10-22 16:03:52,"CMake: Don't shadow the cache entry ENABLE_THREADS with a normal variable.

Using set(ENABLE_THREADS ""posix"") is confusing because it sets
a new normal variable and leaves the cache entry with the same
name unchanged. The intent wasn't to change the cache entry so
this switches to a different variable name."
fa1609eb9393ecd30decfed4891c907829f06710,Lasse Collin,Lasse Collin,2023-10-09 19:28:49,2023-10-22 16:03:52,Docs: Update INSTALL about sandboxing support.
8276c7f41c671eee4aa3239490658b23dcfd3021,Lasse Collin,Lasse Collin,2023-10-09 19:07:52,2023-10-22 16:03:52,"xz: Support basic sandboxing with Linux Landlock (ABI versions 1-3).

It is enabled only when decompressing one file to stdout,
similar to how Capsicum is used.

Landlock was added in Linux 5.13."
3a1e9fd031b9320d769d63b503ef4e82e1b6ea8c,Lasse Collin,Lasse Collin,2023-10-09 18:12:31,2023-10-22 16:03:52,"CMake: Edit threading related messages.

It's mostly to change from ""thread method"" to ""threading method""."
bf011352528ae3539ea7b780b45b96736ee57a99,Lasse Collin,Lasse Collin,2023-10-09 17:59:24,2023-10-22 16:03:52,"CMake: Use FATAL_ERROR if user-supplied options aren't understood.

This way typos are caught quickly and compounding error messages
are avoided (a single typo could cause more than one error).

This keeps using SEND_ERROR when the system is lacking a feature
(like threading library or sandboxing method). This way the whole
configuration log will be generated in case someone wishes to
report a problem upstream."
3f53870c249945d657ca3d75e0993e6267d71f75,Lasse Collin,Lasse Collin,2023-10-09 15:37:32,2023-10-22 16:03:52,CMake: Add sandboxing support.
2e2cd11535ad77364cf021297e0b3f162fa3a3d0,Lasse Collin,Lasse Collin,2023-10-09 15:13:08,2023-10-22 16:03:52,"Simplify detection of Capsicum support.

This removes support for FreeBSD 10.0 and 10.1 which used
<sys/capability.h> instead of <sys/capsicum.h>. Support for
FreeBSD 10.1 ended on 2016-12-31. So now FreeBSD >= 10.2 is
required to enable Capsicum support.

This also removes support for Capsicum on Linux (libcaprights)
which seems to have been unmaintained since 2017 and Linux 4.11:
https://github.com/google/capsicum-linux"
c57858b60e186d020b2dbaf7aabd9b32c71da824,Lasse Collin,Lasse Collin,2023-09-24 22:46:36,2023-10-22 15:59:45,"xz/Windows: Allow clock_gettime with POSIX threads.

If winpthreads are used for threading, it's OK to use clock_gettime()
from winpthreads too."
dd32f628bb5541ef4e8ce66966ef456a1934084c,Lasse Collin,Lasse Collin,2023-09-24 22:39:26,2023-10-22 15:59:45,"mythread.h: Make MYTHREAD_POSIX compatible with MinGW-w64's winpthreads.

This might be almost useless but it doesn't need much extra code either."
680e52cdd086e92691d8a0bca2c98815565f60ca,Lasse Collin,Lasse Collin,2023-09-23 00:06:36,2023-10-22 15:59:45,"CMake: Check for clock_gettime() even on Windows.

This mirrors configure.ac although currently MinGW-w64 builds
don't use clock_gettime() even if it is found."
1c1a8c3ee4dad0064dbe63b8dbc4ac4bc679f419,Lasse Collin,Lasse Collin,2023-09-23 00:23:32,2023-10-22 15:59:45,"Build: Check for clock_gettime() even if not using POSIX threads.

See the new comment in the code.

This also makes the check for clock_gettime() run with MinGW-w64
with which we don't want to use clock_gettime(). The previous
commit already took care of this situation."
46fd991cd2808ef62554853864c946232e7547f0,Lasse Collin,Lasse Collin,2023-09-24 19:58:53,2023-10-22 15:59:45,"xz/Windows: Ensure that clock_gettime() isn't used with MinGW-w64.

This commit alone doesn't change anything in the real-world:

  - configure.ac currently checks for clock_gettime() only
    when using pthreads.

  - CMakeLists.txt doesn't check for clock_gettime() on Windows.

So clock_gettime() wasn't used with MinGW-w64 before either.

clock_gettime() provides monotonic time and it's better than
gettimeofday() in this sense. But clock_gettime() is defined
in winpthreads, and liblzma or xz needs nothing else from
winpthreads. By avoiding clock_gettime(), we avoid the dependency on
libwinpthread-1.dll or the need to link against the static version.

As a bonus, GetTickCount64() and MinGW-w64's gettimeofday() can be
faster than clock_gettime(CLOCK_MONOTONIC, &tv). The resolution
is more than good enough for the progress indicator in xz."
cdb4d91f2464b50c985ef7b9517314ea237ddda7,Lasse Collin,Lasse Collin,2023-09-23 21:21:22,2023-10-22 15:59:45,xz/Windows: Use GetTickCount64() with MinGW-w64 if using Vista threads.
988e09f27b9b04a43d45d10f92782e0092ee27a9,Jia Tan,Jia Tan,2023-10-20 11:17:46,2023-10-20 16:01:29,"liblzma: Move is_clmul_supported() back to crc_common.h.

This partially reverts creating crc_clmul.c
(8c0f9376f58c0696d5d6719705164d35542dd891) where is_clmul_supported()
was moved, extern'ed, and renamed to lzma_is_clmul_supported(). This
caused a problem when the function call to lzma_is_clmul_supported()
results in a call through the PLT. ifunc resolvers run very early in
the dynamic loading sequence, so the PLT may not be setup properly at
this point. Whether the PLT is used or not for
lzma_is_clmul_supported() depened upon the compiler-toolchain used and
flags.

In liblzma compiled with GCC, for instance, GCC will go through the PLT
for function calls internal to liblzma if the version scripts and
symbol visibility hiding are not used. If lazy-binding is disabled,
then it would have made any program linked with liblzma fail during
dynamic loading in the ifunc resolver."
105c7ca90d4152942e0798580a37f736d02faa22,Jia Tan,Jia Tan,2023-10-19 08:23:32,2023-10-19 08:23:32,"Build: Remove check for COND_CHECK_CRC32 in check/Makefile.inc.

Currently crc32 is always enabled, so COND_CHECK_CRC32 must always be
set. Because of this, it makes the recent change to conditionally
compile check/crc_clmul.c appear wrong since that file has CLMUL
implementations for both CRC32 and CRC64."
139757170468f0f1fafdf0a8ffa74363d1ea1d0c,Jia Tan,Jia Tan,2023-10-19 08:09:01,2023-10-19 08:09:01,"CMake: Add ALLOW_CLMUL_CRC option to enable/disable CLMUL.

The option is enabled by default, but will only be visible to a user
listing cache variables or using a CMake GUI application if the
immintrin.h header file is found.

This mirrors our Autotools build --disable-clmul-crc functionality."
c60b25569d414bb73b705977a4dd342f8f9f1965,Jia Tan,Jia Tan,2023-10-18 16:22:50,2023-10-18 17:15:20,"liblzma: Fix -fsanitize=address failure with crc_clmul functions.

After forcing crc_simd_body() to always be inlined it caused
-fsanitize=address to fail for lzma_crc32_clmul() and
lzma_crc64_clmul(). The __no_sanitize_address__ attribute was added
to lzma_crc32_clmul() and lzma_crc64_clmul(), but not removed from
crc_simd_body(). ASAN and inline functions behavior has changed over
the years for GCC specifically, so while strictly required we will
keep __attribute__((__no_sanitize_address__)) on crc_simd_body() in
case this becomes a requirement in the future.

Older GCC versions refuse to inline a function with ASAN if the
caller and callee do not agree on sanitization flags
(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89124#c3). If the
function was forced to be inlined, it will not compile if the callee
function has __no_sanitize_address__ but the caller doesn't."
9a78971261bc67622cbd7dae02f6966968ac1393,Lasse Collin,Lasse Collin,2023-10-14 17:16:13,2023-10-18 16:02:45,tuklib_integer: Update the CMake test for fast unaligned access.
2f81ac852bc5aafc91c8e2adc66b5114761703c4,Lasse Collin,Lasse Collin,2023-09-23 20:28:48,2023-10-18 16:02:45,"Build: Enabled unaligned access by default on PowerPC64LE and some RISC-V.

PowerPC64LE wasn't tested but it seems like a safe change.
POWER8 supports unaligned access in little endian mode. Testing
on godbolt.org shows that GCC uses unaligned access by default.

The RISC-V macro __riscv_misaligned_fast is very new and not
in any stable compiler release yet.

Documentation in INSTALL was updated to match.

Documentation about an autodetection bug when using ARM64 GCC
with -mstrict-align was added to INSTALL.

CMake files weren't updated yet."
c8f715f1bca4c30db814fcf1fd2fe88b8992ede2,Lasse Collin,Lasse Collin,2023-10-14 14:56:59,2023-10-18 16:02:45,"tuklib_integer: Revise unaligned reads and writes on strict-align archs.

In XZ Utils context this doesn't matter much because
unaligned reads and writes aren't used in hot code
when TUKLIB_FAST_UNALIGNED_ACCESS isn't #defined."
6828242735cbf61b93d140383336e1e51a006f2d,Lasse Collin,Lasse Collin,2023-09-22 23:21:49,2023-10-18 16:02:45,tuklib_integer: Add missing write64be and write64le fallback functions.
1c8884f0af28b3a4690bb573cdf3240a8ec73416,Jia Tan,Jia Tan,2023-10-18 11:57:10,2023-10-18 15:54:41,"liblzma: Set the MSVC optimization fix to only cover lzma_crc64_clmul().

After testing a 32-bit Release build on MSVC, only lzma_crc64_clmul()
has the bug. crc_simd_body() and lzma_crc32_clmul() do not need the
optimizations disabled."
5ce0f7a48bdf5c3b45430850a4487307afac6143,Lasse Collin,Jia Tan,2023-10-18 11:30:00,2023-10-18 15:54:41,liblzma: CRC_USE_GENERIC_FOR_SMALL_INPUTS cannot be used with ifunc.
27735380491bb5ce0d0f41d5244d89c1d0825f6b,Lasse Collin,Jia Tan,2023-10-17 18:53:11,2023-10-18 15:54:41,"liblzma: Include common.h in crc_common.h.

crc_common.h depends on common.h. The headers include common.h except
when there is a reason to not do so."
e13b7947b92355c334edd594295d3a2c99c4bca1,Jia Tan,Jia Tan,2023-10-17 17:23:26,2023-10-18 15:54:41,liblzma: Add include guards to crc_common.h.
40abd88afcc61a8157fcd12d78d491caeb8e12be,Jia Tan,Jia Tan,2023-10-18 14:50:25,2023-10-18 15:54:41,"liblzma: Add the crc_always_inline macro to crc_simd_body().

Forcing this to be inline has a significant speed improvement at the
cost of a few repeated instructions. The compilers tested on did not
inline this function since it is large and is used twice in the same
translation unit."
a5966c276bd6fa975f0389f8a8dc61393de750b0,Jia Tan,Jia Tan,2023-10-18 14:48:19,2023-10-18 15:54:41,"liblzma: Create crc_always_inline macro.

This macro must be used instead of the inline keyword. On MSVC, it is
a replacement for __forceinline which is an MSVC specific keyword that
should not be used with inline (it will issue a warning if it is).

It does not use a build system check to determine if
__attribute__((__always_inline__)) since all compilers that can use
CLMUL extensions (except the special case for MSVC) should support this
attribute. If this assumption is incorrect then it will result in a bug
report instead of silently producing slow code."
96b663f67c0e738a99ba8f35d9f4ced9add74544,Jia Tan,Jia Tan,2023-10-14 05:23:23,2023-10-18 15:54:41,"liblzma: Refactor CRC comments.

A detailed description of the three dispatch methods was added. Also,
duplicated comments now only appear in crc32_fast.c or were removed from
both crc32_fast.c and crc64_fast.c if they appeared in crc_clmul.c."
8c0f9376f58c0696d5d6719705164d35542dd891,Jia Tan,Jia Tan,2023-10-14 04:17:57,2023-10-18 15:54:36,"liblzma: Create crc_clmul.c.

Both crc32_clmul() and crc64_clmul() are now exported from
crc32_clmul.c as lzma_crc32_clmul() and lzma_crc64_clmul(). This
ensures that is_clmul_supported() (now lzma_is_clmul_supported()) is
not duplicated between crc32_fast.c and crc64_fast.c.

Also, it encapsulates the complexity of the CLMUL implementations into a
single file and reduces the complexity of crc32_fast.c and crc64_fast.c.
Before, CLMUL code was present in crc32_fast.c, crc64_fast.c, and
crc_common.h.

During the conversion, various cleanups were applied to code (thanks to
Lasse Collin) including:

- Require using semicolons with MASK_/L/H/LH macros.
- Variable typing and const handling improvements.
- Improvements to comments.
- Fixes to the pragmas used.
- Removed unneeded variables.
- Whitespace improvements.
- Fixed CRC_USE_GENERIC_FOR_SMALL_INPUTS handling.
- Silenced warnings and removed the need for some #pragmas"
a3ebc2c516b09616638060806c841bd4bcf7bce3,Jia Tan,Jia Tan,2023-10-14 02:23:03,2023-10-18 12:41:11,"liblzma: Define CRC_USE_IFUNC in crc_common.h.

When ifunc is supported, we can define a simpler macro instead of
repeating the more complex check in both crc32_fast.c and crc64_fast.c."
f1cd9d7194f005cd66ec03c6635ceae75f90ef17,Hans Jansen,Jia Tan,2023-10-12 17:37:01,2023-10-13 12:54:05,liblzma: Added crc32_clmul to crc32_fast.c.
93e6fb08b22c7c13be2dd1e7274fe78413436254,Hans Jansen,Jia Tan,2023-10-12 17:23:40,2023-10-13 12:54:05,"liblzma: Moved CLMUL CRC logic to crc_common.h.

crc64_fast.c was updated to use the code from crc_common.h instead."
233885a437f8b55a5c8442984ebc0aaa579e92de,Hans Jansen,Jia Tan,2023-10-12 17:07:50,2023-10-13 12:54:05,liblzma: Rename crc_macros.h to crc_common.h.
37947d4a7565b87e4cec8b89229d35b0a3f8d2cd,Gabriela Gutierrez,Jia Tan,2023-09-26 15:55:13,2023-10-13 12:03:13,"CI: Bump and ref actions by commit SHA in windows-ci.yml

Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.

It's important to make sure the SHA's are from the original repositories and not forks.

For reference:

https://github.com/msys2/setup-msys2/releases/tag/v2.20.1
https://github.com/msys2/setup-msys2/commit/27b3aa77f672cb6b3054121cfd80c3d22ceebb1d

https://github.com/actions/checkout/releases/tag/v4.1.0
https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608

https://github.com/actions/upload-artifact/releases/tag/v3.1.3
https://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32

Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>"
f28cc9bd481ce493da11f98c18526d324211599a,Gabriela Gutierrez,Jia Tan,2023-09-26 14:35:08,2023-10-13 12:03:13,"CI: Bump and ref actions by commit SHA in ci.yml

Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.

It's important to make sure the SHA's are from the original repositories and not forks.

For reference:

https://github.com/actions/checkout/releases/tag/v4.1.0
https://github.com/actions/checkout/commit/8ade135a41bc03ea155e62e844d188df1ea18608

https://github.com/actions/upload-artifact/releases/tag/v3.1.3
https://github.com/actions/upload-artifact/commit/a8a3f3ad30e3422c9c7b888a15615d19a852ae32

Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>"
f74f1740067b75042497edbfa6ea457ff75484b9,Jia Tan,Jia Tan,2023-10-12 12:12:18,2023-10-12 12:12:18,"Build: Update visibility.m4 from Gnulib.

Updating from version 6 -> 8 from upstream. Declarations for variables
and function bodies were added to avoid unnecessary failures with
-Werror."
5c4bca521e6fb435898a0012b3276eee70a6dadf,Lasse Collin,Lasse Collin,2023-10-06 16:36:35,2023-10-06 16:36:35,Update THANKS.
d91cb6e884c73d0b05d7e7d68ad4e6eb29f4b44b,Lasse Collin,Lasse Collin,2023-10-06 15:55:57,2023-10-06 16:32:06,"CMake/Windows: Fix when the windres workaround is applied.

CMake doesn't set WIN32 on CYGWIN but the workaround is
probably needed on Cygwin too. Same for MSYS and MSYS2.

The workaround must not be used with Clang that is acting in
MSVC mode. This fixes it by checking for the known environments
that need the workaround instead of using ""NOT MSVC"".

Thanks to Martin Storsjö.
https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f#commitcomment-129098431"
01e34aa1171b04f8b28960b1cc6135a903e0c13d,Jia Tan,Jia Tan,2023-09-29 14:11:54,2023-09-29 14:11:54,"CI: Disable CLANG64 MSYS2 environment until bug is resolved.

lld 17.0.1 searches for libraries to link first in the toolchain
directories before the local directory when building. The is a problem
for us because liblzma.a is installed in MSYS2 CLANG64 by default and
xz.exe will thus use the installed library instead of the one being
built.

This causes tests to fail when they are expecting features to be
disabled. More importantly, it will compile xz.exe with an incorrect
liblzma and could cause unexpected behavior by being unable to update
liblzma code in static builds. The CLANG64 environment can be tested
again once this is fixed.

Link to bug: https://github.com/llvm/llvm-project/issues/67779."
30d0c35327f3639cb11224872aa58fdbf0b1526e,Jia Tan,Jia Tan,2023-09-29 12:14:39,2023-09-29 12:14:39,"CMake: Rename xz and man page symlink custom targets.

The Ninja Generator for CMake cannot have a custom target and its
BYPRODUCTS have the same name. This has prevented Ninja builds on
Unix-like systems since the xz symlinks were introduced in
80a1a8bb838842a2be343bd88ad1462c21c5e2c9."
506d03127a8565442b028ec991e1578124fd3025,Jia Tan,Jia Tan,2023-09-29 11:58:44,2023-09-29 11:58:44,"CMake: Specify LINKER_LANGUAGE for libgnu target to fix Ninja Generator.

CMake is unable to guess the linker language for just a header file so
it must be explicitly set."
0570308ddd9c0e39e85597ebc0e31d4fc81d436f,Lasse Collin,Lasse Collin,2023-09-27 16:54:35,2023-09-27 17:49:46,"CMake: Fix Windows build with Clang/LLVM 17.

llvm-windres 17.0.0 has more accurate emulation of GNU windres, so
the hack for GNU windres must now be used with llvm-windres too.

LLVM 16.0.6 has the old behavior and there likely won't be more
16.x releases. So we can simply check for >= 17.0.0.

See also:
https://github.com/llvm/llvm-project/commit/2bcc0fdc58a220cb9921b47ec8a32c85f2511a47"
5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1,Lasse Collin,Lasse Collin,2023-09-26 18:47:13,2023-09-26 18:47:13,"liblzma: Update a comment.

The C standards don't allow an empty translation unit which can be
avoided by declaring something, without exporting any symbols.

When I committed f644473a211394447824ea00518d0a214ff3f7f2 I had
a feeling that some specific toolchain somewhere didn't like
empty object files (assembler or maybe ""ar"" complained) but
I cannot find anything to confirm this now. Quite likely I
remembered nonsense. I leave this here as a note to my future self. :-)"
8ebaf3f665ddc7e4f19c613005050dde5ccbe499,Jia Tan,Jia Tan,2023-09-26 16:02:11,2023-09-26 16:04:40,"liblzma: Avoid compiler warning without creating extra symbol.

When the generic fast crc64 method is used, then we omit
lzma_crc64_table[][]. Similar to
d9166b52cf3458a4da3eb92224837ca8fc208d79, we can avoid compiler warnings
with -Wempty-translation-unit (Clang) or -pedantic (GCC) by creating a
never used typedef instead of an extra symbol."
092d21db2e5eea19fe079264ce48c178989c7606,Lasse Collin,Lasse Collin,2023-09-26 14:24:15,2023-09-26 14:24:15,Build: Update the comment about -Werror usage in checks.
a37a2763383e6c204fe878e1416dd35e7711d3a9,Lasse Collin,Lasse Collin,2023-09-26 12:00:43,2023-09-26 12:00:43,"Build: Fix __attribute__((ifunc(...))) detection with clang -Wall.

Now if user-supplied CFLAGS contains -Wall -Wextra -Wpedantic
the two checks that need -Werror will still work.

At CMake side there is add_compile_options(-Wall -Wextra)
but it didn't affect the -Werror tests. So with both Autotools
and CMake only user-supplied CFLAGS could make the checks fail
when they shouldn't.

This is not a full fix as things like -Wunused-macros in
user-supplied CFLAGS will still cause problems with both
GCC and Clang."
9c42f936939b813f25d0ff4e99c3eb9c2d17a0d2,Lasse Collin,Lasse Collin,2023-09-26 10:51:31,2023-09-26 10:51:31,"Build: Fix underquoted AC_LANG_SOURCE.

It made no practical difference in this case."
9f1444a8a5c0e724b2c7ef83424f642f07a95982,Lasse Collin,Lasse Collin,2023-09-26 10:14:37,2023-09-26 10:50:19,"Build: Silence two Autoconf warnings.

There were two uses of AC_COMPILE_IFELSE that didn't use
AC_LANG_SOURCE and Autoconf warned about these. The omission
had been intentional but it turned out that this didn't do
what I thought it would.

Autoconf 2.71 manual gives an impression that AC_LANG_SOURCE
inserts all #defines that have been made with AC_DEFINE so
far (confdefs.h). The idea was that omitting AC_LANG_SOURCE
would mean that only the exact code included in the
AC_COMPILE_IFELSE call would be compiled.

With C programs this is not true: the #defines get added without
AC_LANG_SOURCE too. There seems to be no neat way to avoid this.
Thus, with the C language at least, adding AC_LANG_SOURCE makes
no other difference than silencing a warning from Autoconf. The
generated ""configure"" remains identical. (Docs of AC_LANG_CONFTEST
say that the #defines have been inserted since Autoconf 2.63b and
that AC_COMPILE_IFELSE uses AC_LANG_CONFTEST. So the behavior is
documented if one also reads the docs of macros that one isn't
calling directly.)

Any extra code, including #defines, can cause problems for
these two tests because these tests must use -Werror.
CC=clang CFLAGS=-Weverything is the most extreme example.
It enables -Wreserved-macro-identifier which warns about
#define __EXTENSIONS__ 1 because it begins with two underscores.
It's possible to write a test file that passes -Weverything but
it becomes impossible when Autoconf inserts confdefs.h.

So this commit adds AC_LANG_SOURCE to silence Autoconf warnings.
A different solution is needed for -Werror tests."
519e47c2818acde571fadc79551294527fe6cc22,Jia Tan,Jia Tan,2023-09-25 17:17:11,2023-09-25 17:17:11,CMake: Remove accidental extra newline.
bbb42412da6a02705ba3e668e90840c2683e4e67,Jia Tan,Jia Tan,2023-09-25 16:47:26,2023-09-25 16:47:26,"Build: Remove Gnulib dependency from tests.

The tests do not use any Gnulib replacements so they do not need to link
libgnu.a or have /lib in the include path."
d265f6b75691c6c8fa876eb5320c3ff5aed17dfa,Jia Tan,Jia Tan,2023-09-25 16:43:43,2023-09-25 16:43:43,"CMake: Remove /lib from tests include path.

The tests never included anything from /lib, so this was not needed."
9fb5de41f2fb654ca952d4bda15cf3777c2b720f,Jia Tan,Jia Tan,2023-09-24 14:10:41,2023-09-24 14:10:41,Scripts: Change quoting style from `...' to '...'.
eaebdef4d4de3c088b0905f42626b74e0d23abf3,Jia Tan,Jia Tan,2023-09-24 14:10:18,2023-09-24 14:10:18,xz: Change quoting style from `...' to '...'.
f6667702bf075a05fbe336dbf3576ad1a82ec645,Jia Tan,Jia Tan,2023-09-24 14:09:47,2023-09-24 14:09:47,"liblzma: Change quoting style from `...' to '...'.

This was done for both internal and API headers."
be012b8097a4eaee335b51357d6befa745f753ce,Jia Tan,Jia Tan,2023-09-24 14:09:16,2023-09-24 14:09:16,Build: Change quoting style from `...' to '...'.
ce162db07f03495bd333696e66883c8f36abdc1e,Jia Tan,Jia Tan,2023-09-24 14:05:02,2023-09-24 14:05:02,"Docs: Change quoting style from `...' to '...'.

These days the ` and ' do not look symmetric. This quoting style has
been changed in various apps over the years including the GNU tools."
db17656721e43939bfa4ec13506e7c76f4b86da6,Jia Tan,Jia Tan,2023-09-24 13:25:01,2023-09-24 13:25:01,lib: Silence -Wsign-conversion in getopt.c.
a6234f677d66888f435010bc0b67de6a32fefcf6,Jia Tan,Jia Tan,2023-09-24 12:48:52,2023-09-24 12:48:52,"Build: Update getopt.m4 from Gnulib.

This file was modified from upstream since we do not need to replace
getopt() and can avoid complexity and feature tests."
84808b68f1075e8603a8ef95d361a61fdc6a5b10,Jia Tan,Jia Tan,2023-09-25 16:09:53,2023-09-25 16:09:53,CMake: Add /lib to include path.
01804a0b4b64e0f33568e947e0579263808c59d3,Jia Tan,Jia Tan,2023-09-24 12:36:34,2023-09-24 12:36:34,CMake: Update libgnu target with new header files.
d34558388fe1d8929f6478d61dc322eb4f2900af,Jia Tan,Jia Tan,2023-09-22 16:47:52,2023-09-22 16:47:52,lib: Update Makefile.am for new header files.
52bf644bdf536e20fcc743b712cede135e05eec5,Jia Tan,Jia Tan,2023-09-24 12:34:03,2023-09-24 12:34:03,"lib: Update getopt1.c from Gnulib.

The only difference was maintaining the conditional inclusion for
config.h."
7e884c00d0093c38339f17fb1d280eec493f42ca,Jia Tan,Jia Tan,2023-09-22 19:27:00,2023-09-22 19:27:00,"lib: Update getopt.in.h from Gnulib with modifications.

We can still avoid modifying the contents of this file during
configuration to simplify the build systems. Gnulib added replacements
for inclusions guards for Cygwin. Cygwin should not need getopt_long
replacement so this feature can be omitted.

<unistd.h> is conditionally included to avoid MSVC since it is not
available.

The definition for _GL_ARG_NONNULL was also copied into this file from
Gnulib since this stage is usually done during gnulib-tool."
cff05f82066ca3ce9425dafdb086325a8eef8de3,Jia Tan,Jia Tan,2023-09-22 16:31:55,2023-09-22 16:31:55,lib: Update getopt_int.h from Gnulib.
04bd86a4b010d43c6a016a3857ecb38dc1d5b024,Jia Tan,Jia Tan,2023-09-22 16:27:23,2023-09-22 16:27:23,"lib: Update getopt.c from Gnulib with modifications.

The code maintains the prior modifications of conditionally including
config.h and disabling NLS support.

_GL_UNUSED is repalced with the simple cast to void trick. _GL_UNUSED
is only used for these two parameters so its simpler than having to
define it."
56b42be7287844db20b3a3bc1372c6ae8c040d63,Jia Tan,Jia Tan,2023-09-22 16:18:56,2023-09-22 16:18:56,"lib: Add getopt-cdefs.h for getopt_long update.

This was modified slightly from Gnulib. In Gnulib, it expects the
@HAVE_SYS_CDEFS_H@ to be replaced. Instead, we can set HAVE_SYS_CDEFS_H
on systems that have it and avoid copying another file into the build
directory. Since we are not using gnulib-tool, copying extra files
requires extra build system updates (and special handling with CMake) so
we should avoid when possible."
9834e591a4cf9dc2f49e42e26bf28d1d247bc196,Jia Tan,Jia Tan,2023-09-22 16:15:25,2023-09-22 16:15:25,"lib: Copy new header files from Gnulib without modification.

The getopt related files have changed from Gnulib by splitting up
getopt.in.h into more modular header files. We could have kept
everything in just getopt.in.h, but this will help us continue to update
in the future."
5b7a6f06e93d99d6635a740fd2e12fab66096c93,Lasse Collin,Lasse Collin,2023-09-22 18:16:52,2023-09-24 14:48:13,Windows: Update the version requirement comments from Win95 to W2k.
e582f8e0fee46e7cd967f42f465d6bb608b73bc1,Lasse Collin,Lasse Collin,2023-09-22 18:12:54,2023-09-24 14:48:13,tuklib_physmem: Comment out support for Windows versions older than 2000.
7d73d1f0e08f96c4ab7aac91b958e37a3dadf07a,Lasse Collin,Lasse Collin,2023-09-24 13:32:32,2023-09-24 13:32:32,sysdefs.h: Update the comment about __USE_MINGW_ANSI_STDIO.
2a9929af0ab7e6c0ab725565034afe3293e51d71,Lasse Collin,Lasse Collin,2023-09-21 23:33:29,2023-09-22 17:16:40,"xz: Windows: Don't (de)compress to special files like ""con"" or ""nul"".

Before this commit, the following writes ""foo"" to the
console and deletes the input file:

    echo foo | xz > con_xz
    xz --suffix=_xz --decompress con_xz

It cannot happen without --suffix because names like con.xz
are also special and so attempting to decompress con.xz
(or compress con to con.xz) will already fail when opening
the input file.

Similar thing is possible when compressing. The following
writes to ""nul"" and the input file ""n"" is deleted.

    echo foo | xz > n
    xz --suffix=ul n

Now xz checks if the destination is a special file before
continuing. DOS/DJGPP version had a check for this but
Windows (and OS/2) didn't."
01311b81f03cce1c0ce847a3d556f84dbd439343,Lasse Collin,Lasse Collin,2023-09-21 17:42:52,2023-09-22 17:10:10,CMake: Wrap two overlong lines that are possible to wrap.
152d0771ddd0cffcac9042ad1a66f110d228eee2,Lasse Collin,Lasse Collin,2023-09-21 17:36:31,2023-09-22 17:10:10,CMake: Add a comment about threads on Cygwin.
6df988cceffaa3100b428ed816fad334935b27bf,Lasse Collin,Lasse Collin,2023-09-12 20:53:25,2023-09-22 17:10:10,"MSVC: Remove Visual Studio project files and update INSTALL-MSVC.txt.

CMake is now the preferred build file generator when building
with MSVC."
edd563daf0da1d00018684614803c77ab62efcd6,Lasse Collin,Lasse Collin,2023-09-21 16:17:40,2023-09-22 17:10:10,"CMake: Require VS2015 or later for building xzdec.

xzdec might build with VS2013 but it hasn't been tested.
It was never supported before and VS2013 is old anyway
so for simplicity only liblzma is supported with VS2013."
daea64d158a7151ca6c255a0e4554c6d521cd589,Lasse Collin,Lasse Collin,2023-09-12 20:43:49,2023-09-22 17:06:27,"CMake: Allow building xz with Visual Studio 2015 and later.

Building the command line tools xz and xzdec with the combination
of CMake + Visual Studio 2015/2017/2019/2022 works now.

VS2013 update 2 should still be able to build liblzma.
VS2013 cannot build the xz command line tool because xz
needs snprintf() that roughly conforms to C99.
VS2013 is old and no extra code will be added to support it.

Thanks to Kelvin Lee and Jia Tan for testing."
8c2d197c940d246849b2ec48109bb22e54036927,Lasse Collin,Lasse Collin,2023-09-12 20:34:31,2023-09-22 17:06:27,"MSVC: #define inline and restrict only when needed.

This also drops the check for _WIN32 as that shouldn't be needed."
af66cd585902045e5689a0418103ec81f19f1d0a,Lasse Collin,Lasse Collin,2023-09-12 19:16:56,2023-09-22 17:06:27,"CMake: Add support for replacement getopt_long (lib/getopt*).

Thanks to Jia Tan for the initial work. I added the libgnu target
and made a few related minor edits."
e3288fdb45c580cb849f6799cf419c4922004ae5,Lasse Collin,Lasse Collin,2023-09-12 18:12:34,2023-09-22 17:06:27,"CMake: Bump maximum policy version to 3.27.

There are several new policies. CMP0149 may affect the Windows SDK
version that CMake will choose by default. The new behavior is more
predictable, always choosing the latest SDK version by default.

The other new policies shouldn't affect this package."
aff1b479c7b168652bd20305ceed4317d5db6661,Lasse Collin,Lasse Collin,2023-09-12 17:55:10,2023-09-22 17:06:27,"lib/getopt*.c: Include <config.h> only HAVE_CONFIG_H is defined.

The CMake-based build doesn't use config.h.

Up-to-date getopt_long in Gnulib is LGPLv2 so at some
point it could be included in XZ Utils too but for now
this commit is enough to make CMake-based build possible."
aa0cd585d2ed1455d35732798e0d90e3520e8ba5,Lasse Collin,Lasse Collin,2023-09-08 16:08:57,2023-09-22 17:06:27,Doxygen: Add more C macro names to PREDEFINED.
ee7709bae53637e1765ce142ef102914f1423cb5,Lasse Collin,Lasse Collin,2023-09-11 15:47:26,2023-09-22 17:06:27,"liblzma: Move a few __attribute__ uses in function declarations.

The API headers have many attributes but these were left
as is for now."
217958d88713b5dc73d366d24dd64b2b311b86fe,Lasse Collin,Lasse Collin,2023-09-11 16:03:35,2023-09-22 17:06:27,"xz, xzdec, lzmainfo: Use tuklib_attr_noreturn.

For compatibility with C23's [[noreturn]], tuklib_attr_noreturn
must be at the beginning of declaration (before ""extern"" or
""static"", and even before any GNU C's __attribute__).

This commit also moves all other function attributes to
the beginning of function declarations. ""extern"" is kept
at the beginning of a line so the attributes are listed on
separate lines before ""extern"" or ""static""."
18a66fbac031c98f9c2077fc88846e4d07849197,Lasse Collin,Lasse Collin,2023-09-11 15:53:31,2023-09-22 17:06:27,"Remove incorrect uses of __attribute__((__malloc__)).

xrealloc() is obviously incorrect, modern GCC docs even
mention realloc() as an example where this attribute
cannot be used.

liblzma's lzma_alloc() and lzma_alloc_zero() would be
correct uses most of the time but custom allocators
may use a memory pool or otherwise hold the pointer
so aliasing issues could happen in theory.

The xstrdup() case likely was correct but I removed it anyway.
Now there are no __malloc__ attributes left in the code.
The allocations aren't in hot paths so this should make
no practical difference."
74b0e900c92d5b222b36f474f1efa431f8e262f7,Lasse Collin,Lasse Collin,2023-09-08 15:41:25,2023-09-22 17:06:26,Build: Omit -Wc99-c11-compat since it warns about _Noreturn.
90c94dddfd57b7d744bfad64c54e10d15778144b,Lasse Collin,Lasse Collin,2023-09-08 15:19:26,2023-09-22 17:06:21,"tuklib: Update tuklib_attr_noreturn for C11/C17 and C23.

This makes no difference for GCC or Clang as they support
GNU C's __attribute__((__noreturn__)) but this helps with MSVC:

  - VS 2019 version 16.7 and later support _Noreturn if the
    options /std:c11 or /std:c17 are used. This gets handled
    with the check for __STDC_VERSION__ >= 201112.

  - When MSVC isn't in C11/C17 mode, __declspec(noreturn) is used.

C23 will deprecate _Noreturn (and <stdnoreturn.h>)
for [[noreturn]]. This commit anticipates that but
the final __STDC_VERSION__ value isn't known yet."
189f72581329ab281ad6af37f60135910cb1b146,Lasse Collin,Lasse Collin,2023-09-11 14:22:44,2023-09-22 17:00:38,Update THANKS.
79334e7f20f2bf9e0de095835b48868f1238f584,Lasse Collin,Lasse Collin,2023-09-05 19:42:10,2023-09-22 17:00:38,"MSVC: xz: Make file_io.c and file_io.h compatible with MSVC.

Thanks to Kelvin Lee for the original patches
and testing the modifications I made."
c660b8d78b7bda43b12b285550d8c70e8ccec698,Lasse Collin,Lasse Collin,2023-09-05 18:33:35,2023-09-22 17:00:38,"MSVC: xz: Use GetTickCount64() to implement mytime_now().

It's available since Windows Vista."
5c6f892d411670e3060f4bc309402617a209e57c,Kelvin Lee,Lasse Collin,2023-09-05 12:05:09,2023-09-22 17:00:38,MSVC: xz: Use _stricmp() instead of strcasecmp() in suffix.c.
e241051f50044259d174e8b4633dd9a1c4478408,Kelvin Lee,Lasse Collin,2023-09-05 12:01:10,2023-09-22 17:00:38,MSVC: xz: Use _isatty() from <io.h> to implement isatty().
d14bba8fc2be02a9fed8c9bcaaf61103451755f8,Kelvin Lee,Lasse Collin,2023-09-05 12:10:31,2023-09-22 17:00:38,MSVC: xz: Use _fileno() instead of fileno().
c4edd367678e6a38c42b149856159bf417da7fe1,Kelvin Lee,Lasse Collin,2023-09-05 12:00:07,2023-09-22 17:00:37,MSVC: xzdec: Use _fileno and _setmode.
cfd1054b9b539ee92524901e95d7bb5a1fe670a0,Kelvin Lee,Lasse Collin,2023-09-05 11:37:50,2023-09-22 17:00:37,MSVC: Don't #include <unistd.h>.
adef92f23563a2cc088b31ddee9040ecc96bc996,Lasse Collin,Lasse Collin,2023-09-19 11:03:45,2023-09-19 11:03:45,Update THANKS.
953e775941a25bfcfa353f802b13e66acb1edf2c,Jia Tan,Jia Tan,2023-09-14 13:13:23,2023-09-14 13:43:34,"CI: Enable CLMUL in address sanitization test.

The crc64_clmul() function should be ignored by the address sanitizer
now so these builds should still pass."
f167e79bc98f3f56af2e767b83aa81c2d2b9ed77,Lasse Collin,Lasse Collin,2023-09-14 13:35:46,2023-09-14 13:35:46,Update THANKS.
4f44ef86758a41a8ec814096f4cb6ee6de04c82e,Lasse Collin,Lasse Collin,2023-09-14 13:34:07,2023-09-14 13:34:07,"liblzma: Mark crc64_clmul() with __attribute__((__no_sanitize_address__)).

Thanks to Agostino Sarubbo.
Fixes: https://github.com/tukaani-project/xz/issues/62"
7379bb3eed428c0ae734d0cc4a1fd04359d53f08,Jia Tan,Jia Tan,2023-09-12 14:36:12,2023-09-12 14:49:03,"CMake: Fix time.h checks not running on second CMake run.

If CMake was configured more than once, HAVE_CLOCK_GETTIME and
HAVE_CLOCK_MONOTONIC would not be set as compile definitions. The check
for librt being needed to provide HAVE_CLOCK_GETTIME was also
simplified."
5d691fe58286b92d704c0dc5cd0c4df22881c6c6,Jia Tan,Jia Tan,2023-09-12 14:34:06,2023-09-12 14:34:06,"CMake: Fix unconditionally defining HAVE_CLOCK_MONOTONIC.

If HAVE_CLOCK_GETTIME was defined, then HAVE_CLOCK_MONOTONIC was always
added as a compile definition even if the check for it failed."
eccf12866527b8d24c7d7f92f755142be8ef9b11,Lasse Collin,Lasse Collin,2023-08-31 16:50:05,2023-08-31 16:50:05,"xz: Refactor thousand separator detection and disable it on MSVC.

Now the two variations of the format strings are created with
a macro, and the whole detection code can be easily disabled
on platforms where thousand separator formatting is known to
not work (MSVC has no support, and on DJGPP 2.05 it can have
problems in some cases)."
f7093cd9d130477c234b40aeda613964171f8f21,Lasse Collin,Lasse Collin,2023-08-31 15:14:43,2023-08-31 15:14:43,"xz: Fix a too relaxed assertion and remove uses of SSIZE_MAX.

SSIZE_MAX isn't readily available on MSVC. Removing it means
that there is one thing less to worry when porting to MSVC."
74c3449d8b816a724b12ebce7417e00fb597309a,Jia Tan,Jia Tan,2023-08-28 15:14:45,2023-08-28 15:14:45,"Tests: Improve invalid unpadded size check in test_lzma_index_append().

This check was extended to test the code added to fix a failing assert
in ae5c07b22a6b3766b84f409f1b6b5c100469068a."
2544274a8b8a27f4ea6c457d2c4c32eb1e4cd336,Jia Tan,Jia Tan,2023-08-28 13:54:41,2023-08-28 15:05:55,Tests: Improve comments in test_index.c.
49be29d6380b94e6fb26e511dd2cdbd9afce0f8b,Jia Tan,Jia Tan,2023-08-28 13:52:54,2023-08-28 15:05:46,Update THANKS.
721e3d9f7a82f59f32795d5fb97e0210d1aa839a,Jia Tan,Jia Tan,2023-08-28 13:50:16,2023-08-28 15:05:34,"liblzma: Update assert in vli_ceil4().

The argument to vli_ceil4() should always guarantee the return value
is also a valid lzma_vli. Thus the highest three valid lzma_vli values
are invalid arguments. All uses of the function ensure this so the
assert is updated to match this."
ae5c07b22a6b3766b84f409f1b6b5c100469068a,Jia Tan,Jia Tan,2023-08-28 13:31:25,2023-08-28 15:04:56,"liblzma: Add overflow check for Unpadded size in lzma_index_append().

This was not a security bug since there was no path to overflow
UINT64_MAX in lzma_index_append() or when it calls index_file_size().
The bug was discovered by a failing assert() in vli_ceil4() when called
from index_file_size() when unpadded_sum (the sum of the compressed size
of current Stream and the unpadded_size parameter) exceeds LZMA_VLI_MAX.

Previously, the unpadded_size parameter was checked to be not greater
than UNPADDED_SIZE_MAX, but no check was done once compressed_base was
added.

This could not have caused an integer overflow in index_file_size() when
called by lzma_index_append(). The calculation for file_size breaks down
into the sum of:

- Compressed base from all previous Streams
- 2 * LZMA_STREAM_HEADER_SIZE (size of the current Streams header and
  footer)
- stream_padding (can be set by lzma_index_stream_padding())
- Compressed base from the current Stream
- Unpadded size (parameter to lzma_index_append())

The sum of everything except for Unpadded size must be less than
LZMA_VLI_MAX. This is guarenteed by overflow checks in the functions
that can set these values including lzma_index_stream_padding(),
lzma_index_append(), and lzma_index_cat(). The maximum value for
Unpadded size is enforced by lzma_index_append() to be less than or
equal UNPADDED_SIZE_MAX. Thus, the sum cannot exceed UINT64_MAX since
LZMA_VLI_MAX is half of UINT64_MAX.

Thanks to Joona Kannisto for reporting this."
1057765aaabfe0f1397b8094531846655376ae38,Jia Tan,Jia Tan,2023-08-28 14:18:29,2023-08-28 14:18:29,Translations: Update the Esperanto translation.
f2e94d064f305bb8ad77ca70f91d93e55f5cf856,Jia Tan,Jia Tan,2023-08-26 12:10:23,2023-08-26 12:10:23,Translations: Update the Esperanto translation.
2b871f4dbffe3801d0da3f89806b5935f758d5f3,Jia Tan,Jia Tan,2023-08-09 12:55:36,2023-08-14 12:39:22,"Docs: Update INSTALL for --enable-threads method win95.

The Autotools build allows win95 threads and --enable-small together now
if the compiler supports __attribute__((__constructor__))."
356ad5b26b4196f085ce3afa1869154ca81faad8,Jia Tan,Jia Tan,2023-08-09 12:54:15,2023-08-14 12:39:18,CMake: Conditionally allow win95 threads and --enable-small.
de574404c4c2f87aca049f232c38526e3ce092aa,Jia Tan,Jia Tan,2023-08-09 12:35:16,2023-08-09 12:35:16,"Build: Conditionally allow win95 threads and --enable-small.

When the compiler supports __attribute__((__constructor__))
mythread_once() is never used, even with --enable-small. A configuration
with win95 threads and --enable-small will compile and be thread safe so
it can be allowed.

This isn't a very common configuration since MSVC does not support
__attribute__((__constructor__)), but MINGW32 and CLANG32 environments
for MSYS2 can use win95 threads and have
__attribute__((__constructor__)) support."
6bf33b704cd31dccf25e68480464aa22d3fcad5a,Jamaika1,GitHub,2023-08-08 12:07:59,2023-08-08 12:07:59,"mythread.h: Fix typo error in Vista threads mythread_once().

The ""once_"" variable was accidentally referred to as just ""once"". This
prevented building with Vista threads when
HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR was not defined."
80cb961e5380a3878246d41341ff91378ca59e05,Jia Tan,Jia Tan,2023-08-04 14:17:11,2023-08-04 14:17:11,"codespell: Add .codespellrc to set default options.

The .codespellrc allows setting default options to avoid false positive
matches, set additional dictionaries, etc. For now, codespell can be
used locally before committing doc and comment changes.

It should help prevent silly errors and fix up commits in the future."
cd678a6077358935249b64a4a16fe8d17434f9c9,Jia Tan,Jia Tan,2023-08-03 12:10:21,2023-08-03 12:10:21,Tests: Style fixes to test_lzip_decoder.c.
1cac5ed4fa45c9861d745b02d80575cb2ff01d81,Jia Tan,Jia Tan,2023-08-03 07:56:20,2023-08-03 07:56:20,Translations: Update the Chinese (simplified) translation.
16068f6c30b888cdb873f6285af941d00f95741d,Lasse Collin,Lasse Collin,2023-08-02 14:15:12,2023-08-02 14:15:12,xz: Omit an empty paragraph on the man page.
9ae4371b5106189486e850ce777e40f7b6021c0b,Jia Tan,Jia Tan,2023-08-02 12:30:07,2023-08-02 12:30:07,Add NEWS for 5.4.4.
e8c2203b2c76466d8d3387c5212b46151de8e605,Lasse Collin,Lasse Collin,2023-08-02 12:19:43,2023-08-02 12:19:43,"build-aux/manconv.sh: Fix US-ASCII and UTF-8 output.

groff defaults to SGR escapes. Using -P-c passes -c to grotty
which restores the old behavior. Perhaps there is a better way to
get pure plain text output but this works for now."
9a706167b0d903d92fd134895acb4bc6a5e3e688,Lasse Collin,Lasse Collin,2023-08-01 16:10:43,2023-08-01 16:10:43,Update THANKS.
33e25a0f5650754c38bed640deedefe3b4fec5ef,Lasse Collin,Lasse Collin,2023-08-01 15:22:24,2023-08-01 15:22:24,Update THANKS.
81db3b889830132334d1f2129bdc93177ac2ca7d,ChanTsune,Lasse Collin,2023-08-01 15:17:17,2023-08-01 15:18:05,"mythread.h: Disable signal functions in builds targeting Wasm + WASI.

signal.h in WASI SDK doesn't currently provide sigprocmask()
or sigset_t. liblzma doesn't need them so this change makes
liblzma and xzdec build against WASI SDK. xz doesn't build yet
and the tests don't either as tuktest needs setjmp() which
isn't (yet?) implemented in WASI SDK.

Closes: https://github.com/tukaani-project/xz/pull/57
See also: https://github.com/tukaani-project/xz/pull/56

(The original commit was edited a little by Lasse Collin.)"
71c638c611324e606d324c8189fef8fe79db6991,Jia Tan,Jia Tan,2023-08-01 13:58:51,2023-08-01 13:58:51,"Add newline to end of .gitignore.

Newline was accidentally removed in commit
01cbb7f023ee7fda8ddde04bd17cf7d3c2418706."
42df7c7aa1cca385e509eb33c65136e61890f0bf,Dimitri Papadopoulos Orfanos,GitHub,2023-07-31 12:02:21,2023-07-31 12:02:21,Docs: Fix typos found by codespell
01cbb7f023ee7fda8ddde04bd17cf7d3c2418706,Jia Tan,Jia Tan,2023-07-26 12:26:23,2023-07-28 14:17:50,Update .gitignore.
f97a1afd564c48ad9cb94682e10972a72e11fa08,Jia Tan,Jia Tan,2023-07-28 14:03:08,2023-07-28 14:03:08,"CMake: Conditionally allow the creation of broken symlinks.

The CMake build will try to create broken symlinks on Unix and Unix-like
platforms. Cygwin and MSYS2 are Unix-like, but may not be able to create
broken symlinks. The value of the CYGWIN or MSYS environment variables
determine if broken symlinks are valid.

The default for MSYS2 does not allow for broken symlinks, so the CMake
build has been broken for MSYS2 since commit
80a1a8bb838842a2be343bd88ad1462c21c5e2c9."
7190f4cc7c9ade5b9b3675d0cbfa3b6d6ec9cb4f,Jia Tan,Jia Tan,2023-07-28 13:56:48,2023-07-28 13:56:48,"CI: Fix windows-ci dependency installation.

All of the MSYS2 environments need make, and it does not come with the
toolchain package. The toolchain package will install the needed
compiler toolchains since without this package CMake cannot properly
generate the Makefiles."
a048f472cd9a2245265cb292853cbbcdd4f02001,Jia Tan,Jia Tan,2023-07-28 13:54:22,2023-07-28 13:54:22,"CI: Update ci_build.sh CMake to always make Unix Makefiles.

The default for many of the MSYS2 environments is for CMake to create
Ninja build files. This would complicate the build script since we would
need a different command to run the tests. Its simpler to always use
Unix Makefiles so that ""make test"" is always a usable target for
testing."
7870396a0ca945473aa0d1d790f4cbef456610bd,Jia Tan,Jia Tan,2023-07-25 12:17:23,2023-07-25 12:17:23,CI: Test CMake builds and test framework with MSYS2.
6497d1f8875cb7e3007f714336cc09c06fed235b,Jia Tan,Jia Tan,2023-07-25 12:14:53,2023-07-25 12:14:53,"CI: Windows CI rename system matrix variable -> msys2_env.

Calling the MSYS2 environment ""system"" was a bit vague and should be
more specific."
785e4121d9b2921ad36bd3af1cf61fa20a9265bd,Jia Tan,Jia Tan,2023-07-24 15:11:45,2023-07-24 15:11:45,CI: Add Clang64 MSYS2 environment to Windows CI.
d9166b52cf3458a4da3eb92224837ca8fc208d79,Jia Tan,Jia Tan,2023-07-24 13:43:44,2023-07-24 15:11:13,"liblzma: Prevent an empty translation unit in Windows builds.

To workaround Automake lacking Windows resource compiler support, an
empty source file is compiled to overwrite the resource files for static
library builds. Translation units without an external declaration are
not allowed by the C standard and result in a warning when used with
-Wempty-translation-unit (Clang) or -pedantic (GCC)."
db5019d691f980d622fb56fdcf383af2c3519c98,Jia Tan,Jia Tan,2023-07-22 10:37:56,2023-07-22 10:37:56,Translations: Update the Vietnamese translation.
f3a055f762ba5b71b746fc2d44a6ababde2c61b5,Jia Tan,Jia Tan,2023-07-22 06:55:42,2023-07-22 10:31:02,"CI: Add Windows runner for Autotools builds with MSYS2.

Only a subset of the tests run by the Linux and MacOS Autotools builds
are run. The most interesting tests are the ones that disable threads,
encoders, and decoders.

The Windows runner will only be run manually since these tests will
likely take much longer than the Linux and MacOS runners. This runner
should be used before merging any large features and before releases.

Currently the clang64 environment fails to due to a warning and
-Werror is enabled for the CI tests. This is still an early version
since the CMake build can be done for MSVC and optionally each of the
MSYS2 environments. GitHub does not allow manually running the CI tests
unless the workflow is checked on the default branch so checking in a
minimum version is a good idea.

Thanks to Arthur S for the original proposing the original patch.

Closes: https://github.com/tukaani-project/xz/pull/34"
556536a3525df9e5ed78b8c7057991cfa9edfac8,Jia Tan,Jia Tan,2023-07-21 14:11:01,2023-07-22 10:13:43,CI: Add argument to ci_build.sh to pass flags to autogen.sh.
39a32d36fc465c4e70f13192eea380e518ba6e8a,Jia Tan,Jia Tan,2023-07-21 10:05:44,2023-07-21 10:05:44,"Tests: Skip .lz files in test_files.sh if not configured.

Previously if the lzip decoder was not configured then test_files.sh
would pass the lzip tests instead of skipping them."
194d12724b30fe42789d12a0184f9d412c449347,Jia Tan,Jia Tan,2023-07-20 14:11:13,2023-07-20 14:11:13,Tests: Add ARM64 filter test to test_compress.sh.
d850365c444368102c69beaddf849ed463c33467,Jia Tan,Jia Tan,2023-07-20 12:30:05,2023-07-20 12:30:05,Translations: Update the Croatian translation.
24049eb7acf6d42a60f00efe4e7289fe8e1797fe,Jia Tan,Jia Tan,2023-07-20 12:28:32,2023-07-20 12:28:32,Translations: Update the Korean man page translations.
4d4a4fa07de6cb9d913fb2f97712fddda2527b49,Jia Tan,Jia Tan,2023-07-20 12:25:24,2023-07-20 12:25:24,Translations: Update the Korean translation.
237f06d9c55cf438a7538a598354bcf103f23711,Jia Tan,Jia Tan,2023-07-20 12:24:05,2023-07-20 12:24:05,Translations: Update the Polish translation.
80c2c832136656d5ac7a1bca8bc42d95e13d281a,Jia Tan,Jia Tan,2023-07-20 12:22:23,2023-07-20 12:22:23,Translations: Update the German man page translations.
fdbde14503ca03069d3649aa51926f5f796b89d8,Jia Tan,Jia Tan,2023-07-20 12:18:44,2023-07-20 12:18:44,Translations: Update the German translation.
9f3bf5ff5b2b5cf0b252a2bf381238ca49dc4101,Jia Tan,Jia Tan,2023-07-20 12:17:10,2023-07-20 12:17:10,Translations: Update the Chinese (simplified) translation.
376938c588011567c74f1d5a160c0ccce6336d46,Jia Tan,Jia Tan,2023-07-20 12:15:47,2023-07-20 12:15:47,Translations: Update the Swedish translation.
26b0bc6eb82c84559936a7c7080de5c71c8276f8,Jia Tan,Jia Tan,2023-07-20 12:14:00,2023-07-20 12:14:00,Translations: Update the Ukrainian man page translations.
2d02c8b7640b54f3c5aa1c8b5990ba56f322393b,Jia Tan,Jia Tan,2023-07-20 12:09:15,2023-07-20 12:09:15,Translations: Update the Ukrainian translation.
f881018b503fd334331c24a09075429558abbce1,Jia Tan,Jia Tan,2023-07-20 12:06:57,2023-07-20 12:06:57,Translations: Update the Spanish translation.
791fe6d3ffd6877fa5f852be69d9251397dfaa31,Jia Tan,Jia Tan,2023-07-20 12:05:19,2023-07-20 12:05:19,Translations: Update the Romanian translation.
8827e90704f699fe08bb5bed56b1717a2bc0eb77,Jia Tan,Jia Tan,2023-07-20 12:02:56,2023-07-20 12:02:56,Translations: Update the Romanian man page translations.
0184d344fa4f215cd345bb131db9068e077c69b8,Jia Tan,Jia Tan,2023-07-19 15:36:00,2023-07-19 15:36:00,"liblzma: Suppress -Wunused-function warning.

Clang 16.0.0 and earlier have a bug that the ifunc resolver function
triggers the -Wunused-function warning. The resolver function is static
and only ""used"" by the __attribute__((__ifunc()__)).

At this time, the bug is still unresolved, but has been reported:
https://github.com/llvm/llvm-project/issues/63957

This is not a problem in GCC."
43845fa70fc751736c44c18f4cee42d49bfd1392,Jia Tan,Jia Tan,2023-07-18 14:52:25,2023-07-18 14:57:58,"liblzma: Reword lzma_str_list_filters() documentation.

This further improves the documentation from commit
f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf. The previous wording of
""supported options"" was slightly misleading since the options that are
printed are the ones that are relevant for encoding/decoding. It is not
about which options can or must be specified."
818701ba1c9dff780b7fbf28f9ab8eb11a25dd67,Jia Tan,Jia Tan,2023-07-18 14:49:57,2023-07-18 14:56:47,"liblzma: Improve comment in string_conversion.c.

The comment used ""flag"" when referring to decoder options. Just
referring to them as options is more clear and consistent."
b6b7d065853cd4c3f5b8d9be8aea0b6dcb0fe090,Lasse Collin,Lasse Collin,2023-07-18 14:37:33,2023-07-18 14:37:33,"xz: Translate the second ""%s: "" in message.c since French needs ""%s : "".

This string is used to print a filename when using ""xz -v"" and
stderr isn't a terminal."
be644042c3066d8e7a2834f989671ba74d27f749,Lasse Collin,Lasse Collin,2023-07-18 11:35:33,2023-07-18 14:34:18,"xz: Make ""%s: %s"" translatable because French needs ""%s : %s""."
97fd5cb669ee0afc48d2087675ab166aff89eaa2,Lasse Collin,Lasse Collin,2023-07-18 10:57:54,2023-07-18 10:57:54,"liblzma: Tweak #if condition in memcmplen.h.

Maybe ICC always #defines _MSC_VER on Windows but now
it's very clear which code will get used."
40392c19f71985852d75997f109dea97177d6f3f,Lasse Collin,Lasse Collin,2023-07-18 10:49:43,2023-07-18 10:49:43,liblzma: Omit unnecessary parenthesis in a preprocessor directive.
abc1d5601b7e419ebc28a1ab4b268613b52e6f98,Jia Tan,Jia Tan,2023-07-17 16:51:48,2023-07-17 16:51:48,xz: Update Authors list in a few files.
289034a168878baa9df6ff6e159110aade69cba5,Jia Tan,Jia Tan,2023-07-14 15:20:33,2023-07-17 16:45:31,"Docs: Add a new section to INSTALL for Tests.

The new Tests section describes basic information about the tests, how
to run them, and important details when cross compiling. We have had a
few questions about how to compile the tests without running them, so
hopefully this information will help others with the same question in the
future.

Fixes: https://github.com/tukaani-project/xz/issues/54"
1119e5f5a519b0ab71c81fc4dc84c0cc72abe513,Jia Tan,Jia Tan,2023-07-14 13:10:27,2023-07-17 15:53:30,"Docs: Update README.

This adds an entry to ""Other implementations of the .xz format"" for
XZ for Java."
f99e2e4e53b7ea89e4eef32ddd4882e0416357c9,Jia Tan,Jia Tan,2023-07-13 15:32:10,2023-07-17 15:34:55,"xz: Fix typo in man page.

The Memory limit information section described three output
columns when it actually has six. This was reworded to
""multiple"" to make it more future proof."
f907705eb1f6c5edaafc9668a34c51a989932f1d,Jia Tan,Jia Tan,2023-07-13 13:46:12,2023-07-17 15:34:55,"xz: Minor clean up for coder.c

* Moved max_block_list_size from a global to local variable.
* Reworded error message in validate_block_list_filter().
* Removed helper function filter_chain_error().
* Changed 1 << X to 1U << X in many places"
9adc9e56157ecbf2948e5036df8567809b9ae177,Jia Tan,Jia Tan,2023-07-13 13:26:47,2023-07-17 15:34:55,xz: Update man page Authors and date.
c12e429f2635da8d8f5749e5f733f451baca6945,Jia Tan,Jia Tan,2023-06-20 12:32:59,2023-07-17 15:34:55,xz: Add a section to man page for robot mode --filters-help.
e10f2db5d10300c16fa482a136ed31c1aa6e8e8d,Jia Tan,Jia Tan,2023-06-19 15:11:41,2023-07-17 15:34:55,"xz: Slight reword in xz man page for consistency.

Changed will print => prints in xz --robot --version description to
match --robot --info-memory description."
f5dc172a402fa946f3c45a16929d7fe14c9f5e81,Jia Tan,Jia Tan,2023-06-19 15:07:10,2023-07-17 15:34:55,"xz: Reorder robot mode subsections in the man page.

The order is now consistent with the order the command line arguments
are documented earlier in the man page. The new order is:
1. --list
2. --info-memory
3. --version

Instead of the previous order:
1. --version
2. --info-memory
3. --list"
9628be23aef2784249fd9f3199799d785d2ec5cc,Jia Tan,Jia Tan,2023-05-12 16:46:50,2023-07-17 15:34:55,xz: Update man page for new --filters-help option.
a165d7df1964121eb9df715e6f836a31c865beef,Jia Tan,Jia Tan,2023-05-12 16:44:41,2023-07-17 15:34:55,"xz: Add a new --filters-help option.

The --filters-help can be used to help create filter chains with the
--filters and --filtersX options. The message in --long-help is too
short to fully explain the syntax to construct complex filter chains.

In --robot mode, xz will only print the output from liblzma function
lzma_str_list_filters."
95f1a414b156ee35d3e71862a14915fdd138f913,Jia Tan,Jia Tan,2023-04-21 12:28:11,2023-07-17 15:34:55,"xz: Update the man page for --block-list and --filtersX

The --block-list option description needed updating since the new
--filtersX option changes how it can be used. The new entry for
--filters1=FILTERS ... --filter9=FILTERS was created right after
the --filters option."
47a63cad2aa778280e0c1926b7159427ea028cb1,Jia Tan,Jia Tan,2023-04-21 11:50:14,2023-07-17 15:34:55,xz: Update --long-help for the new --filtersX option.
8b9913a13daca2550d02dfdcdc9be15f55ca4d13,Jia Tan,Jia Tan,2023-06-17 12:46:21,2023-07-17 15:34:55,"xz: Ignore filter chains that are set but never used in --block-list.

If a filter chain is set but not used in --block-list, it introduced
unexpected behavior such as requiring an unneeded amount of memory to
compress, reducing the number of threads in multi-threaded encoding, and
printing an incorrect amount of memory needed to decompress.

This also renames filters_init_mask => filters_used_mask. A filter is
assumed to be used if it is specified in --filtersX until
coder_set_compression_settings() determines which filters are referenced
in --block-list."
183819bfd9efac8c184d9bf123325719b7eee30f,Jia Tan,Jia Tan,2023-05-13 12:11:13,2023-07-17 15:34:55,"xz: Set the Block size for mt encoding correctly.

When opt_block_size is not used, the Block size for mt encoder is
derived from the minimum of the largest Block specified by
--block-list and the recommended Block size on all filter chains
calculated by lzma_mt_block_size(). This avoids using unnecessary
memory and ensures that all Blocks are large enough for the most memory
needy filter chain."
afb2dbec3d857b026486b75e42a4728e12d234cb,Jia Tan,Jia Tan,2023-05-10 16:09:41,2023-07-17 15:34:55,xz: Validate --flush-timeout for all specified filter chains.
5f0c5a04388f8334962c70bc37a8c2ff8f605e0a,Jia Tan,Jia Tan,2023-05-13 11:54:33,2023-07-17 15:34:55,"xz: Allows --block-list filters to scale down memory usage.

Previously, only the default filter chain could have its memory usage
adjusted. The filter chains specified with --filtersX were not checked
for memory usage. Now, all used filter chains will be adjusted if
necessary."
479fd58d60622331fcbe48fddf756927b9f80d9a,Jia Tan,Jia Tan,2023-05-10 13:50:33,2023-07-17 15:34:55,"xz: Do not include block splitting if encoders are disabled.

The block splitting logic and split_block() function are not needed if
encoders are disabled. This will help slightly reduce the binary size
when built without encoders and allow split_block() to use functions
that require encoders being enabled."
f86ede22500f7ae024ec3ec3f3489ab5a857a3b3,Jia Tan,Jia Tan,2023-05-10 14:38:59,2023-07-17 15:34:55,"xz: Free filters[] in debug mode.

This will only free filter chains created with --filters1-9 since the
default filter chain may be set from a static function variable. The
complexity to free the default filter chain is not worth the burden on
code maintenance."
f281cd0d692ac0c70fc7669b80dddb863ea947e1,Jia Tan,Jia Tan,2023-05-13 11:28:23,2023-07-17 15:34:55,"xz: Add a message if --block-list is used outside of xz compresssion.

--block-list is only supported with compression in xz format. This avoids
silently ignoring when --block-list is unused."
d6af7f347077b22403133239592e478931307759,Jia Tan,Jia Tan,2023-04-18 12:29:09,2023-07-17 15:34:55,"xz: Create command line options for filters[1-9].

The new command line options are meant to be combined with --block-list.
They work as an optional extension to --block-list to specify a custom
filter chain for each block listed. The new options allow the creation
of up to 9 reusable filter chains. For instance:

xz --block-list=1:10MiB,3:5MiB,,2:5MiB,1:0 --filters1=delta--lzma2 \
--filters2=x86--lzma2 --filters3=arm64--lzma2

Will create the following blocks:
1. A block of size 10 MiB with filter chain delta, lzma2.
2. A block of size 5 MiB with filter chain arm64, lzma2.
3. A block of size 5 MiB with filter chain arm64, lzma2.
4. A block of size 5 MiB with filter chain x86, lzma2.
5. A block containing the rest of the file contents with filter chain
   delta, lzma2."
072d29250113268536719ad0e040ab8a66fb6435,Jia Tan,Jia Tan,2023-05-13 11:36:09,2023-07-17 15:34:55,"xz: Use lzma_filters_free() in forget_filter_chain().

This is a little cleaner than the previous implementation of
forget_filter_chain(). It is also more consistent since
lzma_str_to_filters() will always terminate the filter chain so there
is no need to terminate it later in coder_set_compression_settings()."
3d21da5cff4b511633cb6e0d8a1090485c0c1059,Jia Tan,Jia Tan,2023-04-17 14:22:45,2023-07-17 15:34:55,"xz: Separate string to filter conversion into a helper function.

Converting from string to filter will also need to be done for block
specific filter chains."
a6583726e5f950278f96abcf79c04f1056810be6,Jia Tan,Jia Tan,2023-01-05 16:03:35,2023-07-17 15:34:55,Tests: Use new --filters option in test_compress.sh
5f3b898d07cc9b7160c7c88b3120b7edabb8a5b0,Jia Tan,Jia Tan,2023-01-05 16:03:06,2023-07-17 15:34:55,xz: Update --long-help and man page for new --filters option.
9ded880a0221f4d1256845fc4ab957ffd377c760,Jia Tan,Jia Tan,2023-01-05 16:02:29,2023-07-17 15:34:55,"xz: Add --filters option to CLI.

The --filters option uses the new lzma_str_to_filters() function
to convert a string into a full filter chain. Using this option
will reset all previous filters set by --preset, --[filter], or
--filters."
2c189bb00af73dc7ba1a67a9d274d5be03ee3a88,Jia Tan,Jia Tan,2023-07-14 13:30:25,2023-07-14 13:30:25,"Tests: Improve feature testing for skipping.

Fixed a bug where test_compress_* would all fail if arm64 or armthumb
filters were enabled for compression but arm was disabled. Since the
grep tests only checked for ""define HAVE_ENCODER_ARM"", this would match
on HAVE_ENCODER_ARM64 or HAVE_ENCODER_ARMTHUMB.

Now the config.h feature test requires "" 1"" at the end to prevent the
prefix problem. have_feature() was also updated for this even though
there were known current bugs affecting it. This is just in case future
features have a similar prefix problem."
80a6b9bcad016c99c9ba3f3eeb4a619fcadfd357,Jia Tan,Jia Tan,2023-07-10 12:56:28,2023-07-10 12:56:28,Translations: Update the Chinese (traditional) translation.
17f8844e6fc355abf997d77637a7447c4f7bbcbd,Jia Tan,Jia Tan,2023-07-08 13:24:19,2023-07-08 13:24:19,"liblzma: Remove non-portable empty initializer.

Commit 78704f36e74205857c898a351c757719a6c8b666 added an empty
initializer {} to prevent a warning. The empty initializer is a GNU
extension and results in a build failure on MSVC. The -wpedantic flag
warns about empty initializers."
3aca4f629cd577f0c54f594d5d88722edf0b0413,Jia Tan,Jia Tan,2023-07-08 12:03:59,2023-07-08 12:03:59,Translations: Update the Vietnamese translation.
66bdcfa85fef2911cc80f5f30fed3f9610faccb4,Jia Tan,Jia Tan,2023-06-28 12:46:31,2023-06-28 16:07:16,"Tests: Fix memory leaks in test_index.

Several tests were missing calls to lzma_index_end() to clean up the
lzma_index structs. The memory leaks were discovered by using
-fsanitize=address with GCC."
fe3bd438fb119f9bad3f08dc29d331e4956196e1,Jia Tan,Jia Tan,2023-06-28 12:43:29,2023-06-28 16:07:05,"Tests: Fix memory leaks in test_block_header.

test_block_header was not properly freeing the filter options between
calls to lzma_block_header_decode(). The memory leaks were discovered by
using -fsanitize=address with GCC."
78704f36e74205857c898a351c757719a6c8b666,Jia Tan,Jia Tan,2023-06-28 12:31:11,2023-06-28 16:06:16,"liblzma: Prevent uninitialzed warning in mt stream encoder.

This change only impacts the compiler warning since it was impossible
for the wait_abs struct in stream_encode_mt() to be used before it was
initialized since mythread_condtime_set() will always be called before
mythread_cond_timedwait().

Since the mythread.h code is different between the POSIX and
Windows versions, this warning was only present on Windows builds.

Thanks to Arthur S for reporting the warning and providing an initial
patch."
e3356a204c5ae02db3ec4552b6c1be354e9b6142,Jia Tan,Jia Tan,2023-06-28 12:22:38,2023-06-28 15:59:51,"liblzma: Prevent warning for MSYS2 Windows build.

In lzma_memcmplen(), the <intrin.h> header file is only included if
_MSC_VER and _M_X64 are both defined but _BitScanForward64() was
previously used if _M_X64 was defined. GCC for MSYS2 defines _M_X64 but
not _MSC_VER so _BitScanForward64() was used without including
<intrin.h>.

Now, lzma_memcmplen() will use __builtin_ctzll() for MSYS2 GCC builds as
expected."
45e250a9e9f3c3e8e8af2983366b170bf54f890e,Jia Tan,Jia Tan,2023-06-28 13:01:22,2023-06-28 15:59:47,"CI: Add test with -fsanitize=address,undefined.

ci_build.sh was updated to accept disabling of __attribute__ ifunc
and CLMUL. This will allow -fsanitize=address to pass because ifunc
is incompatible with -fsanitize=address. The CLMUL implementation has
optimizations that potentially read past the buffer and mask out the
unwanted bytes.

This test will only run on Autotools Linux."
596ee722cd7ddf0afae584fc06365adc0e735977,Jia Tan,Jia Tan,2023-06-28 12:16:04,2023-06-28 12:48:49,CI: Upgrade checkout action from v2 to v3.
86118ea320f867e09e98a8682cc08cbbdfd640e2,Jia Tan,Jia Tan,2023-06-27 15:38:32,2023-06-27 15:56:06,Update THANKS.
3d1fdddf92321b516d55651888b9c669e254634e,Jia Tan,Jia Tan,2023-06-27 14:27:09,2023-06-27 15:56:06,Docs: Document the configure option --disable-ifunc in INSTALL.
b4cf7a2822e8d30eb2b12a1a07fd04383b10ade3,Lasse Collin,Jia Tan,2023-06-27 14:24:49,2023-06-27 15:56:06,Minor tweaks to style and comments.
23fb9e3a329117c2968c1e7388b6ef07c782dba1,Lasse Collin,Jia Tan,2023-06-27 14:19:49,2023-06-27 15:56:06,"CMake: Rename CHECK_ATTR_IFUNC to ALLOW_ATTR_IFUNC.

It's so that there's a clear difference in wording compared
to liblzma's integrity check types."
ee44863ae88e377a5df10db007ba9bfadde3d314,Lasse Collin,Jia Tan,2023-06-27 14:05:23,2023-06-27 15:55:59,"liblzma: Add ifunc implementation to crc64_fast.c.

The ifunc method avoids indirection via the function pointer
crc64_func. This works on GNU/Linux and probably on FreeBSD too.
The previous __attribute((__constructor__)) method is kept for
compatibility with ELF platforms which do support ifunc.

The ifunc method has some limitations, for example, building
liblzma with -fsanitize=address will result in segfaults.
The configure option --disable-ifunc must be used for such builds.

Thanks to Hans Jansen for the original patch.
Closes: https://github.com/tukaani-project/xz/pull/53"
b72d21202402a603db6d512fb9271cfa83249639,Hans Jansen,Lasse Collin,2023-06-22 17:49:30,2023-06-27 12:33:15,"Add ifunc check to CMakeLists.txt

CMake build system will now verify if __attribute__((__ifunc__())) can be
used in the build system. If so, HAVE_FUNC_ATTRIBUTE_IFUNC will be
defined to 1."
23b5c36fb71904bfbe16bb20f976da38dadf6c3b,Hans Jansen,Lasse Collin,2023-06-22 17:46:55,2023-06-27 12:33:15,"Add ifunc check to configure.ac

configure.ac will now verify if __attribute__((__ifunc__())) can be used in
the build system. If so, HAVE_FUNC_ATTRIBUTE_IFUNC will be defined to 1."
dbb3a536ed9873ffa0870321f6873e564c6a9da8,Jia Tan,Jia Tan,2023-06-06 16:18:30,2023-06-06 16:23:02,"CI: Add apt update command before installing dependencies.

Without the extra command, all of the CI tests were automatically
failing because the Ubuntu servers could not be reached properly."
6bcd516812331de42b347922913230895bebad34,Jia Tan,Jia Tan,2023-06-06 16:10:38,2023-06-06 16:10:38,Update THANKS.
0d94ba69220d894d2a86081821d2d7a89df5a10b,Benjamin Buch,GitHub,2023-06-06 13:32:45,2023-06-06 13:32:45,"CMake: Protects against double find_package

Boost iostream uses `find_package` in quiet mode and then again uses
`find_package` with required. This second call triggers a 
`add_library cannot create imported target ""ZLIB::ZLIB"" because another
target with the same name already exists.`

This can simply be fixed by skipping the alias part on secondary
`find_package` runs."
045d7aae286ecd2ce163be9e0d9041343a03f89a,Jia Tan,Jia Tan,2023-05-31 12:26:42,2023-05-31 15:57:57,Translations: Update the Esperanto translation.
b0cc7c2dcefe4cbc4e1e697598c14fb687ed0b78,Jia Tan,Jia Tan,2023-05-31 12:25:00,2023-05-31 15:57:57,Translations: Update the Croatian translation.
af045ef6f848f02cd14c9ad195a5f87bb0c02dce,Jia Tan,Jia Tan,2023-05-31 12:15:53,2023-05-31 12:15:53,Translations: Update the Chinese (simplified) translation.
e6b92d5817fe91ad27a0f7f57bd0f2144311e383,Jia Tan,Jia Tan,2023-05-17 15:12:13,2023-05-17 15:12:13,Translations: Update German translation of man pages.
592961ccdbba39c7d60fe37e36764232feb57c60,Jia Tan,Jia Tan,2023-05-17 15:09:18,2023-05-17 15:09:18,Translations: Update the German translation.
13572cb2c391f5b7503e333c6e05b20bd5bbb524,Jia Tan,Jia Tan,2023-05-17 12:30:01,2023-05-17 12:30:01,Translations: Update the Croatian translation.
4e6e425ea8f097c6fb43e69cc9540294dca3680d,Jia Tan,Jia Tan,2023-05-17 12:26:54,2023-05-17 12:26:54,Translations: Update Korean translation of man pages.
d5ef1f6faf7c270f60093629257150085ecf19ca,Jia Tan,Jia Tan,2023-05-17 12:13:01,2023-05-17 12:13:01,Translations: Update the Korean translation.
e22d0b0f2e301e7906d0106689d967ed84362028,Jia Tan,Jia Tan,2023-05-16 15:49:09,2023-05-16 15:49:09,Translations: Update the Spanish translation.
f50da74d52d01f6cfd826a921249e289cf671678,Jia Tan,Jia Tan,2023-05-16 15:47:23,2023-05-16 15:47:23,Translations: Update the Romanian translation.
4b9ad60a7305e9841b7cb4ea611bdf5fa7271696,Jia Tan,Jia Tan,2023-05-16 15:45:43,2023-05-16 15:45:43,Translations: Update Romanian translation of man pages.
cb6fd57f889c5d9fab36ae8c9e10083a5fe32dea,Jia Tan,Jia Tan,2023-05-16 15:43:51,2023-05-16 15:44:45,Translations: Update Ukrainian translation of man pages.
c3e8fcbc2db4861f92ad15606c995bd255803c52,Jia Tan,Jia Tan,2023-05-16 15:37:54,2023-05-16 15:44:45,Translations: Update the Ukrainian translation.
27b81b84fcedbc55aa6e6b21004c44070b15b038,Jia Tan,Jia Tan,2023-05-16 15:07:35,2023-05-16 15:44:36,Translations: Update the Polish translation.
8024ad636a65ed6ea95c94d57255be4c6724d6ed,Jia Tan,Jia Tan,2023-05-16 14:52:14,2023-05-16 14:52:14,Translations: Update the Swedish translation.
6699a29673f227c4664826db485ed9f7596320d2,Jia Tan,Jia Tan,2023-05-16 13:21:38,2023-05-16 13:21:38,Translations: Update the Esperanto translation.
f36ca7982f6bd5e9827219ed4f3c5a1fbf5d7bdf,Jia Tan,Jia Tan,2023-05-13 13:21:54,2023-05-13 13:21:54,"liblzma: Slightly rewords lzma_str_list_filters() documentation.

Reword ""options required"" to ""supported options"". The previous may have
suggested that the options listed were all required anytime a filter is
used for encoding or decoding. The reword makes this more clear that
adjusting the options is optional."
3374a5359e52f1671d8f831d65827d5020fe2595,Jia Tan,Jia Tan,2023-05-11 15:49:23,2023-05-11 16:00:47,"liblzma: Adds lzma_nothrow to MicroLZMA API functions.

None of the liblzma functions may throw an exception, so this
attribute should be applied to all liblzma API functions."
8f236574986e7c414c0ea059f441982d1387e6a4,Jia Tan,Jia Tan,2023-05-09 12:20:06,2023-05-11 15:54:44,"liblzma: Exports lzma_mt_block_size() as an API function.

The lzma_mt_block_size() was previously just an internal function for
the multithreaded .xz encoder. It is used to provide a recommended Block
size for a given filter chain.

This function is helpful to determine the maximum Block size for the
multithreaded .xz encoder when one wants to change the filters between
blocks. Then, this determined Block size can be provided to
lzma_stream_encoder_mt() in the lzma_mt options parameter when
intializing the coder. This requires one to know all the filter chains
they are using before starting to encode (or at least the filter chain
that will need the largest Block size), but that isn't a bad limitation."
d0f33d672a4da7985ebb5ba8d829f885de49c171,Jia Tan,Jia Tan,2023-05-08 14:58:09,2023-05-11 14:28:45,"liblzma: Creates IS_ENC_DICT_SIZE_VALID() macro.

This creates an internal liblzma macro to test if the dictionary size
is valid for encoding."
c247d06e1f6cada9a76f4f6225cbd97ea760f52f,Jia Tan,Jia Tan,2023-05-02 12:39:56,2023-05-04 14:15:35,Add NEWS for 5.4.3.
77050b78364ffb6b0f129e742b7c31602d725c08,Jia Tan,Jia Tan,2023-05-02 12:39:37,2023-05-04 14:15:30,Add NEWS for 5.2.12.
713e15e43eb6279a7ab4bbad3d1325ebfdcf09a0,Jia Tan,Jia Tan,2023-05-04 12:38:52,2023-05-04 12:38:52,Translations: Update the Croatian translation.
9ad64bdf309844b6ca6c3e8a4dfb6dbaedda0ca9,Jia Tan,Jia Tan,2023-05-04 12:30:25,2023-05-04 12:30:25,"tuklib_integer.h: Reverts previous commit.

Previous commit 6be460dde07113fe3f08f814b61ddc3264125a96 would cause an
error if the integer size was 32 bit."
6be460dde07113fe3f08f814b61ddc3264125a96,Jia Tan,Jia Tan,2023-05-04 11:25:20,2023-05-04 11:25:20,tuklib_integer.h: Changes two other UINT_MAX == UINT32_MAX to >=.
44c0c5eae990a22ef04e9b88c1a15838a0d00878,Lasse Collin,Lasse Collin,2023-05-03 19:46:42,2023-05-03 19:55:16,"tuklib_integer.h: Fix a recent copypaste error in Clang detection.

Wrong line was changed in 7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7.
Also, this has >= instead of == since ints larger than 32 bits would
work too even if not relevant in practice."
2cf5ae5b5b279b0b2e69ca4724e7bd705865fe68,Jia Tan,Jia Tan,2023-04-25 12:06:15,2023-04-25 14:14:28,CI: Adds a build and test for small configuration.
16b81a057a87c2f18e6ed6447f003af0cbdcfe43,Jia Tan,Jia Tan,2023-04-25 12:05:26,2023-04-25 12:05:26,CI: ci_build.sh allows configuring small build.
78ccd93951f9e988d447bcdd70b24f6df5448d1d,Jia Tan,Jia Tan,2023-04-20 12:15:00,2023-04-20 12:15:00,Update THANKS.
f41df2ac2fed347d3f107f3533e76e000d29c6cb,Jia Tan,Jia Tan,2023-04-19 14:22:16,2023-04-19 14:22:16,"Windows: Include <intrin.h> when needed.

Legacy Windows did not need to #include <intrin.h> to use the MSVC
intrinsics. Newer versions likely just issue a warning, but the MSVC
documentation says to include the header file for the intrinsics we use.

GCC and Clang can ""pretend"" to be MSVC on Windows, so extra checks are
needed in tuklib_integer.h to only include <intrin.h> when it will is
actually needed."
7062348bf35c1e4cbfee00ad9fffb4a21aa6eff7,Jia Tan,Jia Tan,2023-04-19 13:59:03,2023-04-19 13:59:03,"tuklib_integer: Use __builtin_clz() with Clang.

Clang has support for __builtin_clz(), but previously Clang would
fallback to either the MSVC intrinsic or the regular C code. This was
discovered due to a bug where a new version of Clang required the
<intrin.h> header file in order to use the MSVC intrinsics.

Thanks to Anton Kochkov for notifying us about the bug."
3938718ce3773c90755785c0df8777f133b7ae29,Lasse Collin,Lasse Collin,2023-04-14 15:42:33,2023-04-14 15:42:33,"liblzma: Update project maintainers in lzma.h.

AUTHORS was updated earlier, lzma.h was simply forgotten."
2a89670ab295e377f8b44f5bda6d198deb8ea285,Jia Tan,Jia Tan,2023-04-13 12:45:19,2023-04-13 12:45:19,liblzma: Cleans up old commented out code.
0fbb2b87a7b5a1dd9d0f4a5e84ac7919557dbe81,Jia Tan,Jia Tan,2023-04-07 12:46:41,2023-04-07 12:46:41,Docs: Add missing word to SECURITY.md.
fb9c50f38a17bf37581de4034b36c8df8ec90a87,Jia Tan,Jia Tan,2023-04-07 12:43:22,2023-04-07 12:43:56,Update THANKS.
537c6cd8a9db0dd6b13683e64ddac2943190d715,Jia Tan,Jia Tan,2023-04-07 12:42:12,2023-04-07 12:43:56,Docs: Minor edits to SECURITY.md.
6549df8dd53f358345957e232648fdb699930074,Gabriela Gutierrez,Jia Tan,2023-04-07 12:08:30,2023-04-07 12:43:49,"Docs: Create SECURITY.md

Signed-off-by: Gabriela Gutierrez <gabigutierrez@google.com>"
d0faa85df5a5d253a4625d45313cf5e9277e6cd2,Jia Tan,Jia Tan,2023-03-28 14:48:24,2023-03-29 15:46:43,CI: Tests for disabling threading on CMake builds.
8be5cc3b1359d88b4b30a39067466c0ae0bfbc4d,Jia Tan,Jia Tan,2023-03-28 14:45:42,2023-03-29 15:46:43,"CI: Removes CMakeCache.txt between builds.

If the cache file is not removed, CMake will not reset configurations
back to their default values. In order to make the tests independent, it
is simplest to purge the cache. Unfortunatly, this will slow down the
tests a little and repeat some checks."
2cb6028fc31de082b7f927632363bb1426b61aaa,Jia Tan,Jia Tan,2023-03-28 14:32:40,2023-03-29 15:46:38,"CMake: Update liblzma-config.cmake generation.

Now that the threading is configurable, the liblzma CMake package only
needs the threading library when using POSIX threads."
4d7fac0b07cc722825ba8d7838c558827e635611,Jia Tan,Jia Tan,2023-03-28 14:25:33,2023-03-29 15:24:12,"CMake: Allows setting thread method.

The thread method is now configurable for the CMake build. It matches
the Autotools build by allowing ON (pick the best threading method),
OFF (no threading), posix, win95, and vista. If both Windows and
posix threading are both available, then ON will choose Windows
threading. Windows threading will also not use:

target_link_libraries(liblzma Threads::Threads)

since on systems like MinGW-w64 it would link the posix threads
without purpose."
20cd905d898c1494dee42b78530769bb9c9f8076,Jia Tan,Jia Tan,2023-03-24 15:05:48,2023-03-24 15:41:06,"CI: Runs CMake feature tests.

Now, CMake will run similar feature disable tests that the Autotools
version did before. In order to do this without repeating lines in
ci.yml, it now makes sense to use the GitHub Workflow matrix to create
a loop."
4fabdb269f1fc5624b3b94a170c4efb329d1d229,Jia Tan,Jia Tan,2023-03-24 12:35:11,2023-03-24 15:08:24,"CI: ci_build.sh allows CMake features to be configured.

Also included various clean ups for style and helper functions for
repeated work."
cf3d1f130e50cf63da4bb1031771605f6f443b6a,Jia Tan,Jia Tan,2023-03-24 12:06:33,2023-03-24 12:06:33,"CI: Change ci_build.sh to use bash instead of sh.

This script is only meant to be run as part of the CI build/test process
on machines that are known to have bash (Ubuntu and MacOS). If this
assumption changes in the future, then the bash specific commands will
need to be replaced with a more portable option. For now, it is
convenient to use bash commands."
ddfe164368e779c40d061aa4ccc376129e92f8e1,Jia Tan,Jia Tan,2023-03-24 12:05:59,2023-03-24 12:05:59,CMake: Only build xzdec if decoders are enabled.
116e81f002c503d3c3cd12726db8f9116e58ef25,Jia Tan,Jia Tan,2023-03-22 07:42:04,2023-03-23 13:48:52,Build: Removes redundant check for LZMA1 filter support.
0ba234f692772595329d225462d391fe2c199d0a,Lasse Collin,Jia Tan,2023-03-23 13:14:29,2023-03-23 13:48:52,"CMake: Bump maximum policy version to 3.26.

It adds only one new policy related to FOLDERS which we don't use.
This makes it clear that the code is compatible with the policies
up to 3.26."
b0891684b4436aed31510fddcbb218d513bd5489,Jia Tan,Jia Tan,2023-03-21 15:36:00,2023-03-23 13:48:52,CMake: Conditionally build xz list.* files if decoders are enabled.
2c1a830efb61d9d65906a09c9ee3ce27c2c49227,Jia Tan,Jia Tan,2023-02-25 03:46:50,2023-03-23 13:48:52,"CMake: Allow configuring features as cache variables.

This allows users to change the features they build either in
CMakeCache.txt or by using a CMake GUI. The sources built for
liblzma are affected by this too, so only the necessary files
will be compiled."
8be136f667aaeb8f9e16fbd57a83cb282f0c27ff,Lasse Collin,Lasse Collin,2023-03-21 12:07:51,2023-03-21 12:07:51,"Build: Add a comment that AC_PROG_CC_C99 is needed for Autoconf 2.69.

It's obsolete in Autoconf >= 2.70 and just an alias for AC_PROG_CC
but Autoconf 2.69 requires AC_PROG_CC_C99 to get a C99 compiler."
53cc475f2652d9e390ca002018dfd0af0626ef80,Lasse Collin,Lasse Collin,2023-03-21 12:04:37,2023-03-21 12:04:37,"Build: configure.ac: Use AS_IF and AS_CASE where required.

This makes no functional difference in the generated configure
(at least with the Autotools versions I have installed) but this
change might prevent future bugs like the one that was just
fixed in the commit 5a5bd7f871818029d5ccbe189f087f591258c294."
3b8890a40233b6c783bb101ec14405e786871775,Lasse Collin,Lasse Collin,2023-03-21 11:12:03,2023-03-21 11:12:03,Update THANKS.
5a5bd7f871818029d5ccbe189f087f591258c294,Lasse Collin,Lasse Collin,2023-03-21 11:11:49,2023-03-21 11:11:49,"Build: Fix --disable-threads breaking the building of shared libs.

This is broken in the releases 5.2.6 to 5.4.2. A workaround
for these releases is to pass EGREP='grep -E' as an argument
to configure in addition to --disable-threads.

The problem appeared when m4/ax_pthread.m4 was updated in
the commit 6629ed929cc7d45a11e385f357ab58ec15e7e4ad which
introduced the use of AC_EGREP_CPP. AC_EGREP_CPP calls
AC_REQUIRE([AC_PROG_EGREP]) to set the shell variable EGREP
but this was only executed if POSIX threads were enabled.
Libtool code also has AC_REQUIRE([AC_PROG_EGREP]) but Autoconf
omits it as AC_PROG_EGREP has already been required earlier.
Thus, if not using POSIX threads, the shell variable EGREP
would be undefined in the Libtool code in configure.

ax_pthread.m4 is fine. The bug was in configure.ac which called
AX_PTHREAD conditionally in an incorrect way. Using AS_CASE
ensures that all AC_REQUIREs get always run.

Thanks to Frank Busse for reporting the bug.
Fixes: https://github.com/tukaani-project/xz/issues/45"
dfe1710784c0a3c3a90c17b80c9e1fe19b5fce06,Lasse Collin,Lasse Collin,2023-03-19 20:45:59,2023-03-19 20:45:59,"liblzma: Silence -Wsign-conversion in SSE2 code in memcmplen.h.

Thanks to Christian Hesse for reporting the issue.
Fixes: https://github.com/tukaani-project/xz/issues/44"
f0c580c5fc38bf49a184b48d76c1d8c057d499ce,Jia Tan,Jia Tan,2023-03-18 14:10:57,2023-03-18 14:23:39,Add NEWS for 5.4.2.
af4925e6043113ec9b5f9c0cf13abf2a18ccb1f6,Jia Tan,Jia Tan,2023-03-18 14:10:12,2023-03-18 14:10:12,Add NEWS for 5.2.11.
5a7b930efa7f9849d8da8397e8e5d8638f92be40,Lasse Collin,Lasse Collin,2023-03-18 14:00:54,2023-03-18 14:00:54,Update the copy of GNU GPLv3 from gnu.org to COPYING.GPLv3.
b473a92891f7e991398a3b5eff305f6f2b6d7293,Lasse Collin,Lasse Collin,2023-03-18 13:51:57,2023-03-18 13:56:07,"Change a few HTTP URLs to HTTPS.

The xz man page timestamp was intentionally left unchanged."
8b2f6001b4f412c259a7883427f2f2c8cea98ea8,Jia Tan,Jia Tan,2023-03-17 16:40:28,2023-03-17 16:40:28,CMake: Fix typo in a comment.
76e2315e14c399c15cc90e7930fd4d3d086b0227,Lasse Collin,Lasse Collin,2023-03-17 16:36:22,2023-03-17 16:36:22,Windows: build.bash: Copy liblzma API docs to the output package.
133cf55edc5ce92952d2709abd992e48ef1f45ee,Lasse Collin,Lasse Collin,2023-03-17 06:53:38,2023-03-17 06:53:38,"Windows: Add microlzma_*.c to the VS project files.

These should have been included in 5.3.2alpha already."
75c9ca450fab6982fda9286b168081c9d54126cd,Lasse Collin,Lasse Collin,2023-03-17 06:43:51,2023-03-17 06:43:51,"CMake: Add microlzma_*.c to the build.

These should have been included in 5.3.2alpha already."
0cc3313bd4e569c51e686e5aab8c40c35241d34b,Lasse Collin,Lasse Collin,2023-03-17 06:41:36,2023-03-17 06:41:36,Build: Update comments about unaligned access to mention 64-bit.
5e57e3301319f20c35f8111dea73fa58403b96b1,Lasse Collin,Lasse Collin,2023-03-16 22:02:30,2023-03-16 22:02:34,Tests: Update .gitignore.
0007394d54e21bf30abb9a5e09cbc1e8d44a73ac,Lasse Collin,Lasse Collin,2023-03-14 18:04:03,2023-03-16 22:02:34,po4a/update-po: Display the script name consistently in error messages.
509157c80c500426ec853bd992d684ebafc8500c,Jia Tan,Jia Tan,2023-03-16 17:30:36,2023-03-16 17:42:28,"Doc: Rename Doxygen HTML doc directory name liblzma => api.

When the docs are installed, calling the directory ""liblzma"" is
confusing since multiple other files in the doc directory are for
liblzma. This should also make it more natural for distros when they
package the documentation."
fd90e2f4c29180b44e33c7ef726f94e4eae54ed3,Jia Tan,Jia Tan,2023-03-16 14:07:15,2023-03-16 17:42:28,"liblzma: Remove note from lzma_options_bcj about the ARM64 exception.

This was left in by mistake since an early version of the ARM64 filter
used a different struct for its options."
4f50763b981f9056c5f1763dfb26cfa4a26a181d,Jia Tan,Jia Tan,2023-03-16 13:44:02,2023-03-16 17:42:28,"CI: Add doxygen as a dependency.

Autogen now requires --no-doxygen or having doxygen installed to run
without errors."
f68f4b27f62f53fdac570885a1f4f23367ce6599,Lasse Collin,Jia Tan,2023-03-15 17:19:13,2023-03-16 17:42:28,COPYING: Add a note about the included Doxygen-generated HTML.
8979308528c1f45cb9ee52d511f05232b4ad90a1,Jia Tan,Jia Tan,2023-03-16 13:41:09,2023-03-16 17:42:28,Doc: Update PACKAGERS with details about liblzma API docs install.
55ba6e93004842ae0a0792214a23504267ad8f43,Jia Tan,Jia Tan,2023-03-16 13:38:32,2023-03-16 17:42:28,"liblzma: Add set lzma.h as the main page for Doxygen documentation.

The \mainpage command is used in the first block of comments in lzma.h.
This changes the previously nearly empty index.html to use the first
comment block in lzma.h for its contents.

lzma.h is no longer documented separately, but this is for the better
since lzma.h only defined a few macros that users do not need to use.
The individual API header files all have a disclaimer that they should
not be #included directly, so there should be no confusion on the fact
that lzma.h should be the only header used by applications.

Additionally, the note ""See ../lzma.h for information about liblzma as
a whole."" was removed since lzma.h is now the main page of the
generated HTML and does not have its own page anymore. So it would be
confusing in the HTML version and was only a ""nice to have"" when
browsing the source files."
16f21255597f6a57e5692780f962cdc090f62b8c,Jia Tan,Jia Tan,2023-03-16 13:37:32,2023-03-16 17:42:28,"Build: Generate doxygen documentation in autogen.sh.

Another command line option (--no-doxygen) was added to disable
creating the doxygen documenation in cases where it not wanted or
if the doxygen tool is not installed."
1321852a3be7196bd7fcfd146221a5669e46407c,Jia Tan,Jia Tan,2023-03-16 13:35:55,2023-03-16 17:42:28,"Build: Create doxygen/update-doxygen script.

This is a helper script to generate the Doxygen documentation. It can be
run in 'liblzma' or 'internal' mode by setting the first argument. It
will default to 'liblzma' mode and only generate documentation for the
liblzma API header files.

The helper script will be run during the custom mydist hook when we
create releases. This hook already alters the source directory, so its
fine to do it here too. This way, we can include the Doxygen generated
files in the distrubtion and when installing.

In 'liblzma' mode, the JavaScript is stripped from the .html files and
the .js files are removed. This avoids license hassle from jQuery and
other libraries that Doxygen 1.9.6 puts into jquery.js in minified form."
b1216a7772952d2fe7fe9c6acfcbd98d30abbc7b,Jia Tan,Jia Tan,2023-03-16 13:34:36,2023-03-16 17:42:28,"Build: Install Doxygen docs and include in distribution if generated.

Added a install-data-local target to install the Doxygen documentation
only when it has been generated. In order to correctly remove the docs,
a corresponding uninstall-local target was added.

If the doxygen docs exist in the source tree, they will also be included
in the distribution now too."
c97d12f300b2a94c9f54a44c8931c8bc08cf0a73,Lasse Collin,Jia Tan,2023-03-16 13:23:48,2023-03-16 17:42:28,"Doxygen: Refactor Doxyfile.in to doxygen/Doxyfile.

Instead of having Doxyfile.in configured by Autoconf, the Doxyfile
can have the tags that need to be configured piped into the doxygen
command through stdin with the overrides after Doxyfile's contents.

Going forward, the documentation should be generated in two different
modes: liblzma or internal.

liblzma is useful for most users. It is the documentation for just
the liblzma API header files. This is the default.

internal is for people who want to understand how xz and liblzma work.
It might be useful for people who want to contribute to the project."
1b7661faa4bbf4a54c6b75900b5059835c382a0f,Jia Tan,Jia Tan,2023-02-28 15:22:36,2023-03-13 12:49:53,Tests: Remove unused macros and functions.
af55191102f01e76de658c881299f0909ca0feda,Jia Tan,Jia Tan,2022-12-29 13:52:15,2023-03-13 12:49:53,liblzma: Defines masks for return values from lzma_index_checks().
8f38cdd9ab71e2a9d5a9787550222b7578243b73,Jia Tan,Jia Tan,2023-01-12 14:29:07,2023-03-13 12:49:53,"Tests: Refactors existing lzma_index tests.

Converts the existing lzma_index tests into tuktests and covers every
API function from index.h except for lzma_file_info_decoder, which can
be tested in the future."
717aa3651ce582807f379d8654c2516e1594df77,Lasse Collin,Lasse Collin,2023-03-11 16:42:08,2023-03-11 16:46:45,"xz: Simplify the error-label in Capsicum sandbox code.

Also remove unneeded ""sandbox_allowed = false;"" as this code
will never be run more than once (making it work with multiple
input files isn't trivial)."
a0eecc235d3ba8ad3453da98b46c7bc3e644de75,Lasse Collin,Jia Tan,2023-03-07 17:59:23,2023-03-08 15:22:15,xz: Make Capsicum sandbox more strict with stdin and stdout.
916448d624aaf55cef0fc3e53754affb8c4f309d,Jia Tan,Jia Tan,2023-03-08 15:08:46,2023-03-08 15:22:11,"Revert: ""Add warning if Capsicum sandbox system calls are unsupported.""

The warning causes the exit status to be 2, so this will cause problems
for many scripted use cases for xz. The sandbox usage is already very
limited already, so silently disabling this allows it to be more usable."
01587dda2a8f13fef7e12fd624e6d05da5f9624f,Jia Tan,Jia Tan,2023-03-07 12:02:22,2023-03-07 12:02:22,"xz: Fix -Wunused-label in io_sandbox_enter().

Thanks to Xin Li for recommending the fix."
5fb936786601a1cd013a5d436adde65982b1e13c,Jia Tan,Jia Tan,2023-03-06 13:37:45,2023-03-06 13:37:45,"xz: Add warning if Capsicum sandbox system calls are unsupported.

The warning is only used when errno == ENOSYS. Otherwise, xz still
issues a fatal error."
61ee82cb1232a402c82282bbae42821f2b952b0d,Jia Tan,Jia Tan,2023-03-06 13:27:53,2023-03-06 13:27:53,"xz: Skip Capsicum sandbox system calls when they are unsupported.

If a system has the Capsicum header files but does not actually
implement the system calls, then this would render xz unusable. Instead,
we can check if errno == ENOSYS and not issue a fatal error."
f070722b57ba975a0dff36492d766f03026b1d21,Jia Tan,Jia Tan,2023-03-06 13:08:26,2023-03-06 13:08:26,"xz: Reorder cap_enter() to beginning of capsicum sandbox code.

cap_enter() puts the process into the sandbox. If later calls to
cap_rights_limit() fail, then the process can still have some extra
protections."
f1ab1f6b339d16a53ac53efeb97779ecd2bae70f,Jia Tan,Jia Tan,2023-02-24 15:46:23,2023-03-01 13:42:31,"liblzma: Clarify lzma_lzma_preset() documentation in lzma12.h.

lzma_lzma_preset() does not guarentee that the lzma_options_lzma are
usable in an encoder even if it returns false (success). If liblzma
is built with default configurations, then the options will always be
usable. However if the match finders hc3, hc4, or bt4 are disabled, then
the options may not be usable depending on the preset level requested.

The documentation was updated to reflect this complexity, since this
behavior was unclear before."
4b7fb3bf41a0ca4c97fad3799949a2aa61b13b99,Lasse Collin,Lasse Collin,2023-02-27 16:38:35,2023-02-27 16:38:35,"CMake: Require that the C compiler supports C99 or a newer standard.

Thanks to autoantwort for reporting the issue and suggesting
a different patch:
https://github.com/tukaani-project/xz/pull/42"
9aa7fdeb04c486d2700967090956af88fdccab7e,Jia Tan,Jia Tan,2023-02-24 10:10:37,2023-02-24 13:11:18,"Tests: Small tweak to test-vli.c.

The static global variables can be disabled if encoders and decoders
are not built. If they are not disabled and -Werror is used, it will
cause an usused warning as an error."
3cf72c4bcba5370f07477c9b9b62ae33069ef9a9,Jia Tan,Jia Tan,2023-02-06 13:46:43,2023-02-24 13:09:39,"liblzma: Replace '\n' -> newline in filter.h documentation.

The '\n' renders as a newline when the comments are converted to html
by Doxygen."
002006be62d77c706565fa6ec828bea64be302da,Jia Tan,Jia Tan,2023-02-06 13:45:37,2023-02-24 13:09:39,"liblzma: Shorten return description for two functions in filter.h.

Shorten the description for lzma_raw_encoder_memusage() and
lzma_raw_decoder_memusage()."
463d9359b8595f01d44ada1739d75aeb87f36524,Jia Tan,Jia Tan,2023-02-06 13:44:45,2023-02-24 13:09:39,liblzma: Reword a few lines in filter.h
01441df92c0fd6a6c02fe5ac27982a54ce887cc0,Jia Tan,Jia Tan,2023-02-06 13:35:06,2023-02-24 13:09:39,"liblzma: Improve documentation in filter.h.

All functions now explicitly specify parameter and return values.
The notes and code annotations were moved before the parameter and
return value descriptions for consistency.

Also, the description above lzma_filter_encoder_is_supported() about
not being able to list available filters was removed since
lzma_str_list_filters() will do this."
805b45cd60bfd5da3d3d89077de3789df179b324,Lasse Collin,Lasse Collin,2023-02-23 18:46:16,2023-02-23 18:46:16,Update THANKS.
30e95bb44c36ae26b2ab12a94343b215fec285e7,Lasse Collin,Lasse Collin,2023-02-21 20:57:10,2023-02-23 18:41:22,"liblzma: Avoid null pointer + 0 (undefined behavior in C).

In the C99 and C17 standards, section 6.5.6 paragraph 8 means that
adding 0 to a null pointer is undefined behavior. As of writing,
""clang -fsanitize=undefined"" (Clang 15) diagnoses this. However,
I'm not aware of any compiler that would take advantage of this
when optimizing (Clang 15 included). It's good to avoid this anyway
since compilers might some day infer that pointer arithmetic implies
that the pointer is not NULL. That is, the following foo() would then
unconditionally return 0, even for foo(NULL, 0):

    void bar(char *a, char *b);

    int foo(char *a, size_t n)
    {
        bar(a, a + n);
        return a == NULL;
    }

In contrast to C, C++ explicitly allows null pointer + 0. So if
the above is compiled as C++ then there is no undefined behavior
in the foo(NULL, 0) call.

To me it seems that changing the C standard would be the sane
thing to do (just add one sentence) as it would ensure that a huge
amount of old code won't break in the future. Based on web searches
it seems that a large number of codebases (where null pointer + 0
occurs) are being fixed instead to be future-proof in case compilers
will some day optimize based on it (like making the above foo(NULL, 0)
return 0) which in the worst case will cause security bugs.

Some projects don't plan to change it. For example, gnulib and thus
many GNU tools currently require that null pointer + 0 is defined:

    https://lists.gnu.org/archive/html/bug-gnulib/2021-11/msg00000.html

    https://www.gnu.org/software/gnulib/manual/html_node/Other-portability-assumptions.html

In XZ Utils null pointer + 0 issue should be fixed after this
commit. This adds a few if-statements and thus branches to avoid
null pointer + 0. These check for size > 0 instead of ptr != NULL
because this way bugs where size > 0 && ptr == NULL will likely
get caught quickly. None of them are in hot spots so it shouldn't
matter for performance.

A little less readable version would be replacing

    ptr + offset

with

    offset != 0 ? ptr + offset : ptr

or creating a macro for it:

    #define my_ptr_add(ptr, offset) \
            ((offset) != 0 ? ((ptr) + (offset)) : (ptr))

Checking for offset != 0 instead of ptr != NULL allows GCC >= 8.1,
Clang >= 7, and Clang-based ICX to optimize it to the very same code
as ptr + offset. That is, it won't create a branch. So for hot code
this could be a good solution to avoid null pointer + 0. Unfortunately
other compilers like ICC 2021 or MSVC 19.33 (VS2022) will create a
branch from my_ptr_add().

Thanks to Marcin Kowalczyk for reporting the problem:
https://github.com/tukaani-project/xz/issues/36"
fa9065fac54194fe0407fc7f0cc9633fdce13c21,Jia Tan,Jia Tan,2023-02-06 16:00:44,2023-02-23 12:27:59,liblzma: Adjust container.h for consistency with filter.h.
00a721b63d82dfb658dca8d8cb599d8a245c663f,Jia Tan,Jia Tan,2023-02-06 16:00:09,2023-02-23 12:27:59,liblzma: Fix small typos and reword a few things in filter.h.
5b1c171d4ffe89ef18fa31509bb0185d6fd11d39,Jia Tan,Jia Tan,2023-02-06 15:42:08,2023-02-23 12:27:59,liblzma: Convert list of flags in lzma_mt to bulleted list.
dbd47622eb99fefb3538a22baec3def002aa56f5,Jia Tan,Jia Tan,2023-01-26 15:17:41,2023-02-23 12:27:59,"liblzma: Fix typo in documentation in container.h

lzma_microlzma_decoder -> lzma_microlzma_encoder"
14cd30806d69e55906073745bcce3ee50e0ec942,Jia Tan,Jia Tan,2023-01-26 15:16:34,2023-02-23 12:27:59,"liblzma: Improve documentation for container.h

Standardizing each function to always specify parameters and return
values. Also moved the parameters and return values to the end of each
function description."
c9c8bfae3502842dcead85eeb2b951b437c2cd88,Jia Tan,Jia Tan,2023-02-22 12:59:41,2023-02-22 13:10:28,CMake: Add LZIP decoder test to list of tests.
b9f171dd00a3cc32b6d41ea8e082cf545640ec2a,Lasse Collin,Lasse Collin,2023-02-17 18:56:49,2023-02-17 18:56:49,Update THANKS.
2ee86d20e49985b903b78ebcfa3fa672e73e93aa,Lasse Collin,Lasse Collin,2023-02-17 18:48:28,2023-02-17 18:48:28,"Build: Use only the generic symbol versioning on MicroBlaze.

On MicroBlaze, GCC 12 is broken in sense that
__has_attribute(__symver__) returns true but it still doesn't
support the __symver__ attribute even though the platform is ELF
and symbol versioning is supported if using the traditional
__asm__("".symver ..."") method. Avoiding the traditional method is
good because it breaks LTO (-flto) builds with GCC.

See also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766

For now the only extra symbols in liblzma_linux.map are the
compatibility symbols with the patch that spread from RHEL/CentOS 7.
These require the use of __symver__ attribute or __asm__("".symver ..."")
in the C code. Compatibility with the patch from CentOS 7 doesn't
seem valuable on MicroBlaze so use liblzma_generic.map on MicroBlaze
instead. It doesn't require anything special in the C code and thus
no LTO issues either.

An alternative would be to detect support for __symver__
attribute in configure.ac and CMakeLists.txt and fall back
to __asm__("".symver ..."") but then LTO would be silently broken
on MicroBlaze. It sounds likely that MicroBlaze is a special
case so let's treat it as a such because that is simpler. If
a similar issue exists on some other platform too then hopefully
someone will report it and this can be reconsidered.

(This doesn't do the same fix in CMakeLists.txt. Perhaps it should
but perhaps CMake build of liblzma doesn't matter much on MicroBlaze.
The problem breaks the build so it's easy to notice and can be fixed
later.)

Thanks to Vincent Fazio for reporting the problem and proposing
a patch (in the end that solution wasn't used):
https://github.com/tukaani-project/xz/pull/32"
d831072cceca458d94d2d5da201862f6d43a417b,Lasse Collin,Lasse Collin,2023-02-16 19:09:00,2023-02-16 19:09:00,"liblzma: Very minor API doc tweaks.

Use ""member"" to refer to struct members as that's the term used
by the C standard.

Use lzma_options_delta.dist and such in docs so that in Doxygen's
HTML output they will link to the doc of the struct member.

Clean up a few trailing white spaces too."
f029daea39c215fd7d5cb6b6798818b055cf5b22,Jia Tan,Jia Tan,2023-02-16 16:54:33,2023-02-16 16:54:33,liblzma: Adjust spacing in doc headers in bcj.h.
a5de68bac2bb7e1b9119e6cea7d761a22ea73e9c,Jia Tan,Jia Tan,2023-02-16 16:44:44,2023-02-16 16:49:47,liblzma: Adjust documentation in bcj.h for consistent style.
efa498c13b883810497e0ea8a169efd6f48f5026,Jia Tan,Jia Tan,2023-02-16 16:36:05,2023-02-16 16:49:47,"liblzma: Rename field => member in documentation.

Also adjusted preset value => preset level."
718b22a6c5e3ee5de123323ea798872381f9320e,Lasse Collin,Lasse Collin,2023-02-16 15:59:50,2023-02-16 15:59:50,"liblzma: Silence a warning from MSVC.

It gives C4146 here since unary minus with unsigned integer
is still unsigned (which is the intention here). Doing it
with substraction makes it clearer and avoids the warning.

Thanks to Nathan Moinvaziri for reporting this."
87c53553fa7d50f777b4edfa99f2083628f590fe,Jia Tan,Jia Tan,2023-02-16 13:04:54,2023-02-16 13:04:54," liblzma: Improve documentation for stream_flags.h

Standardizing each function to always specify parameters and return
values. Also moved the parameters and return values to the end of each
function description.

A few small things were reworded and long sentences broken up."
13d99e75a543e9e5f8633cc241eae55b91a3b242,Jia Tan,Jia Tan,2023-02-14 13:50:16,2023-02-15 14:21:44,"liblzma: Improve documentation in lzma12.h.

All functions now explicitly specify parameter and return values."
43ec344c868f930e96879eb9e49212cce92a9884,Jia Tan,Jia Tan,2023-01-27 14:44:06,2023-02-14 16:59:16,"liblzma: Improve documentation in check.h.

All functions now explicitly specify parameter and return values.
Also moved the note about SHA-256 functions not being exported to the
top of the file."
9c71db4e884fd49aea3d1e711036bff45ca66487,Jia Tan,Jia Tan,2023-02-08 13:33:52,2023-02-14 16:20:44,"liblzma: Improve documentation in index.h

All functions now explicitly specify parameter and return values."
421f2f2e160720f6009e3b6a125cafe2feaa9419,Jia Tan,Jia Tan,2023-02-08 12:35:32,2023-02-14 16:20:44,liblzma: Reword a comment in index.h.
b67539484981351d501b68de5e925425e50c59b1,Jia Tan,Jia Tan,2023-02-08 12:30:23,2023-02-14 16:20:44,"liblzma: Omit lzma_index_iter's internal field from Doxygen docs.

Add \private above this field and its sub-fields since it is not meant
to be modified by users."
0c9e4fc2ad6d88d54f299240fcc5a2ce7d695d96,Jia Tan,Jia Tan,2023-01-21 13:32:03,2023-02-14 12:41:05,"liblzma: Fix documentation for LZMA_MEMLIMIT_ERROR.

LZMA_MEMLIMIT_ERROR was missing the ""<"" character needed to put
documentation after a member."
816fec125aa74bcef46512c73acc6d9e5a700d15,Jia Tan,Jia Tan,2023-01-20 16:29:38,2023-02-14 12:41:05,"liblzma: Improve documentation for base.h.

Standardizing each function to always specify params and return values.
Also fixed a small grammar mistake."
862dacef1a4e7e1b28d465956fa4244ed01df154,Jia Tan,Jia Tan,2023-02-13 16:12:34,2023-02-13 16:12:34,liblzma: Add one more missing [out] annotation in vli.h
867b08ae4254bf55dd1f7fd502cc618231b92f75,Jia Tan,Jia Tan,2023-02-13 16:08:33,2023-02-13 16:08:33,"liblzma: Minor improvements to vli.h.

Added [out] annotations to parameters that are pointers and can have
their value changed. Also added a clarification to lzma_vli_is_valid."
90d0e628ff11e5030bcc4fc000bca056adda6603,Jia Tan,Jia Tan,2023-02-10 13:38:02,2023-02-10 13:38:25,"liblzma: Add comments for macros in delta.h.

Document LZMA_DELTA_DIST_MIN and LZMA_DELTA_DIST_MAX for completeness
and to avoid Doxygen warnings."
9255fffdb13e59874bf7f95c370c410ad3a7e114,Jia Tan,Jia Tan,2023-02-10 13:35:23,2023-02-10 13:35:23,"liblzma: Improve documentation in index_hash.h.

All functions now explicitly specify parameter and return values.
Also reworded the description of lzma_index_hash_init() for readability."
1dbe12b90cff79bb51923733ac0840747b4b4131,Lasse Collin,Lasse Collin,2023-02-07 17:07:45,2023-02-07 17:07:45,"xz: Improve the comment about start_time in mytime.c.

start_time is relative to an arbitary point in time, it's not
time of day, so using it for anything else than time differences
wouldn't make sense."
7673ef5aa80c1af7fb693360dd82f527b46c2c56,Jia Tan,Jia Tan,2023-02-04 13:06:35,2023-02-04 13:06:35,"Build: Adjust CMake version search regex.

Now, the LZMA_VERSION_MAJOR, LZMA_VERSION_MINOR, and LZMA_VERSION_PATCH
macros do not need to be on consecutive lines in version.h. They can be
separated by more whitespace, comments, or even other content, as long
as they appear in the proper order (major, minor, patch)."
b8bce89be7fb5bffe5fef4a2782ca9b2b107eaac,Jia Tan,Jia Tan,2023-02-04 04:01:23,2023-02-04 12:11:51,xz: Add a comment clarifying the use of start_time in mytime.c.
912af91b10a18fb9bb3167247ecaaefca8248ee9,Jia Tan,Jia Tan,2023-01-26 01:50:21,2023-02-04 12:11:36,"liblzma: Improve documentation for version.h.

Specified parameter and return values for API functions and documented
a few more of the macros."
850adec171203cd22b57d016084d713f72ae5307,Jia Tan,Jia Tan,2023-02-03 14:52:55,2023-02-03 14:52:55,Docs: Omit SIGTSTP not handled from TODO.
2c78a83c6faec70154d9eb78022a618ed62cdcb3,Jia Tan,Jia Tan,2023-02-02 16:33:32,2023-02-02 16:42:27,"liblzma: Fix bug in lzma_str_from_filters() not checking filters[] length.

The bug is only a problem in applications that do not properly terminate
the filters[] array with LZMA_VLI_UNKNOWN or have more than
LZMA_FILTERS_MAX filters. This bug does not affect xz."
e01f01b9af1c074463b92694a16ecc16a31907c0,Jia Tan,Jia Tan,2023-02-02 16:32:47,2023-02-02 16:42:27,"Tests: Create test_filter_str.c.

Tests lzma_str_to_filters(), lzma_str_from_filters(), and
lzma_str_list_filters() API functions."
8dfc029e7a4ce45809c30313dc0e502f0d22be26,Jia Tan,Jia Tan,2023-01-22 00:49:00,2023-02-02 16:42:27,liblzma: Fix typos in comments in string_conversion.c.
54ad83c1ae2180dcc0cb2445b181dc1e9732a5d6,Jia Tan,Jia Tan,2023-02-02 16:20:20,2023-02-02 16:22:53,"liblzma: Clarify block encoder and decoder documentation.

Added a few sentences to the description for lzma_block_encoder() and
lzma_block_decoder() to highlight that the Block Header must be coded
before calling these functions."
f680e771b3eb2a46310fe85b3e000ac3a1a0640f,Jia Tan,Jia Tan,2023-02-02 16:12:24,2023-02-02 16:22:53,Update lzma_block documentation for lzma_block_uncomp_encode().
504cf4af895fd45aad0c56eb3b49d90acd54465b,Jia Tan,Jia Tan,2023-02-02 16:11:37,2023-02-02 16:22:53,liblzma: Minor edits to lzma_block header_size documentation.
115b720fb521f99aa832d06b2c12b7f8c6c50680,Jia Tan,Jia Tan,2023-02-02 16:11:07,2023-02-02 16:22:53,liblzma: Enumerate functions that read version in lzma_block.
85ea0979adcf808a3830aefbe7a4ec884e542ea1,Jia Tan,Jia Tan,2023-02-02 16:10:34,2023-02-02 16:22:53,liblzma: Clarify comment in block.h.
1f7ab90d9ce224230a04de6b921ad6e2029023a8,Jia Tan,Jia Tan,2023-02-02 16:07:23,2023-02-02 16:22:53,"liblzma: Improve documentation for block.h.

Standardizing each function to always specify params and return values.
Output pointer parameters are also marked with doxygen style [out] to
make it clear. Any note sections were also moved above the parameter and
return sections for consistency."
c563a4bc554a96bd0b6aab3c139715b7ec8f6ca3,Jia Tan,Jia Tan,2023-02-01 15:38:30,2023-02-01 15:39:45,"liblzma: Clarify a comment about LZMA_STR_NO_VALIDATION.

The flag description for LZMA_STR_NO_VALIDATION was previously confusing
about the treatment for filters than cannot be used with .xz format
(lzma1) without using LZMA_STR_ALL_FILTERS. Now, it is clear that
LZMA_STR_NO_VALIDATION is not a super set of LZMA_STR_ALL_FILTERS."
315c64c7e18acc59a745b68148188a73e998252b,Jia Tan,Jia Tan,2023-02-01 13:43:33,2023-02-01 13:47:35,"CI: Update .gitignore for artifacts directory in build-aux.

The workflow action for our CI pipeline can only reference artifacts in
the source directory, so we should ignore these files if the ci_build.sh
is run locally."
2c1341f4fa06e7f487d61142aa354c433e17ec7f,Jia Tan,Jia Tan,2023-02-01 13:36:46,2023-02-01 13:47:35,CI: Add quotes around variables in a few places.
3a401b0e0c7a2658af7801dd0690256ef24149e0,Jia Tan,Jia Tan,2023-02-01 13:36:22,2023-02-01 13:47:35,CI: Upload test logs as artifacts if a test fails.
610dde15a88f12cc540424eb3eb3ed61f3876f74,Lasse Collin,Lasse Collin,2023-01-27 18:02:49,2023-01-27 18:02:49,"xz: Use clock_gettime() even if CLOCK_MONOTONIC isn't available.

mythread.h and thus liblzma already does it."
2e02877288f6576cd4595e9ac7684f867cd47d68,Lasse Collin,Lasse Collin,2023-01-27 17:41:19,2023-01-27 17:41:19,po4a/po4a.conf: Sort the language identifiers in alphabetical order.
ff592c616eda274215b485cf1b8d34f060c9f3be,Lasse Collin,Lasse Collin,2023-01-26 16:29:17,2023-01-27 17:37:47,"xz: Add SIGTSTP handler for progress indicator time keeping.

This way, if xz is stopped the elapsed time and estimated time
remaining won't get confused by the amount of time spent in
the stopped state.

This raises SIGSTOP. It's not clear to me if this is the correct way.
POSIX and glibc docs say that SIGTSTP shouldn't stop the process if
it is orphaned but this commit doesn't attempt to handle that.

Search for SIGTSTP in section 2.4.3:

https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html"
3b1c8ac8d1d553cbb1fb22b545d2b1424c752b76,Jia Tan,Jia Tan,2023-01-27 12:14:51,2023-01-27 12:16:54,"Translations: Add Brazilian Portuguese translation of man pages.

Thanks to Rafael Fontenelle."
a15a7552f9f67c4e402f5d2967324e0ccfd6fccc,Lasse Collin,Lasse Collin,2023-01-26 15:51:06,2023-01-26 15:51:06,Build: Avoid different quoting style in --enable-doxygen doc.
af5a4bd5afc089d9697756dded38feafaa987ae4,Lasse Collin,Lasse Collin,2023-01-26 15:39:46,2023-01-26 15:39:46,"tuklib_physmem: Check for __has_warning before GCC version.

Clang can be configured to fake a too high GCC version so
this way it's more robust."
f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4,Jia Tan,Jia Tan,2023-01-24 12:48:50,2023-01-24 12:48:50,"liblzma: Fix documentation in filter.h for lzma_str_to_filters()

The previous documentation for lzma_str_to_filters() was technically
correct, but misleading. lzma_str_to_filters() returns NULL on success,
which is in practice always defined to 0. This is the same value as
LZMA_OK, but lzma_str_to_filters() does not return lzma_ret so we should
be more clear."
2f78ecc5939b3d97ddfc2a6bd31b50108a28d0a2,Lasse Collin,Jia Tan,2023-01-23 21:44:58,2023-01-24 12:20:51,"Revert ""tuklib_common: Define __has_warning if it is not defined.""

This reverts commit 82e3c968bfa10e3ff13333bd9cbbadb5988d6766.

Macros in the reserved namespace (_foo or __foo) shouldn't be #defined
without a very good reason. Here the alternative would have been
to #define tuklib_has_warning(str) to an approriate value.

Also the tuklib_* files should stay namespace clean if possible."
8366cf8738e8b7bb74c967d07bf0fd2a1878e575,Lasse Collin,Jia Tan,2023-01-23 21:38:34,2023-01-24 12:20:40,"tuklib_physmem: Clean up the way -Wcast-function-type is silenced on Windows.

__has_warning and other __has_foo macros are meant to become
compiler-agnostic so it's not good to check for __clang__ with it.

This also relied on tuklib_common.h for #defining __has_warning
which was confusing as #defining reserved macros is generally
not a good idea."
683a3c7e2fcd922200c31078e5c9dd1348e90941,Lasse Collin,Jia Tan,2023-01-23 22:05:38,2023-01-24 12:20:04,"xz: Flip the return value of suffix_is_set to match the documentation.

Also edit style to match the existing coding style in the project."
cc5aa9ab138beeecaee5a1e81197591893ee9ca0,Jia Tan,Jia Tan,2023-01-07 13:55:06,2023-01-21 14:10:51,xz: Refactor duplicated check for custom suffix when using --format=raw
9663141274e01592a281a7f2df5d7a31a1dac8bf,Jia Tan,Jia Tan,2023-01-20 13:53:14,2023-01-21 13:37:48,"liblzma: Set documentation on all reserved fields to private.

This prevents the reserved fields from being part of the generated
Doxygen documentation."
6327a045f34d48fc5afc58ba0d32a82c94403049,Jia Tan,Jia Tan,2022-12-20 13:39:59,2023-01-19 16:51:12,"Doxygen: Update Doxyfile.in from 1.4.7 to 1.8.17.

A few Doxygen tags were obsolete from 1.4.7. Version 1.8.17 released
in 2019, so this should be compatible with resonable modern distros.
The purpose of Doxygen these days is for docs on the website, so it
doesn't necessarily have to work for everyone. Just when the maintainers
want to update the docs."
bbf71b69ebf9d0d62a0af150a5c37d193b8159ad,Jia Tan,Jia Tan,2023-01-03 12:37:30,2023-01-19 16:51:12,"Doxygen: Make Doxygen only produce liblzma API documentation by default.

Doxygen is now configurable in autotools only with
--enable-doxygen=[api|all]. The default is ""api"", which will only
generate HTML output for liblzma API functions. The LaTex documentation
output was also disabled."
6fcf4671b6047113c583a0919fc850987a4ec5f4,Jia Tan,Jia Tan,2022-12-21 15:59:43,2023-01-19 16:51:12,"liblzma: Highlight liblzma API headers should not be included directly.

This improves the generated Doxygen HTML files to better highlight
how to properly use the liblzma API header files."
b43ff180fb2e372adce876bfa155fc9bcf0c3db4,Jia Tan,Jia Tan,2023-01-19 12:35:09,2023-01-19 12:35:09,"tuklib_physmem: Silence warning from -Wcast-function-type on MinGW-w64.

tuklib_physmem depends on GetProcAddress() for both MSVC and MinGW-w64
to retrieve a function address. The proper way to do this is to cast the
return value to the type of function pointer retrieved. Unfortunately,
this causes a cast-function-type warning, so the best solution is to
simply ignore the warning."
82e3c968bfa10e3ff13333bd9cbbadb5988d6766,Jia Tan,Jia Tan,2023-01-19 12:32:40,2023-01-19 12:32:40,"tuklib_common: Define __has_warning if it is not defined.

clang supports the __has_warning macro to determine if the version of
clang compiling the code supports a given warning. If we do not define
it for other compilers, it may cause a preprocessor error."
b2ba1a489df451cdcd93b2334e319dd06778de19,Jia Tan,Jia Tan,2023-01-18 14:11:05,2023-01-18 14:11:05,"CI: Reorder 32-bit build first for Linux autotool builds.

The 32-bit build needs to be first so the configure cache only needs to
be reset one time. The 32-bit build sets the CFLAGS env variable, so any
build using that flag after will fail unless the cache is reset."
dd1c1135741057c91e8d018be9ec4d43968b0e64,Jia Tan,Jia Tan,2023-01-18 13:51:43,2023-01-18 13:51:43,"CI: Enable --config-cache in autotool builds.

If CFLAGS are set in a build, the cache must be cleared with
""make distclean"", or by deleting the cache file."
d3e11477053764c003eec2daa5198c747d70ff69,Jia Tan,Jia Tan,2023-01-16 13:35:45,2023-01-16 13:35:45,xz: Add missing comment for coder_set_compression_settings()
123255b6ed15f4428b2aa92e4962015a5362f6bf,Jia Tan,Jia Tan,2023-01-16 12:55:10,2023-01-16 12:55:10,"xz: Do not set compression settings with raw format in list mode.

Calling coder_set_compression_settings() in list mode with verbose mode
on caused the filter chain and memory requirements to print. This was
unnecessary since the command results in an error and not consistent
with other formats like lzma and alone."
571919c47b9ff5171ede84378620ed0a9aeb98c0,Jia Tan,Jia Tan,2023-01-13 12:37:06,2023-01-13 14:21:49,Translations: Update the Brazilian Portuguese translation.
81cb02e2c22bbc036cdfaa2d2c4176f6bd60d3cf,Jia Tan,Jia Tan,2023-01-12 15:43:06,2023-01-12 15:43:06,"CI: Disable shared and nls from various jobs in autotool runners.

Disabling shared library generation and linking should help speed up the
runners. The shared library is still being tested in the 32 bit build
and the full feature.

Disabling nls is to check for any unexpected warnings or errors."
58a052198a7bcaf6e958f87fad72e69e19a2579b,Jia Tan,Jia Tan,2023-01-12 15:39:19,2023-01-12 15:39:19,"CI: Reorder the 32-bit job in the Ubuntu runner.

Run the 32 bit job sooner since this is a more interesting test than
some of the later jobs."
4110a998b83459fe2bc9bc1bec30ad68afa8f797,Jia Tan,Jia Tan,2023-01-12 15:09:03,2023-01-12 15:09:03,CI: Allow disabling Native Language Support.
0dec634e705b5bf89a37c5d62d71e8511d480058,Jia Tan,Jia Tan,2023-01-12 15:02:20,2023-01-12 15:02:20,CI: Only run autogen.sh if it has not already run.
32287dc8def94df4546e903495d14c132bd54cc4,Jia Tan,Jia Tan,2023-01-12 14:58:36,2023-01-12 14:58:36,CI: Allow disabling shared library in autotools builds.
77d1ebcc99ddd82a300d1838f608150221931dcd,Jia Tan,Jia Tan,2023-01-12 14:44:18,2023-01-12 14:44:18,CI: Improve Usage readability and add -h option.
a8bb8358d10b059274f3cf993d9b8f490bafb268,Lasse Collin,Lasse Collin,2023-01-12 11:04:05,2023-01-12 11:04:05,"Build: Omit -Wmissing-noreturn from the default warnings.

It's not that important. It can be annoying in builds that
disable many features since in those cases the tests programs
will correctly trigger this warning with Clang."
52dc033d0bde0d19e3912303c6c74bae559d6498,Lasse Collin,Lasse Collin,2023-01-12 04:05:58,2023-01-12 04:05:58,"xz: Use ssize_t for the to-be-ignored return value from write(fd, ptr, 1).

It makes no difference here as the return value fits into an int
too and it then gets ignored but this looks better."
b1a6d180a363d57b2b1c89526ff3f0782bf863d3,Lasse Collin,Lasse Collin,2023-01-12 04:01:12,2023-01-12 04:01:12,xz: Silence warnings from -Wsign-conversion in a 32-bit build.
31c21c734b7c7d7428a3da7402a2cb7bc2587339,Lasse Collin,Lasse Collin,2023-01-12 03:38:48,2023-01-12 03:38:48,"liblzma: Silence another warning from -Wsign-conversion in a 32-bit build.

It doesn't warn on a 64-bit system because truncating
a ptrdiff_t (signed long) to uint32_t is diagnosed under
-Wconversion by GCC and -Wshorten-64-to-32 by Clang."
37fbdfb7263522c11c7ad2685413d6295532581d,Lasse Collin,Lasse Collin,2023-01-12 02:46:45,2023-01-12 02:46:45,liblzma: Silence a warning from -Wsign-conversion in a 32-bit build.
5ce6ddc221d0bfb57d810d845bb65fb0aac0b008,Lasse Collin,Lasse Collin,2023-01-12 02:17:24,2023-01-12 02:17:24,"Build: Make configure add more warning flags for GCC and Clang.

-Wstrict-aliasing was removed from the list since it is enabled
by -Wall already.

A normal build is clean with these on GNU/Linux x86-64 with
GCC 12.2.0 and Clang 14.0.6."
bfc3a0a8ac16de90049c1b1ba1445a7626d0230c,Lasse Collin,Lasse Collin,2023-01-12 02:14:18,2023-01-12 02:14:18,"Tests: Fix warnings from clang --Wassign-enum.

Explicitly casting the integer to lzma_check silences the warning.
Since such an invalid value is needed in multiple tests, a constant
INVALID_LZMA_CHECK_ID was added to tests.h.

The use of 0x1000 for lzma_block.check wasn't optimal as if
the underlying type is a char then 0x1000 will be truncated to 0.
However, in these test cases the value is ignored, thus even with
such truncation the test would have passed."
49245bb31e215ad455a1ab85e4ed6783152dc522,Lasse Collin,Lasse Collin,2023-01-12 01:51:07,2023-01-12 01:56:24,"Tests: Silence warnings from -Wsign-conversion.

Note that assigning an unsigned int to lzma_check doesn't warn
on GNU/Linux x86-64 since the enum type is unsigned on that
platform. The enum can be signed on some other platform though
so it's best to use enumeration type lzma_check in these situations."
3f13bf6b9e8624cbe6d6e3e82d6c98a3ed1ad571,Lasse Collin,Lasse Collin,2023-01-12 01:19:59,2023-01-12 01:19:59,"liblzma: Silence warnings from clang -Wconditional-uninitialized.

This is similar to 2ce4f36f179a81d0c6e182a409f363df759d1ad0.
The actual initialization of the variables is done inside
mythread_sync() macro. Clang doesn't seem to see that
the initialization code inside the macro is always executed."
6c886cc5b3c90c6a75e6be8b1278ec2261e452a6,Lasse Collin,Lasse Collin,2023-01-12 01:11:40,2023-01-12 01:11:40,Fix warnings from clang -Wdocumentation.
a0e7fb1c1ea658b67f30517f5d1975efd0226dba,Lasse Collin,Lasse Collin,2023-01-12 01:04:28,2023-01-12 01:04:28,Tests: test_lzip_decoder: Remove trailing white-space.
c0f8d6782f29e219fd496dd23f6a033270509d5c,Lasse Collin,Lasse Collin,2023-01-12 01:03:55,2023-01-12 01:03:55,Tests: test_lzip_decoder: Silence warnings from -Wsign-conversion.
62efd48a825e8f439e84c85e165d8774ddc68fd2,Jia Tan,GitHub,2023-01-11 15:58:16,2023-01-11 15:58:16,Add NEWS for 5.4.1.
d1561c47ec8cd3844a785d3741dc932f9b9c5790,Jia Tan,GitHub,2023-01-11 14:46:48,2023-01-11 14:46:48,"xz: Fix warning -Wformat-nonliteral on clang in message.c.

clang and gcc differ in how they handle -Wformat-nonliteral. gcc will
allow a non-literal format string as long as the function takes its
format arguments as a va_list."
8c0f115cc489331c48df77beca92fe378039d919,Jia Tan,Jia Tan,2023-01-11 12:58:31,2023-01-11 12:58:31,Tests: Fix test_filter_flags copy/paste error.
25035813d1d596fde692addc33e7f715f1fe55eb,Jia Tan,Jia Tan,2023-01-11 12:42:29,2023-01-11 12:42:29,"Tests: Fix type-limits warning in test_filter_flags.

This only occurs in test_filter_flags when the BCJ filters are not
configured and built. In this case, ARRAY_SIZE() returns 0 and causes a
type-limits warning with the loop variable since an unsigned number will
always be >= 0."
0b8fa310cf56fec55663f62340e49e8e1441594f,Lasse Collin,Lasse Collin,2023-01-10 20:14:03,2023-01-10 20:15:55,"liblzma: CLMUL CRC64: Work around a bug in MSVC, second attempt.

This affects only 32-bit x86 builds. x86-64 is OK as is.

I still cannot easily test this myself. The reporter has tested
this and it passes the tests included in the CMake build and
performance is good: raw CRC64 is 2-3 times faster than the
C version of the slice-by-four method. (Note that liblzma doesn't
include a MSVC-compatible version of the 32-bit x86 assembly code
for the slice-by-four method.)

Thanks to Iouri Kharon for figuring out a fix, testing, and
benchmarking."
765354b50c2886fc0d294d6be3b207f7ae2ada70,Jia Tan,Jia Tan,2023-01-10 17:18:50,2023-01-10 17:18:50,"Tests: Fix unused function warning in test_block_header.

One of the global arrays of filters was only used in a test that
required both encoders and decoders to be configured in the build."
7c23c05befdcc73231c0d6632a7d943dbeaea1aa,Jia Tan,Jia Tan,2023-01-10 17:08:03,2023-01-10 17:08:03,"Tests: Fix unused function warning in test_index_hash.

test_index_hash does not use fill_index_hash() unless both encoders
and decoders are configured in the build."
57464bb4ebd6c00dc8b19803f05ea55ddd0826f6,Jia Tan,Jia Tan,2023-01-10 16:54:45,2023-01-10 16:54:45,"CI/CD: Add 32-bit build and test steps to Ubuntu autotools runner.

If all goes well, Mac autotools and Linux and Mac CMake will be added
later for 32-bit builds."
923eb689a4b863b6cca8df6360d4962aae994edf,Jia Tan,Jia Tan,2023-01-10 16:51:01,2023-01-10 16:51:01,"CI/CD: Enables warnings as errors in autotool build.

This will help us catch warnings and potential bugs in builds that are
not often tested by us."
feae5528a30c006b6e2f96a95116e20b983703fc,Jia Tan,Jia Tan,2023-01-10 16:48:35,2023-01-10 16:48:35,"CI/CD: Add -f argument to set CFLAGS in ci_build.sh.

For now, the suggested option is for -m32 only, but this can be updated
later if other flags are deemed useful."
cfabb62a4874c146e7d6f30445637602545bc054,Lasse Collin,Lasse Collin,2023-01-10 10:47:16,2023-01-10 10:47:16,"Revert ""liblzma: CLMUL CRC64: Workaround a bug in MSVC (VS2015-2022).""

This reverts commit 36edc65ab4cf10a131f239acbd423b4510ba52d5.

It was reported that it wasn't a good enough fix and MSVC
still produced (different kind of) bad code when building
for 32-bit x86 if optimizations are enabled.

Thanks to Iouri Kharon."
0b64215170dd3562f207ef26f794755bcd600526,Lasse Collin,Lasse Collin,2023-01-10 09:56:11,2023-01-10 09:56:11,"sysdefs.h: Don't include strings.h anymore.

On some platforms src/xz/suffix.c may need <strings.h> for
strcasecmp() but suffix.c includes the header when it needs it.

Unless there is an old system that otherwise supports enough C99
to build XZ Utils but doesn't have C89/C90-compatible <string.h>,
there should be no need to include <strings.h> in sysdefs.h."
ec2fc39fe4f4e6e242b3a669585049763968cdeb,Lasse Collin,Lasse Collin,2023-01-10 09:23:41,2023-01-10 09:23:41,"xz: Include <strings.h> in suffix.c if needed for strcasecmp().

SUSv2 and POSIX.1‐2017 declare only a few functions in <strings.h>.
Of these, strcasecmp() is used on some platforms in suffix.c.
Nothing else in the project needs <strings.h> (at least if
building on a modern system).

sysdefs.h currently includes <strings.h> if HAVE_STRINGS_H is
defined and suffix.c relied on this.

Note that dos/config.h doesn't #define HAVE_STRINGS_H even though
DJGPP does have strings.h. It isn't needed with DJGPP as strcasecmp()
is also in <string.h> in DJGPP."
7049c4a76c805ad27d6cf4ee119a2ef2a7add59f,Lasse Collin,Lasse Collin,2023-01-10 08:05:13,2023-01-10 08:05:13,sysdefs.h: Fix a comment.
194a5fab69277d9e804a6113b5f676b8666b3a61,Lasse Collin,Lasse Collin,2023-01-10 08:04:06,2023-01-10 08:04:06,"sysdefs.h: Don't include memory.h anymore even if it were available.

It quite probably was never needed, that is, any system where memory.h
was required likely couldn't compile XZ Utils for other reasons anyway.

XZ Utils 5.2.6 and later source packages were generated using
Autoconf 2.71 which no longer defines HAVE_MEMORY_H. So the code
being removed is no longer used anyway."
5e34774c31d1b7509b5cb77a3be9973adec59ea0,Lasse Collin,Lasse Collin,2023-01-10 06:29:32,2023-01-10 06:29:32,"CMake: Fix appending to CMAKE_RC_FLAGS.

It's a string, not a list. It only worked when the variable was empty.

Thanks to Iouri Kharon."
6e652ceb18c615c578c869db300fa0756788b4e0,Lasse Collin,Lasse Collin,2023-01-09 22:33:14,2023-01-09 22:35:09,Windows: Update INSTALL-MSVC.txt to recommend CMake over project files.
6b117d3b1fe91eb26d533ab16a2e552f84148d47,Lasse Collin,Lasse Collin,2023-01-09 21:41:25,2023-01-09 21:41:25,"CMake: Fix windres issues again.

At least on some systems, GNU windres needs --use-temp-file
in addition to the \x20 hack to avoid spaces in the command line
argument. Hovever, that \x20 syntax is broken with llvm-windres
version 15.0.0 (results in ""XZx20Utils"") but luckily it works
with a regular space. Thus it is best to limit the workarounds
to GNU toolchain on Windows."
0c210ca7f489e971e94e1ddc72b0b0806e3c7935,Lasse Collin,Jia Tan,2023-01-06 20:53:38,2023-01-09 12:35:20,"Tests: test_filter_flags: Clean up minor issues.

Here are the list of the most significant issues addressed:
- Avoid using internal common.h header. It's not good to copy the
constants like this but common.h cannot be included for use outside
of liblzma. This is the quickest thing to do that could be fixed later.

- Omit the INIT_FILTER macro. Initialization should be done with just
regular designated initializers.

- Use start_offset = 257 for BCJ tests. It demonstrates that Filter
Flags encoder and decoder don't validate the options thoroughly.
257 is valid only for the x86 filter. This is a bit silly but
not a significant problem in practice because the encoder and
decoder initialization functions will catch bad alignment still.
Perhaps this should be fixed but it's not urgent and doesn't need
to be in 5.4.x.

- Various tweaks to comments such as filter id -> Filter ID"
5c9fdd3bf53a9655f5eb2807d662b3af0d5e1865,Jia Tan,Jia Tan,2022-12-29 15:33:33,2023-01-09 12:35:20,"Tests: Refactors existing filter flags tests.

Converts the existing filter flags tests into tuktests."
36edc65ab4cf10a131f239acbd423b4510ba52d5,Lasse Collin,Lasse Collin,2023-01-09 10:22:05,2023-01-09 10:22:05,"liblzma: CLMUL CRC64: Workaround a bug in MSVC (VS2015-2022).

I haven't tested with MSVC myself and there doesn't seem to be
information about the problem online, so I'm relying on the bug report.

Thanks to Iouri Kharon for the bug report and the patch."
790a12a95a78ff82d8c6d4efe3b789851ca9470d,Lasse Collin,Lasse Collin,2023-01-09 09:27:24,2023-01-09 09:27:24,"CMake: Fix a copypaste error in xzdec Windows resource file handling.

It was my mistake. Thanks to Iouri Kharon for the bug report."
0e1545fea39c0514c7b7032a0a3592a9a33d2848,Lasse Collin,Lasse Collin,2023-01-07 22:32:29,2023-01-07 22:32:29,"Tests: tuktest.h: Support tuktest_malloc(0).

It's not needed in XZ Utils at least for now. It's good to support
it still because if such use is needed later, it wouldn't be
caught on GNU/Linux since malloc(0) from glibc returns non-NULL."
69d5d78c6904668eb09a131da86276beec3281f8,Lasse Collin,Lasse Collin,2023-01-07 22:24:23,2023-01-07 22:24:23,Update THANKS.
dd38655f80c113c9db73b9ed370dc900e1c4dc41,Lasse Collin,Lasse Collin,2023-01-07 19:57:11,2023-01-07 22:20:42,"CMake: Update cmake_minimum_required from 3.13...3.16 to 3.13...3.25.

The changes listed on cmake-policies(7) for versions 3.17 to 3.25
shouldn't affect this project."
a890a637bee9193d5b690aefa9a59eba5b8532ae,Lasse Collin,Lasse Collin,2023-01-07 17:50:35,2023-01-07 22:20:42,Update THANKS.
6e38e595dd56ac1800478cef1f6f754d0eba0d2e,Lasse Collin,Lasse Collin,2023-01-07 17:50:03,2023-01-07 22:20:42,"CMake/Windows: Add resource files to xz.exe and xzdec.exe.

The command line tools cannot be built with MSVC for now but
they can be built with MinGW-w64.

Thanks to Iouri Kharon for the bug report and the original patch."
443dfebced041adc88f10d824188eeef5b5821a9,Lasse Collin,Lasse Collin,2023-01-07 17:48:52,2023-01-07 22:20:42,"CMake/Windows: Add a workaround for windres from GNU binutils.

Thanks to Iouri Kharon for the bug report and the original patch."
ceb805011747d04a915f3f39e4bed9eed151c634,Lasse Collin,Lasse Collin,2023-01-07 17:31:15,2023-01-07 22:20:42,"Build: Require that _mm_set_epi64x() is usable to enable CLMUL support.

VS2013 doesn't have _mm_set_epi64x() so this way CLMUL gets
disabled with VS2013.

Thanks to Iouri Kharon for the bug report."
8d372bd94066b1a5b0570b2550f83c2868486adf,Jia Tan,Jia Tan,2023-01-07 13:05:15,2023-01-07 13:15:18,"CI/CD: Split CMake Linux and MacOS build phase to build and test.

The phase split was only done for Autotools before, so should also
apply to CMake."
747c7f2b34bd498f6702c6875500a26b06201772,Jia Tan,Jia Tan,2023-01-07 03:16:55,2023-01-07 13:15:16,"CI/CD: Reduce job runners to 4 instead of using matrix strategy.

The old version used too many runners that resulted in unnecessary
dependency downloads. Now, the runners are reused for the different
configurations for each OS and build system."
4de35fd6b58d46fc887c78faf163f6a37b790c45,Jia Tan,Jia Tan,2023-01-07 02:07:20,2023-01-07 13:15:14,"CI/CD: Add new -p (PHASE) argument to ci_build.sh

The new PHASE argument can be build, test, or all. all is the default.
This way, the CI/CD script can differentiate between the build and test
phases to make it easier to track down errors when they happen."
6fd39664de47801e670a16617863196bfbde4755,Jia Tan,GitHub,2023-01-06 16:10:50,2023-01-06 16:10:50,"Merge pull request #7 from tukaani-project/tuktest_index_hash

Tuktest index hash"
fc0c788469159f634f09ff23c8cef6925c91da57,Lasse Collin,Lasse Collin,2023-01-06 15:58:48,2023-01-06 15:58:48,Tests: test_index_hash: Add an assert_uint_eq().
d550304f5343b3a082da265107cd820e0d81dc71,Lasse Collin,Lasse Collin,2023-01-06 15:55:06,2023-01-06 15:55:06,Tests: test_index_hash: Fix a memory leak.
02608f74ea1f2d2d56585711ff241c34b4ad0937,Lasse Collin,Lasse Collin,2023-01-06 15:53:03,2023-01-06 15:53:03,Tests: test_index_hash: Don't treat pointers as booleans.
056766c8601a3808bea1761f6cc833197a35a3e0,Lasse Collin,Lasse Collin,2023-01-06 15:51:41,2023-01-06 15:51:41,Tests: test_index_hash: Fix a typo in a comment.
873e684028ba9738f071c5236db7d452ed797b4c,Lasse Collin,Lasse Collin,2023-01-06 15:44:29,2023-01-06 15:44:29,"Tests: test_index_hash: Avoid the variable name ""index"".

It can trigger warnings from -Wshadow on some systems."
d1f24c35874eeba8432d75aa77b06c50375ed937,Lasse Collin,Lasse Collin,2023-01-06 15:35:50,2023-01-06 15:35:50,"Tests: test_index_hash: Use the word ""Record"" instead of ""entry""."
b93f7c5cbb02b42024ac866fc0af541de3d816e2,Lasse Collin,Lasse Collin,2023-01-06 15:35:05,2023-01-06 15:35:05,"Tests: test_index_hash: Tweak comments and style.

The words defined in the .xz file format specification
begin with capital letter to emphasize that they have
a specific meaning."
c48b24fc06d98569adb72f13c2e8e5ff30bb8036,Lasse Collin,Lasse Collin,2023-01-06 15:17:37,2023-01-06 15:17:37,Tests: test_index_hash: Use INDEX_INDICATOR constant instead of 0.
78e0561dfebaa9d5e34558de537efcda890e0629,Jia Tan,Jia Tan,2023-01-06 12:43:31,2023-01-06 12:43:31,Style: Change #if !defined() to #ifndef in mythread.h.
e834e1e934ed0af673598d8c0c34afb2af56bee0,Jia Tan,Jia Tan,2023-01-06 12:35:55,2023-01-06 12:42:18,"Build: Add missing stream_decoder_mt.c to .vcxproj files.

The line in the .vcxproj files for building with was missing in 5.4.0.
Thank to Hajin Jang for reporting the issue."
84f9687cbae972c2c342e10bf69f8ec8f70ae111,Jia Tan,Jia Tan,2023-01-05 12:57:25,2023-01-05 12:57:25,"liblzma: Remove common.h include from common/index.h.

common/index.h is needed by liblzma internally and tests. common.h will
include and define many things that are not needed by the tests. Also,
this prevents include order problems because common.h will redefine
LZMA_API resulting in a warning."
7657ce1c3c4abff7560336a7b687d98e0e2bd14f,Lasse Collin,Lasse Collin,2023-01-04 20:40:54,2023-01-04 21:16:26,Update THANKS.
aafd67fba045ab99683971263a5a26fb2a6e8ce2,Lasse Collin,Lasse Collin,2023-01-04 16:40:28,2023-01-04 16:40:28,Tests: Adjust style in test_compress.sh.
52380678f42364daa4510f92f6d3b18ec98c3638,Jia Tan,GitHub,2023-01-04 15:58:58,2023-01-04 15:58:58,"Tests: Replace non portable shell parameter expansion

The shell parameter expansion using # and ## is not supported in
Solaris 10 Bourne shell (/bin/sh). Even though this is POSIX, it is not fully
portable, so we should avoid it."
d0eb345bb7d148a62883ee299adec2b74a0f6f3b,Jia Tan,Jia Tan,2023-01-03 13:02:38,2023-01-03 13:02:38,"Translations: Add Korean translation of man pages.

Thanks to Seong-ho Cho"
c4145978d95ebf1690c778d354e15f7c2823d7a8,Jia Tan,Jia Tan,2023-01-03 12:47:27,2023-01-03 12:47:27,Translations: Update the Esperanto translation.
4103a2e78ac60b00c888485cd967a5fe5d1b917c,Lasse Collin,Lasse Collin,2023-01-02 15:20:47,2023-01-02 15:20:47,"Bump version and soname for 5.5.0alpha.

5.5.0alpha won't be released, it's just to mark that
the branch is not for stable 5.4.x.

Once again there is no API/ABI stability for new features
in devel versions. The major soname won't be bumped even
if API/ABI of new features breaks between devel releases."
73c9e6d6b970ccc3d5ad61dcaa21cba050e5df0a,Lasse Collin,Lasse Collin,2023-01-02 15:05:07,2023-01-02 15:05:07,Build: Fix config.h comments.
bb740e3b117f1a3c65152d01e5755523a908ecb1,Jia Tan,GitHub,2023-01-02 14:33:48,2023-01-02 14:33:48,"Build: Only define HAVE_PROGRAM_INVOCATION_NAME if it is set to 1.

HAVE_DECL_PROGRAM_INVOCATION_NAME is renamed to
HAVE_PROGRAM_INVOCATION_NAME. Previously,
HAVE_DECL_PROGRAM_INVOCATION_NAME was always set when
building with autotools. CMake would only set this when it was 1, and the
dos/config.h did not define it. The new macro definition is consistent
across build systems."
064cd385a716abc78d93a3612411a82d69ceb221,Jia Tan,Jia Tan,2022-12-28 16:30:52,2023-01-02 14:20:04,Adds test_index_hash to .gitignore.
3959162baec074511d83ba0fec1284c3ed724799,Jia Tan,Jia Tan,2022-12-28 16:25:18,2023-01-02 14:20:04,"Tests: Creates test_index_hash.c

Tests all API functions exported from index_hash.h. Does not have a
dedicated test for lzma_index_hash_end."
f16e12d5e755d371247202fcccbcccd1ec16b2cf,Jia Tan,Jia Tan,2022-08-17 12:20:16,2023-01-02 14:20:04,"liblzma: Add NULL check to lzma_index_hash_append.

This is for consistency with lzma_index_append."
203b008eb220208981902e0db541c02d1c1c9f5e,Jia Tan,Jia Tan,2022-08-17 09:59:51,2023-01-02 14:20:04,liblzma: Replaced hardcoded 0x0 index indicator byte with macro
dfecda875211f737d0db92dc1d3c58a3a2afb0c0,Lasse Collin,Lasse Collin,2022-12-30 18:10:08,2022-12-30 18:10:08,Tests: test_check: Test corner cases of CLMUL CRC64.
ce96bb20435212fe797d6d84738fb9fd4ea13cc7,Lasse Collin,Lasse Collin,2022-12-30 17:36:49,2022-12-30 17:36:49,Tests: Clarify a comment in test_lzip_decoder.c.
2fcba17fc4d7eda8fc60567169cf2a0e6fcfb2f8,Jia Tan,Jia Tan,2022-12-28 17:55:19,2022-12-30 15:34:31,"xz: Includes <time.h> and <sys/time.h> conditionally in mytime.c.

Previously, mytime.c depended on mythread.h for <time.h> to be included."
f82294c8318a7a0990583d51ac5c7de682ad36ef,Jia Tan,Jia Tan,2022-12-28 17:15:27,2022-12-30 15:34:31,"liblzma: Includes sys/time.h conditionally in mythread

Previously, <sys/time.h> was always included, even if mythread only used
clock_gettime. <time.h> is still needed even if clock_gettime is not used
though because struct timespec is needed for mythread_condtime."
74dae7d30091e906d6a92a57952dea4354473f9b,Jia Tan,Jia Tan,2022-12-28 17:10:53,2022-12-30 15:34:31,"Build: No longer require HAVE_DECL_CLOCK_MONOTONIC to always be set.

Previously, if threading was enabled HAVE_DECL_CLOCK_MONOTONIC would always
be set to 0 or 1. However, this macro was needed in xz so if xz was not
built with threading and HAVE_DECL_CLOCK_MONOTONIC was not defined but
HAVE_CLOCK_GETTIME was, it caused a warning during build. Now,
HAVE_DECL_CLOCK_MONOTONIC has been renamed to HAVE_CLOCK_MONOTONIC and
will only be set if it is 1."
7339e39dc060df6eda74a2c5b69961befc3d5d24,Jia Tan,Jia Tan,2022-12-27 17:14:07,2022-12-30 15:34:31,"Translations: Add Ukrainian translations of man pages.

Thanks to Yuri Chornoivan"
9f05c27a58ce8cd7803079aa295e41c24665ce6e,Jia Tan,Jia Tan,2022-12-22 16:34:48,2022-12-30 15:34:31,"CI/CD: Create initial version of CI/CD workflow.

The CI/CD workflow will only execute on Ubuntu and MacOS latest version.
The workflow will attempt to build with autotools and CMake and execute
the tests. The workflow will run for all pull requests and pushes done
to the master branch."
1275ebfba74230dbd028049141423c79c8b83b8f,Jia Tan,Jia Tan,2022-12-22 15:14:53,2022-12-30 15:34:31,liblzma: Update documentation for lzma_filter_encoder.
7c9ff5f1667a16733163b75dfd4b509662c387f4,Jia Tan,Jia Tan,2022-12-21 13:12:03,2022-12-30 15:34:31,Tests: Adds lzip decoder tests
799ead162de63b8400733603d3abcd2e1977bdca,Jia Cheong Tan,Jia Tan,2022-12-20 14:05:21,2022-12-30 15:34:31,"Doxygen: Update .gitignore for generating docs for in source build.

In source builds are not recommended, but we should still ignore
the generated artifacts."
5f7ce42a16b1e86ca8408b5c670c25e2a12acc4e,Jia Tan,Jia Tan,2022-12-20 12:46:44,2022-12-30 15:34:31,"liblzma: Fix lzma_microlzma_encoder() return value.

Using return_if_error on lzma_lzma_lclppb_encode was improper because
return_if_error is expecting an lzma_ret value, but
lzma_lzma_lclppb_encode returns a boolean. This could result in
lzma_microlzma_encoder, which would be misleading for applications."
8ace358d65059152d9a1f43f4770170d29d35754,Jia Tan,Jia Tan,2022-12-16 12:58:55,2022-12-30 15:34:31,"CMake: Update .gitignore for CMake artifacts from in source build.

In source builds are not recommended, but we can make it easier
by ignoring the generated artifacts from CMake."
8fd225a2c149f30aeac377e68eb5abf6b28300ad,Lasse Collin,Lasse Collin,2022-12-16 16:30:02,2022-12-16 16:30:02,liblzma: Update authors list in arm64.c.
b69da6d4bb6bb11fc0cf066920791990d2b22a06,Lasse Collin,Lasse Collin,2022-12-13 18:37:17,2022-12-13 18:46:41,Bump version to 5.4.0 and soname to 5.4.0.
20869eb3fb280ff4f271ef527b12b6bf68b05e19,Lasse Collin,Lasse Collin,2022-12-13 18:29:39,2022-12-13 18:29:39,"Update INSTALL: CMake on Windows isn't experimental anymore.

Using CMake to build liblzma should work on a few other OSes
but building the command line tools is still subtly broken.

It is known that shared library versioning may differ between
CMake and Libtool builds on some OSes, most notably Darwin."
cbbd84451944e3e8c63acfaa3c923f6d8aff7852,Lasse Collin,Lasse Collin,2022-12-13 17:47:53,2022-12-13 18:27:39,Add NEWS for 5.4.0.
c3e94d37e8d10a3e96019864b6f5d7b578db2c14,Lasse Collin,Lasse Collin,2022-12-13 15:41:20,2022-12-13 15:41:20,Fix a typo in NEWS.
0d2a2e0a545c3da2b3e9500f1e531eb903087245,Lasse Collin,Lasse Collin,2022-12-13 15:41:03,2022-12-13 15:41:03,Add NEWS for 5.2.10.
177ece1c8eb007188fb1b04eff09ca2193fbdea6,Lasse Collin,Lasse Collin,2022-12-13 10:30:45,2022-12-13 10:30:45,Tests: Fix a typo in tests/files/README.
60f45bdbaa6b07558b3f4baac285739b0c6342f5,Lasse Collin,Lasse Collin,2022-12-13 10:30:09,2022-12-13 10:30:09,Tests: Add two ARM64 test files.
f5e419550619c548c7c35d7e367cf00580a56521,Lasse Collin,Lasse Collin,2022-12-12 20:44:21,2022-12-12 20:44:21,Translations: Update the Catalan translation.
0fb9d355da3789b1757040af475b4e6bbc8b8af8,Lasse Collin,Lasse Collin,2022-12-12 17:18:12,2022-12-12 17:18:12,Update THANKS.
e5b6c161c61a37c54dcb76a99bbb83ac4abe02dc,Lasse Collin,Lasse Collin,2022-12-12 17:07:58,2022-12-12 17:07:58,Update AUTHORS.
f2d98e691099d82054d5f3071ef6f5e809932e44,Lasse Collin,Lasse Collin,2022-12-12 13:31:14,2022-12-12 13:31:14,"Docs: Omit multi-threaded decompress from TODO.

The TODO file outdated still."
b42908c42a4cc091db45a7e5ba0e0ecceaa3f6da,Lasse Collin,Lasse Collin,2022-12-11 19:16:09,2022-12-11 19:16:09,Docs: Update xz-file-format.txt to 1.1.0 for ARM64 filter.
854f2f5946b353cb0963fd6dfd54d363adc89b9f,Lasse Collin,Lasse Collin,2022-12-11 19:13:57,2022-12-11 19:13:57,xz: Rename --experimental-arm64 to --arm64.
31dbd1e5fb65831915a7bbb531c3f19aea8d57a5,Lasse Collin,Lasse Collin,2022-12-11 19:13:06,2022-12-11 19:13:06,liblzma: Change LZMA_FILTER_ARM64 to the official Filter ID 0x0A.
01b3549e523edac899ec4925b282ceddd20da116,Lasse Collin,Lasse Collin,2022-12-08 17:24:22,2022-12-08 17:24:22,xz: Make args_info.files_name a const pointer.
bc665b84ea6bf7946394a08122177efe41b26a5f,Lasse Collin,Lasse Collin,2022-12-08 17:18:16,2022-12-08 17:18:16,"xz: Don't modify argv[].

The code that parses --memlimit options and --block-list modified
the argv[] when parsing the option string from optarg. This was
visible in ""ps auxf"" and such and could be confusing. I didn't
understand it back in the day when I wrote that code. Now a copy
is allocated when modifiable strings are needed."
a13064e1c290de7933db72b6dffbd65cfce59c9f,Lasse Collin,Lasse Collin,2022-12-08 16:18:57,2022-12-08 16:18:57,Translations: Update the German man page translations.
8bdbe42a8d0d75dff70206b923fc4bce5c69a40a,Jia Tan,Lasse Collin,2022-12-06 15:05:56,2022-12-08 16:18:06,Translations: Update the German translation.
5c304b57c24ef40ff57f864301065f0244c05bde,Jia Tan,Lasse Collin,2022-12-06 15:04:25,2022-12-08 16:18:06,Translations: Update the Turkish translation.
6d86781fdb937970486500447ebb49b98244235b,Jia Tan,Lasse Collin,2022-12-06 15:02:11,2022-12-08 16:18:06,Translations: Update the Croatian translation.
7a5b4b8075eb36026b1796f04ffed5830c42396a,Jia Tan,Lasse Collin,2022-12-06 14:56:30,2022-12-08 16:18:06,"Translations: Add Romanian translation of man pages.

Thanks to Remus-Gabriel Chelu."
c6977e7400088177556e8771bcb839eb7d90caa3,Jia Tan,Lasse Collin,2022-12-06 14:52:13,2022-12-08 16:18:06,Translations: Update the Romanian translation.
ac2a747e939c2cbccff7a49c399769af5e02d2ab,Lasse Collin,Lasse Collin,2022-12-08 15:30:09,2022-12-08 15:30:09,"liblzma: Check for unexpected NULL pointers in block_header_decode().

The API docs gave an impression that such checks are done
but they actually weren't done. In practice it made little
difference since the calling code has a bug if these are NULL.

Thanks to Jia Tan for the original patch that checked for
block->filters == NULL."
24790f49ae66938c1c7574315e1c0aba1ed5ed25,Lasse Collin,Lasse Collin,2022-12-01 18:59:32,2022-12-01 18:59:32,"Bump version number for 5.3.5beta.

This also sorts the symbol names alphabetically in liblzma_*.map."
7e53c5bcb3c2c17f47c096c06ff6b1481e6ecafa,Lasse Collin,Lasse Collin,2022-12-01 18:57:26,2022-12-01 18:57:26,Add NEWS for 5.3.5beta.
5865f2aaac326fcbd9f8a7d62defa230e4cb644e,Lasse Collin,Lasse Collin,2022-12-01 18:57:09,2022-12-01 18:57:09,Update THANKS.
62b270988ec67314d69976df484d2974c6eacfda,Lasse Collin,Lasse Collin,2022-12-01 18:04:17,2022-12-01 18:55:21,"liblzma: Use __has_attribute(__symver__) to fix Clang detection.

If someone sets up Clang to define __GNUC__ to 10 or greater
then symvers broke. __has_attribute is supported by such GCC
and Clang versions that don't support __symver__ so this should
be much better and simpler way to detect if __symver__ is
actually supported.

Thanks to Tomasz Gajc for the bug report."
f9ca7d45162664ddd9fb70e19335c2426e5d75bb,Lasse Collin,Lasse Collin,2022-12-01 16:51:52,2022-12-01 16:55:00,"liblzma: Omit zero-skipping from ARM64 filter.

It has some complicated downsides and its usefulness is more limited
than I originally thought. So this change is bad for certain very
specific situations but a generic solution that works for other
filters (and is otherwise better too) is planned anyway. And this
way 7-Zip can use the same compatible filter for the .7z format.

This is still marked as experimental with a new temporary Filter ID."
5baec3f0a9c85e6abf45c0f652f699b074129a8b,Lasse Collin,Lasse Collin,2022-12-01 16:13:27,2022-12-01 16:13:27,xz: Omit the special notes about ARM64 filter on the man page.
0c3627b51862eb0dcdd4fc283d046250571991c6,Lasse Collin,Lasse Collin,2022-12-01 16:12:03,2022-12-01 16:12:03,liblzma: Don't be over-specific in lzma_str_to_filters API doc.
94adf057f27b1970f493dc99cd166407d7255639,Lasse Collin,Lasse Collin,2022-12-01 15:54:23,2022-12-01 15:54:23,"liblzma: Silence unused variable warning when BCJ filters are disabled.

Thanks to Jia Tan for the original patch."
c68af4441744e5ffc41a472e1be9c9d53a1d9780,Lasse Collin,Lasse Collin,2022-12-01 15:38:03,2022-12-01 15:38:03,Translations: Update the Chinese (simplified) translation.
3be6942e5c27d29995d41da52fbe274e4ce4a537,Lasse Collin,Lasse Collin,2022-11-30 16:55:03,2022-11-30 16:55:03,Add NEWS for 5.2.9.
7c16e312cb2f40b81154c0e5be13a3c6b8da485d,Jia Tan,Lasse Collin,2022-11-30 15:33:08,2022-11-30 16:12:35,"xz: Remove message_filters_to_str function prototype from message.h.

This was forgotten from 7484744af6cbabe81e92af7d9e061dfd597fff7b."
764955e2d4f2a5e8d6d6fec63af694f799e050e7,Lasse Collin,Lasse Collin,2022-11-30 16:08:34,2022-11-30 16:08:34,"Change the bug report address.

It forwards to me and Jia Tan.

Also update the IRC reference in README as #tukaani was moved
to Libera Chat long ago."
c21983c76031e01da01ad3c6cc716fe4b8a75070,Lasse Collin,Lasse Collin,2022-11-30 15:50:17,2022-11-30 15:50:17,"Build: Add string_conversion.c to CMake, DOS, and VS files."
30be0c35d24eb5175459d69dbf7d92e2b087ef82,Lasse Collin,Lasse Collin,2022-11-30 15:38:32,2022-11-30 15:38:32,Update to HTTPS URLs in AUTHORS.
0a72b9ca2fe20082da9b7128fe0d908af947a851,Jia Tan,Lasse Collin,2022-11-29 16:52:06,2022-11-29 20:29:15,liblzma: Improve documentation for string to filter functions.
a6e21fcede3b196160a52dd294d965c508a4bb33,Lasse Collin,Lasse Collin,2022-11-29 20:27:42,2022-11-29 20:27:42,"liblzma: Two fixes to lzma_str_list_filters() API docs.

Thanks to Jia Tan."
7484744af6cbabe81e92af7d9e061dfd597fff7b,Lasse Collin,Lasse Collin,2022-11-28 19:57:47,2022-11-28 20:05:32,"xz: Use lzma_str_from_filters().

Two uses: Displaying encoder filter chain when compressing with -vv,
and displaying the decoder filter chain in --list -vv."
cedeeca2ea6ada5b0411b2ae10d7a859e837f203,Lasse Collin,Lasse Collin,2022-11-28 19:37:48,2022-11-28 19:54:24,"liblzma: Add lzma_str_to_filters, _from_filters, and _list_filters.

lzma_str_to_filters() uses static error messages which makes
them not very precise. It tells the position in the string
where an error occurred though which helps quite a bit if
applications take advantage of it. Dynamic error messages can
be added later with a new flag if it seems important enough."
072ebf7b1335421193ffa9d4a70d5533786b8995,Lasse Collin,Lasse Collin,2022-11-28 19:02:19,2022-11-28 19:02:19,liblzma: Make lzma_validate_chain() available outside filter_common.c.
5f22bd2d37e3bd01a5d701b51750eb51f09c11bf,Lasse Collin,Lasse Collin,2022-11-28 08:51:03,2022-11-28 08:51:03,liblzma: Remove lzma_lz_decoder_uncompressed() as it's now unused.
cee83206465b95729ab649aa2f57fdbde8dcaf89,Lasse Collin,Lasse Collin,2022-11-28 08:48:53,2022-11-28 08:48:53,"liblzma: Use LZMA1EXT feature in lzma_microlzma_decoder().

Here too this avoids the slightly ugly method to set
the uncompressed size.

Also moved the setting of dict_size to the struct initializer."
e310e8b6a490dfb468f4ed68feff246d776b323c,Lasse Collin,Lasse Collin,2022-11-28 08:28:20,2022-11-28 08:28:20,"liblzma: Use LZMA1EXT feature in lzma_alone_decoder().

This avoids the need to use the slightly ugly method to
set the uncompressed size."
33b8a24b6646a9dbfd8358405aec466b13078559,Lasse Collin,Lasse Collin,2022-11-27 21:16:21,2022-11-27 21:16:21,"liblzma: Add LZMA_FILTER_LZMA1EXT to support LZMA1 without end marker.

Some file formats need support for LZMA1 streams that don't use
the end of payload marker (EOPM) alias end of stream (EOS) marker.
So far liblzma API has supported decompressing such streams via
lzma_alone_decoder() when .lzma header specifies a known
uncompressed size. Encoding support hasn't been available in the API.

Instead of adding a new LZMA1-only API for this purpose, this commit
adds a new filter ID for use with raw encoder and decoder. The main
benefit of this approach is that then also filter chains are possible,
for example, if someone wants to implement support for .7z files that
use the x86 BCJ filter with LZMA1 (not BCJ2 as that isn't supported
in liblzma)."
9a304bf1e45b3ddf61aaeaa7c764915b34618ede,Lasse Collin,Lasse Collin,2022-11-27 16:43:07,2022-11-27 16:43:07,liblzma: Avoid unneeded use of void pointer in LZMA decoder.
218394958c7683f892275bb40eae880620feebcc,Lasse Collin,Lasse Collin,2022-11-27 16:20:33,2022-11-27 16:20:33,"liblzma: Pass the Filter ID to LZ encoder and decoder.

This allows using two Filter IDs with the same
initialization function and data structures."
1663c7676b76f4c514031797f3db1896e8100f7f,Lasse Collin,Lasse Collin,2022-11-26 23:03:16,2022-11-26 23:03:16,liblzma: Remove two FIXME comments.
11fe708db783ac36ebeeb85da164e29e8c300910,Lasse Collin,Lasse Collin,2022-11-26 20:25:30,2022-11-26 20:25:30,xz: Use lzma_filters_free().
e782af9110d8499c7ac2929bc871540eefea5ea1,Lasse Collin,Lasse Collin,2022-11-26 20:21:13,2022-11-26 20:21:13,liblzma: Use lzma_filters_free() in more places.
90caaded2dc6db1d6a55b01160d7e87f4a423628,Lasse Collin,Lasse Collin,2022-11-25 16:04:37,2022-11-25 16:04:37,liblzma: Omit simple coder init functions if they are disabled.
5cd9f0df78cc4f8a7807bf6104adea13034fbb45,Lasse Collin,Lasse Collin,2022-11-24 21:24:59,2022-11-24 21:24:59,"xz: Allow nice_len 2 and 3 even if match finder requires 3 or 4.

Now that liblzma accepts these, we avoid the extra check and
there's one message less for translators too."
3be88ae071371caa279b44e13f4836fb178fe4ae,Lasse Collin,Lasse Collin,2022-11-24 21:23:55,2022-11-24 21:23:55,"liblzma: Allow nice_len 2 and 3 even if match finder requires 3 or 4.

That is, if the specified nice_len is smaller than the minimum
of the match finder, silently use the match finder's minimum value
instead of reporting an error. The old behavior is annoying to users
and it complicates xz options handling too."
93439cfafe1768b3b18d67d2356ef7e7559bba59,Lasse Collin,Lasse Collin,2022-11-24 14:25:10,2022-11-24 14:25:10,"liblzma: Add lzma_filters_update() support to the multi-threaded encoder.

A tiny downside of this is that now a 1-4 tiny allocations are made
for every Block because each worker thread needs its own copy of
the filter chain."
17ac51e689794eb41cab3e80946fec689caea2d2,Lasse Collin,Lasse Collin,2022-11-24 12:53:22,2022-11-24 12:53:22,Update THANKS.
06824396b2b6c84f3a235cb7c19c2a9701167797,Lasse Collin,Lasse Collin,2022-11-24 12:52:44,2022-11-24 12:52:44,"Build: Don't put GNU/Linux-specific symbol versions into static liblzma.

It not only makes no sense to put symbol versions into a static library
but it can also cause breakage.

By default Libtool #defines PIC if building a shared library and
doesn't define it for static libraries. This is documented in the
Libtool manual. It can be overriden using --with-pic or --without-pic.
configure.ac detects if --with-pic or --without-pic is used and then
gives an error if neither --disable-shared nor --disable-static was
used at the same time. Thus, in normal situations it works to build
both shared and static library at the same time on GNU/Linux,
only --with-pic or --without-pic requires that only one type of
library is built.

Thanks to John Paul Adrian Glaubitz from Debian for reporting
the problem that occurred on ia64:
https://www.mail-archive.com/xz-devel@tukaani.org/msg00610.html"
e1acf7107291f8b3d6d609a7133331ff36d35d14,Lasse Collin,Lasse Collin,2022-11-23 23:32:16,2022-11-23 23:32:16,"liblzma: Refactor to use lzma_filters_free().

lzma_filters_free() sets the options to NULL and ids to
LZMA_VLI_UNKNOWN so there is no need to do it by caller;
the filter arrays will always be left in a safe state.

Also use memcpy() instead of a loop to copy a filter chain
when it is known to be safe to copy LZMA_FILTERS_MAX + 1
(even if the elements past the terminator might be uninitialized)."
cb05dbcf8b868441ec805016222f3fd77f1c5caa,Lasse Collin,Lasse Collin,2022-11-23 23:26:37,2022-11-23 23:26:37,"liblzma: Fix another invalid free() after memory allocation failure.

This time it can happen when lzma_stream_encoder_mt() is used
to reinitialize an existing multi-threaded Stream encoder
and one of 1-4 tiny allocations in lzma_filters_copy() fail.

It's very similar to the previous bug
10430fbf3820dafd4eafd38ec8be161a6978ed2b, happening with
an array of lzma_filter structures whose old options are freed
but the replacement never arrives due to a memory allocation
failure in lzma_filters_copy()."
75f1a6c26df4ce329da0882786403e3ccf5cd898,Jia Tan,Lasse Collin,2022-05-05 12:53:42,2022-11-23 23:07:32,"liblzma: Add support for LZMA_SYNC_FLUSH in the Block encoder.

The documentation mentions that lzma_block_encoder() supports
LZMA_SYNC_FLUSH but it was never added to supported_actions[]
in the internal structure. Because of this, LZMA_SYNC_FLUSH could
not be used with the Block encoder unless it was the next coder
after something like stream_encoder() or stream_encoder_mt()."
d0901645170b638c517f5c50866b6ef48f491c65,Lasse Collin,Lasse Collin,2022-11-23 23:02:50,2022-11-23 23:02:50,"liblzma: Add new API function lzma_filters_free().

This is small but convenient and should have been added
a long time ago."
ae1f8a723dcde2f2c5cf444bcbb5fc5026b3c3c5,Lasse Collin,Lasse Collin,2022-11-23 22:02:31,2022-11-23 22:02:31,CMake: Don't use symbol versioning with static library.
48c1b99dc537a27e1ca929d8837e778e5ba32191,Lasse Collin,Lasse Collin,2022-11-23 19:55:22,2022-11-23 19:55:22,liblzma: Add lzma_attr_warn_unused_result to lzma_filters_copy().
10430fbf3820dafd4eafd38ec8be161a6978ed2b,Lasse Collin,Lasse Collin,2022-11-23 19:26:21,2022-11-23 19:26:21,"liblzma: Fix invalid free() after memory allocation failure.

The bug was in the single-threaded .xz Stream encoder
in the code that is used for both re-initialization and for
lzma_filters_update(). To trigger it, an application had
to either re-initialize an existing encoder instance with
lzma_stream_encoder() or use lzma_filters_update(), and
then one of the 1-4 tiny allocations in lzma_filters_copy()
(called from stream_encoder_update()) must fail. An error
was correctly reported but the encoder state was corrupted.

This is related to the recent fix in
f8ee61e74eb40600445fdb601c374d582e1e9c8a which is good but
it wasn't enough to fix the main problem in stream_encoder.c."
cafd6dc397ca8b5b5f7775e8d6876b8fe70f8e70,Lasse Collin,Lasse Collin,2022-11-22 14:37:15,2022-11-22 14:37:15,liblzma: Fix language in a comment.
c392bf8ccba857baaf50399c4b460119befacd54,Lasse Collin,Lasse Collin,2022-11-22 09:20:17,2022-11-22 09:23:23,"liblzma: Fix infinite loop in LZMA encoder init with dict_size >= 2 GiB.

The encoder doesn't support dictionary sizes larger than 1536 MiB.
This is validated, for example, when calculating the memory usage
via lzma_raw_encoder_memusage(). It is also enforced by the LZ
part of the encoder initialization. However, LZMA encoder with
LZMA_MODE_NORMAL did an unsafe calculation with dict_size before
such validation and that results in an infinite loop if dict_size
was 2 << 30 or greater."
f50534c973a591ccf65485adfc827a8a7126ca6c,Lasse Collin,Lasse Collin,2022-11-21 11:02:33,2022-11-21 11:02:33,"liblzma: Fix two Doxygen commands in the API headers.

These were caught by clang -Wdocumentation."
649d4872ed2f55196114a061d45b416fc4353569,Lasse Collin,Lasse Collin,2022-11-19 17:09:55,2022-11-19 17:09:55,xz: Refactor duplicate code from hardware_memlimit_mtenc_get().
d327743bb547a53364e5951a16e5f1663fe4b9ff,Lasse Collin,Lasse Collin,2022-11-19 17:06:13,2022-11-19 17:06:13,xz: Add support --threads=+N so that -T+1 gives threaded mode.
a11a2b8b5e830ba682c1d81aaa7078842b296995,Jia Tan,Lasse Collin,2022-11-19 15:18:04,2022-11-19 15:35:38,CMake: Adds test_memlimit to CMake tests
2af8d9e9b3f44f62d19e7c39297ec63af2e8c64f,Lasse Collin,Lasse Collin,2022-11-15 17:10:21,2022-11-15 17:10:21,Translations: Update the Korean translation.
16ac05677292f7e21a4feaddcfb2ab062ea5f385,Lasse Collin,Lasse Collin,2022-11-15 17:09:28,2022-11-15 17:09:28,Translations: Update the Turkish translation.
b9a67d9a5fa207062d4aa8a01639234609315d31,Lasse Collin,Lasse Collin,2022-11-15 08:58:39,2022-11-15 09:18:28,Bump version number for 5.3.4alpha.
5b999ba289b3280457b7386b9ac65dbbdf1575a5,Lasse Collin,Lasse Collin,2022-11-15 08:54:40,2022-11-15 08:58:19,Add NEWS for 5.3.4alpha.
ce8db9e37da4f6c87691c5066f51f91f2411c44a,Lasse Collin,Lasse Collin,2022-11-15 08:54:08,2022-11-15 08:54:08,Add NEWS for 5.2.8.
b56bc8251d2736224af6bdaaae734ceb8926a879,Lasse Collin,Lasse Collin,2022-11-14 21:19:57,2022-11-14 21:19:57,"Revert ""liblzma: Simple/BCJ filters: Allow disabling generic BCJ options.""

This reverts commit 177bdc922cb17bd0fd831ab8139dfae912a5c2b8
and also does equivalent change to arm64.c.

Now that ARM64 filter will use lzma_options_bcj, this change
is not needed anymore."
8370ec8edf9ddf8d1d9fef03d8d1027503ec4c35,Lasse Collin,Lasse Collin,2022-11-14 21:14:41,2022-11-14 21:16:38,"Replace the experimental ARM64 filter with a new experimental version.

This is incompatible with the previous version.

This has space/tab fixes in filter_*.c and bcj.h too."
f644473a211394447824ea00518d0a214ff3f7f2,Lasse Collin,Lasse Collin,2022-11-14 19:34:57,2022-11-14 21:05:46,"liblzma: Add fast CRC64 for 32/64-bit x86 using SSSE3 + SSE4.1 + CLMUL.

It also works on E2K as it supports these intrinsics.

On x86-64 runtime detection is used so the code keeps working on
older processors too. A CLMUL-only build can be done by using
-msse4.1 -mpclmul in CFLAGS and this will reduce the library
size since the generic implementation and its 8 KiB lookup table
will be omitted.

On 32-bit x86 this isn't used by default for now because by default
on 32-bit x86 the separate assembly file crc64_x86.S is used.
If --disable-assembler is used then this new CLMUL code is used
the same way as on 64-bit x86. However, a CLMUL-only build
(-msse4.1 -mpclmul) won't omit the 8 KiB lookup table on
32-bit x86 due to a currently-missing check for disabled
assembler usage.

The configure.ac check should be such that the code won't be
built if something in the toolchain doesn't support it but
--disable-clmul-crc option can be used to unconditionally
disable this feature.

CLMUL speeds up decompression of files that have compressed very
well (assuming CRC64 is used as a check type). It is know that
the CLMUL code is significantly slower than the generic code for
tiny inputs (especially 1-8 bytes but up to 16 bytes). If that
is a real-world problem then there is already a commented-out
variant that uses the generic version for small inputs.

Thanks to Ilya Kurdyukov for the original patch which was
derived from a white paper from Intel [1] (published in 2009)
and public domain code from [2] (released in 2016).

[1] https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/fast-crc-computation-generic-polynomials-pclmulqdq-paper.pdf
[2] https://github.com/rawrunprotected/crc"
3b466bc79672bb2b06d1245a500588e6026e0ba0,Lasse Collin,Lasse Collin,2022-11-14 18:14:34,2022-11-14 18:14:34,Translations: Update the Swedish translation one more time.
e963379a8622ebdff6ce78e76b803bcd1e1d16d6,Lasse Collin,Lasse Collin,2022-11-14 17:34:15,2022-11-14 17:34:15,Translations: Update the Swedish translation again.
a4bc689a823a2254f29ac9d233170add5121b307,Lasse Collin,Lasse Collin,2022-11-14 17:07:45,2022-11-14 17:07:45,Translations: Update the Swedish translation.
bbf2073d824ab4ba33bed4b77f467435abd333a5,Lasse Collin,Lasse Collin,2022-11-14 16:58:09,2022-11-14 16:58:09,Translations: Update the Ukrainian translation.
ac10b1b3622e70881595586edfb8a3ebdcd76bb6,Lasse Collin,Lasse Collin,2022-11-14 15:58:07,2022-11-14 15:58:07,"Build: Omit x86_64 from --enable-assembler.

It didn't do anything. There are only 32-bit x86 assembly files
and it feels likely that new files won't be added as intrinsics
in C are more portable across toolchains and OSes."
eb0f1450ad9f23dac03050d9c8375980240aee21,Lasse Collin,Lasse Collin,2022-11-14 14:00:52,2022-11-14 14:00:52,"liblzma: Use __attribute__((__constructor__)) if available.

This uses it for CRC table initializations when using --disable-small.
It avoids mythread_once() overhead. It also means that then
--disable-small --disable-threads is thread-safe if this attribute
is supported."
6553f49b11dafad35c73b05f12e14865ea1fd8a1,Lasse Collin,Lasse Collin,2022-11-12 19:19:52,2022-11-12 19:19:52,Translations: Update the Romanian translation.
db97e69e12393becc29f8febd53133d0d36989bd,Lasse Collin,Lasse Collin,2022-11-12 19:17:45,2022-11-12 19:17:45,Translations: Update the Hungarian translation.
2bbb9c0f3829a8b121b36998d273a6c6f92000f4,Lasse Collin,Lasse Collin,2022-11-11 15:58:57,2022-11-11 15:58:57,Translations: Update the Finnish translation.
3c8cbb8137b6f8ed9416c1209d73cdbcb015251f,Lasse Collin,Lasse Collin,2022-11-11 15:58:18,2022-11-11 15:58:18,Translations: Update the Croatian translation.
26c3359eac0988d6f3986735cd1363bec1678e8e,Lasse Collin,Lasse Collin,2022-11-11 15:57:18,2022-11-11 15:57:18,Translations: Update the Polish translation.
577e467b137c735afb8de6ae71ac7a73c2960cc4,Lasse Collin,Lasse Collin,2022-11-11 15:56:44,2022-11-11 15:56:44,Translations: Update the Spanish translation.
f9b4ff6e9a0f1678650775582d3e4fe782abce97,Lasse Collin,Lasse Collin,2022-11-11 15:16:03,2022-11-11 15:16:03,Update THANKS.
a39961ef211e1bf030b17edeea3cff29fe263b67,Lasse Collin,Lasse Collin,2022-11-11 15:15:25,2022-11-11 15:15:25,"liblzma: Fix building with Intel ICC (the classic compiler).

It claims __GNUC__ >= 10 but doesn't support __symver__ attribute.

Thanks to Stephen Sachs."
c715f683dcb1a817d565da292cddfbceda643e12,Lasse Collin,Lasse Collin,2022-11-11 12:35:58,2022-11-11 12:35:58,"liblzma: Fix incorrect #ifdef for x86 SSE2 support.

__SSE2__ is the correct macro for SSE2 support with GCC, Clang,
and ICC. __SSE2_MATH__ means doing floating point math with SSE2
instead of 387. Often the latter macro is defined if the first
one is but it was still a bug."
bd334ae56afe7f642ad4d0f1ac19e74e82daa1ce,Lasse Collin,Lasse Collin,2022-11-11 11:27:06,2022-11-11 11:27:06,Add NEWS for 5.2.7 (forgotten cherry-pick from v5.2).
3c7860cf49de6f81046b3a4034a89f3a4803a576,Lasse Collin,Lasse Collin,2022-11-11 11:16:21,2022-11-11 11:16:21,"xzdiff: Add support for .lz files.

The other scripts don't need changes for .lz support because
in those scripts it is enough that xz supports .lz."
d76c752a6d77052e5ad57ade555082585f7ac5d8,Lasse Collin,Lasse Collin,2022-11-11 10:23:58,2022-11-11 10:23:58,"Scripts: Ignore warnings from xz.

In practice this means making the scripts work when
the input files have an unsupported check type which
isn't a problem in practice unless support for
some check types has been disabled at build time."
6552535afd1fe29d726ab6e68cf14ce3624fd48c,Lasse Collin,Lasse Collin,2022-11-10 10:34:43,2022-11-10 10:39:08,"Translations: Rename poa4/fr_FR.po to po4a/fr.po.

That's how it is preferred at the Translation Project.
On my system /usr/share/man/fr_FR doesn't contain any
other man pages than XZ Utils while /usr/share/man/fr
has quite a few, so this will fix that too.

Thanks to Benno Schulenberg from the Translation Project."
0918159ce4c75bfb60aff0193b559f8a9f41d25a,Lasse Collin,Lasse Collin,2022-11-09 16:48:50,2022-11-09 17:09:26,"xz: Update the man page about BCJ filters, including upcoming --arm64.

The --arm64 isn't actually implemented yet in the form
described in this commit.

Thanks to Jia Tan."
ba2ae3596f6be1587495f33b367488f6e00e56f1,Lasse Collin,Lasse Collin,2022-11-09 16:14:14,2022-11-09 16:14:14,"xz: Add --arm64 to --long-help and omit endianness from ARM(-Thumb).

Modern 32-bit ARM in big endian mode use little endian for
instruction encoding still, so the filters work on such
executables too. It's likely less confusing for users this way.

The --arm64 option hasn't been implemented yet (there is
--experimental-arm64 but it's different). The --arm64 option
is added now anyway because this is the likely result and the
strings need to be ready for translators.

Thanks to Jia Tan."
802d57d9215d9c81dbee86edb43c9e93a7f7ec55,Lasse Collin,Lasse Collin,2022-11-09 13:12:13,2022-11-09 13:12:13,Windows: Update the VS project files for ARM64 and .lz support.
5846aeda05972bc803c6094821ae836229ebe691,Lasse Collin,Lasse Collin,2022-11-09 12:57:48,2022-11-09 12:57:48,DOS: Update Makefile and config.h to include ARM64 and .lz support.
781da8d6c44de6aa278c916375250668a0b107f2,Lasse Collin,Lasse Collin,2022-11-09 12:45:05,2022-11-09 12:45:05,CMake: Add lzip decoder files and #define to the build.
df8ad4af65a9c4846b108550d0083770a69dee64,Lasse Collin,Lasse Collin,2022-11-09 12:41:56,2022-11-09 12:41:56,Docs: Update INSTALL and also add new prohibited options to PACKAGERS.
c8ef089c149afaab413c3a51be827dd1d11afe0e,Lasse Collin,Lasse Collin,2022-10-20 14:39:06,2022-11-09 12:32:33,Tests: Test the .lz files in test_files.sh.
c8f70ebb4628ceb6cb29cc9195d9deadf69d2bd7,Lasse Collin,Lasse Collin,2022-10-20 12:35:59,2022-11-09 12:31:21,Tests: Add .lz (lzip) test files.
731db13e6fa3ad3e3fc786c0ccf6eac4cce6865f,Lasse Collin,Lasse Collin,2022-10-19 19:32:51,2022-11-09 12:31:10,"xz: Remove the commented-out FORMAT_GZIP, gzip, .gz, and .tgz."
3176f992c55b8d788c4633809aaf9447376a5a12,Lasse Collin,Lasse Collin,2022-10-08 18:28:15,2022-11-09 12:28:41,"xz: Add .lz (lzip) decompression support.

If configured with --disable-lzip-decoder then --long-help will
still list `lzip' in --format but I left it like that since
due to translations it would be messy to have two help strings.
Features are disabled only in special situations so wrong help
in such a situation shouldn't matter much.

Thanks to Michał Górny for the original patch."
034086e1ae1459210837a24e04878435c86dc41b,Lasse Collin,Lasse Collin,2022-10-07 21:29:20,2022-11-09 12:25:26,"liblzma: Add .lz support to lzma_auto_decoder().

Thanks to Michał Górny for the original patch."
0538db038f3cdc352007dacb42454aa1806b8e40,Lasse Collin,Lasse Collin,2022-10-06 12:50:20,2022-11-09 12:24:20,"liblzma: Add .lz (lzip) decompression support (format versions 0 and 1).

Support for format version 0 was removed from lzip 1.18 for some
reason. .lz format version 0 files are rare (and old) but some
source packages were released in this format, and some people might
have personal files in this format too. It's very little extra code
to support it along side format version 1 so this commits adds
support for both.

The Sync Flush marker extentension to the original .lz format
version 1 isn't supported. It would require changes to the
LZMA decoder itself. Such files are very rare anyway.

See the API doc for lzma_lzip_decoder() for more details about
the .lz format support.

Thanks to Michał Górny for the original patch."
633d48a075b9ce4b9c08a7a56a7eb4cabc18100c,Lasse Collin,Lasse Collin,2022-11-09 12:17:23,2022-11-09 12:17:23,"liblzma: Add the missing Makefile.inc change for --disable-microlzma.

This was forgotten from commit 59c4d6e1390f6f4176f43ac1dad1f7ac03c449b8."
724285dadbdc88765c8fb83eab9816575a260966,Lasse Collin,Lasse Collin,2022-11-09 12:10:52,2022-11-09 12:10:52,"xz: Add comments about stdin and src_st.st_size.

""xz -v < regular_file > out.xz"" doesn't display the percentage
and estimated remaining time because it doesn't even try to
check the input file size when input is read from stdin.
This could be improved but for now there's just a comment
to remind about it."
f723eec68b0e44234910f669a29119de33018967,Lasse Collin,Lasse Collin,2022-11-09 10:48:22,2022-11-09 10:48:22,"xz: Fix displaying of file sizes in progress indicator in passthru mode.

It worked for one input file since the counters are zero when
xz starts but they weren't reset when starting a new file in
passthru mode. For example, if files A, B, and C are one byte each,
then ""xz -dcvf A B C"" would show file sizes as 1, 2, and 3 bytes
instead of 1, 1, and 1 byte."
69265d0f223ddf1d66f799b8b047df22923e376f,Lasse Collin,Lasse Collin,2022-11-09 09:27:20,2022-11-09 09:27:20,"xz: Add a comment why --to-stdout is not in --help.

It is on the man page still."
fe6b8852a3c6a0eb5a3c33512e0a69af257d3bc7,Lasse Collin,Lasse Collin,2022-11-08 21:05:37,2022-11-08 21:05:37,xz: Make xz -lvv show that the upcoming --arm64 needs 5.4.0 to decompress.
fb3f05ac9f2b4b0e3643401960fbeab31997ac7a,Lasse Collin,Lasse Collin,2022-11-08 20:26:54,2022-11-08 20:26:54,Docs: Update faq.txt a little.
05331f091ec3b68eccbfb2a9a7a576072768fb4b,Lasse Collin,Lasse Collin,2022-11-08 14:57:17,2022-11-08 14:59:12,Translations: Update Turkish translation.
ed3a4822963b4940d84e6f44d47277c394fc046d,Lasse Collin,Lasse Collin,2022-11-08 12:55:32,2022-11-08 14:59:12,Translations: Update Croatian translation.
4746f5ec721316bc4c6fec9905b2902e0360e0af,Lasse Collin,Lasse Collin,2022-11-08 12:13:03,2022-11-08 12:13:03,liblzma: Update API docs about decoder flags.
8779a9db5d0cec00c9dc9e9965dd2dda04f9d80d,Lasse Collin,Lasse Collin,2022-11-08 12:01:50,2022-11-08 12:01:50,liblzma: Use the return_if_error() macro in alone_decoder.c.
3f4990b6822961e75cd9b4e2e82b1df63f6f8fcc,Lasse Collin,Lasse Collin,2022-11-08 12:00:58,2022-11-08 12:00:58,liblzma: Fix a comment in auto_decoder.c.
026a5897c72a2041ae08ceec54ce8b1cdeb51334,Lasse Collin,Lasse Collin,2022-11-08 11:43:19,2022-11-08 11:43:19,"xz: Initialize the pledge(2) sandbox at the very beginning of main().

It feels better that the initializations are sandboxed too.
They don't do anything that the pledge() call wouldn't allow."
49a59f6ca001c3ce9affa2c162b437aad021b4d5,Lasse Collin,Lasse Collin,2022-11-07 20:51:16,2022-11-07 20:51:16,"xz: Extend --robot --info-memory output.

Now it includes everything that the human-readable --info-memory shows."
5e2450c75cbac966c62cf2231c824f2cc91ddba8,Lasse Collin,Lasse Collin,2022-11-07 15:22:04,2022-11-07 15:22:04,"liblzma: Include cached memory in reported memusage in threaded decoder.

This affects lzma_memusage() and lzma_memlimit_set() when used
with the threaded decompressor. Now all allocations are reported
by lzma_memusage() (so it's not misleading) and lzma_memlimit_set()
cannot lower the limit below that value.

The alternative would have been to allow lowering the limit if
doing so is possible by freeing the cached memory but since
the primary use case of lzma_memlimit_set() is to increase
memlimit after LZMA_MEMLIMIT_ERROR this simple approach
was selected.

The cached memory was always included when enforcing
the memory usage limit while decoding.

Thanks to Jia Tan."
1fc6e7dd1fabdb60124d449b99273330ccab3ff1,Jia Tan,Lasse Collin,2022-11-07 14:24:14,2022-11-07 14:24:56,"xz: Avoid a compiler warning in progress_speed() in message.c.

This should be smaller too since it avoids the string constants."
cf118c014683069b5dbe91898acdc40f2f0a1f5d,Lasse Collin,Lasse Collin,2022-10-31 14:26:05,2022-10-31 14:26:05,Build: Clarify comment in configure.ac about SSE2.
aad3c609ffb72f581a7a2b67be3ad70b2b327840,Lasse Collin,Lasse Collin,2022-10-31 14:16:37,2022-10-31 14:16:37,Build: Remove obsolete commented-out lines from configure.ac.
e53e0e2186c6b8ce866bd19aec52f1c318ed31ba,Lasse Collin,Lasse Collin,2022-10-31 11:31:58,2022-10-31 11:31:58,"Windows: Fix mythread_once() macro with Vista threads.

Don't call InitOnceComplete() if initialization was already done.

So far mythread_once() has been needed only when building
with --enable-small. windows/build.bash does this together
with --disable-threads so the Vista-specific mythread_once()
is never needed by those builds. VS project files or
CMake-builds don't support HAVE_SMALL builds at all."
48dde3bab9dc04081acb5aa7cf7c5044b8a49f58,Lasse Collin,Lasse Collin,2022-10-31 09:54:44,2022-10-31 09:54:44,liblzma: Silence -Wconversion warning from crc64_fast.c.
a243c617ff249d915ac123de4f536b80322c1fdb,Lasse Collin,Lasse Collin,2022-10-31 09:49:47,2022-10-31 09:49:47,"CMake: Sync tuklib_cpucores.cmake with tuklib_cpucores.m4.

This was forgotten from commit 2611c4d90535652d3eb7ef4a026a6691276fab43."
05c72de06fcaaedc78f8abba7d5ec568ddcf1e75,Lasse Collin,Lasse Collin,2022-10-27 12:49:18,2022-10-27 12:49:18,"Tests: test_files.sh: Make it not fail if features were disabled at build.

It now tries to test as many files as easily possible.
The exit status indicates skipping if any of the files were
skipped. This way it is easy to notice if something is being
skipped when it isn't expected."
b3459327a51f4b8239d19e6c34b4e0c6bc2d81de,Lasse Collin,Lasse Collin,2022-10-27 12:30:13,2022-10-27 12:30:13,"Tests: test_files.sh: Suppress an expected warning from the log.

xz (but not xzdec) will normally warn about unsupported check
but since we are testing specifically such a file, it's better
to silence that warning so that it doesn't look suspicious in
test_files.sh.log.

The use of -q and -Q in xzdec is just for consistency and
doesn't affect the result at least for now."
798c86e4231e0835ab76ccd0810c8ea30833b2ce,Lasse Collin,Lasse Collin,2022-10-27 12:27:50,2022-10-27 12:27:50,Tests: test_files.sh: Print the reason for skipping if xz & xzdec missing.
c1dd8524e1af07f16b790463899de06a6a5fcc08,Lasse Collin,Lasse Collin,2022-10-26 22:12:40,2022-10-26 22:12:40,Tests: Keep test_compress_* working when some filters are unavailable.
ce30ada91951d0746879ae438da11f1ee8a90aa0,Jia Tan,Lasse Collin,2022-10-23 13:01:08,2022-10-26 17:12:01,Tests: test_bcj_exact_size skips properly now if PowerPC filter disabled.
89c5cfcacaca7130509fac836e2f30c46b824502,Lasse Collin,Lasse Collin,2022-10-25 21:05:57,2022-10-25 21:05:57,Tests: Test also unsupported-*.xz.
a4b214b93ac741edef9c41e55865b0b867ca2587,Lasse Collin,Lasse Collin,2022-10-25 20:45:03,2022-10-25 20:45:03,"Build: Use AC_CONFIG_HEADERS instead of the ancient AC_CONFIG_HEADER.

We require Autoconf >= 2.69 and that has AC_CONFIG_HEADERS.

There is a warning about AC_PROG_CC_C99 being obsolete but
it cannot be removed because it is needed with Autoconf 2.69."
04f299b64e73f50afc188c2590ebebc6b73ed744,Lasse Collin,Lasse Collin,2022-10-25 20:31:44,2022-10-25 20:31:44,Build: Update m4/ax_pthread.m4 from Autoconf Archive.
59c4d6e1390f6f4176f43ac1dad1f7ac03c449b8,Lasse Collin,Lasse Collin,2022-10-25 20:28:34,2022-10-25 20:28:34,"Build: Add configure option --disable-microlzma.

MicroLZMA was made for EROFS and used by erofs-utils.
It might be used by something else in the future but
those wanting a smaller build for specific situations
can now disable this rarely-needed feature."
054ccd6d14b2cc6eddc56897af280d3221414150,Lasse Collin,Lasse Collin,2022-10-25 20:09:11,2022-10-25 20:09:11,"xz: Fix --single-stream with an empty .xz Stream.

Example:

    $ xz -dc --single-stream good-0-empty.xz
    xz: good-0-empty.xz: Internal error (bug)

The code, that is tries to catch some input file issues early,
didn't anticipate LZMA_STREAM_END which is possible in that
code only when --single-stream is used."
563288ea705e83ff5cb292adf794650c263bca1d,Lasse Collin,Lasse Collin,2022-10-25 18:11:58,2022-10-25 18:30:48,xz: Add support for OpenBSD's pledge() sandbox.
f9913e8ee2ba0b1e4ff4d0aa4c001aae305ed944,Lasse Collin,Lasse Collin,2022-10-25 16:07:17,2022-10-25 16:07:17,"xz: Fix decompressor behavior if input uses an unsupported check type.

Now files with unsupported check will make xz display
a warning, set the exit status to 2 (unless --no-warn is used),
and then decompress the file normally. This is how it was
supposed to work since the beginning but this was broken by
the commit 231c3c7098f1099a56abb8afece76fc9b8699f05, that is,
a little before 5.0.0 was released. The buggy behavior displayed
a message, set exit status 1 (error), and xz didn't attempt to
to decompress the file.

This doesn't matter today except for special builds that disable
CRC64 or SHA-256 at build time (but such builds should be used
in special situations only). The bug matters if new check type
is added in the future and an old xz version is used to decompress
such a file; however, it's likely that such files would use a new
filter too and an old xz wouldn't be able to decompress the file
anyway.

The first hunk in the commit is the actual fix. The second hunk
is a cleanup since LZMA_TELL_ANY_CHECK isn't used in xz.

There is a test file for unsupported check type but it wasn't
used by test_files.sh, perhaps due to different behavior between
xz and the simpler xzdec."
aa4fe145b9486adc454f44fd3e09be9add808a0f,Lasse Collin,Lasse Collin,2022-10-25 15:36:19,2022-10-25 15:36:19,xz: Clarify the man page: input file isn't removed if an error occurs.
8b46ae8cdeddfd7dc01fec92971b8696e9a96c5d,Lasse Collin,Lasse Collin,2022-10-25 15:30:55,2022-10-25 15:30:55,"xz: Refactor to remove is_empty_filename().

Long ago it was used in list.c too but nowadays it's needed
only in io_open_src() so it's nicer to avoid a separate function."
85624015978b0de294cff3df79006df987c552b1,Lasse Collin,Lasse Collin,2022-10-25 15:23:54,2022-10-25 15:23:54,"xz: If input file cannot be removed, treat it as a warning, not error.

Treating it as a warning (message + exit status 2) matches gzip
and it seems more logical as at that point the output file has
already been successfully closed. When it's a warning it is
possible to suppress it with --no-warn."
fda9f85f52c546f7ca0313cf89481da4707fecb3,Lasse Collin,Lasse Collin,2022-10-24 13:25:09,2022-10-24 13:25:09,"liblzma: Threaded decoder: Stop the worker threads on errors.

It's waste of CPU time and electricity to leave the unfinished
worker threads running when it is known that their output will
get ignored."
2611c4d90535652d3eb7ef4a026a6691276fab43,Lasse Collin,Lasse Collin,2022-10-20 17:22:50,2022-10-20 17:22:50,"tuklib_cpucores: Use HW_NCPUONLINE on OpenBSD.

On OpenBSD the number of cores online is often less
than what HW_NCPU would return because OpenBSD disables
simultaneous multi-threading (SMT) by default.

Thanks to Christian Weisgerber."
424ac91c7e0419393ff2bde4f62e21fa611c776d,Lasse Collin,Lasse Collin,2022-10-19 16:39:35,2022-10-19 16:39:35,"Tests: Skip tests in test_*.sh if encoders and/or decoders are disabled.

This isn't perfect as the scripts can still fail if only
certain filters are disabled. This is still an improvement
as now ""make check"" has better behavior when all encoders
or decoders are disabled.

Grepping ../config.h is simple and fairly clean but it only
works if config.h was created. CMake builds don't create
config.h but they don't use these test scripts either.

Thanks to Sebastian Andrzej Siewior for reporting the problem.
Thanks to Jia Tan for the original patch which grepped xz
error messages instead of config.h."
ca8bf9d7c5a30be8ba1eeb106fd892f19e83ed09,Lasse Collin,Lasse Collin,2022-10-19 15:54:34,2022-10-19 16:03:50,"Test: Remove the (exit 1) lines.

I suspect that I used these in the original version because
Autoconf's manual describes that such a trick is needed in
some specific situations for portability reasons. None of those
situations listed on Autoconf 2.71 manual apply to these test
scripts though so this cleans them up."
82fcb7cfc17ce62f79ebc7ca2374e1daca5e4d5e,Lasse Collin,Lasse Collin,2022-10-19 14:14:57,2022-10-19 14:14:57,Tests: Fix a warning in test_memlimit.c when decoders are disabled.
b5f8271b45b9b0e59485ffba3640ca3418835ec4,Lasse Collin,Lasse Collin,2022-10-19 14:11:46,2022-10-19 14:11:46,"Tests: Add test_memlimit to .gitignore.

Thanks to Jia Tan."
6a86e81cab202d0a812a7b2e9efacaf70c58ba38,Jia Tan,Lasse Collin,2022-10-06 18:53:09,2022-10-06 19:06:17,"Tests: Refactor test_stream_flags.c.

Converts test_stream_flags to tuktest. Also the test will now
compile and skip properly if encoders or decoders are disabled.

Thanks to Sebastian Andrzej Siewior."
827ac5b4821491fd3afe0d0e1ddac326253aeb66,Jia Tan,Lasse Collin,2022-10-06 09:00:38,2022-10-06 18:51:48,"Tests: Refactor test_block_header.c.

test_block_header now achieves higher test coverage. Also the
test will now compile and skip properly if encoders or decoders
are disabled.

Thanks to Sebastian Andrzej Siewior."
84963318952064a93bfc52edd6b0ef70593384ee,Jia Tan,Lasse Collin,2022-10-05 15:54:12,2022-10-06 14:34:27,"Tests: Fix compilation issues.

test_bcj_exact_size, test_check, test_hardware, and test_index will
all now compile and skip properly if encoders or decoders are disabled.

Also fixed a small typo (disabed -> disabled).

Thanks to Sebastian Andrzej Siewior."
7dcabeec63d46b436fa5f043c3d1f09d0e15be16,Lasse Collin,Lasse Collin,2022-10-05 13:20:47,2022-10-05 13:20:47,Tests: Include mythread.h in the tests that use MYTHREAD_ENABLED.
14af758a770c7781af18fb66d6d21ee5b1c27f04,Jia Tan,Lasse Collin,2022-10-05 12:57:16,2022-10-05 13:11:33,"liblzma: Fix a compilation issue when encoders are disabled.

When encoders were disabled and threading enabled, outqueue.c and
outqueue.h were not compiled. The multi threaded decoder required
these files, so compilation failed."
6ca5c354bd4620aa7f81da68870eef1b1f26288f,Jia Tan,Lasse Collin,2022-10-05 08:41:38,2022-10-05 13:10:21,"Tests: Fix compilation error when threading support has been disabled.

Now tests that require threading are skipped when threading
support has been disabled.

Thanks to Sebastian Andrzej Siewior."
fae37ad2affd8fe8871f4ff93d5cab5ec14d5e58,Lasse Collin,Lasse Collin,2022-10-05 11:26:00,2022-10-05 11:26:00,"tuklib_integer: Add 64-bit endianness-converting reads and writes.

Also update the comment in liblzma's memcmplen.h.

Thanks to Michał Górny for the original patch for the reads."
508a44372c5b0dede8863fd0d358d4a9d8645c95,Lasse Collin,Lasse Collin,2022-09-30 09:06:13,2022-09-30 09:06:13,"liblzma: Add API doc note about the .xz decoder LZMA_MEMLIMIT_ERROR bug.

The bug was fixed in 660739f99ab211edec4071de98889fb32ed04e98."
8cc9874a7974cd575aee44f218836f7acdbeb0ed,Jia Tan,Lasse Collin,2022-09-21 08:15:50,2022-09-28 12:48:03,"liblzma: Add dest and src NULL checks to lzma_index_cat.

The documentation states LZMA_PROG_ERROR can be returned from
lzma_index_cat. Previously, lzma_index_cat could not return
LZMA_PROG_ERROR. Now, the validation is similar to
lzma_index_append, which does a NULL check on the index
parameter."
afd5a8bf5374eba82804a999e1ea7af680784086,Jia Tan,Lasse Collin,2022-09-21 12:29:28,2022-09-28 12:34:23,Tests: Create a test for the lzma_index_cat bug.
3d5a99ca373a4e86faf671226ca6487febb9eeac,Jia Tan,Lasse Collin,2022-09-21 11:28:53,2022-09-28 12:29:49,"liblzma: Fix copying of check type statistics in lzma_index_cat().

The check type of the last Stream in dest was never copied to
dest->checks (the code tried to copy it but it was done too late).
This meant that the value returned by lzma_index_checks() would
only include the check type of the last Stream when multiple
lzma_indexes had been concatenated.

In xz --list this meant that the summary would only list the
check type of the last Stream, so in this sense this was only
a visual bug. However, it's possible that some applications
use this information for purposes other than merely showing
it to the users in an informational message. I'm not aware of
such applications though and it's quite possible that such
applications don't exist.

Regular streamed decompression in xz or any other application
doesn't use lzma_index_cat() and so this bug cannot affect them."
a61d32172789735350a941e23baf6b587c49e5d9,Lasse Collin,Lasse Collin,2022-09-28 09:20:41,2022-09-28 09:20:41,"tuklib_physmem: Fix Unicode builds on Windows.

Thanks to ArSaCiA Game."
5a4d3548ab214fdca364d5c734baf1d1fab47308,Lasse Collin,Lasse Collin,2022-09-28 08:12:07,2022-09-28 08:12:07,Tests: Add test_memlimit.c to test restarting after LZMA_MEMLIMIT_ERROR.
660739f99ab211edec4071de98889fb32ed04e98,Lasse Collin,Lasse Collin,2022-09-28 08:05:15,2022-09-28 08:05:15,"liblzma: Stream decoder: Fix restarting after LZMA_MEMLIMIT_ERROR.

If lzma_code() returns LZMA_MEMLIMIT_ERROR it is now possible
to use lzma_memlimit_set() to increase the limit and continue
decoding. This was supposed to work from the beginning but
there was a bug. With other decoders (.lzma or threaded .xz)
this already worked correctly."
7e68fda58c74ad9e5b876cc22fcbe80fc0e4747b,Lasse Collin,Lasse Collin,2022-09-28 08:00:23,2022-09-28 08:00:23,liblzma: Stream decoder: Fix comments.
f664cb25841fc1c478b819034a224a558e2ac6e7,Lasse Collin,Lasse Collin,2022-09-20 13:58:22,2022-09-20 13:58:22,liblzma: ARM64: Add comments.
b557b4a0eea05470fae8ba5ef4ad5a6dfb36ac41,Lasse Collin,Lasse Collin,2022-09-20 13:27:50,2022-09-20 13:27:50,"liblzma: ARM64: Fix wrong comment in API doc.

Thanks to Jia Tan."
d5b0906fa55157f48c200188a3951d80df9cb308,Lasse Collin,Lasse Collin,2022-09-19 17:24:26,2022-09-19 17:24:26,"xz: Add --experimental-arm64[=width=WIDTH].

It will be renamed to --arm64 once it is stable.

Man page or --long-help weren't updated yet."
ecb966de308c255bb4735a7307ef9901c643a9de,Lasse Collin,Lasse Collin,2022-09-19 16:34:56,2022-09-19 17:23:46,"liblzma: Add experimental ARM64 BCJ filter with a temporary Filter ID.

That is, the Filter ID will be changed once the design is final.
The current version will be removed. So files created with the
tempoary Filter ID won't be supported in the future."
177bdc922cb17bd0fd831ab8139dfae912a5c2b8,Lasse Collin,Lasse Collin,2022-09-17 19:42:18,2022-09-17 19:42:18,"liblzma: Simple/BCJ filters: Allow disabling generic BCJ options.

This will be needed for the ARM64 BCJ filter as it will use
its own options struct."
c3592d0a55114144686ecf960cb516d6b31c98e9,Lasse Collin,Lasse Collin,2022-09-16 14:08:53,2022-09-16 14:08:53,"Tests: Add a test file for lzma_index_append() integer overflow bug.

This test fails before commit 18d7facd3802b55c287581405c4d49c98708c136.

test_files.sh now runs xz -l for bad-3-index-uncomp-overflow.xz
because only then the previously-buggy code path gets tested.
Normal decompression doesn't use lzma_index_append() at all.
Instead, lzma_index_hash functions are used and those already
did the overflow check."
982b29f828079a2a26253a40e975127a40a7d2bd,Lasse Collin,Lasse Collin,2022-09-16 12:10:07,2022-09-16 12:15:05,Translations: Add Turkish translation.
1fc088d9f6d1697924aaeac8cd1fb9918d1532e2,Lasse Collin,Lasse Collin,2022-09-16 11:09:07,2022-09-16 11:09:07,Update THANKS.
097c7b67ce86ff16a7cef7631b39e5ca4ee3d420,Lasse Collin,Lasse Collin,2022-09-16 11:07:03,2022-09-16 11:07:03,"xzgrep: Fix compatibility with old shells.

Running the current xzgrep on Slackware 10.1 with GNU bash 3.00.15:

    xzgrep: line 231: syntax error near unexpected token `;;'

On SCO OpenServer 5.0.7 with Korn Shell 93r:

    syntax error at line 231 : `;;' unexpected

Turns out that some old shells don't like apostrophes (') inside
command substitutions. For example, the following fails:

    x=$(echo foo
    # asdf'zxcv
    echo bar)
    printf '%s\n' ""$x""

The problem was introduced by commits
69d1b3fc29677af8ade8dc15dba83f0589cb63d6 (2022-03-29),
bd7b290f3fe4faeceb7d3497ed9bf2e6ed5e7dc5 (2022-07-18), and
a648978b20495b7aa4a8b029c5a810b5ad9d08ff (2022-07-19).
5.2.6 is the only stable release that included
this problem.

Thanks to Kevin R. Bulgrien for reporting the problem
on SCO OpenServer 5.0.7 and for providing the fix."
f2d084fe3f0d6d71488bfc6987f26542f67bfd99,Lasse Collin,Lasse Collin,2022-09-09 11:12:30,2022-09-09 11:12:30,"Tests: Silence warnings about unused functions from tuktest.h.

Warnings about unused tuktest_run_test conveniently tell which
test programs haven't been converted to tuktest.h yet but I
silenced that warning too for now anyway.

It is fine to use __attribute__((__unused__)) even when the
function is actually used because the attribute only means
that the function might be unused."
f8ee61e74eb40600445fdb601c374d582e1e9c8a,Lasse Collin,Lasse Collin,2022-09-09 10:51:57,2022-09-09 10:51:57,"liblzma: lzma_filters_copy: Keep dest[] unmodified if an error occurs.

lzma_stream_encoder() and lzma_stream_encoder_mt() always assumed
this. Before this patch, failing lzma_filters_copy() could result
in free(invalid_pointer) or invalid memory reads in stream_encoder.c
or stream_encoder_mt.c.

To trigger this, allocating memory for a filter options structure
has to fail. These are tiny allocations so in practice they very
rarely fail.

Certain badness in the filter chain array could also make
lzma_filters_copy() fail but both stream_encoder.c and
stream_encoder_mt.c validate the filter chain before
trying to copy it, so the crash cannot occur this way."
18d7facd3802b55c287581405c4d49c98708c136,Jia Tan,Lasse Collin,2022-09-02 12:18:55,2022-09-08 12:19:19,"liblzma: lzma_index_append: Add missing integer overflow check.

The documentation in src/liblzma/api/lzma/index.h suggests that
both the unpadded (compressed) size and the uncompressed size
are checked for overflow, but only the unpadded size was checked.
The uncompressed check is done first since that is more likely to
occur than the unpadded or index field size overflows."
9ac06cb5b85274d18f9f70d82cf2d8c9c1151bd4,Lasse Collin,Lasse Collin,2022-09-08 12:11:08,2022-09-08 12:11:08,Update THANKS.
ba3e4ba2de034ae93a513f9c3a0823b80cdb66dc,Jia Tan,Lasse Collin,2022-09-08 12:07:00,2022-09-08 12:07:00,CMake: Clarify a comment about Windows symlinks without file extension.
17485e884ce5c74315f29a8a1507bc706cd5cd1d,Lasse Collin,Lasse Collin,2022-09-08 12:02:41,2022-09-08 12:02:41,"CMake: Update for liblzma_*.map files and fix wrong common_w32res.rc dep.

The previous commit split liblzma.map into liblzma_linux.map and
liblzma_generic.map. This commit updates the CMake build for those.

common_w32res.rc dependency was listed under Linux/FreeBSD while
obviously it belongs to Windows when building a DLL."
913ddc5572b9455fa0cf299be2e35c708840e922,Lasse Collin,Lasse Collin,2022-09-04 20:23:00,2022-09-08 12:01:29,"liblzma: Vaccinate against an ill patch from RHEL/CentOS 7.

RHEL/CentOS 7 shipped with 5.1.2alpha, including the threaded
encoder that is behind #ifdef LZMA_UNSTABLE in the API headers.
In 5.1.2alpha these symbols are under XZ_5.1.2alpha in liblzma.map.
API/ABI compatibility tracking isn't done between development
releases so newer releases didn't have XZ_5.1.2alpha anymore.

Later RHEL/CentOS 7 updated xz to 5.2.2 but they wanted to keep
the exported symbols compatible with 5.1.2alpha. After checking
the ABI changes it turned out that >= 5.2.0 ABI is backward
compatible with the threaded encoder functions from 5.1.2alpha
(but not vice versa as fixes and extensions to these functions
were made between 5.1.2alpha and 5.2.0).

In RHEL/CentOS 7, XZ Utils 5.2.2 was patched with
xz-5.2.2-compat-libs.patch to modify liblzma.map:

  - XZ_5.1.2alpha was added with lzma_stream_encoder_mt and
    lzma_stream_encoder_mt_memusage. This matched XZ Utils 5.1.2alpha.

  - XZ_5.2 was replaced with XZ_5.2.2. It is clear that this was
    an error; the intention was to keep using XZ_5.2 (XZ_5.2.2
    has never been used in XZ Utils). So XZ_5.2.2 lists all
    symbols that were listed under XZ_5.2 before the patch.
    lzma_stream_encoder_mt and _mt_memusage are included too so
    they are listed both here and under XZ_5.1.2alpha.

The patch didn't add any __asm__("".symver ..."") lines to the .c
files. Thus the resulting liblzma.so exports the threaded encoder
functions under XZ_5.1.2alpha only. Listing the two functions
also under XZ_5.2.2 in liblzma.map has no effect without
matching .symver lines.

The lack of XZ_5.2 in RHEL/CentOS 7 means that binaries linked
against unpatched XZ Utils 5.2.x won't run on RHEL/CentOS 7.
This is unfortunate but this alone isn't too bad as the problem
is contained within RHEL/CentOS 7 and doesn't affect users
of other distributions. It could also be fixed internally in
RHEL/CentOS 7.

The second problem is more serious: In XZ Utils 5.2.2 the API
headers don't have #ifdef LZMA_UNSTABLE for obvious reasons.
This is true in RHEL/CentOS 7 version too. Thus now programs
using new APIs can be compiled without an extra #define. However,
the programs end up depending on symbol version XZ_5.1.2alpha
(and possibly also XZ_5.2.2) instead of XZ_5.2 as they would
with an unpatched XZ Utils 5.2.2. This means that such binaries
won't run on other distributions shipping XZ Utils >= 5.2.0 as
they don't provide XZ_5.1.2alpha or XZ_5.2.2; they only provide
XZ_5.2 (and XZ_5.0). (This includes RHEL/CentOS 8 as the patch
luckily isn't included there anymore with XZ Utils 5.2.4.)

Binaries built by RHEL/CentOS 7 users get distributed and then
people wonder why they don't run on some other distribution.
Seems that people have found out about the patch and been copying
it to some build scripts, seemingly curing the symptoms but
actually spreading the illness further and outside RHEL/CentOS 7.

The ill patch seems to be from late 2016 (RHEL 7.3) and in 2017 it
had spread at least to EasyBuild. I heard about the events only
recently. :-(

This commit splits liblzma.map into two versions: one for
GNU/Linux and another for other OSes that can use symbol versioning
(FreeBSD, Solaris, maybe others). The Linux-specific file and the
matching additions to .c files add full compatibility with binaries
that have been built against a RHEL/CentOS-patched liblzma. Builds
for OSes other than GNU/Linux won't get the vaccine as they should
be immune to the problem (I really hope that no build script uses
the RHEL/CentOS 7 patch outside GNU/Linux).

The RHEL/CentOS compatibility symbols XZ_5.1.2alpha and XZ_5.2.2
are intentionally put *after* XZ_5.2 in liblzma_linux.map. This way
if one forgets to #define HAVE_SYMBOL_VERSIONS_LINUX when building,
the resulting liblzma.so.5 will have lzma_stream_encoder_mt@@XZ_5.2
since XZ_5.2 {...} is the first one that lists that function.
Without HAVE_SYMBOL_VERSIONS_LINUX @XZ_5.1.2alpha and @XZ_5.2.2
will be missing but that's still a minor problem compared to
only having lzma_stream_encoder_mt@@XZ_5.1.2alpha!

The ""local: *;"" line was moved to XZ_5.0 so that it doesn't need
to be moved around. It doesn't matter where it is put.

Having two similar liblzma_*.map files is a bit silly as it is,
at least for now, easily possible to generate the generic one
from the Linux-specific file. But that adds extra steps and
increases the risk of mistakes when supporting more than one
build system. So I rather maintain two files in parallel and let
validate_map.sh check that they are in sync when ""make mydist""
is run.

This adds .symver lines for lzma_stream_encoder_mt@XZ_5.2.2 and
lzma_stream_encoder_mt_memusage@XZ_5.2.2 even though these
weren't exported by RHEL/CentOS 7 (only @@XZ_5.1.2alpha was
for these two). I added these anyway because someone might
misunderstand the RHEL/CentOS 7 patch and think that @XZ_5.2.2
(@@XZ_5.2.2) versions were exported too.

At glance one could suggest using __typeof__ to copy the function
prototypes when making aliases. However, this doesn't work trivially
because __typeof__ won't copy attributes (lzma_nothrow, lzma_pure)
and it won't change symbol visibility from hidden to default (done
by LZMA_API()). Attributes could be copied with __copy__ attribute
but that needs GCC 9 and a fallback method would be needed anyway.

This uses __symver__ attribute with GCC >= 10 and
__asm__("".symver ..."") with everything else. The attribute method
is required for LTO (-flto) support with GCC. Using -flto with
GCC older than 10 is now broken on GNU/Linux and will not be fixed
(can silently result in a broken liblzma build that has dangerously
incorrect symbol versions). LTO builds with Clang seem to work
with the traditional __asm__("".symver ..."") method.

Thanks to Boud Roukema for reporting the problem and discussing
the details and testing the fix."
80a1a8bb838842a2be343bd88ad1462c21c5e2c9,Lasse Collin,Lasse Collin,2022-08-31 13:42:04,2022-08-31 13:42:04,"CMake: Add xz symlinks.

These are a minor thing especially since the xz build has
some real problems still like lack of large file support
on 32-bit systems but I'll commit this since the code exists.

Thanks to Jia Tan."
a4193bb6d85d7765b1b87faeab3e50106d3ab2e9,Lasse Collin,Lasse Collin,2022-08-31 13:29:38,2022-08-31 13:29:38,"CMake: Put xz man page install under if(UNIX) like is for xzdec.

Thanks to Jia Tan."
c1555b1a221a1427d4d650647531016d754bc4da,Lasse Collin,Lasse Collin,2022-08-22 15:16:40,2022-08-22 15:16:40,Bump version number for 5.3.3alpha.
44fedddc11c3f6ec2f7fe35a3e38f15ca93f90eb,Lasse Collin,Lasse Collin,2022-08-22 15:13:56,2022-08-22 15:13:56,Add NEWS for 5.3.3alpha.
a93e235d7ca764cc19f8f9f9063b40ff361c3cfa,Lasse Collin,Lasse Collin,2022-07-12 14:59:41,2022-08-22 15:06:38,"Translations: Add Portuguese translation.

Jia Tan made white-space changes and also changed ""Language: pt_BR\n""
to pt. The translator wasn't reached so I'm hoping these changes
are OK and will commit it without translator's approval.

Thanks to Pedro Albuquerque and Jia Tan."
e7cf5a946f25e40d77f45e41f0dee7d42a04e9ae,Lasse Collin,Lasse Collin,2022-07-10 18:16:40,2022-08-22 15:06:37,"Translations: Add Serbian translation.

Quite a few white-space changes were made by Jia Tan to make
this look good. Contacting the translator didn't succeed so
I'm committing this without getting translator's approval.

Thanks to Мирослав Николић (Miroslav Nikolic) and Jia Tan."
cc8617ab53b1f2a4da212fa76c92fe538269c5de,Lasse Collin,Lasse Collin,2022-07-04 20:51:36,2022-08-22 15:06:37,"Translations: Add Swedish translation.

Thanks to Sebastian Rasmussen and Jia Tan."
c613598c358b640682d0ca2aed38fa7df763e8c7,Lasse Collin,Lasse Collin,2022-07-04 20:40:27,2022-08-22 15:06:37,"Translations: Add Esperanto translation.

Thanks to Keith Bowes and Jia Tan."
659a587d678f21e98e91d2751c31d4ce050c081a,Lasse Collin,Lasse Collin,2022-06-30 21:22:33,2022-08-22 15:06:37,"Translations: Add Catalan translation.

Thanks to Jordi Mas and Jia Tan."
739fd8c9bdf1d85f57d56642aad87148d4779530,Lasse Collin,Lasse Collin,2022-06-30 14:47:08,2022-08-22 15:06:37,"Translations: Add Ukrainian translation.

Thanks to Yuri Chornoivan and Jia Tan."
73280550b111930c62a667e56add8fd574f80bc8,Lasse Collin,Lasse Collin,2022-06-30 14:45:26,2022-08-22 15:06:37,"Translators: Add Romanian translation.

Thanks to Remus-Gabriel Chelu and Jia Tan."
2465f5b825152714b2c357d96c2422c31109d320,Lasse Collin,Lasse Collin,2022-06-29 15:33:32,2022-08-22 15:06:37,"Translations: Update Brazilian Portuguese translation.

One msgstr was changed. The diff is long due to changes
in the source code line numbers in the comments.

Thanks to Rafael Fontenelle."
434e1ffd3e62719d509da10b646216f5ef53fe4d,Lasse Collin,Lasse Collin,2022-06-29 15:04:44,2022-08-22 15:06:37,"Translations: Add Croatian translation.

Thanks to Božidar Putanec and Jia Tan."
0732d0f7065c9bd48bfe4f5983144ae970c4a499,Lasse Collin,Lasse Collin,2022-06-29 14:58:48,2022-08-22 15:06:37,"Translations: Add Spanish translation.

Thanks to Cristian Othón Martínez Vera and Jia Tan."
9899b0f82bc130998d1f1f618a6ab805b73f2696,Lasse Collin,Lasse Collin,2022-06-29 14:49:43,2022-08-22 15:06:37,"Translations: Add Korean translation.

Thanks to Seong-ho Cho and Jia Tan."
65217eaf6bd195f3ef027d4ac55d57b7d133d69f,Lasse Collin,Lasse Collin,2020-03-16 19:57:21,2022-08-22 15:06:37,"Translations: Rebuild cs.po to avoid incorrect fuzzy strings.

""make dist"" updates the .po files and the fuzzy strings would
result in multiple very wrong translations."
e56ff423ee7af9e648e16b132f0d835d2cb4db26,Lasse Collin,Lasse Collin,2020-03-16 15:30:39,2022-08-22 15:06:37,"Translations: Add partial Danish translation.

I made a few minor white space changes without getting them
approved by the Danish translation team."
43e09c62e77cb8807d932c81de4decbdb956e184,Lasse Collin,Lasse Collin,2020-03-11 20:37:54,2022-08-22 15:06:37,"Translations: Add hu, zh_CN, and zh_TW.

I made a few white space changes to these without getting them
approved by the translation teams. (I tried to contact the hu and
zh_TW teams but didn't succeed. I didn't contact the zh_CN team.)"
982b6b198ae1ffe6093236dd8a3d03d1415b912b,Lasse Collin,Lasse Collin,2020-03-11 12:33:30,2022-08-22 15:06:37,"Translations: Update vi.po to match the file from the TP.

The translated strings haven't been updated but word wrapping
is different."
801f39691fc4abc6dd33d7653d498781b593f3eb,Lasse Collin,Lasse Collin,2020-03-11 12:18:03,2022-08-22 15:06:37,"Translations: Add fi and pt_BR, and update de, fr, it, and pl.

The German translation isn't identical to the file in
the Translation Project but the changes (white space changes
only) were approved by the translator Mario Blättermann."
311e4f85ede5d2f0bb71f3ad70b5b7db1b5adf33,Lasse Collin,Lasse Collin,2022-08-22 14:27:19,2022-08-22 15:01:21,xz: Try to clarify --memlimit-mt-decompress vs. --memlimit-compress.
df23c31000283c00e5ef1ca32a0bc3bb757bd707,Lasse Collin,Lasse Collin,2022-08-22 13:46:18,2022-08-22 13:46:18,"CMake: Add liblzma tests.

Thanks to Jia Tan for the patch."
02a777f9c422d3b5ec895078530bb1a2b6f7bdf5,Lasse Collin,Lasse Collin,2022-08-19 20:32:22,2022-08-19 20:40:00,"xz: Revise --info-memory output.

The strings could be more descriptive but it's good
to have some version of this committed now.

--robot mode wasn't changed yet."
f864f6d42eab57ea8ed82cc2dd19a03b51377442,Lasse Collin,Lasse Collin,2022-08-19 20:12:02,2022-08-19 20:15:56,"xz: Update the man page for threaded decompression and memlimits.

This documents the changes made in commits
6c6da57ae2aa962aabde6892442227063d87e88c,
cad299008cf73ec566f0662a9cf2b94f86a99659, and
898faa97287a756231c663a3ed5165672b417207.

The --info-memory bit hasn't been finished yet
even though it's already mentioned in this commit
under --memlimit-mt-decompress and --threads."
d13bfcc0056617dd648f655a01653932fad7067f,Lasse Collin,Lasse Collin,2022-08-18 14:49:16,2022-08-18 14:49:16,"Build: Include the CMake files in the distribution.

This was supposed to be done in 2020 with 5.2.5 release
already but it was noticed only today. 5.2.5 and 5.2.6
even mention experiemental CMake support in the NEWS entries.

Thanks to Olivier B. for reporting the problem."
e66787bcfefdb93f19c974f895f65969a77937b0,Lasse Collin,Lasse Collin,2022-08-18 14:38:05,2022-08-18 14:38:05,"Windows: Fix broken liblzma.dll build with Visual Studio project files.

The bug was introduced in 352ba2d69af2136bc814aa1df1a132559d445616
""Windows: Fix building of resource files when config.h isn't used.""

That commit fixed liblzma.dll build with CMake while keeping it
working with Autotools on Windows but the VS project files were
forgotten.

I haven't tested these changes.

Thanks to Olivier B. for reporting the bug and for the initial patch."
c4e8e5fb311225b8b48d34157891a640b2535e0c,Lasse Collin,Lasse Collin,2022-08-18 14:16:49,2022-08-18 14:16:49,"liblzma: Threaded decoder: Improve LZMA_FAIL_FAST when LZMA_FINISH is used.

It will now return LZMA_DATA_ERROR (not LZMA_OK or LZMA_BUF_ERROR)
if LZMA_FINISH is used and there isn't enough input to finish
decoding the Block Header or the Block. The use of LZMA_DATA_ERROR
is simpler and the less risky than LZMA_BUF_ERROR but this might
be changed before 5.4.0."
6dcf606e7efa2b259f0262f9e2f61e00116842d3,Lasse Collin,Lasse Collin,2022-08-12 15:31:47,2022-08-12 15:31:47,Add NEWS for 5.2.6.
413b86fcf8934fae5a004f378a9483d37d8fcaab,Lasse Collin,Lasse Collin,2022-08-12 11:28:41,2022-08-12 11:28:41,Add Jia Tan to AUTHORS.
352672732c346c546ff3c26d0605bc0ed1c8b7c7,Lasse Collin,Lasse Collin,2022-07-25 16:28:26,2022-07-25 16:28:26,"Build: Start the generated ChangeLog from around 5.2.0 instead of 5.0.0.

This makes ChangeLog smaller."
6f6d11225d6016be2bbb55d845b66f6b04d048df,Lasse Collin,Lasse Collin,2022-07-25 16:11:05,2022-07-25 16:11:05,"Translations: Change the copyright comment string to use with po4a.

This affects the second line in po4a/xz-man.pot. The man pages of
xzdiff, xzgrep, and xzmore are from GNU gzip and under GNU GPLv2+
while the rest of the man pages are in the public domain."
61f8ec804abdb4c5dac01e8ae9b90c7be58a5c24,Jia Tan,Lasse Collin,2022-07-25 15:30:05,2022-07-25 15:30:10,liblzma: Refactor lzma_mf_is_supported() to use a switch-statement.
4d80b463a1251aa22eabc87d2732fec13b1adda6,Jia Tan,Lasse Collin,2022-07-25 15:20:01,2022-07-25 15:20:01,"Build: Don't allow empty LIST in --enable-match-finders=LIST.

It's enforced only when a match finder is needed, that is,
when LZMA1 or LZMA2 encoder is enabled."
9cc721af5436908f2d5a828aebbc4050a32a3487,Lasse Collin,Lasse Collin,2022-07-24 10:27:48,2022-07-24 10:27:48,xz: Update the man page that change to --keep will be in 5.2.6.
b81bf0c7d1873e52a4086a9abb494471d652cb55,Lasse Collin,Lasse Collin,2022-07-19 20:23:54,2022-07-19 20:23:54,Update THANKS.
340cf1ec3927767046b8293a49da3db4e393f426,Nicholas Jackson,Lasse Collin,2022-07-18 00:39:23,2022-07-19 20:21:44,CMake: Add missing source file to liblzma build
d796b6d7fdb8b7238b277056cf9146cce25db604,Lasse Collin,Lasse Collin,2022-07-19 20:19:49,2022-07-19 20:19:49,xzgrep man page: Document exit statuses.
923bf96b55e5216a6c8df9d8331934f54784390e,Lasse Collin,Lasse Collin,2022-07-19 20:13:24,2022-07-19 20:13:24,"xzgrep: Improve error handling, especially signals.

xzgrep wouldn't exit on SIGPIPE or SIGQUIT when it clearly
should have. It's quite possible that it's not perfect still
but at least it's much better.

If multiple exit statuses compete, now it tries to pick
the largest of value.

Some comments were added.

The exit status handling of signals is still broken if the shell
uses values larger than 255 in $? to indicate that a process
died due to a signal ***and*** their ""exit"" command doesn't take
this into account. This seems to work well with the ksh and yash
versions I tried. However, there is a report in gzip/zgrep that
OpenSolaris 5.11 (not 5.10) has a problem with ""exit"" truncating
the argument to 8 bits:

    https://debbugs.gnu.org/cgi/bugreport.cgi?bug=22900#25

Such a bug would break xzgrep but I didn't add a workaround
at least for now. 5.11 is old and I don't know if the problem
exists in modern descendants, or if the problem exists in other
ksh implementations in use."
a648978b20495b7aa4a8b029c5a810b5ad9d08ff,Lasse Collin,Lasse Collin,2022-07-18 21:10:55,2022-07-18 21:10:55,"xzgrep: Make the fix for ZDI-CAN-16587 more robust.

I don't know if this can make a difference in the real world
but it looked kind of suspicious (what happens with sed
implementations that cannot process very long lines?).
At least this commit shouldn't make it worse."
bd7b290f3fe4faeceb7d3497ed9bf2e6ed5e7dc5,Lasse Collin,Lasse Collin,2022-07-18 18:52:31,2022-07-18 19:06:10,"xzgrep: Use grep -H --label when available (GNU, *BSDs).

It avoids the use of sed for prefixing filenames to output lines.
Using sed for that is slower and prone to security bugs so now
the sed method is only used as a fallback.

This also fixes an actual bug: When grepping a binary file,
GNU grep nowadays prints its diagnostics to stderr instead of
stdout and thus the sed-method for prefixing the filename doesn't
work. So with this commit grepping binary files gives reasonable
output with GNU grep now.

This was inspired by zgrep but the implementation is different."
b56729af9f1a596e57aeefd7570d8d7dce5c9f52,Lasse Collin,Lasse Collin,2022-07-18 18:10:25,2022-07-18 18:10:25,"xzgrep: Use -e to specify the pattern to grep.

Now we don't need the separate test for adding the -q option
as it can be added directly in the two places where it's needed."
bad61b5997e6647911974022bfb72f3d4818a594,Lasse Collin,Lasse Collin,2022-07-18 16:18:48,2022-07-18 16:18:48,"Scripts: Use printf instead of echo in a few places.

It's a good habbit as echo has some portability corner cases
when the string contents can be anything."
6a4a4a7d2667837dc824c26fcb19ed6ca5aff645,Lasse Collin,Lasse Collin,2022-07-17 18:36:25,2022-07-17 18:36:25,"xzgrep: Add more LC_ALL=C to avoid bugs with multibyte characters.

Also replace one use of expr with printf.

The rationale for LC_ALL=C was already mentioned in
69d1b3fc29677af8ade8dc15dba83f0589cb63d6 that fixed a security
issue. However, unrelated uses weren't changed in that commit yet.

POSIX says that with sed and such tools one should use LC_ALL=C
to ensure predictable behavior when strings contain byte sequences
that aren't valid multibyte characters in the current locale. See
under ""Application usage"" in here:

https://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html

With GNU sed invalid multibyte strings would work without this;
it's documented in its Texinfo manual. Some other implementations
aren't so forgiving."
b48f9d615f2c2e8d2f6e253d0e48ee66d0652b68,Lasse Collin,Lasse Collin,2022-07-17 17:55:16,2022-07-17 17:57:06,"xzgrep: Fix parsing of certain options.

Fix handling of ""xzgrep -25 foo"" (in GNU grep ""grep -25 foo"" is
an alias for ""grep -C25 foo""). xzgrep would treat ""foo"" as filename
instead of as a pattern. This bug was fixed in zgrep in gzip in 2012.

Add -E, -F, -G, and -P to the ""no argument required"" list.

Add -X to ""argument required"" list. It is an
intentionally-undocumented GNU grep option so this isn't
an important option for xzgrep but it seems that other grep
implementations (well, those that I checked) don't support -X
so I hope this change is an improvement still.

grep -d (grep --directories=ACTION) requires an argument. In
contrast to zgrep, I kept -d in the ""no argument required"" list
because it's not supported in xzgrep (or zgrep). This way
""xzgrep -d"" gives an error about option being unsupported instead
of telling that it requires an argument. Both zgrep and xzgrep
tell that it's unsupported if an argument is specified.

Add comments."
2d2201bc6315deda4d43625aa510972467bd51d4,Lasse Collin,Lasse Collin,2022-07-14 17:33:05,2022-07-14 17:33:05,Tests: Add the .lzma files to test_files.sh.
ce5549a591bf126300618879f5b24023351baff6,Lasse Collin,Lasse Collin,2022-07-14 16:37:42,2022-07-14 16:37:42,Tests: Add .lzma test files.
107c93ee5cad51a6ea0cee471209bfe8d76deaa3,Lasse Collin,Lasse Collin,2022-07-14 15:12:38,2022-07-14 15:12:38,liblzma: Rename a variable and improve a comment.
511feb5eadb988d641b025d597f4fac7502003b8,Lasse Collin,Lasse Collin,2022-07-13 19:24:41,2022-07-13 19:24:41,Update THANKS.
9595a3119b9faf0ce01375329cad8bbf85c35ea2,Lasse Collin,Lasse Collin,2022-07-13 19:24:07,2022-07-13 19:24:07,"liblzma: Add optional autodetection of LZMA end marker.

Turns out that this is needed for .lzma files as the spec in
LZMA SDK says that end marker may be present even if the size
is stored in the header. Such files are rare but exist in the
real world. The code in liblzma is so old that the spec didn't
exist in LZMA SDK back then and I had understood that such
files weren't possible (the lzma tool in LZMA SDK didn't
create such files).

This modifies the internal API so that LZMA decoder can be told
if EOPM is allowed even when the uncompressed size is known.
It's allowed with .lzma and not with other uses.

Thanks to Karl Beldan for reporting the problem."
0c0f8e9761eb6eaf199082cf144db7ac5f9d8cb2,Lasse Collin,Lasse Collin,2022-07-12 15:53:04,2022-07-12 15:53:04,"xz: Document the special memlimit case of 2000 MiB on MIPS32.

See commit fc3d3a7296ef58bb799a73943636b8bfd95339f7."
d1bfa3dc703325ecd974167e864a8712fdfe936e,Jia Tan,Lasse Collin,2022-07-01 13:19:26,2022-07-10 19:42:22,"Created script to generate code coverage reports.

The script uses lcov and genhtml after running the tests
to show the code coverage statistics. The script will create
a coverage directory where it is run. It can be run both in
and out of the source directory."
86a30b0255d8064169fabfd213d907016d2f9f2a,Jia Tan,Lasse Collin,2022-06-16 14:32:19,2022-06-16 14:39:59,Tests: Add more tests into test_check.
82e30fed66a89706388a8c15dc954d84e63f38fa,Lasse Collin,Lasse Collin,2022-06-16 12:02:57,2022-06-16 12:02:57,"Tests: Use char[][24] array for enum_strings_lzma_ret.

Array of pointers to short strings is a bit pointless here
and now it's fully const."
5ba9459e6c4a29f6870ca78ce8ac6e519d59c41e,Lasse Collin,Lasse Collin,2022-06-16 11:12:14,2022-06-16 11:12:14,Tests: tuktest.h: Add tuktest_error_impl to help with error conditions.
b339892668da20aea22a93668c82b87a38e4a97f,Lasse Collin,Lasse Collin,2022-06-16 10:29:59,2022-06-16 10:29:59,Tests: tuktest.h: Rename file_from_* and use tuktest_malloc there.
d8b63a0ad68d1c461eb373466679ebc41fbc207d,Lasse Collin,Lasse Collin,2022-06-16 10:08:19,2022-06-16 10:08:19,Tests: tuktest.h: Add malloc wrapper with automatic freeing.
1d51536a4b19a8fae768f8eb462fc2238cb36d53,Lasse Collin,Lasse Collin,2022-06-16 08:47:37,2022-06-16 08:47:37,Tests: tuktest.h: Move a function.
70c7555f6403553ee35539e869de0025592d8564,Lasse Collin,Lasse Collin,2022-06-14 19:21:15,2022-06-14 19:21:15,"Tests: test_vli: Remove an invalid test-assertion.

lzma_vli is unsigned so trying a signed value results in
a compiler warning from -Wsign-conversion. (lzma_vli)-1
equals to LZMA_VLI_UNKNOWN anyway which is the next assertion."
154b73c5a1092c3f785e01666b564ad7ff1be555,Lasse Collin,Lasse Collin,2022-06-14 19:10:10,2022-06-14 19:17:01,Tests: test_vli: Add const where appropriate.
0354d6cce3ff98ea6f927107baf216253f6ce2bb,Jia Tan,Lasse Collin,2022-06-13 12:27:03,2022-06-14 19:03:55,Added vli tests to .gitignore
a08f5ccf6bdc20ef70e41f6f3321618ef146f96e,Jia Tan,Lasse Collin,2022-06-12 03:31:40,2022-06-14 19:00:34,"Created tests for all functions exported in vli.h

Achieved 100% code coverage vli_encoder.c, vli_decoder.c, and vli_size.c"
1e3eb61815a91c0a1bfbb802e2d95593f523491f,jiat75,Lasse Collin,2022-06-03 13:24:54,2022-06-14 18:47:09,Added parallel test artifacts to .gitignore
00e3613f1212eaa84e721585fdb4de6967cf2476,Lasse Collin,Lasse Collin,2022-06-14 18:29:21,2022-06-14 18:29:21,"Tests: Use good-1-empty-bcj-lzma2.xz in test_bcj_exact_size.

It's much nicer this way so that the test data isn't a hardcoded
table inside the C file."
86bab755be252bfd3e0a9aee8e7b83a9bbb23ed0,Lasse Collin,Lasse Collin,2022-06-14 18:26:13,2022-06-14 18:26:13,Tests: Add file reading helpers to tuktest.h.
83d2337b72dbf391c6f3b41889eea99e51679105,Lasse Collin,Lasse Collin,2022-06-14 15:21:57,2022-06-14 15:21:57,Tests: tuktest.h: Move a printf from a macro to a helper function.
f9e8176ea7d520797a2db2d49a5a632c285674a8,Lasse Collin,Lasse Collin,2022-06-14 14:20:49,2022-06-14 14:20:49,"Tests: Add test file good-1-empty-bcj-lzma2.xz.

This is from test_bcj_exact_size.c.
It's good to have it as a standalone file."
aa75c5563a760aea3aa23d997d519e702e82726b,Jia Tan,Lasse Collin,2022-06-10 13:35:18,2022-06-10 13:58:47,"Tests: Created tests for hardware functions.

Created tests for all API functions exported in
src/liblzma/api/lzma/hardware.h. The tests are fairly trivial
but are helpful because they will inform users if their machines
cannot support these functions. They also improve the code
coverage metrics."
5c8ffdca20813939818843476fb212dfae8838a3,Lasse Collin,Lasse Collin,2022-06-02 18:01:45,2022-06-02 18:06:58,"Tests: Convert test_check to tuktest.

Thanks to Jia Tan for help with all the tests."
faf5ff8899d539b4dcd2a7e5280cb820a4746c86,Lasse Collin,Lasse Collin,2022-06-02 17:31:03,2022-06-02 17:45:05,Tests: Convert test_block_header to tuktest.
754d39fbebee3782258d42f154a223d3c5770ec7,Lasse Collin,Lasse Collin,2022-06-02 17:28:23,2022-06-02 17:28:23,"Tests: Convert test_bcj_exact_size to tuktest.

The compress() and decompress() functions were merged because
the later depends on the former so they need to be a single
test case."
96da21470f9570cd08286906a050a7c22631775b,Lasse Collin,Lasse Collin,2022-06-02 17:27:00,2022-06-02 17:27:00,"Tests: Include tuktest.h in tests.h.

This breaks -Werror because none of the tests so far use
tuktest.h and thus there are warnings about unused variables
and functions."
df71ba1c991f60c3269aaadd398247e632714626,Lasse Collin,Lasse Collin,2022-06-02 17:25:21,2022-06-02 17:25:21,Tests: Add tuktest.h mini-test-framework.
4773608554d1b684a05ff9c1d879cf5c42266d33,Lasse Collin,Lasse Collin,2022-05-23 18:31:36,2022-05-23 18:31:36,"Build: Enable Automake's parallel test harness.

It has been the default for quite some time already and
the old serial harness isn't discouraged. The downside is
that with parallel tests one cannot print progress info or
other diagnostics to the terminal; all output from the tests
will be in the log files only. But now that the compression
tests are separated the parallel tests will speed things up."
9a6dd6d46f7f256a5573e5d874c1052033ed7b05,Lasse Collin,Lasse Collin,2022-05-23 18:17:47,2022-05-23 18:31:20,"Tests: Split test_compress.sh into separate test unit for each file.

test_compress.sh now takes one command line argument:
a filename to be tested. If it begins with ""compress_generated_""
the file will be created with create_compress_files.

This will allow parallel execution of the slow tests."
c7758ac9c734707514dd34f254173ebac5eea7f8,Lasse Collin,Lasse Collin,2022-05-23 17:32:49,2022-05-23 17:59:47,"Test: Make create_compress_files.c a little more flexible.

If a command line argument is given, then only the test file
of that type is created. It's quite dumb in sense that unknown
names don't give an error but it's good enough here.

Also use EXIT_FAILURE instead of 1 as exit status for errors."
4a8e4a7b0ad4b03c0ac6862716c3457452cdaf8c,Lasse Collin,Lasse Collin,2022-05-23 17:17:42,2022-05-23 17:17:42,Tests: Remove unneeded commented lines from test_compress.sh.
2ee50d150ee009f36135540b459e6ff328549725,Lasse Collin,Lasse Collin,2022-05-23 17:16:00,2022-05-23 17:16:00,"Tests: Remove progress indicator from test_compress.sh.

It will be useless with Automake's parallel tests."
2ce4f36f179a81d0c6e182a409f363df759d1ad0,Lasse Collin,Lasse Collin,2022-05-23 16:37:18,2022-05-23 16:37:18,"liblzma: Silence a warning.

The actual initialization is done via mythread_sync and seems
that GCC doesn't necessarily see that it gets initialized there."
5d8f3764ef43c35910e6d7003c0900a961ef6544,Lasse Collin,Lasse Collin,2022-04-14 17:53:16,2022-04-14 17:53:16,xz: Fix build with --disable-threads.
1d592897278b172d8549aa29c3a1f3a4f432a9b9,Lasse Collin,Lasse Collin,2022-04-14 11:50:17,2022-04-14 11:50:17,"xz: Change the cap of the default -T0 memlimit for 32-bit xz.

The SIZE_MAX / 3 was 1365 MiB. 1400 MiB gives little more room
and it looks like a round (artificial) number in --info-memory
once --info-memory is made to display it.

Also, using #if avoids useless code on 64-bit builds."
c77fe55ddb7752ed0fec46967c5ec9a72632ea0c,Lasse Collin,Lasse Collin,2022-04-14 11:20:46,2022-04-14 11:20:46,"xz: Add a default soft memory usage limit for --threads=0.

This is a soft limit in sense that it only affects the number of
threads. It never makes xz fail and it never makes xz change
settings that would affect the compressed output.

The idea is to make -T0 have more reasonable behavior when
the system has very many cores or when a memory-hungry
compression options are used. This also helps with 32-bit xz,
preventing it from running out of address space.

The downside of this commit is that now the number of threads
might become too low compared to what the user expected. I
hope this to be an acceptable compromise as the old behavior
has been a source of well-argued complaints for a long time."
0adc13bfe32c14f3e4c6ce9f2d4fdf4112ab53f4,Lasse Collin,Lasse Collin,2022-04-14 09:59:09,2022-04-14 10:00:40,"xz: Make -T0 use multithreaded mode on single-core systems.

The main problem withi the old behavior is that the compressed
output is different on single-core systems vs. multicore systems.
This commit fixes it by making -T0 one thread in multithreaded mode
on single-core systems.

The downside of this is that it uses more memory. However, if
--memlimit-compress is used, xz can (thanks to the previous commit)
drop to the single-threaded mode still."
898faa97287a756231c663a3ed5165672b417207,Lasse Collin,Lasse Collin,2022-04-14 09:38:00,2022-04-14 09:38:00,"xz: Changes to --memlimit-compress and --no-adjust.

In single-threaded mode, --memlimit-compress can make xz scale down
the LZMA2 dictionary size to meet the memory usage limit. This
obviously affects the compressed output. However, if xz was in
threaded mode, --memlimit-compress could make xz reduce the number
of threads but it wouldn't make xz switch from multithreaded mode
to single-threaded mode or scale down the LZMA2 dictionary size.
This seemed illogical and there was even a ""FIXME?"" about it.

Now --memlimit-compress can make xz switch to single-threaded
mode if one thread in multithreaded mode uses too much memory.
If memory usage is still too high, then the LZMA2 dictionary
size can be scaled down too.

The option --no-adjust was also changed so that it no longer
prevents xz from scaling down the number of threads as that
doesn't affect compressed output (only performance). After
this commit --no-adjust only prevents adjustments that affect
compressed output, that is, with --no-adjust xz won't switch
from multithreaded mode to single-threaded mode and won't
scale down the LZMA2 dictionary size.

The man page wasn't updated yet."
cad299008cf73ec566f0662a9cf2b94f86a99659,Lasse Collin,Lasse Collin,2022-04-11 19:20:49,2022-04-11 21:04:30,"xz: Add --memlimit-mt-decompress along with a default limit value.

--memlimit-mt-decompress allows specifying the limit for
multithreaded decompression. This matches memlimit_threading in
liblzma. This limit can only affect the number of threads being
used; it will never prevent xz from decompressing a file. The
old --memlimit-decompress option is still used at the same time.

If the value of --memlimit-decompress (the default value or
one specified by the user) is less than the value of
--memlimit-mt-decompress , then --memlimit-mt-decompress is
reduced to match --memlimit-decompress.

Man page wasn't updated yet."
fe87b4cd5364f5bbb6a75a0299f1500c852d7c9a,Lasse Collin,Lasse Collin,2022-04-06 20:11:59,2022-04-06 20:11:59,"liblzma: Threaded decoder: Improve setting of pending_error.

It doesn't need to be done conditionally. The comments try
to explain it."
90621da7f6e1bfd6d91d60415eae04b2bca274c2,Lasse Collin,Lasse Collin,2022-04-06 09:39:49,2022-04-06 10:16:00,"liblzma: Add a new flag LZMA_FAIL_FAST for threaded decoder.

In most cases if the input file is corrupt the application won't
care about the uncompressed content at all. With this new flag
the threaded decoder will return an error as soon as any thread
has detected an error; it won't wait to copy out the data before
the location of the error.

I don't plan to use this in xz to keep the behavior consistent
between single-threaded and multi-threaded modes."
64b6d496dc815a176d8307f418f6834a26783484,Lasse Collin,Lasse Collin,2022-04-05 09:24:57,2022-04-05 09:24:57,"liblzma: Threaded decoder: Always wait for output if LZMA_FINISH is used.

This makes the behavior consistent with the single-threaded
decoder when handling truncated .xz files.

Thanks to Jia Tan for finding this issue."
e671bc8828b9c0c5406c3a22c541301d0eb54518,Lasse Collin,Lasse Collin,2022-04-02 18:49:59,2022-04-02 18:49:59,"liblzma: Threaded decoder: Support zpipe.c-style decoding loop.

This makes it possible to call lzma_code() in a loop that only
reads new input when lzma_code() didn't fill the output buffer
completely. That isn't the calling style suggested by the
liblzma example program 02_decompress.c so perhaps the usefulness
of this feature is limited.

Also, it is possible to write such a loop so that it works
with the single-threaded decoder but not with the threaded
decoder even after this commit, or so that it works only if
lzma_mt.timeout = 0.

The zlib tutorial <https://zlib.net/zlib_how.html> is a well-known
example of a loop where more input is read only when output isn't
full. Porting this as is to liblzma would work with the
single-threaded decoder (if LZMA_CONCATENATED isn't used) but it
wouldn't work with threaded decoder even after this commit because
the loop assumes that no more output is possible when it cannot
read more input (""if (strm.avail_in == 0) break;""). This cannot
be fixed at liblzma side; the loop has to be modified at least
a little.

I'm adding this in any case because the actual code is simple
and short and should have no harmful side-effects in other
situations."
2ba8173e27be4793edb46497e499ac2ae753a316,Lasse Collin,Lasse Collin,2022-03-30 21:05:07,2022-03-30 21:05:07,Update THANKS.
69d1b3fc29677af8ade8dc15dba83f0589cb63d6,Lasse Collin,Lasse Collin,2022-03-29 16:19:12,2022-03-29 17:10:50,"xzgrep: Fix escaping of malicious filenames (ZDI-CAN-16587).

Malicious filenames can make xzgrep to write to arbitrary files
or (with a GNU sed extension) lead to arbitrary code execution.

xzgrep from XZ Utils versions up to and including 5.2.5 are
affected. 5.3.1alpha and 5.3.2alpha are affected as well.
This patch works for all of them.

This bug was inherited from gzip's zgrep. gzip 1.12 includes
a fix for zgrep.

The issue with the old sed script is that with multiple newlines,
the N-command will read the second line of input, then the
s-commands will be skipped because it's not the end of the
file yet, then a new sed cycle starts and the pattern space
is printed and emptied. So only the last line or two get escaped.

One way to fix this would be to read all lines into the pattern
space first. However, the included fix is even simpler: All lines
except the last line get a backslash appended at the end. To ensure
that shell command substitution doesn't eat a possible trailing
newline, a colon is appended to the filename before escaping.
The colon is later used to separate the filename from the grep
output so it is fine to add it here instead of a few lines later.

The old code also wasn't POSIX compliant as it used \n in the
replacement section of the s-command. Using \<newline> is the
POSIX compatible method.

LC_ALL=C was added to the two critical sed commands. POSIX sed
manual recommends it when using sed to manipulate pathnames
because in other locales invalid multibyte sequences might
cause issues with some sed implementations. In case of GNU sed,
these particular sed scripts wouldn't have such problems but some
other scripts could have, see:

    info '(sed)Locale Considerations'

This vulnerability was discovered by:
cleemy desu wayo working with Trend Micro Zero Day Initiative

Thanks to Jim Meyering and Paul Eggert discussing the different
ways to fix this and for coordinating the patch release schedule
with gzip."
bd93b776c1bd15e90661033c918cdeb354dbcc38,Lasse Collin,Lasse Collin,2022-03-25 23:02:44,2022-03-25 23:15:32,"liblzma: Fix a deadlock in threaded decoder.

If a worker thread has consumed all input so far and it's
waiting on thr->cond and then the main thread enables
partial update for that thread, the code used to deadlock.
This commit allows one dummy decoding pass to occur in this
situation which then also does the partial update.

As part of the fix, this moves thr->progress_* updates to
avoid the second thr->mutex locking.

Thanks to Jia Tan for finding, debugging, and reporting the bug."
e0394e94230f208682ac1e1f4c41f22f9ad79916,Lasse Collin,Lasse Collin,2022-03-23 14:34:00,2022-03-23 14:34:00,Update THANKS.
487c77d48760564b1949c5067630b675b87be4de,Lasse Collin,Lasse Collin,2022-03-23 14:28:55,2022-03-23 14:28:55,"liblzma: Threaded decoder: Don't stop threads on LZMA_TIMED_OUT.

LZMA_TIMED_OUT is not an error and thus stopping threads on
LZMA_TIMED_OUT breaks the decoder badly.

Thanks to Jia Tan for finding the bug and for the patch."
6c6da57ae2aa962aabde6892442227063d87e88c,Lasse Collin,Lasse Collin,2022-03-06 22:36:16,2022-03-06 22:36:16,"xz: Add initial support for threaded decompression.

If threading support is enabled at build time, this will
use lzma_stream_decoder_mt() even for single-threaded mode.
With memlimit_threading=0 the behavior should be identical.

This needs some work like adding --memlimit-threading=LIMIT.

The original patch from Sebastian Andrzej Siewior included
a method to get currently available RAM on Linux. It might
be one way to go but as it is Linux-only, the available-RAM
approach needs work for portability or using a fallback method
on other OSes.

The man page wasn't updated yet."
4cce3e27f529af33e0e7749a8cbcec59954946b5,Lasse Collin,Lasse Collin,2022-03-06 21:36:20,2022-03-06 22:35:53,"liblzma: Add threaded .xz decompressor.

I realize that this is about a decade late.

Big thanks to Sebastian Andrzej Siewior for the original patch.
I made a bunch of smaller changes but after a while quite a few
things got rewritten. So any bugs in the commit were created by me."
717631b9788dc9c100ee0c87d3c14a2782638ff4,Lasse Collin,Lasse Collin,2022-03-06 14:54:23,2022-03-06 14:54:23,"liblzma: Fix docs: lzma_block_decoder() cannot return LZMA_UNSUPPORTED_CHECK.

If Check is unsupported, it will be silently ignored.
It's the caller's job to handle it."
1a4bb97a00936535e30ac61945aeee38882b5d1a,Lasse Collin,Lasse Collin,2022-03-06 14:41:19,2022-03-06 14:41:19,"liblzma: Add new output queue (lzma_outq) features.

Add lzma_outq_clear_cache2() which may leave one buffer allocated
in the cache.

Add lzma_outq_outbuf_memusage() to get the memory needed for
a single lzma_outbuf. This is now used internally in outqueue.c too.

Track both the total amount of memory allocated and the amount of
memory that is in active use (not in cache).

In lzma_outbuf, allow storing the current input position that
matches the current output position. This way the main thread
can notice when no more output is possible without first providing
more input.

Allow specifying return code for lzma_outq_read() in a finished
lzma_outbuf."
ddbc6f58c2de388eed24cd7ea91b523d397da5f4,Lasse Collin,Lasse Collin,2022-03-06 13:18:58,2022-03-06 13:18:58,liblzma: Index hash: Change return value type of hash_append() to void.
20e7a33e2d59c6a814447d3991f21e2702174b20,Lasse Collin,Lasse Collin,2022-02-22 01:42:57,2022-02-22 01:42:57,"liblzma: Minor addition to lzma_vli_size() API doc.

Thanks to Jia Tan."
4f78f5fcf63592f2d77e921cfe0d5de300867374,Lasse Collin,Lasse Collin,2022-02-22 00:04:18,2022-02-22 00:04:18,"liblzma: Check the return value of lzma_index_append() in threaded encoder.

If lzma_index_append() failed (most likely memory allocation failure)
it could have gone unnoticed and the resulting .xz file would have
an incorrect Index. Decompressing such a file would produce the
correct uncompressed data but then an error would occur when
verifying the Index field."
5313ad66b40aab822ddca3e9905254cb99a4080d,Lasse Collin,Lasse Collin,2022-02-21 23:37:39,2022-02-21 23:37:39,Update THANKS.
865e0a3689a25a7ee8eecae1a34c1775e3aa676e,Ed Maste,Lasse Collin,2022-02-11 15:25:46,2022-02-21 23:23:34,liblzma: Use non-executable stack on FreeBSD as on Linux
1c9a5786d206b4abc8e427326651c8174baea753,Lasse Collin,Lasse Collin,2022-02-20 18:36:27,2022-02-20 18:36:27,"liblzma: Make Block decoder catch certain types of errors better.

Now it limits the input and output buffer sizes that are
passed to a raw decoder. This way there's no need to check
if the sizes can grow too big or overflow when updating
Compressed Size and Uncompressed Size counts. This also means
that a corrupt file cannot cause the raw decoder to process
useless extra input or output that would exceed the size info
in Block Header (and thus cause LZMA_DATA_ERROR anyway).

More importantly, now the size information is verified more
carefully in case raw decoder returns LZMA_OK. This doesn't
really matter with the current single-threaded .xz decoder
as the errors would be detected slightly later anyway. But
this helps avoiding corner cases in the upcoming threaded
decompressor, and it might help other Block decoder uses
outside liblzma too.

The test files bad-1-lzma2-{9,10,11}.xz test these conditions.
With the single-threaded .xz decoder the only difference is
that LZMA_DATA_ERROR is detected in a difference place now."
555de11873eb00c9b94a8be70645db502e5a9dbd,Lasse Collin,Lasse Collin,2022-02-20 17:38:55,2022-02-20 17:38:55,Tests: Add bad-1-lzma2-11.xz.
f0da507f22e7f4e3edb75b45b74d344244ca03fb,Lasse Collin,Lasse Collin,2022-02-18 16:51:10,2022-02-18 16:51:10,"Translations: Fix po4a failure with the French man page translations.

Thanks to Mario Blättermann for the patch."
f7711d228c3c32395460c82498c60a9f730d0239,Lasse Collin,Lasse Collin,2022-02-06 23:14:37,2022-02-06 23:30:06,"Translations: Add French translation of man pages.

This matches xz-utils 5.2.5-2 in Debian.

The translation was done by ""bubu"", proofread by the debian-l10n-french
mailing list contributors, and submitted to me on the xz-devel mailing
list by Jean-Pierre Giraud. Thanks to everyone!"
6468f7e41a8e9c611e4ba8d34e2175c5dacdbeb4,jiat75,Lasse Collin,2022-01-28 12:47:55,2022-02-06 22:20:01,"liblzma: Add NULL checks to LZMA and LZMA2 properties encoders.

Previously lzma_lzma_props_encode() and lzma_lzma2_props_encode()
assumed that the options pointers must be non-NULL because the
with these filters the API says it must never be NULL. It is
good to do these checks anyway."
2523c30705f49eabd27b854aa656ae87cc224808,Lasse Collin,Lasse Collin,2022-02-06 21:19:32,2022-02-06 21:19:32,"liblzma: Fix uint64_t vs. size_t confusion.

This broke 32-bit builds due to a pointer type mismatch.

This bug was introduced with the output-size-limited encoding
in 625f4c7c99b2fcc4db9e7ab2deb4884790e2e17c.

Thanks to huangqinjin for the bug report."
2bd36c91d03e03b31a4f12fd0afc100ae32d66e2,huangqinjin,Lasse Collin,2021-12-13 12:49:21,2022-02-06 20:49:39,CMake: Keep compatible with Windows 95 for 32-bit build.
2024fbf2794885277d05378d40b2b8015a7c3b40,Lasse Collin,Lasse Collin,2021-11-13 19:04:05,2021-11-13 19:04:05,xzgrep: Update man page timestamp.
400e7a239a53282cedaad927a41f3463d7f542e5,Lasse Collin,Lasse Collin,2021-11-13 16:23:24,2021-11-13 16:23:24,Update THANKS.
3a512c7787b2642ca946f4adc6e9a0a5d9b0d5a0,Ville Skyttä,Lasse Collin,2021-11-13 08:11:57,2021-11-13 16:17:33,"xzgrep: use `grep -E/-F` instead of `egrep` and `fgrep`

`egrep` and `fgrep` have been deprecated in GNU grep since 2007, and in
current post 3.7 Git they have been made to emit obsolescence warnings:
https://git.savannah.gnu.org/cgit/grep.git/commit/?id=a9515624709865d480e3142fd959bccd1c9372d1"
edf525e2b1840dcaf377df472c67d8f11f8ace1b,Lasse Collin,Lasse Collin,2021-10-28 20:02:11,2021-10-28 20:02:11,Bump the version number for 5.3.2alpha.
ea8c948655a86290524efe59cff067e06a886709,Lasse Collin,Lasse Collin,2021-10-28 19:59:52,2021-10-28 19:59:52,Add NEWS for 5.3.2alpha.
52435f302f4724157ec50b4210cbe42b285c3cbc,Lasse Collin,Lasse Collin,2021-10-27 20:27:48,2021-10-27 20:27:48,Update THANKS.
f2aea1d5a504b2021bf47a238390e4f12bdd518d,Lasse Collin,Lasse Collin,2021-10-27 20:23:11,2021-10-27 20:23:11,"xz: Change the coding style of the previous commit.

It isn't any better now but it's consistent with
the rest of the code base."
892b16cc282f5b4e1c49871b326f4db25c5b4d81,Alexander Bluhm,Lasse Collin,2021-10-05 21:33:16,2021-10-27 17:49:41,"xz: Avoid fchown(2) failure.

OpenBSD does not allow to change the group of a file if the user
does not belong to this group.  In contrast to Linux, OpenBSD also
fails if the new group is the same as the old one.  Do not call
fchown(2) in this case, it would change nothing anyway.

This fixes an issue with Perl Alien::Build module.
https://github.com/PerlAlien/Alien-Build/issues/62"
2b509c868cae3988bf21cd693fbf9021cdc85628,Lasse Collin,Lasse Collin,2021-09-17 14:31:11,2021-09-17 14:31:11,"liblzma: Fix liblzma.map for the lzma_microlzma_* symbols.

This should have been part of d267d109c370a40b502e73f8664b154b15e4f253.

Thanks to Gao Xiang."
cacb06a954b58255dfc084a0bc9708f43a0fd6d6,Lasse Collin,Lasse Collin,2021-09-09 19:21:07,2021-09-09 19:21:07,Update THANKS.
6928aac9da6ba612780b9f72ba1d6ecbe1e8b54e,Lasse Collin,Lasse Collin,2021-09-09 18:41:51,2021-09-09 18:41:51,"liblzma: Use _MSVC_LANG to detect when ""noexcept"" can be used with MSVC.

By default, MSVC always sets __cplusplus to 199711L. The real
C++ standard version is available in _MSVC_LANG (or one could
use /Zc:__cplusplus to set __cplusplus correctly).

Fixes <https://sourceforge.net/p/lzmautils/discussion/708858/thread/f6bc3b108a/>.

Thanks to Dan Weiss."
d267d109c370a40b502e73f8664b154b15e4f253,Lasse Collin,Lasse Collin,2021-09-05 17:38:12,2021-09-05 17:38:12,"liblzma: Rename EROFS LZMA to MicroLZMA.

It still exists primarily for EROFS but MicroLZMA is
a more generic name (that hopefully doesn't clash with
something that already exists)."
3247e95115acb95bc27f41e8cf4501db5b0b4309,Lasse Collin,Lasse Collin,2021-06-04 16:02:38,2021-06-04 16:02:38,"xzdiff: Update the man page about the exit status.

This was forgotten from 194029ffaf74282a81f0c299c07f73caca3232ca."
96f5a28a46fc93ac4e296808ac0f8631d05498bc,Lasse Collin,Lasse Collin,2021-06-04 15:52:48,2021-06-04 15:52:48,"xzless: Fix less(1) version detection when it contains a dot.

Sometimes the version number from ""less -V"" contains a dot,
sometimes not. xzless failed detect the version number when
it does contain a dot. This fixes it.

Thanks to nick87720z for reporting this. Apparently it had been
reported here <https://bugs.gentoo.org/489362> in 2013."
5fb5212d816addbc523d0798cb482fdd0484f8fa,Lasse Collin,Lasse Collin,2021-04-11 16:58:10,2021-04-11 16:58:10,Update THANKS.
fc3d3a7296ef58bb799a73943636b8bfd95339f7,Ivan A. Melnikov,Lasse Collin,2021-04-09 08:45:10,2021-04-11 16:50:41,"Reduce maximum possible memory limit on MIPS32

Due to architectural limitations, address space available to a single
userspace process on MIPS32 is limited to 2 GiB, not 4, even on systems
that have more physical RAM -- e.g. 64-bit systems with 32-bit
userspace, or systems that use XPA (an extension similar to x86's PAE).

So, for MIPS32, we have to impose stronger memory limits. I've chosen
2000MiB to give the process some headroom."
e7da44d5151e21f153925781ad29334ae0786101,Lasse Collin,Lasse Collin,2021-02-13 21:31:27,2021-02-13 21:31:27,"CMake: Use interface library for better FindLibLZMA compatibility.

https://www.mail-archive.com/xz-devel@tukaani.org/msg00446.html

Thanks to Markus Rickert."
a61dd82ada39030f41b4ffca9ea551714908bedc,Lasse Collin,Lasse Collin,2021-01-30 16:36:04,2021-01-30 16:36:04,"CMake: Try to improve compatibility with the FindLibLZMA module.

The naming conflict with FindLibLZMA module gets worse.
Not avoiding it in the first place was stupid.

Normally find_package(LibLZMA) will use the module and
find_package(liblzma 5.2.5 REQUIRED CONFIG) will use the config
file even with a case insensitive file system. However, if
CMAKE_FIND_PACKAGE_PREFER_CONFIG is TRUE and the file system
is case insensitive, find_package(LibLZMA) will find our liblzma
config file instead of using FindLibLZMA module.

One big problem with this is that FindLibLZMA uses
LibLZMA::LibLZMA and we use liblzma::liblzma as the target
name. With target names CMake happens to be case sensitive.
To workaround this, this commit adds

    add_library(LibLZMA::LibLZMA ALIAS liblzma::liblzma)

to the config file. Then both spellings work.

To make the behavior consistent between case sensitive and
insensitive file systems, the config and related files are
renamed from liblzmaConfig.cmake to liblzma-config.cmake style.
With this style CMake looks for lowercase version of the package
name so find_package(LiBLzmA 5.2.5 REQUIRED CONFIG) will work
to find our config file.

There are other differences between our config file and
FindLibLZMA so it's still possible that things break for
reasons other than the spelling of the target name. Hopefully
those situations aren't too common.

When the config file is available, it should always give as good or
better results as FindLibLZMA so this commit doesn't affect the
recommendation to use find_package(liblzma 5.2.5 REQUIRED CONFIG)
which explicitly avoids FindLibLZMA.

Thanks to Markus Rickert."
5b7bc1b8ae766a76710ca1b99f909cf52c697f05,Lasse Collin,Lasse Collin,2021-01-29 19:19:43,2021-01-29 19:19:43,Update THANKS.
6c6f0db340dcb8bb424411cedba713405d55f6b8,Lasse Collin,Lasse Collin,2021-01-29 19:19:08,2021-01-29 19:19:08,"liblzma: Fix unitialized variable.

This was introduced two weeks ago in the commit
625f4c7c99b2fcc4db9e7ab2deb4884790e2e17c.

Thanks to Nathan Moinvaziri."
bb1d5c1fdd30550d4221ecd336e0be1206132a5c,Lasse Collin,Lasse Collin,2021-01-24 20:32:41,2021-01-24 20:32:41,Tests: Add bad-1-lzma2-10.xz and also modify -9.xz.
6b8abc84a5469792e0355d0bfc0784d41cfdfef7,Lasse Collin,Lasse Collin,2021-01-24 17:22:35,2021-01-24 17:22:35,liblzma: Fix a wrong comment in stream_encoder_mt.c.
939fc5ed654aac25fe0c8684b2df8dbeadb2de1e,Lasse Collin,Lasse Collin,2021-01-24 16:51:51,2021-01-24 16:51:51,Tests: Add bad-1-lzma2-9.xz.
fdd30032f8531ac89519b48c21d810ecf06825f6,Lasse Collin,Lasse Collin,2021-01-24 15:02:00,2021-01-24 15:04:51,Tests: Add bad-1-check-crc32-2.xz.
db465419ae26ec7fb9b9472183911ff521620c77,Lasse Collin,Lasse Collin,2021-01-17 17:20:50,2021-01-17 17:20:50,"liblzma: In EROFS LZMA decoder, verify that comp_size matches at the end.

When the uncompressed size is known to be exact, after decompressing
the stream exactly comp_size bytes of input must have been consumed.
This is a minor improvement to error detection."
774cc0118ba2496581cb2621505a04bb6598cc75,Lasse Collin,Lasse Collin,2021-01-17 16:53:34,2021-01-17 16:53:34,"liblzma: Make EROFS LZMA decoder work when exact uncomp_size isn't known.

The caller must still not specify an uncompressed size bigger
than the actual uncompressed size.

As a downside, this now needs the exact compressed size."
421b0aa352da244075db10205cf33712f91b9835,Lasse Collin,Lasse Collin,2021-01-14 18:57:11,2021-01-14 18:57:11,"liblzma: Fix missing normalization in rc_encode_dummy().

Without this fix it could attempt to create too much output."
601ec0311e769fc704daaaa7dac0ca840aff080e,Lasse Collin,Lasse Collin,2021-01-14 18:07:01,2021-01-14 18:10:59,"liblzma: Add EROFS LZMA encoder and decoder.

Right now this is just a planned extra-compact format for use
in the EROFS file system in Linux. At this point it's possible
that the format will either change or be abandoned and removed
completely.

The special thing about the encoder is that it uses the
output-size-limited encoding added in the previous commit.
EROFS uses fixed-sized blocks (e.g. 4 KiB) to hold compressed
data so the compressors must be able to create valid streams
that fill the given block size."
625f4c7c99b2fcc4db9e7ab2deb4884790e2e17c,Lasse Collin,Lasse Collin,2021-01-13 17:16:32,2021-01-14 16:58:13,"liblzma: Add rough support for output-size-limited encoding in LZMA1.

With this it is possible to encode LZMA1 data without EOPM so that
the encoder will encode as much input as it can without exceeding
the specified output size limit. The resulting LZMA1 stream will
be a normal LZMA1 stream without EOPM. The actual uncompressed size
will be available to the caller via the uncomp_size pointer.

One missing thing is that the LZMA layer doesn't inform the LZ layer
when the encoding is finished and thus the LZ may read more input
when it won't be used. However, this doesn't matter if encoding is
done with a single call (which is the planned use case for now).
For proper multi-call encoding this should be improved.

This commit only adds the functionality for internal use.
Nothing uses it yet."
9cdabbeea891e8f1e7741b076f7db6ac05ae392a,Lasse Collin,Lasse Collin,2021-01-11 21:57:11,2021-01-11 21:57:11,Scripts: Add zstd support to xzdiff.
d9ec3add97cf4c999a7f594c6529680227b6c274,Lasse Collin,Lasse Collin,2021-01-11 21:41:30,2021-01-11 21:41:30,Update THANKS.
074259f4f3966aeac6edb205fecbc1a8d2b58bb2,Lasse Collin,Lasse Collin,2021-01-11 21:41:16,2021-01-11 21:41:16,"xz: Make --keep accept symlinks, hardlinks, and setuid/setgid/sticky.

Previously this required using --force but that has other
effects too which might be undesirable. Changing the behavior
of --keep has a small risk of breaking existing scripts but
since this is a fairly special corner case I expect the
likehood of breakage to be low enough.

I think the new behavior is more logical. The only reason for
the old behavior was to be consistent with gzip and bzip2.

Thanks to Vincent Lefevre and Sebastian Andrzej Siewior."
73c555b3077c19dda29b6f4592ced2af876f8333,Lasse Collin,Lasse Collin,2021-01-11 21:28:52,2021-01-11 21:28:52,"Scripts: Fix exit status of xzgrep.

Omit the -q option from xz, gzip, and bzip2. With xz this shouldn't
matter. With gzip it's important because -q makes gzip replace SIGPIPE
with exit status 2. With bzip2 it's important because with -q bzip2
is completely silent if input is corrupt while other decompressors
still give an error message.

Avoiding exit status 2 from gzip is important because bzip2 uses
exit status 2 to indicate corrupt input. Before this commit xzgrep
didn't recognize corrupt .bz2 files because xzgrep was treating
exit status 2 as SIGPIPE for gzip compatibility.

zstd still needs -q because otherwise it is noisy in normal
operation.

The code to detect real SIGPIPE didn't check if the exit status
was due to a signal (>= 128) and so could ignore some other exit
status too."
194029ffaf74282a81f0c299c07f73caca3232ca,Lasse Collin,Lasse Collin,2021-01-11 20:01:51,2021-01-11 20:58:58,"Scripts: Fix exit status of xzdiff/xzcmp.

This is a minor fix since this affects only the situation when
the files differ and the exit status is something else than 0.
In such case there could be SIGPIPE from a decompression tool
and that would result in exit status of 2 from xzdiff/xzcmp
while the correct behavior would be to return 1 or whatever
else diff or cmp may have returned.

This commit omits the -q option from xz/gzip/bzip2/lzop arguments.
I'm not sure why the -q was used in the first place, perhaps it
hides warnings in some situation that I cannot see at the moment.
Hopefully the removal won't introduce a new bug.

With gzip the -q option was harmful because it made gzip return 2
instead of >= 128 with SIGPIPE. Ignoring exit status 2 (warning
from gzip) isn't practical because bzip2 uses exit status 2 to
indicate corrupt input file. It's better if SIGPIPE results in
exit status >= 128.

With bzip2 the removal of -q seems to be good because with -q
it prints nothing if input is corrupt. The other tools aren't
silent in this situation even with -q. On the other hand, if
zstd support is added, it will need -q since otherwise it's
noisy in normal situations.

Thanks to Étienne Mollier and Sebastian Andrzej Siewior."
f7fa309e1f7178d04c7bedc03b73077639371e97,Lasse Collin,Lasse Collin,2021-01-09 19:14:36,2021-01-09 20:18:23,"liblzma: Make lzma_outq usable for threaded decompression too.

Before this commit all output queue buffers were allocated as
a single big allocation. Now each buffer is allocated separately
when needed. Used buffers are cached to avoid reallocation
overhead but the cache will keep only one buffer size at a time.
This should make things work OK in the decompression where most
of the time the buffer sizes will be the same but with some less
common files the buffer sizes may vary.

While this should work fine, it's still a bit preliminary
and may even get reverted if it turns out to be useless for
decompression."
